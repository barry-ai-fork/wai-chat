{"version":3,"file":"8422.5aefbb58669860130934.js","mappings":"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","sources":["webpack://telegram-t/./src/lib/ptp/protobuf/PTPChats/LoadChatsReq.ts","webpack://telegram-t/./src/lib/ptp/protobuf/PTPChats/LoadChatsRes.ts","webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { LoadChatsReq_Type } from './types';\n\nexport default class LoadChatsReq extends BaseMsg {\n  public msg?: LoadChatsReq_Type\n  constructor(msg?: LoadChatsReq_Type) {\n    super('PTP.Chats.LoadChatsReq', msg);\n    this.setCommandId(ActionCommands.CID_LoadChatsReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): LoadChatsReq_Type {\n    return new LoadChatsReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { LoadChatsRes_Type } from './types';\n\nexport default class LoadChatsRes extends BaseMsg {\n  public msg?: LoadChatsRes_Type\n  constructor(msg?: LoadChatsRes_Type) {\n    super('PTP.Chats.LoadChatsRes', msg);\n    this.setCommandId(ActionCommands.CID_LoadChatsRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): LoadChatsRes_Type {\n    return new LoadChatsRes().decode(pdu.body());\n  }\n}\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getGlobal, setGlobal,} from '../../index';\n\nimport type {ApiChat, ApiChatMember, ApiError, ApiUser,} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport {ChatCreationProgress, ManagementProgress, NewChatMembersProgress} from '../../../types';\nimport type {ActionReturnType, GlobalState, TabArgs,} from '../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport {callApi} from '../../../api/gramjs';\nimport {\n  addChatMembers,\n  addChats,\n  addMessages,\n  addUsers,\n  addUserStatuses,\n  deleteTopic,\n  leaveChat,\n  replaceChatListIds,\n  replaceChats,\n  replaceThreadParam,\n  replaceUsers,\n  replaceUserStatuses,\n  updateChat,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatListType,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectLastServiceNotification,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserByPhoneNumber,\n  selectVisibleUsers,\n} from '../../selectors';\nimport {buildCollectionByKey, omit} from '../../../util/iteratees';\nimport {debounce, pause, throttle} from '../../../util/schedulers';\nimport {\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSummaryOnly,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport {formatShareText, parseChooseParameter, processDeepLink} from '../../../util/deeplink';\nimport {updateGroupCall} from '../../reducers/calls';\nimport {selectGroupCall} from '../../selectors/calls';\nimport {getOrderedIds} from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport {selectCurrentLimit} from '../../selectors/limits';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport Account from \"../../../worker/share/Account\";\nimport {LoadChatsReq, LoadChatsRes} from \"../../../lib/ptp/protobuf/PTPChats\";\nimport {ERR} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport MsgConn, {MsgClientState} from \"../../../lib/ptp/client/MsgConn\";\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, threadId = MAIN_THREAD_ID,\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    //todo\n    // actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    actions.requestThreadInfoUpdate({ chatId: id, threadId });\n  }\n});\n\naddActionHandler('openComments', async (global, actions, payload): Promise<void> => {\n  const {\n    id, threadId, originChannelId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      const chat = selectThreadOriginChat(global, id, threadId);\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n      const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n      if (!result) {\n        actions.openPreviousChat({ tabId });\n        return;\n      }\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      actions.openChat({ id, threadId: result.topMessageId, tabId });\n    } else {\n      actions.openChat({ id, threadId: topMessageId, tabId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, messageId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  actions.focusMessage({\n    chatId, threadId, messageId, tabId,\n  });\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType as 'active' | 'archived';\n  if(listType === \"archived\"){\n    return;\n  }\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    //\n    // if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n    //   return;\n    // }\n\n    if (global.connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n    await loadChats(global,\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true);\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, force, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(global, actions, chat, tabId);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(global, actions, chat, tabId));\n  }\n});\n\naddActionHandler('loadTopChats', (global): ActionReturnType => {\n  runThrottledForLoadTopChats(() => loadChats(global, 'active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    openChatByUsername: openChatByUsernameAction,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n  } else if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!commentId) {\n    if (!startAttach && messageId && !startParam && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    await openChatByUsername(global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global, tabId) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && messageId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chatByUsername.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat: chatByUsername, threadId: messageId });\n    if (!result) return;\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    setGlobal(global);\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n    tabId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chat.id, {\n    fullInfo: {\n      ...chat.fullInfo,\n      isPreHistoryHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(newAdminMembersById && { adminMembersById: newAdminMembersById }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, {\n    avatarHash: undefined,\n    fullInfo: {\n      ...chat.fullInfo,\n      profilePhoto: undefined,\n    },\n  });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, {\n      avatarHash: undefined,\n      fullInfo: {\n        ...chat.fullInfo,\n        profilePhoto: undefined,\n      },\n    });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        isPreHistoryHidden: false,\n      },\n    });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft?.formattedText);\n    global = replaceThreadParam(global, chatId, Number(threadId), 'replyingToId', draft?.replyingToId);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const prevIsForum = chat.isForum;\n  global = updateChat(global, chatId, { isForum: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleForum', { chat, isEnabled });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, { isForum: prevIsForum });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = chat.fullInfo?.areParticipantsHidden;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      areParticipantsHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      fullInfo: {\n        ...chat.fullInfo,\n        areParticipantsHidden: prevIsEnabled,\n      },\n    });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openChat({\n      id: chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\nasync function loadChats<T extends GlobalState>(\n  global: T,\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  global = getGlobal();\n\n  let lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  try {\n    const loadChatsRes = await Account.getCurrentAccount()?.sendPduWithCallback(new LoadChatsReq({\n      limit: CHAT_LIST_LOAD_SLICE,\n      offsetDate,\n      archived: listType === 'archived',\n      withPinned: shouldReplace,\n      // lastLocalServiceMessage:JSON.stringify(lastLocalServiceMessage),\n    }).pack())\n\n    if(!loadChatsRes){\n      return;\n    }\n    const res = LoadChatsRes.parseMsg(loadChatsRes);\n    if (!res || res.err !== ERR.NO_ERROR) {\n      return;\n    }\n\n    const result = JSON.parse(res.payload);\n    console.log('[LoadChatsRes]',result)\n    if (!result) {\n      return;\n    }\n    const { chatIds } = result;\n\n    if (chatIds.length > 0 && chatIds[0] === offsetId) {\n      chatIds.shift();\n    }\n\n    global = getGlobal();\n\n    lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n    global = {\n      ...global,\n      chatFolders:result.chatFolders\n    }\n    if (shouldReplace && listType === 'active' && MsgConn?.getMsgClient()?.getState() === MsgClientState.logged) {\n      // Always include service notifications chat\n      // if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      //   const result2 = await callApi('fetchChat', {\n      //     type: 'user',\n      //     user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      //   });\n      //\n      //   global = getGlobal();\n      //\n      //   const notificationsChat = result2 && selectChat(global, result2.chatId);\n      //   if (notificationsChat) {\n      //     chatIds.unshift(notificationsChat.id);\n      //     result.chats.unshift(notificationsChat);\n      //     if (lastLocalServiceMessage) {\n      //       notificationsChat.lastMessage = lastLocalServiceMessage;\n      //     }\n      //   }\n      // }\n      const tabStates = Object.values(global.byTabId);\n      const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n        const currentChat = selectCurrentChat(global, tabId);\n        return currentChat ? [currentChat] : [];\n      });\n\n      const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n        return selectVisibleUsers(global, tabId) || [];\n      });\n      if (global.currentUserId && global.users.byId[global.currentUserId]) {\n        visibleUsers.push(global.users.byId[global.currentUserId]);\n      }\n\n      global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n      global = replaceUserStatuses(global, result.userStatusesById);\n      global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n      global = updateChatListIds(global, listType, chatIds);\n    } else if (shouldReplace && listType === 'archived'  && MsgConn?.getMsgClient()?.getState() === MsgClientState.logged) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    } else {\n      const newChats = buildCollectionByKey(result.chats, 'id');\n      if (chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n        const notificationsChat = newChats[SERVICE_NOTIFICATIONS_USER_ID];\n        if (notificationsChat && lastLocalServiceMessage) {\n          newChats[SERVICE_NOTIFICATIONS_USER_ID] = {\n            ...notificationsChat,\n            lastMessage: lastLocalServiceMessage,\n          };\n        }\n      }\n\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, newChats);\n      global = updateChatListIds(global, listType, chatIds);\n\n    }\n\n    global = updateChatListSecondaryInfo(global, listType, result);\n\n    const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n    idsToUpdateDraft.forEach((chatId) => {\n      const draft = result.draftsById[chatId];\n      const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n      if (!draft && !thread) return;\n\n      if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n        global = replaceThreadParam(\n          global, chatId, MAIN_THREAD_ID, 'draft', draft,\n        );\n      }\n    });\n\n    const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n    idsToUpdateReplyingToId.forEach((chatId) => {\n      const replyingToById = result.replyingToById[chatId];\n      const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n      if (!replyingToById && !thread) return;\n\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToById,\n      );\n    });\n\n    // if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    //   global = {\n    //     ...global,\n    //     chats: {\n    //       ...global.chats,\n    //       isFullyLoaded: {\n    //         ...global.chats.isFullyLoaded,\n    //         [listType]: true,\n    //       },\n    //     },\n    //   };\n    // }\n\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n\n    setGlobal(global);\n\n  }catch (e){\n    console.error(e)\n  }\n\n  return;\n  // const result = await callApi('fetchChats', {\n  //   limit: CHAT_LIST_LOAD_SLICE,\n  //   offsetDate,\n  //   archived: listType === 'archived',\n  //   withPinned: shouldReplace,\n  //   lastLocalServiceMessage,\n  // });\n  //\n\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  setGlobal(global);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n    setGlobal(global);\n  }\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id, threadId, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectTabState, selectUser,\n} from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type {\n  CallSound, ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { getMainUsername } from '../../helpers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestAnimationFrame(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let { inviteLink } = chat.fullInfo!;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload!;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', async (global, actions, payload): Promise<void> => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["LoadChatsReq","BaseMsg","constructor","msg","super","this","setCommandId","ActionCommands","static","pdu","decode","body","LoadChatsRes","SERVICE_NOTIFICATIONS_USER_ID","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","global","listType","offsetId","offsetDate","shouldReplace","isFullDraftSync","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","loadChatsRes","Account","sendPduWithCallback","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","pack","res","parseMsg","err","ERR","result","JSON","parse","payload","console","log","chatIds","length","shift","chatFolders","MsgConn","getMsgClient","getState","MsgClientState","tabStates","Object","values","byTabId","visibleChats","flatMap","id","tabId","currentChat","selectCurrentChat","visibleUsers","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","chats","updateChatListIds","addUsers","addUserStatuses","updateChats","replaceChatListIds","newChats","includes","notificationsChat","lastMessage","updateChatListSecondaryInfo","keys","draftsById","forEach","chatId","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","replyingToById","isFullyLoaded","setGlobal","e","error","loadFullChat","actions","chat","getCurrentTabId","callApi","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","undefined","participantsCount","updateChat","stickerSet","loadStickers","stickerSetInfo","accessHash","fetchChatByUsername","username","localChat","selectChatByUsername","isMin","user","updateUser","getAttachBotOrNotify","selectUser","isUserBot","bot","showNotification","langProvider","openAttachMenuFromLink","attach","startAttach","callAttachBot","startParam","ensureIsSuperGroup","selectChat","isChatBasicGroup","newChat","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","Set","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","selectCurrentMessageList","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","threadId","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","type","requestThreadInfoUpdate","originChannelId","topMessageId","selectThreadTopMessageId","selectThreadOriginChat","TMP_CHAT_ID","openPreviousChat","chatFullInfo","linkedChatId","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","onReplace","getOrderDate","date","joinDate","DEBUG","connectionState","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","force","lastLocalMessage","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","updateTabState","chatCreation","progress","ChatCreationProgress","channelId","selectTabState","userId","leaveChat","createdChat","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","Math","max","recommendedId","description","newFolder","folderIds","unreadCount","lastTopicMessageId","topics","lastMessageId","updateThreadInfo","lastReadInboxMessageId","hash","phoneNumber","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","openChatByUsername","openChatByUsernameAction","match","RE_TG_LINK","processDeepLink","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","substr","shortName","chatOrChannelPostId","Number","commentId","comment","text","formatShareText","inviteHash","voicechat","livestream","slug","substring","start","usernames","c","channelPostId","isCurrentChat","startBot","botId","param","usernameChat","threadInfo","selectThreadInfo","chatByUsername","discussionChatId","isEnabled","isPreHistoryHidden","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","loadProfilePhotos","profileId","photosToDelete","nextPhoto","photos","groups","addedById","reduce","group","isForum","addChats","forDiscussionIds","channel","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","forumPanelChatId","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","addMessages","messages","updateTopics","count","updateListedTopicIds","entries","formattedText","replyingToId","readInboxMessageIdByTopicId","shouldCloseChatOnError","prevIsForum","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestAnimationFrame","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","peer","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}