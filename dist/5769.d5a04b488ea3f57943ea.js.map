{"version":3,"file":"5769.d5a04b488ea3f57943ea.js","mappings":"mRA0DO,SAASA,EACdC,MACIC,GAAQC,EAAAA,EAAAA,QAEZ,MAAM,OAAEC,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACzE,OAAKE,GAAWC,GAIhBJ,GAASM,EAAAA,EAAAA,IAAsBN,EAAQG,EAAQC,GAAU,OAAOG,EAAWN,GAC3ED,GAASQ,EAAAA,EAAAA,IAA8BR,EAAQG,EAAQC,OAAUG,OAAWA,OAAWA,EAAWN,IAJzFD,CAMX,EAzDAS,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACzE,GAAKE,GAAWC,EAIhB,OAAOE,EAAAA,EAAAA,IAAsBN,EAAQG,EAAQC,GAAU,OAAMG,EAAWN,EAAM,KAGhFQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOZ,EAAqBC,EAAQC,EAAM,KAG5CQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACT,EAAQU,EAASC,KAC5D,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,GAEvC,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAMS,GAAgBC,EAAAA,EAAAA,IAAmBX,EAAQC,IACzCQ,MAAOG,IAAiBC,EAAAA,EAAAA,IAAehB,EAAQC,GAAOgB,gBAAgBC,gBAAgBL,IAAkB,CAAC,EAQjH,OANID,IAAUG,IACZf,GAASQ,EAAAA,EAAAA,IAA8BR,EAAQG,EAAQC,EAAUe,EAAAA,OAAkBZ,OAAWA,EAAWN,KAGlGK,EAAAA,EAAAA,IAAsBN,EAAQG,EAAQC,GAAU,EAAMQ,EAAOX,EAEzD,KAGfQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACT,EAAQU,EAASC,KAC5D,MAAM,UAAES,EAAS,MAAEnB,GAAQC,EAAAA,EAAAA,OAAsBS,GAC3C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACzE,GAAKE,GAAWC,EAIhB,OAAOiB,EAAAA,EAAAA,IAA2BrB,EAAQG,EAAQC,EAAUgB,EAAWnB,EAAM,I,2BCzC/EQ,EAAAA,EAAAA,IAAiB,YAAY,CAACT,EAAQU,EAASC,KAC7C,MAAM,GACJW,EAAE,SACFlB,EAAWmB,EAAAA,GAAc,KACzBC,EAAO,SAAQ,qBACfC,GAAuB,EAAK,kBAC5BC,EAAiB,MACjBzB,GAAQC,EAAAA,EAAAA,OACNS,EAEEgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAEtD2B,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GAmCxC,GAlCI2B,EAASC,cAAcC,OAASF,EAASC,cAAcE,SACzD/B,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B6B,aAAc,IACTD,EAASC,aACZE,QAAQ,IAET9B,IAGA0B,GACHA,EAAmBxB,SAAWmB,GAC3BK,EAAmBvB,WAAaA,GAChCuB,EAAmBH,OAASA,IAE3BF,IACFtB,GAASiC,EAAAA,EAAAA,IAAsBjC,EAAQsB,EAAIlB,EAAU,aAAc,GAAIH,GAEvED,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BkC,gBAAiB,CAAC,GACjBjC,IAILD,EAASD,EADTC,GAASmC,EAAAA,EAAAA,IAAsBnC,EAAQC,GACDA,GAEtCD,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BoC,mBAAmB,EACnBC,0BAAsB9B,KAClBe,KAAON,EAAAA,EAAAA,IAAehB,EAAQC,GAAOqC,gBAAgBC,UAAY,CACnED,gBAAiB,CAAC,IAEnBrC,IAGDqB,EAAI,CACN,MAAMkB,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQsB,GAE5BkB,GAAME,UAAYhB,EACpBhB,EAAQiC,eAAe,CAAExC,OAAQmB,EAAKrB,UAC7BqB,KAAON,EAAAA,EAAAA,IAAehB,EAAQC,GAAO2C,kBAC9ClC,EAAQmC,gBAAgB,CAAE5C,SAE9B,CAIA,OAFAS,EAAQoC,gBAAgB,CAAE7C,WAEnB8C,EAAAA,EAAAA,IAAyB/C,EAAQsB,EAAIlB,EAAUoB,EAAMC,EAAsBxB,EAAM,KAG1FQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,OAAER,EAAM,SAAEC,EAAWmB,EAAAA,IAAmBZ,EAE9CqC,OAAOC,MAAKC,EAAAA,EAAAA,IAAqB/C,EAAQ,SAAUC,GAAW,SAAS,KAGzEK,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOoC,EAAAA,EAAAA,IAAyB/C,OAAQO,OAAWA,OAAWA,OAAWA,EAAWN,EAAM,KAG5FQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAEtCX,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,KAC3BgB,EAAAA,EAAAA,IAAehB,EAAQC,GAC1BkD,iBAAiB,GAChBlD,GACHD,EAAS,IAAKA,EAAQoD,qBAAqB,IAC3CC,EAAAA,EAAAA,IAAUrD,GAEVU,EAAQ4C,SAAS,IAAK3C,EAASV,SAAQ,KAGzCQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,OACJR,EAAM,KAAEoD,EAAI,SAAEnD,EAAQ,MAAEoD,EAAK,MAAEvD,GAAQC,EAAAA,EAAAA,OACrCS,EAMJ,OAJIR,GACFO,EAAQ4C,SAAS,CAAEhC,GAAInB,EAAQC,WAAUH,WAGpC+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5ByD,eAAgB,CACdtD,SACAoD,OACAC,UAEDvD,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B0D,kBAAcnD,GACbN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gCAAgC,CAACT,EAAQU,EAASC,KACjE,MAAM,uBAAEgD,EAAsB,MAAE1D,GAAQC,EAAAA,EAAAA,OAAsBS,EAC9D,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B2D,0BACC1D,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gBAAgB,CAACT,EAAQU,EAASC,KACjD,MAAM,iBAAEiD,EAAgB,WAAEC,EAAU,MAAE5D,GAAQC,EAAAA,EAAAA,OAAsBS,GAE9D,OAAER,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAE/D,IAAKE,EAEH,YADAO,EAAQ4C,SAAS,CAAEhC,GAAIuC,EAAW,GAAI5D,UAIxC,MAAM6D,EAAWD,EAAWE,QAAQ5D,GAEpC,IAAkB,IAAd2D,EACF,OAEF,MAAME,EAASH,EAAWC,EAAWF,GAErClD,EAAQ4C,SAAS,CAAEhC,GAAI0C,EAAQvC,sBAAsB,EAAMxB,SAAQ,KAGrEQ,EAAAA,EAAAA,IAAiB,6BAA6B,CAACT,EAAQU,EAASC,KAC9D,MAAM,SAAEsD,EAAQ,MAAEhE,GAAQC,EAAAA,EAAAA,OAAsBS,EAChD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BkE,wBAAyBD,GACxBhE,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACT,EAAQU,EAASC,KAC/D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BkE,6BAAyB3D,GACxBN,EAAM,I,qGCzGX,MACMkE,EAA8BC,EAAAA,IAA2BC,EAAAA,IAK/D,IAAIC,EAoxBJ,SAASC,EAAoBvE,EAAqBG,EAAgBqE,GAChE,MAAQhD,KAAMiD,EAAe,SAAErE,IAAaC,EAAAA,EAAAA,IAAyBL,IAAW,CAAC,EAC3E0E,EAAOC,EAAAA,GAEPC,EAAmC,cAApBH,GACjBI,EAAAA,EAAAA,IAA4B7E,EAAQG,IACpC2E,EAAAA,EAAAA,IAAmB9E,EAAQG,GAC/B,IAAKyE,IAAiBxE,EAAU,OAChC,MAAM2E,EAAWP,EACdQ,KAAK1D,GAAOsD,EAAatD,KACzB2D,QAAQC,IAAYC,EAAAA,EAAAA,IAA4BnF,EAAQkF,EAAS9E,GAAUgF,UAC3EC,MAAK,CAACC,EAAUC,IAAaD,EAAShE,GAAKiE,EAASjE,KAEjDkE,EAAST,EAASU,QAAO,CAACC,EAAKR,KACnC,MAAMS,GAASC,EAAAA,EAAAA,IAAa5F,EAAQkF,GAKpC,OAHAQ,EAAIG,KAAM,KAAIF,GAASG,EAAAA,EAAAA,IAAepB,EAAMiB,GAAU,OACtDD,EAAIG,KAAM,GCh2BP,SACLnB,EACAQ,GAEA,MAAMa,GAAQC,EAAAA,EAAAA,IAAuBd,GAC/Be,EAAiBF,EAAS,GAAEA,KAAW,GACvCxC,GAAO2C,EAAAA,EAAAA,GACXhB,OAAS3E,OAAWA,OAAWA,OAAWA,OAAWA,GAAW,IAC/D4F,KAAK,IAGR,MAAQ,GAAEF,KAFUG,EAAAA,EAAAA,IAA6B1B,EAAMQ,EAAS3B,GAAM,GAAM,IAG9E,CDo1BgB8C,CAAyB3B,EAAMQ,QAEpCQ,CAAG,GACT,IAEGY,EAAavB,EAASU,QAAO,CAACC,EAAKR,KACvC,MAAMS,GAASC,EAAAA,EAAAA,IAAa5F,EAAQkF,GAIpC,OAHAQ,EAAIG,KAAM,KAAIF,GAASG,EAAAA,EAAAA,IAAepB,EAAMiB,GAAU,OACtDD,EAAIG,KAAM,IAAEU,EAAAA,EAAAA,IAAsB7B,EAAMQ,GAAS,EAAO,OAAG3E,GAAW,QAE/DmF,CAAG,GACT,KAEHc,EAAAA,EAAAA,IAAoBhB,EAAOW,KAAK,MAAOG,EAAWH,KAAK,MACzD,EAjzBA1F,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,aAAEqG,EAAY,MAAExG,GAAQC,EAAAA,EAAAA,OACtCS,EAIJ,OAFAX,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQC,EAAU,mBAAoBqG,IAEnExE,EAAAA,EAAAA,IAAsBjC,EAAQG,EAAQC,EAAU,eAAgBqG,EAAcxG,EAAM,KAG7FQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,UAAEgG,EAAS,MAAE1G,GAAQC,EAAAA,EAAAA,OAAsBS,EAC3CgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAEF,MAAM,OAAExB,EAAM,SAAEC,GAAauB,EAE7B,OAAO+E,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQC,EAAU,eAAgBuG,EAAU,KAGhFlG,EAAAA,EAAAA,IAAiB,gBAAgB,CAACT,EAAQU,EAASC,KACjD,MAAM,UAAEgG,EAAS,MAAE1G,GAAQC,EAAAA,EAAAA,OAAsBS,EAC3CgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGF,MAAM,OAAExB,EAAM,SAAEC,EAAQ,KAAEoB,GAASG,EAC7BiF,EAAqB,cAATpF,EAAuB,qBAAuB,YAEhE,OAAOkF,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQC,EAAUwG,EAAWD,EAAU,KAG3ElG,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,KACJ4C,EAAI,OAAEpD,EAAM,SAAEC,EAAQ,KAAEoB,GACtBb,EAEEiG,EAAqB,cAATpF,EAAuB,wBAA0B,eAEnE,OAAOkF,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQC,EAAUwG,EAAWrD,EAAK,KAGtE9C,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAMwE,GAAeE,EAAAA,EAAAA,IAAmB9E,EAAQG,GAC1C0G,GAAcC,EAAAA,EAAAA,IAAkB9G,EAAQG,EAAQC,EAAUH,GAChE,IAAK2E,IAAiBiC,EACpB,OAGF,MAAME,GAA2BC,EAAAA,EAAAA,IAASH,GAAcvF,GAC/C2F,QAAQrC,EAAatD,KAAO6D,EAAAA,EAAAA,IAA4BnF,EAAQ4E,EAAatD,GAAKlB,GAAU8G,WAGrG,IAAKH,EACH,OAEF,MAAMhC,GAAWD,EAAAA,EAAAA,IAAmB9E,EAAOG,IACrC,QAACgH,GAAWpC,EAASgC,GACxBI,EAAQ5D,MAAQ4D,EAAQ5D,MACzB7C,EAAQ0G,UAAU,CAChBjH,SAAQC,WACRiH,MAAM,CACJ9D,KAAK4D,EAAQ5D,KAAKA,KAClB+D,SAASH,EAAQ5D,KAAK+D,UAEtBC,aAAY,GAGlB,KAKF9G,EAAAA,EAAAA,IAAiB,sBAAsB,CAACT,EAAQU,EAASC,KACvD,MAAM,iBAAEiD,EAAgB,MAAE3D,GAAQC,EAAAA,EAAAA,OAAsBS,GAClD,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAMwE,GAAeE,EAAAA,EAAAA,IAAmB9E,EAAQG,GAC1C0G,GAAcC,EAAAA,EAAAA,IAAkB9G,EAAQG,EAAQC,EAAUH,GAChE,IAAK2E,IAAiBiC,EACpB,OAGF,MAAMW,GAAeC,EAAAA,EAAAA,IAAmBzH,EAAQG,EAAQC,GAGxD,IAAIuG,EAEJ,IAJiBe,EAAAA,EAAAA,IAAuB1H,EAAQG,EAAQC,EAAUH,IAIhDuH,EAUX,CACL,MAAMG,EAAkBC,OAAOC,KAAKjD,GAE9BkD,EADiBH,EAAgB5D,QAAQyD,EAAaO,YAC1BnE,EAClC+C,EAAYmB,GAAYH,EAAgBK,OAAS,GAAKF,GAAY,EAC9DG,OAAON,EAAgBG,SACvBvH,CACN,MAhBE,GAAIH,IAAamB,EAAAA,GAAgB,CAC/B,MAAMiB,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAEhCwG,EAAYnE,GAAM0F,aAAa5G,EACjC,KAAO,CACL,MAAM6G,GAAaC,EAAAA,EAAAA,IAAiBpI,EAAQG,EAAQC,GAEpDuG,EAAYwB,GAAYE,aAC1B,CASF3H,EAAQ4H,gBAAgB,CAAE3B,YAAW1G,UACrCS,EAAQ6H,aAAa,CACnBpI,SACAC,WACAuG,UAAWA,EACX1G,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,UAAEuG,EAAS,OAAE6B,EAAM,OAAEC,EAAM,aAAEC,EAAY,QAAEC,EAAO,MAClE1I,GAAQC,EAAAA,EAAAA,OACNS,EACEiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B4I,YAAa,CACXzI,SACAC,WACAuG,YACA6B,OAAQA,QAAAA,EAAU5G,EAASgH,YAAYJ,OACvCC,OAAQA,QAAAA,EAAU7G,EAASgH,YAAYH,OACvCC,aAAcA,GAAgB9G,EAASgH,YAAYF,cAAgB1I,EAAO4I,YAAYC,iBACtFC,0BAAqEvI,IAA9CqB,EAASgH,YAAYE,qBACxC9I,EAAO4I,YAAYG,yBACnBnH,EAASgH,YAAYE,qBACzBH,QAASA,GAAW/G,EAASgH,YAAYD,UAE1C1I,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,OACJ8H,EAAM,MAAExI,GAAQC,EAAAA,EAAAA,OACdS,EAEJ,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B4I,YAAa,KACR5H,EAAAA,EAAAA,IAAehB,EAAQC,GAAO2I,YACjCH,SACAE,SAAS,IAEV1I,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACT,EAAQU,EAASC,KAC/D,MAAM,aACJ+H,EAAY,qBAAEI,EAAoB,MAAE7I,GAAQC,EAAAA,EAAAA,OAC1CS,EAWJ,OATAX,EAAS,IACJA,EACH4I,YAAa,IACR5I,EAAO4I,YACVC,iBAAkBH,EAClBK,yBAA0BD,KAIvB9G,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B4I,YAAa,KACR5H,EAAAA,EAAAA,IAAehB,EAAQC,GAAO2I,YACjCF,eACAI,yBAED7I,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,QACJgI,EAAO,MAAE1I,GAAQC,EAAAA,EAAAA,OACfS,EAEJ,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B4I,YAAa,KACR5H,EAAAA,EAAAA,IAAehB,EAAQC,GAAO2I,YACjCD,YAED1I,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,OACJ6H,EAAM,MAAEvI,GAAQC,EAAAA,EAAAA,OACdS,EAEJ,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B4I,YAAa,KACR5H,EAAAA,EAAAA,IAAehB,EAAQC,GAAO2I,YACjCJ,WAEDvI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B4I,YAAa,CACXH,OAAQ7G,EAASgH,YAAYH,OAC7BC,aAAc9G,EAASgH,YAAYF,aACnCI,qBAAsBlH,EAASgH,YAAYE,qBAC3CH,QAAS/G,EAASgH,YAAYD,UAE/B1I,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,OAAER,EAAM,UAAEwG,EAAS,MAAE1G,GAAQC,EAAAA,EAAAA,OAAsBS,EAEnDqI,GAAsBC,EAAAA,EAAAA,IAAyBjJ,GAAQkJ,EAAAA,EAAAA,MAAejJ,GACtE2B,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GAExC,GAAK+I,GAaE,GAAI7I,IAAWyB,EAASuH,YAAYhJ,QAAUwG,IAAc/E,EAASuH,YAAYxC,UACtF,OAAO3E,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BmJ,YAAa,CACXhJ,SACAwG,YACAyC,OAAQ,CAAC,IAEVnJ,QAnBH+C,OAAOqG,YAAW,KAChBrJ,GAASsJ,EAAAA,EAAAA,MAETtJ,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BmJ,YAAa,CACXhJ,SACAwG,YACAyC,OAAQ,CAAC,IAEVnJ,IACHoD,EAAAA,EAAAA,IAAUrD,EAAO,GAvPW,IAmQhB,KAGlBS,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BmJ,YAAa,CAAC,GACblJ,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGF,MAAM,OAAExB,EAAM,SAAEC,GAAauB,EAE7B,IAAI0G,EACJ,GAAIjI,IAAamB,EAAAA,GAAgB,CAC/B,MAAMiB,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAEhCkI,EAAgB7F,GAAM0F,aAAa5G,EACrC,KAAO,CACL,MAAM6G,GAAaC,EAAAA,EAAAA,IAAiBpI,EAAQG,EAAQC,GAEpDiI,EAAgBF,GAAYE,aAC9B,CAEKA,GAIL3H,EAAQ6H,aAAa,CACnBpI,SACAC,WACAuG,UAAW0B,EACXkB,aAAa,EACb7H,mBAAmB,EACnBzB,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGF,MAAM,OAAExB,EAAM,SAAEC,GAAauB,EAEvB6H,GAAaC,EAAAA,EAAAA,IAAiBzJ,EAAQG,EAAQC,EAAUH,GAE9D,GAAKuJ,GAAoC,IAAtBA,EAAWxB,OAEvB,CACL,MAAMrB,EAAY6C,EAAWE,MAE7B1J,GAASiC,EAAAA,EAAAA,IAAsBjC,EAAQG,EAAQC,EAAU,aAAc,IAAIoJ,GAAavJ,IAExFoD,EAAAA,EAAAA,IAAUrD,GAEVU,EAAQ6H,aAAa,CACnBpI,SACAC,WACAuG,UAAWA,EACX1G,QACAyB,mBAAmB,GAEvB,MAfEhB,EAAQiJ,iBAAiB,CAAE1J,SAiBb,KAGlBQ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACT,EAAQU,EAASC,KAC7D,MAAM,WAAEiJ,GAAa,EAAK,MAAE3J,GAAQC,EAAAA,EAAAA,OAAsBS,EAE1D,OAAOkJ,EAAAA,EAAAA,IAA4B7J,EAAQ4J,EAAY3J,EAAM,KAG/DQ,EAAAA,EAAAA,IAAiB,gBAAgB,CAACT,EAAQU,EAASC,KACjD,MAAM,OACJR,EAAM,SAAEC,EAAWmB,EAAAA,GAAc,gBAAEkD,EAAkB,SAAQ,YAAE8E,EAAW,UAAEO,EAAS,cAAEC,EAAa,eACpGC,EAAc,oBAAEC,EAAmB,qBAAExI,EAAoB,kBAAEC,EAAiB,MAC5EzB,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,IAAI,UAAEgG,GAAchG,EAEpB,QAAkBJ,IAAduJ,EAAyB,CAC3B,MAAMI,GAAMC,EAAAA,EAAAA,IAAmCnK,EAAQ+J,EAAgBD,GACnEI,GAAKlC,UACLrB,IAAayD,EAAAA,EAAAA,IAAQF,GAE3B,CAEA,MAAMvI,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GACtDoK,GAAoB1I,GACxBxB,IAAWwB,EAAmBxB,QAC3BC,IAAauB,EAAmBvB,UAChCqE,IAAoB9C,EAAmBH,KAiB5C,GAdI8C,IACFgG,aAAahG,GACbA,OAAc/D,GAEhB+D,EAActB,OAAOqG,YAAW,KAC9BrJ,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASuK,EAAAA,EAAAA,IAAqBvK,OAAQO,OAAWA,OAAWA,OAAWA,EAAWN,GAClFD,GAASwK,EAAAA,EAAAA,IAAqBxK,OAAQO,EAAWN,IACjDoD,EAAAA,EAAAA,IAAUrD,EAAO,GAChBuJ,EAAcpF,EAvXI,MAyXrBnE,GAASuK,EAAAA,EAAAA,IAAqBvK,EAAQG,EAAQwG,EAAW4C,EAAaU,EAAqBhK,GAC3FD,GAASwK,EAAAA,EAAAA,IAAqBxK,OAAQO,EAAWN,GAE7C+J,EAAgB,CAClB,MAAMR,GAAaC,EAAAA,EAAAA,IAAiBzJ,EAAQG,EAAQC,EAAUH,IAAU,GACxED,GAASiC,EAAAA,EAAAA,IAAsBjC,EAAQG,EAAQC,EAAU,aAAc,IAAIoJ,EAAYQ,GAAiB/J,EAC1G,CAEIoK,IACFrK,GAASwK,EAAAA,EAAAA,IAAqBxK,EAAQyK,EAAAA,GAAAA,OAAuBxK,IAG/D,MAAM4G,GAAcC,EAAAA,EAAAA,IAAkB9G,EAAQG,EAAQC,EAAUH,GAChE,GAAI4G,GAAeA,EAAY6D,SAAS/D,GAStC,OARAtD,EAAAA,EAAAA,IAAUrD,QACVU,EAAQ4C,SAAS,CACfhC,GAAInB,EACJC,WACAqB,uBACAC,oBACAzB,UAWJ,GANIoK,IACFrK,GAASiC,EAAAA,EAAAA,IAAsBjC,EAAQG,EAAQC,EAAU,mBAAeG,EAAWN,IAGrFD,GAASiC,EAAAA,EAAAA,IAAsBjC,EAAQG,EAAQC,EAAU,mBAAeG,EAAWN,GAE/E4G,IAAgBwD,EAAkB,CACpC,MAAMM,EAAYhE,EAAYE,EAAY,GAAK4D,EAAAA,GAAAA,KAAsBA,EAAAA,GAAAA,GACrEzK,GAASwK,EAAAA,EAAAA,IAAqBxK,EAAQ2K,EAAW1K,EACnD,EAEAoD,EAAAA,EAAAA,IAAUrD,GAEVU,EAAQ4C,SAAS,CACfhC,GAAInB,EACJC,WACAqB,uBACAC,oBACAzB,UAEFS,EAAQkK,qBAAqB,CAC3B3K,SAEc,KAGlBQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,WACJkK,EAAU,WAAErG,EAAU,UAAEsF,EAAS,YAAEgB,EAAW,MAAE7K,GAAQC,EAAAA,EAAAA,OACtDS,EACJ,IAAIoK,EAIJ,OAHIjB,IACFiB,GAAoBC,EAAAA,EAAAA,IAA0BhL,EAAQ6K,EAAYf,KAE7D9H,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BsC,gBAAiB,CACfuI,aACArG,WAAYuG,GAAqBvG,EACjCyG,cAAc,EACdH,gBAED7K,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BsC,gBAAiB,KACZtB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOqC,gBACjCC,cAAUhC,EACV0K,cAAc,EACdC,WAAW,EACXC,YAAY,IAEblL,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,UAAEuK,EAAS,MAAEjL,GAAQC,EAAAA,EAAAA,OAAsBS,EAC3CiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BsC,gBAAiB,IACZV,EAASU,gBACZ4I,YAEAC,WAAYD,GAAatJ,EAASU,gBAAgB6I,aAEnDlL,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,WAAEwK,EAAU,MAAElL,GAAQC,EAAAA,EAAAA,OAAsBS,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BsC,gBAAiB,KACZtB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOqC,gBACjC6I,aACAD,UAAWC,IAEZlL,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElDX,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BsC,gBAAiB,CAAC,GACjBrC,IACHoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,sCAAsC,CAACT,EAAQU,EAASC,KACvE,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,IAAK2B,EAASwJ,iBACZ,OAGF,MAAQjL,OAAQ0K,EAAU,WAAErG,GAAe5C,EAASwJ,iBAEpD1K,EAAQ2K,gBAAgB,CAAER,aAAYrG,aAAYvE,SAAQ,KAG5DQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACT,EAAQU,EAASC,KAC/D,MAAM,QAAEuE,EAAO,MAAEjF,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzCiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GAClCqL,EAAW1J,EAAS2J,gBAAgBD,SAASpG,EAAQ/E,QACtDmL,GAAaA,EAAStD,SAE3BhI,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BuL,gBAAiB,CACfD,SAAU,IACL1J,EAAS2J,gBAAgBD,SAC5B,CAACpG,EAAQ/E,QAASmL,EAASrG,QAAQ3D,GAAOA,IAAO4D,EAAQ5D,QAG5DrB,IACHoD,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,+BAA+B,CAACT,EAAQU,EAASC,KAChE,MAAM,SAAEoE,EAAQ,MAAE9E,GAAQC,EAAAA,EAAAA,OAAsBS,EAE1C2K,GAAWtK,EAAAA,EAAAA,IAAehB,EAAQC,GAAOsL,gBAAgBD,SACzDE,EAAuD,CAAC,EAI9D,OAHA5D,OAAOC,KAAKyD,GAAUG,SAAStL,IAC7BqL,EAAYrL,GAAUmL,EAASnL,GAAQ8E,QAAQ3D,IAAQyD,EAAS2G,MAAMxG,GAAYA,EAAQ5D,KAAOA,KAAI,KAEhGU,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BuL,gBAAiB,CACfD,SAAUE,IAEXvL,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,QAAEuE,EAAO,MAAEjF,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzCiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxCD,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BuL,gBAAiB,CACfD,SAAU,IACL1J,EAAS2J,gBAAgBD,SAC5B,CAACpG,EAAQ/E,QAAS,IAAKyB,EAAS2J,gBAAgBD,SAASpG,EAAQ/E,SAAW,GAAK+E,EAAQ5D,OAG5FrB,IACHoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,4BAA4B,CAACT,EAAQU,EAASC,KAC7D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,IAAK2B,EAASwJ,iBACZ,OAGF,MAAM,OAAEjL,EAAM,WAAEqE,GAAe5C,EAASwJ,kBAClC,SAAEhL,IAAaC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAE3D2E,GAAeE,EAAAA,EAAAA,IAAmB9E,EAAQG,GAC3CyE,GAAiBxE,GACLoE,EAAWQ,KAAK1D,GAAOsD,EAAatD,KAClD2D,QAAQC,IAAYC,EAAAA,EAAAA,IAA4BnF,EAAQkF,EAAS9E,GAAUuL,cACrEF,SAASvG,GAAYxE,EAAQkL,qBAAqB,CAAE1G,UAASjF,WAAS,KAIjFQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,OAAER,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC1D,OAAOkL,EAAAA,EAAAA,IAAuB7L,EAAQG,EAAQF,EAAM,KAItDQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,UAAEgG,EAAS,MAAE1G,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EACvD2C,GAAWwI,EAAAA,EAAAA,IAAkB9L,EAAQC,GAC3C,OAAKqD,GAIEyI,EAAAA,EAAAA,IAAuB/L,EAAQsD,EAAShC,GAAIqF,EAAW1G,GAHrDD,CAG2D,KAItES,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,UACJgG,EAAS,UACTmD,EAAS,gBACTkC,EAAe,UACfC,EAAS,MACThM,GAAQC,EAAAA,EAAAA,OACNS,EACEgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGF,MAAM,OAAExB,EAAM,SAAEC,EAAUoB,KAAMiD,GAAoB9C,EAEpD3B,GAASkM,EAAAA,EAAAA,IACPlM,EAAQG,EAAQC,EAAUqE,EAAiBkC,EAAWmD,EAAWkC,EAAiBC,EAAWhM,IAG/FoD,EAAAA,EAAAA,IAAUrD,IAENgB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOkM,4BAChCzL,EAAQ0L,uBAAuB,CAAEnM,UACjCS,EAAQ2L,iBAAiB,CAEvBnH,QAAU,mDAAkDoH,EAAAA,GAAe,WAAa,8BACxFrM,UAEJ,KAGFQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,IAAKK,EAAAA,EAAAA,IAAehB,EAAQC,GAAOkM,0BAInC,OAAOnK,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BmM,2BAA2B,GAC1BlM,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOwB,EAAAA,EAAAA,IAAsBnC,EAAQC,EAAM,KAG7CQ,EAAAA,EAAAA,IAAiB,iBAAiB,CAACT,EAAQU,EAASC,KAClD,MAAM,OAAE4L,EAAM,MAAEtM,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAE1D,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BwM,UAAW,CACTzK,QAAQ,EACRwK,WAEDtM,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BwM,UAAW,CACTzK,QAAQ,IAET9B,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACT,EAAQU,KACpD,GAAI+L,EAAAA,KAAoBC,KAAKC,MAAQ1E,OAAOwE,EAAAA,KA9oBR,OA+oBlC,OAGF,MAAMG,EAAiBC,EAAAA,IAAAA,MAAkB,KAAKC,MAAM,EAAG,GAAG3G,KAAK,MACzD,qBAAE4G,GAAyB/M,EAEjC,GAAI+M,EAAqBrB,MAAK,EAAGsB,aAAcA,IAAYJ,IACzD,OAGF,MAAM1H,EAAkC,CACtC/E,OAAQ8M,EAAAA,IACRC,MAAMC,EAAAA,EAAAA,MACNhG,QAAS,CACP5D,MAAM6J,EAAAA,EAAAA,I,ktDAAuC,IAE/CC,YAAY,GAGd3M,EAAQ4M,0BAA0B,CAChCpI,QAASA,EACT8H,QAASJ,GACT,KAGJnM,EAAAA,EAAAA,IAAiB,6BAA6B,CAACT,EAAQU,EAASC,KAC9D,MAAM,QAAEuE,EAAO,QAAE8H,GAAYrM,GACvB,qBAAEoM,GAAyB/M,EAC3BuN,GAAc9K,EAAAA,EAAAA,IAAWzC,EAAQiN,EAAAA,KAEjCO,EAAQC,KAAKC,IACjBH,EAAYrF,aAAa5G,IAAM,KAC5ByL,EAAqB/H,KAAI,EAAG1D,QAASA,KAEpCqM,GAAkBZ,EAAqB/E,OAAS,GAhrBf,IAkrBjC1G,EAAKmM,KAAKG,MAAMJ,GAASG,EAE/BzI,EAAQ2I,gBAAkB3I,EAAQ5D,GAClC4D,EAAQ5D,GAAKA,EAEb,MAAMwM,EAAsB,CAC1BxM,KACA4D,UACA8H,UACAe,UAAU,GAGZ/N,EAAS,IACJA,EACH+M,qBAAsB,IACjBA,EAAqBD,OAjsBW,KAksBnCgB,KAGJzK,EAAAA,EAAAA,IAAUrD,GAEVU,EAAQsN,UAAU,CAChB,QAAS,aACT1M,GAAI4D,EAAQ5D,GACZnB,OAAQ+E,EAAQ/E,OAChB+E,WACA,KAGJzE,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,OAAER,EAAM,UAAEwG,EAAS,MAAE1G,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BiO,aAAc,CAAE9N,SAAQwG,cACvB1G,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BiO,kBAAc1N,GACbN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,OAAER,EAAM,UAAEwG,EAAS,MAAE1G,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BkO,YAAa,CAAE/N,SAAQwG,cACtB1G,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BkO,iBAAa3N,GACZN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACT,EAAQU,EAASC,KAC7D,MAAM,OAAER,EAAM,GAAEmB,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5CwN,GAAiBC,EAAAA,EAAAA,IAAmCpO,EAAQG,EAAQmB,EAAIrB,GAE9E,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BqO,qBAAsB,CAAElO,SAAQwG,UAAWrF,EAAI6M,mBAC9ClO,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,6BAA6B,CAACT,EAAQU,EAASC,KAC9D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BqO,0BAAsB9N,GACrBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAChCiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,IAAK2B,EAASwJ,iBACZ,OAGF,MAAM,OAAEjL,EAAM,WAAEqE,GAAe5C,EAASwJ,iBACxC7G,EAAoBvE,EAAQG,EAAQqE,EAAW,KAGjD/D,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,WAAE6D,EAAU,MAAEvE,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5C6B,GAAOsJ,EAAAA,EAAAA,IAAkB9L,EAAQC,GAClCuE,GAAoC,IAAtBA,EAAWwD,QAAiBxF,GAI/C+B,EAAoBvE,EAAQwC,EAAKlB,GAAIkD,EAAW,KEx0BlD/D,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,GACvC,OAAER,IAAWa,EAAAA,EAAAA,IAAehB,EAAQC,GAAOqO,aAEjD,OAAOC,EAAAA,EAAAA,IAAmBvO,EAAQ,CAChCwO,cAAe,CAAC,EAChBC,aAAc,CAAC,EACfC,mBAAenO,KACXK,EAAQ,CAAE+N,eAAgB,CAAEC,OAAO,EAAO7J,UAAU,IAAW,CAAE4J,oBAAgBpO,GACrFK,SACCX,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,MAAiB,UAAE2O,GAAclO,GAAW,CAAC,EAC7D,OAAO4N,EAAAA,EAAAA,IAAmBvO,EAAQ,CAChC6O,aACC5O,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,GAAEW,GAAOX,GACT,qBAAEmO,GAAyB9O,EAEjC,IAAK8O,EACH,MAAO,IACF9O,EACH8O,qBAAsB,CAACxN,IAI3B,MAAMyN,EAAeD,EAAqB7J,QAAQ9E,GAAWA,IAAWmB,IAMxE,OALAyN,EAAaC,QAAQ1N,GACjByN,EAAa/G,OAnCY,IAoC3B+G,EAAarF,MAGR,IACF1J,EACH8O,qBAAsBC,EACvB,KAGHtO,EAAAA,EAAAA,IAAiB,2BAA4BT,IACpC,IACFA,EACH8O,0BAAsBvO,OAI1BE,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,QAAEwG,EAAO,MAAElH,GAAQC,EAAAA,EAAAA,OAAsBS,EAE/C,OAAOsO,EAAAA,EAAAA,IAA0BjP,EAAQmH,EAASlH,EAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,GAAEW,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAAsBS,EAE1C,OAAO4N,EAAAA,EAAAA,IAAmBvO,EAAQ,CAAEG,OAAQmB,EAAIV,WAAOL,EAAWmO,mBAAenO,GAAaN,EAAM,KC/DtGQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BkP,cAAe,CACbtO,QACAuO,eAAW5O,IAEZN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BoP,UAAW,CACTxO,QACAyO,YAAQ9O,EAER+O,aAAS/O,IAEVN,EAAM,KCnBXQ,EAAAA,EAAAA,IAAiB,sBAAsB,CAACT,EAAQU,EAASC,KACvD,MAAM,MACJC,EAAK,MACLX,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,OAAO4O,EAAAA,EAAAA,IAAiBvP,EAAQ,CAC9BwP,mBAAejP,EACfkP,kBAAclP,EACdoO,eAAgB1H,QAAQrG,GACxBA,SACCX,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,OAAE+O,EAAM,MAAEzP,GAAQC,EAAAA,EAAAA,OAAsBS,EAE9C,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B2P,WAAY,CAAED,WACbzP,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B2P,WAAY,CACVC,iBAAiB,IAElB3P,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOkP,EAAAA,EAAAA,IAAsB7P,EAAQC,EAAM,I,8CC1C9B,SAAS6P,EAAWC,GACjCC,SAASC,iBAAkC,gDACxCxE,SAASyE,IACJH,EACGG,EAAKC,KAAKzF,SAAS,oBACtBwF,EAAKC,KAAOD,EAAKC,KAAKC,QAAQ,UAAW,mBAG3CF,EAAKC,KAAOD,EAAKC,KAAKC,QAAQ,iBAAkB,UAClD,GAEN,C,eCLO,SAASC,EAAoBC,GAC9BN,SAASO,QAAUD,IACrBN,SAASO,MAAQD,EAErB,CAGO,MAAME,GAAeC,EAAAA,EAAAA,IAASJ,EAXV,KAWmD,GCglB9E,IAAIK,GAhkBJjQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,MAAEgQ,EAAK,MAAE1Q,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EACnDwC,OAA4B5C,IAAVoQ,EAAsBA,IAAS3P,EAAAA,EAAAA,IAAehB,EAAQC,GAAOkD,gBAKrF,OAHAnD,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAAEmD,mBAAmBlD,GAC5C,IAAKD,EAAQoD,oBAAqBD,EAE9B,KAGf1C,EAAAA,EAAAA,IAAiB,sBAAsB,CAACT,EAAQU,EAASC,KACvD,MAAM,gBAAEiQ,GAAoBjQ,EAE5B,MAAO,IACFX,EACH4Q,kBACD,KAGHnQ,EAAAA,EAAAA,IAAiB,wBAAyBT,IACjC,IACFA,EACH4Q,qBAAiBrQ,OAIrBE,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAE/D,IAAKE,EACH,OAGF,MAAMyB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GAExC,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B6Q,WAAY,CACVvF,SAAU,IACL1J,EAASiP,WAAWvF,SACvB,CAACnL,GAAS,IACLyB,EAASiP,WAAWvF,SAASnL,GAChC2Q,WAAYlP,EAASiP,WAAWvF,SAASnL,IAAW,CAAC,GAAG2Q,aAI7D7Q,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,+BAA+B,CAACT,EAAQU,EAASC,KAChE,MAAM,OAAEoQ,EAAM,MAAE9Q,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GACpD,OAAER,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAE/D,IAAKE,EACH,OAGF,MAAMyB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GAExC,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B6Q,WAAY,CACVvF,SAAU,IACL1J,EAASiP,WAAWvF,SACvB,CAACnL,GAAS,IACLyB,EAASiP,WAAWvF,SAASnL,GAChC2Q,UAAU,EACVE,WAAYD,MAIjB9Q,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAE/D,IAAKE,EACH,OAGF,MAAMyB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GAExC,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B6Q,WAAY,CACVvF,SAAU,IACL1J,EAASiP,WAAWvF,SACvB,CAACnL,GAAS,IACLyB,EAASiP,WAAWvF,SAASnL,GAChC2Q,UAAU,MAIf7Q,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,YAAY,CAACT,EAAQU,EAASC,KAC7C,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EACtC,IAAKuI,EAAAA,EAAAA,QAAkB+H,EAAAA,EAAAA,MAIvB,OAAOjP,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BkR,kBAAyE,KAAtDlQ,EAAAA,EAAAA,IAAehB,EAAQC,GAAOkR,aAAanJ,QAC7D/H,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BoC,mBAAoBR,EAASQ,kBAC7BgP,WAAY,IACPxP,EAASwP,WACZC,sBAAkB9Q,IAEnBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACT,EAAQU,EAASC,KAC5D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,MAAiB,UAAEyG,GAAchG,GAAW,CAAC,EAC7D,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BoR,WAAY,KACPpQ,EAAAA,EAAAA,IAAehB,EAAQC,GAAOmR,WACjCC,iBAAkB1K,IAEnB1G,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BkR,oBAAoBlQ,EAAAA,EAAAA,IAAehB,EAAQC,GAAOiR,mBACjDjR,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,MAAEoF,GAAUpF,GACZ,aAAE2Q,GAAiBtR,EACzB,IAAKsR,EACH,MAAO,IACFtR,EACHsR,aAAc,CAACvL,IAInB,MAAMwL,EAAYD,EAAarM,QAAQuM,GAAMA,IAAMzL,IAMnD,OALAwL,EAAUvC,QAAQjJ,GACdwL,EAAUvJ,OAtJU,IAuJtBuJ,EAAU7H,MAGL,IACF1J,EACHsR,aAAcC,EACf,KAGH9Q,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,QAAE8Q,GAAY9Q,GACd,OAAE+Q,GAAW1R,EAAO2R,SAC1B,IAAKD,EACH,MAAO,IACF1R,EACH2R,SAAU,IACL3R,EAAO2R,SACVD,OAAQ,CACNE,KAAM,IACND,SAAU,CAACF,MAMnB,MAAMI,EAAcH,EAAOC,SAAS1M,QAAQ6M,GAAMA,EAAExQ,KAAOmQ,EAAQnQ,KAGnE,OAFAuQ,EAAY7C,QAAQyC,GAEb,IACFzR,EACH2R,SAAU,IACL3R,EAAO2R,SACVD,OAAQ,IACHA,EACHC,SAAUE,IAGf,KAGHpR,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,WAAEoR,GAAepR,GACjB,mBAAEqR,GAAuBhS,EAC/B,IAAKgS,EACH,MAAO,IACFhS,EACHgS,mBAAoB,CAACD,IAIzB,MAAMR,EAAYS,EAAmB/M,QAAQ3D,GAAOA,IAAOyQ,IAM3D,OALAR,EAAUvC,QAAQ+C,GACdR,EAAUvJ,OA3MU,IA4MtBuJ,EAAU7H,MAGL,IACF1J,EACHgS,mBAAoBT,EACrB,KAGH9Q,EAAAA,EAAAA,IAAiB,0BAA2BT,IACnC,IACFA,EACHgS,mBAAoB,QAIxBvR,EAAAA,EAAAA,IAAiB,sBAAsB,CAACT,EAAQU,EAASC,KACvD,MAAM,MAAEsR,EAAK,cAAEC,GAAkBvR,EACjC,MAAO,IACFX,EACH2R,SAAU,IACL3R,EAAO2R,SACVQ,MAAO,CACLC,OAAUF,EAAwBlS,EAAO2R,SAASQ,MAAMC,OAA9BH,IAG9BI,aAAc,IACTrS,EAAOqS,aACVF,MAAO,CACLC,OAASF,EAAgBD,EAAQjS,EAAOqS,aAAaF,MAAMC,SAGhE,KAGH3R,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,SAAsBoS,GAAiB3R,EACvD2R,EAAaC,SAAUC,EAAAA,EAAAA,GAAc,CAAC,GAEtC,MAAMC,EAAmB,KAAIzR,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyS,eACrDC,EAA4BF,EAAiBG,WAAWC,GAAMA,EAAE3N,UAAYoN,EAAapN,UAO/F,OANmC,IAA/ByN,GACFF,EAAiBK,OAAOH,EAA2B,GAGrDF,EAAiB5M,KAAKyM,IAEftQ,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B0S,cAAeD,GACdxS,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uCAAuC,CAACT,EAAQU,EAASC,KACxE,MAAM,OAAER,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,EAExC6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EAAM,OAEX,MAAM,iBACJuQ,EAAgB,cAAEC,EAAa,cAAEC,EAAa,iBAAEC,EAAgB,cAAEC,EAAa,gBAC/EC,EAAe,mBAAEC,EAAkB,cAAEC,IACnCC,EAAAA,EAAAA,IAA4B/Q,GAC1BgR,GAAiBpJ,EAAAA,EAAAA,IAAQ,CAC7B2I,EAAmB,uCAAoCxS,EACvDyS,EAAgB,wCAAqCzS,EACrD0S,EAAgB,wCAAqC1S,EACrD+S,EAAgB,+CAA4C/S,EAC5D8S,EAAqB,+CAA4C9S,EACjE2S,EAAmB,uCAAoC3S,EACvD4S,EAAgB,wCAAqC5S,EACrD6S,EAAkB,0CAAuC7S,IACxDyE,KAAKyO,GAAM9O,EAAAA,GAAuB8O,KAErC,IAAKD,EAAexL,OAKlB,YAJAtH,EAAQ2L,iBAAiB,CACvBnH,QAASP,EAAAA,GAAuB,2BAChC1E,UAKJ,MAAMyT,EAAgB/O,EAAAA,GAAuB,sCACvCgP,EAAuBH,EAAerN,KAAK,MAAMiK,QAAQ,YAAc,GAAEsD,OAE/EhT,EAAQ2L,iBAAiB,CACvBnH,QAASP,EAAAA,GAAuB,8BAA+BgP,GAC/D1T,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAChC8R,GAAmBzR,EAAAA,EAAAA,IAAehB,EAAQC,GAC7CyS,cAAczN,QAAO,EAAGsN,aAAcA,IAAY5R,EAAQ4R,UAE7D,OAAOvQ,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B0S,cAAeD,GACdxS,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,cAAc,CAACT,EAAQU,EAASC,KAC/C,MAAM,KAAEiT,EAAI,MAAE3T,GAAQC,EAAAA,EAAAA,OAAsBS,EAG5C,GAAI,YAAaiT,GAAQA,EAAKC,eAAgBC,EAAAA,EAAAA,IAAqBF,GACjE,OAAO5T,EAGT,MAAM+T,EAAa,KAAI/S,EAAAA,EAAAA,IAAehB,EAAQC,GAAO+T,SACrD,GAAI,YAAaJ,EAAM,CACrB,MAAMK,EAAqBF,EAAWnB,WAAWsB,GAASA,EAAiBhP,UAAY0O,EAAK1O,WAChE,IAAxB+O,GACFF,EAAWjB,OAAOmB,EAAoB,EAE1C,CAIA,OAFAF,EAAWlO,KAAK+N,IAET5R,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BgU,QAASD,GACR9T,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,iBAAiB,CAACT,EAAQU,EAASC,KAClD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CoT,EAAa,KAAI/S,EAAAA,EAAAA,IAAehB,EAAQC,GAAO+T,SAIrD,OAFAD,EAAWrK,OAEJ1H,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BgU,QAASD,GACR9T,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAQwT,IAAKC,EAAgB,MAAEnU,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7D,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BoU,oBACCnU,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,WAAE0T,EAAU,MAAEpU,GAAQC,EAAAA,EAAAA,OAAsBS,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BsU,0BAA2BD,GAC1BpU,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BsU,+BAA2B/T,GAC1BN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,YAAY,CAACT,EAAQU,EAASC,KAC7C,MAAM,IACJwT,EAAG,OAAEhU,EAAM,UAAEwG,EAAS,MAAE1G,GAAQC,EAAAA,EAAAA,OAC9BS,EAEEuE,GAAUqP,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQwG,GAClD,IAAKzB,EAAS,OAEd,MAAMsP,EAAQtP,EAAQuP,UAAYvP,EAAQwP,SAC1C,GAAKF,EAAL,CAEA,KAAKG,EAAAA,EAAAA,IAAmB3U,EAAQwU,GAY9B,OAXAxU,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B4U,gBAAiB,CACfJ,QACAhT,KAAM,OACNqT,UAAW,CACTC,OAAQ,WACRnU,aAGHV,QACHoD,EAAAA,EAAAA,IAAUrD,GAIZA,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B+U,WAAY,CACVZ,MACAhU,SACAwG,cAED1G,IACHoD,EAAAA,EAAAA,IAAUrD,EAxBQ,CAwBD,KAGnBS,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAASC,KAC9C,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B+U,gBAAYxU,GACXN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,IACJqU,EAAG,KAAEC,EAAI,MAAEC,EAAK,OAAEC,EAAM,MAAElV,GAAQC,EAAAA,EAAAA,OAChCS,GAAW,CAAC,GACV,eAAEyU,GAAmBpV,EAAOqV,SAASC,MAC3C,GAAuB,IAAnBF,EAEJ,OAAOpT,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BuV,SAAU,CACRC,iBAAkB9I,KAAKC,MACvBqI,MACAC,OACAC,QACAC,WAEDlV,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACT,EAAQU,EAASC,KAC7D,MAAM,eACJ8U,EAAc,kBAAEC,GACd/U,EAEJ,MAAO,IACFX,EACH2V,mBAAoB,CAClBF,eAAgBA,QAAAA,EAAkBzV,EAAO2V,mBAAmBF,eAC5DC,kBAAmBA,QAAAA,EAAqB1V,EAAO2V,mBAAmBD,mBAErE,KAGHjV,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAEiV,EAAK,MAAE3V,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B6V,kBAAmB,CACjBD,UAED3V,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B6V,uBAAmBtV,GAClBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B8V,+BAA2BvV,GAC1BN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,OAAEyR,EAAM,MAAEnS,GAAQC,EAAAA,EAAAA,OAAsBS,EAC9C,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B+V,wBAAyB3D,GACxBnS,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B+V,6BAAyBxV,GACxBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kCAAkC,CAACT,EAAQU,EAASC,KACnE,MAAM,IAAEuJ,GAAQvJ,GACV,aAAEqV,GAAiBhW,EAAOqS,aAEhC,MAAO,IACFrS,EACHqS,aAAc,IACTrS,EAAOqS,aACV2D,cAAcC,EAAAA,EAAAA,IAAO,IAAID,KAAiB9L,IAAM4C,MAAM,EAAGoJ,EAAAA,MAE5D,KAGHzV,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,OAAER,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,EAM9C,OAHoBmL,EAAAA,EAAAA,IAAkB9L,EAAQC,IAC5BS,EAAQ4C,SAAS,CAAEhC,GAAInB,EAAQC,SAAUmB,EAAAA,GAAgBtB,WAEpE+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BmW,iBAAkB,CAChBhW,WAEDF,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BmW,sBAAkB5V,GACjBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,sBAAsB,CAACT,EAAQU,EAASC,KACvD,MAAM,OAAER,EAAM,QAAEiW,EAAO,MAAEnW,GAAQC,EAAAA,EAAAA,OAAsBS,EAMvD,OAHoBmL,EAAAA,EAAAA,IAAkB9L,EAAQC,IAC5BS,EAAQ4C,SAAS,CAAEhC,GAAInB,EAAQF,WAE1C+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BqW,eAAgB,CACdlW,SACAiW,YAEDnW,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BqW,oBAAgB9V,GACfN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,gBAAE2V,GAAoBtW,GACtB,SAAEuW,EAAWD,EAAgBC,SAAQ,YAAEC,EAAcF,EAAgBE,aAAgB7V,EAE3F,MAAO,IACFX,EACHsW,gBAAiB,CACfC,WACAC,eAEH,KAGH/V,EAAAA,EAAAA,IAAiB,mBAAoBT,IACnC,MAAMyW,EAAoB,qBAE1BC,MAAO,eAAqBhK,KAAKC,SAC9BgK,MAAMC,GAAaA,EAASrT,SAC5BoT,MAAM3J,IACLA,EAAUA,EAAQ6J,OAEdJ,EAAkBK,KAAK9J,IAAYA,IAAYH,EAAAA,MACjD7M,GAASsJ,EAAAA,EAAAA,MACTtJ,EAAS,IACJA,EACH+W,mBAAmB,IAErB1T,EAAAA,EAAAA,IAAUrD,GACZ,IAEDgX,OAAO9C,IACF+C,EAAAA,KAEFC,QAAQC,MAAM,4BAA6BjD,EAC7C,GACA,KAGNzT,EAAAA,EAAAA,IAAiB,eAAgBT,KAC1BgB,EAAAA,EAAAA,IAAehB,GAAQE,EAAAA,EAAAA,OAAmBkX,qBAC/CC,EAAAA,EAAAA,IAAyB,KAO3B5W,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,UAAE2W,EAAS,MAAErX,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5C2W,GACH5W,EAAQ6W,gBAAe,GAGzB,MAAMC,GAAmBvB,EAAAA,EAAAA,IAAOqB,EAC5B,IAAItX,EAAOwX,iBAAkBvX,GAC7BD,EAAOwX,iBAAiBvS,QAAQwS,GAAMA,IAAMxX,KAmBhD,OAjBIuX,EAAiBxP,UAAW0P,EAAAA,EAAAA,MAAuB1P,QACrDtH,EAAQ6W,gBAAe,GAGrBD,GACE5G,GAAsBiH,cAAcjH,GAExCA,EAAuB1N,OAAO4U,aAAY,KACxClX,EAAQoC,gBAAgB,CACtB7C,SACA,GAvBsB,OA0B1B0X,cAAcjH,GACdA,OAAuBnQ,GAGlB,IACFP,EACHwX,mBACAK,2BAA4BP,GAAYQ,EAAAA,EAAAA,WAA6BvX,EACtE,KAGHE,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,sBAAEoX,GAA0B/X,EAAOqV,SAASC,MAC5C0C,EAAgBhY,EAAOgY,cAE7B,GAAIhI,SAASO,MAAM7F,SAASuN,EAAAA,KAG1B,OAFAnI,GAAW,QACXO,EAAqB,GAAE6H,EAAAA,OAAcD,EAAAA,OAIvC,GAAIjY,EAAO6X,4BAA8BpK,KAAK0K,MAAMzL,KAAKC,MAAQ,KAAQ,GAAM,EAAG,CAChF,MAEMyL,GAFoBN,EAAAA,EAAAA,MAEY9X,EAAO6X,2BAE7C,GAAIO,EAAY,EAGd,OAFA/H,EAAqB,GAAE+H,iBAAyBA,EAAY,EAAI,IAAM,WACtEtI,GAAW,EAGf,CAEAA,GAAW,GAEX,MAAMuI,GAAchY,EAAAA,EAAAA,IAAyBL,EAAQC,GACrD,GAAIoY,GAAeN,EAAuB,CACxC,MAAM,OAAE5X,EAAM,SAAEC,GAAaiY,EACvBC,GAAc7V,EAAAA,EAAAA,IAAWzC,EAAQG,GACvC,GAAImY,EAAa,CACf,MAAM/H,GAAQgI,EAAAA,EAAAA,GAAa5T,EAAAA,GAAwB2T,OAAa/X,EAAWJ,IAAW6X,GACtF,OAAIM,EAAY5V,SAAW4V,EAAYE,SAASpY,QAC9CoQ,EAAc,GAAED,OAAW+H,EAAYE,OAAOpY,GAAUmQ,cAI1DC,EAAaD,EAEf,CACF,CAEAF,EAAoB6H,EAAAA,IAAW,KCrqBjCzX,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5C8X,GAASzX,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyY,QAAQD,OASrD,OARAzY,GAAS2Y,EAAAA,EAAAA,IAAa3Y,EAAQC,GAC9BD,GAAS4Y,EAAAA,EAAAA,IAAa5Y,EAAQC,IACrB+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B0Y,QAAS,KACJ1X,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyY,QACjCD,WAEDxY,EACU,KAGfQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,MAAEwW,EAAK,MAAElX,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B0Y,QAAS,KACJ1X,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyY,QACjCD,OAAQ,SACRtB,UAEDlX,EAAM,I,gBCzBXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,QAAEyY,EAAO,cAAEC,EAAa,kBAAEC,EAAiB,OAAEvQ,EAAM,OAAEC,EAAM,aAAEC,EAAY,QAAEC,EAAO,MAClG1I,GAAQC,EAAAA,EAAAA,OACNS,EAEEiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BgZ,YAAa,IACRpX,EAASoX,YACZ7Y,SACAC,WACAyY,UACAC,gBACAC,oBACAvQ,SACA+N,UAAU,EACV9N,OAAQA,QAAAA,EAAU7G,EAASoX,YAAYvQ,OACvCC,aAAcA,GAAgB9G,EAASoX,YAAYtQ,cAAgB1I,EAAOgZ,YAAYnQ,iBACtFF,QAASA,GAAW/G,EAASoX,YAAYrQ,SAE3CrG,gBAAiB,CAAC,GACjBrC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OACJ8H,EAAM,QAAEE,EAAO,aAAED,EAAY,SAAE6N,IAC7BvV,EAAAA,EAAAA,IAAehB,EAAQC,GAAO+Y,YAElC,OAAOhX,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BgZ,YAAa,CACXvQ,SACAE,UACA4N,WACA7N,iBAEDzI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,OACJ8H,EAAM,MACNxI,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BgZ,YAAa,KACRhY,EAAAA,EAAAA,IAAehB,EAAQC,GAAO+Y,YACjCvQ,SACAE,SAAS,IAEV1I,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACT,EAAQU,EAASC,KAC/D,MAAM,aACJ+H,EAAY,MACZzI,GAAQC,EAAAA,EAAAA,OACNS,EAUJ,OARAX,EAAS,IACJA,EACHgZ,YAAa,IACRhZ,EAAOgZ,YACVnQ,iBAAkBH,KAIf1G,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BgZ,YAAa,KACRhY,EAAAA,EAAAA,IAAehB,EAAQC,GAAO+Y,YACjCtQ,iBAEDzI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,QACJgI,EAAO,MACP1I,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BgZ,YAAa,KACRhY,EAAAA,EAAAA,IAAehB,EAAQC,GAAO+Y,YACjCrQ,YAED1I,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,SAAE4V,EAAQ,MAAEtW,GAAQC,EAAAA,EAAAA,OAAsBS,EAEhD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BgZ,YAAa,KACRhY,EAAAA,EAAAA,IAAehB,EAAQC,GAAO+Y,YACjCzC,aAEDtW,EAAM,I,+CC5FX,IAAIgZ,GAAiB,GACrBC,EAAAA,EAAAA,KAAe,MAET5P,EAAAA,EAAAA,MAAY6P,SAASC,cAAgBH,GAA8D,IAA5CrR,OAAOC,MAAKyB,EAAAA,EAAAA,MAAY+P,SAASrR,SAC1FsR,EAAAA,EAAAA,KACF,KAGF7Y,EAAAA,EAAAA,IAAiB,eAAe8Y,MAAOvZ,EAAQU,EAASC,KACtD,MAAM,SAAEwY,GAAaxY,EACrBX,GAASwZ,EAAAA,EAAAA,IAAuBxZ,EAAQ,CACtCyZ,WAAW,KAEbpW,EAAAA,EAAAA,IAAUrD,SACJ0Z,EAAAA,EAAAA,IAAcP,GAEpB,MAAMQ,EAAcC,KAAKC,UAAU,KAAKC,EAAAA,EAAAA,MAAqBpK,OAAQ1P,EAAOgY,gBAC5EhY,GAASsJ,EAAAA,EAAAA,MACT,MAAMyQ,GAAaC,EAAAA,EAAAA,KAAgBR,EAAAA,EAAAA,IAAuBxZ,EAAQ,CAChEoZ,aAAa,EACbjC,WAAO5W,EACPkZ,WAAW,WAGPQ,EAAAA,EAAAA,IAAeN,EAAaI,IAElCG,EAAAA,EAAAA,MACAla,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASwZ,EAAAA,EAAAA,IAAuBxZ,EAAQ,CACtCoZ,aAAa,EACbjC,WAAO5W,EACPkZ,WAAW,KAEbpW,EAAAA,EAAAA,IAAUrD,IAEVma,EAAAA,EAAAA,KAAiB,EAAK,KAGxB1Z,EAAAA,EAAAA,IAAiB,iBAAkBT,KAC5Boa,EAAAA,EAAAA,OAEEC,EAAAA,EAAAA,IAAsBra,OAG/BS,EAAAA,EAAAA,IAAiB,gBAAgB,CAACT,EAAQU,EAASC,KACjD,MAAM2Z,EAAkB1S,OAAO2S,OAAOva,EAAOqZ,UACvC,YAAEM,EAAW,WAAEI,GAAepZ,EAC9B6Z,EAAUZ,KAAKa,MAAMd,IAC3Be,EAAAA,EAAAA,IAAaF,EAASA,EAAQ9K,QAE9B,MAAMiL,EAAiB3a,GACvBA,EAAS4Z,KAAKa,MAAMV,IACbV,QAAUsB,EAAetB,SAChCuB,EAAAA,EAAAA,IAAa5a,GAAQ6a,EAAAA,EAAAA,IAAUC,EAAAA,IAE/B9a,GAASwZ,EAAAA,EAAAA,IACPxZ,EACA,CACE+a,gBAAgB,EAChB5D,WAAO5W,EACPya,qBAAsB,KAG1B3X,EAAAA,EAAAA,IAAUrD,IAEVka,EAAAA,EAAAA,MAEAI,EAAgB7O,SAAQ,EAAGnK,GAAIrB,EAAOgb,iBAAkBva,EAAQwa,KAAK,CAAEjb,QAAOgb,kBAC9Eva,EAAQya,SAAS,KAGnB1a,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,SAAEwY,GAAaxY,GACrBya,EAAAA,EAAAA,IAAejC,GAAUxC,KAAKjW,EAAQ2a,cAAc,KAClD3a,EAAQ4a,yBAAyB,GACjC,KAGJ7a,EAAAA,EAAAA,IAAiB,2BAA4BT,IAA6B,IAAAub,EACxE,OAAO/B,EAAAA,EAAAA,IAAuBxZ,EAAQ,CACpCgb,sBAA4D,QAAtCO,EAACvb,EAAOmZ,UAAU6B,4BAAoB,IAAAO,EAAAA,EAAI,GAAK,GACrE,KAGJ9a,EAAAA,EAAAA,IAAiB,8BAA+BT,IACvCwZ,EAAAA,EAAAA,IAAuBxZ,EAAQ,CACpCgb,qBAAsB,OAI1Bva,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEwW,GAAUxW,EAElB,OAAO6Y,EAAAA,EAAAA,IAAuBxZ,EAAQ,CAAEmX,SAAQ,KAGlD1W,EAAAA,EAAAA,IAAiB,sBAAuBT,IAC/BwZ,EAAAA,EAAAA,IAAuBxZ,EAAQ,CAAEmX,WAAO5W,OAGjDE,EAAAA,EAAAA,IAAiB,oBAAoB,KACnCwY,GAAiB,CAAI,I,kKCXvB,MAEMuC,GAA0B,IAAIC,IAE9BC,IAA0BjL,EAAAA,EAAAA,KAAUkL,GAAOA,KAAM,KAAK,IAE5Dlb,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,UACJgK,EAAYiR,EAAAA,GAAAA,OAAwB,gBACpCC,GAAkB,EAAK,MACvB5b,GAAQC,EAAAA,EAAAA,OACNS,GAAW,CAAC,EAChB,IAAI,OAAER,EAAM,SAAEC,GAAaO,GAAW,CAAC,EACvC,IAAKR,IAAWC,EAAU,CACxB,MAAMuB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGFxB,EAASwB,EAAmBxB,OAC5BC,EAAWuB,EAAmBvB,QAChC,CAEA,MAAMoC,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAEhC,IAAKqC,GAAQA,EAAKsZ,aAChB,OAGF,MAAMjV,GAAcC,EAAAA,EAAAA,IAAkB9G,EAAQG,EAAQC,EAAUH,GAC1D8b,GAAYC,EAAAA,EAAAA,IAAgBhc,EAAQG,EAAQC,GAC5C6b,GAAcC,EAAAA,EAAAA,IAAkBlc,EAAQG,EAAQC,EAAUH,GAEhE,GAAK4G,GAAgBA,EAAYmB,QAAU2C,IAAciR,EAAAA,GAAAA,OAmBlD,CAEL,MAAMO,EAAWxR,IAAciR,EAAAA,GAAAA,UAA8B/U,EAAY,GAAKA,EAAYA,EAAYmB,OAAS,GACzGoU,EAAanV,QAAQgV,GACrBI,EAAcD,EAAaH,EAAcF,GACzC,eACJO,EAAc,aAAEC,EAAY,YAAEC,GAC5BC,GAAiBJ,EAAYF,EAAUxR,GAW3C,GAVI4R,IACFvc,GAAS0c,EAAAA,EAAAA,IAAuB1c,EAAQG,EAAQC,EAAUkc,EAAgBrc,KAG5E0c,EAAAA,EAAAA,KAAU,MAcdpD,eACEvZ,EACAU,EACA8b,EAAsBJ,EAAqBP,EAC3CrZ,EAAepC,EAAkBuK,EAA8BwR,MAC3Dlc,GAAQC,EAAAA,EAAAA,QAEPsc,SACG5R,GACJ5K,EAAQwC,EAAMpC,EAAU+b,EAAUxR,EAAWyR,EAAYP,EAAiB5b,GAIzE4b,GACHnb,EAAQkK,qBAAqB,CAC3BzK,OAAQqC,EAAKlB,GAAIlB,WAAUuK,YAAWkR,iBAAiB,EAAM5b,SAGnE,CA/BW2c,CACH5c,EAAQU,EAAS8b,EAAaJ,EAAYP,EAAiBrZ,EAAMpC,EAAWuK,EAAWwR,EAAUlc,EAClG,IAGC4b,EACF,MAEJ,KAxCmF,CACjF,MAAMM,GAAWU,EAAAA,EAAAA,IAAuB7c,EAAQG,EAAQF,KAAU6c,EAAAA,EAAAA,IAAqB9c,EAAQG,EAAQC,GACjGgc,EAAanV,QAAQkV,GAAYJ,IAAcA,EAAUrR,SAASyR,IAClEE,GAAcD,EAAaH,EAAcF,IAAc,IACvD,eACJO,EAAc,aAAEC,EAAY,YAAEC,GAC5BC,GAAiBJ,EAAYF,EAAUP,EAAAA,GAAAA,QAEvCW,GAAgBD,EAAetU,QAAU+U,EAAAA,MAC3C/c,GAAS0c,EAAAA,EAAAA,IAAuB1c,EAAQG,EAAQC,EAAUkc,EAAgBrc,IAGvEuc,IACHG,EAAAA,EAAAA,KAAU,KACH/R,GACH5K,EAAQwC,EAAMpC,EAAW+b,EAAUP,EAAAA,GAAAA,OAA0BQ,EAAYP,EAAiB5b,EAC3F,GAGP,CAuBA,OAAOD,CAAM,KAuBfS,EAAAA,EAAAA,IAAiB,eAAe8Y,MAAOvZ,EAAQU,EAASC,KACtD,MAAM,OACJR,EAAM,UAAEwG,EAAS,iBAAEqW,EAAgB,aAAEC,GACnCtc,EAEE6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EACH,OAGF,MAAM0C,QAm8BRqU,eACEvZ,EAAWwC,EAAemE,EAAmBqW,GAE7C,MAAMxX,QAAe0X,EAAAA,EAAAA,IAAQ,eAAgB,CAAE1a,OAAMmE,cACrD,GAAKnB,EAAL,CAIA,GAAIA,IAAW2X,EAAAA,GAmBf,OALAnd,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASod,EAAAA,EAAAA,IAAkBpd,EAAQwC,EAAKlB,GAAIqF,EAAWnB,EAAON,SAC9DlF,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqB9X,EAAO+X,MAAO,QAC7Dla,EAAAA,EAAAA,IAAUrD,GAEHwF,EAAON,QAlBZ,GAAI8X,EAAkB,CACpBhd,GAASsJ,EAAAA,EAAAA,MACT,MAAMkU,GAAejJ,EAAAA,EAAAA,IAAkBvU,EAAQwC,EAAKlB,GAAI0b,GACxDhd,GAASod,EAAAA,EAAAA,IAAkBpd,EAAQwC,EAAKlB,GAAI0b,EAAkB,IACzDQ,EACHC,sBAAkBld,KAEpB8C,EAAAA,EAAAA,IAAUrD,EACZ,CAXF,CAsBF,CA/9BwB0d,CAAY1d,EAAQwC,EAAMmE,EAAWqW,GAC3D,GAAI9X,GAAW+X,EAAc,CAC3B,MAAM,cAAE5U,EAAa,WAAEsV,GAAeV,EACtCjd,GAASsJ,EAAAA,EAAAA,MAETtJ,GAAS4d,EAAAA,EAAAA,IACP5d,EACAkF,EACA/E,EACAkI,EACAsV,IAEFta,EAAAA,EAAAA,IAAUrD,EACZ,MAGFS,EAAAA,EAAAA,IAAiB,eAAe8Y,MAAOvZ,EAAQU,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAChCgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAE5D,IAAK0B,GAAsBkc,EAAAA,GAAAA,gBAAwBC,aAAeC,EAAAA,GAAAA,OAChE,OAEF,MAAM,OAAE5d,EAAM,SAAEC,EAAQ,KAAEoB,GAASG,EACnChB,GAAUqd,EAAAA,EAAAA,IAAKrd,EAAS,CAAC,UACzB,MAAM,cAACqX,IAAiB1O,EAAAA,EAAAA,MAExB,GAAG0O,IAAkB7X,EAAO,CAC1B,GAAGQ,EAAQsd,aACuBtd,EAAQsd,YAAYvS,MAAMwS,GAAkBA,EAAEC,sBACnD,CACzB,MAAM,SAACC,EAAQ,KAACC,SAAcC,EAAAA,EAAAA,MAC9B,IAAGF,EAuBD,OAvBU,CACV,IAAI,YAACH,GAAetd,EACpB,IAAK,IAAI4d,EAAI,EAAGA,EAAIN,EAAYjW,OAAQuW,IAAK,CAC3C,MAAMC,EAAaP,EAAYM,IACzB,QAACE,EAAO,SAACC,GAAYF,EACrBG,QAAYC,EAAAA,EAAAA,UAAmBC,EAAAA,EAAAA,IAAUJ,IACzCK,QAAeC,EAAAA,EAAAA,qBAA6BC,gBAAgBL,GAAKM,EAAAA,EAAAA,GAAWb,KAC5Ec,GAAKC,EAAAA,EAAAA,MACLC,EAAWf,EAAOA,EAAKrW,OAAO,EAC9BqX,EAAUX,EAAS1W,QACzBsX,EAAAA,EAAAA,IAAWJ,EAAI,IACfK,EAAAA,EAAAA,IAAWL,EAAGM,GAAOC,KAAK,QAC1BH,EAAAA,EAAAA,IAAWJ,EAAIG,IACfE,EAAAA,EAAAA,IAAWL,EAAGM,GAAOC,KAAKf,KAC1BY,EAAAA,EAAAA,IAAWJ,EAAIE,GACZA,IACDG,EAAAA,EAAAA,IAAWL,EAAGM,GAAOC,KAAKpB,GAAM,KAElC,MAAMqB,GAAMC,EAAAA,EAAAA,IAAaT,GACnBU,EAAO,IAAIC,KAAK,CAACL,GAAOC,KAAKC,GAAKF,GAAOC,KAAKX,IAAW,CAAEtd,KAAMgd,EAAWE,WAClF/d,EAAQsd,YAAYM,GAAGuB,WAAaC,IAAIC,gBAAgBJ,EAC1D,CACF,CAGF,CAEF,IAAI,YAAC3B,GAAetd,EACpB,GAAGsd,EACD,IAAK,IAAIM,EAAI,EAAGA,EAAIN,EAAYjW,OAAQuW,IAAK,CAC3C,MAAMC,EAAaP,EAAYM,IACzB,SAACG,EAAQ,WAACoB,EAAU,QAACrB,GAAWD,EACtC,GAAkC,IAA/BE,EAAS3a,QAAQ,UAAgB,CAClC,MAAMkc,EAAOH,EAAa,GAAK,GACzBI,EAAU,GAChB1B,EAAW2B,mBAAqBC,EAAAA,EAAAA,IAC9B3B,EAASwB,EAAKA,EAAM,aAAaC,EAErC,CACF,CAEF,GAAGvf,EAAQ4C,MAAQ5C,EAAQ2G,UAAY3G,EAAQ2G,SAAUU,OAAS,EAAE,CAClE,IAAI,SAACV,EAAQ,KAAC/D,GAAQ5C,EAEtB,GADgC2G,EAASoE,MAAM2U,GAA0C,yBAAhBA,EAAO7e,OACrD,CACzB,MAAM,SAAC4c,EAAQ,KAACC,SAAcC,EAAAA,EAAAA,MAC9B,IAAGF,EAYD,OAXA,IAAK,IAAIG,EAAI,EAAGA,EAAIjX,EAASU,OAAQuW,IACnC,GAAwB,yBAArBjX,EAASiX,GAAG/c,KAAgC,CAC7C,MAAM6e,EAAS1f,EAAQ2G,SAASiX,IAC1B,OAAClP,EAAM,OAACrH,GAAUqY,EAClBvB,QAAeC,EAAAA,EAAAA,qBAA6BC,gBAAgBQ,GAAOC,KAAKlc,EAAK+c,OAAOjR,EAAOrH,KAAUiX,EAAAA,EAAAA,GAAWb,KACtHzd,EAAQ4C,MAAOgd,EAAAA,EAAAA,IAAiB5f,EAAQ4C,KAAK8L,EAAOrH,EAAO,IAAIwY,OAAOxY,IAEtErH,EAAQ2G,SAASiX,GAAK,IAAI8B,EAAOvB,OAAOA,EAAO/W,SAAS,OAAOsW,OACjE,CAKN,CACF,CACF,CAEA,GADAre,GAASsJ,EAAAA,EAAAA,MACI,cAAT9H,IAAyBb,EAAQ8f,YACnC,OAAOze,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BqC,qBAAsB1B,GACrBV,GAGL,MAAMuC,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAC1BqH,GAAeC,EAAAA,EAAAA,IAAmBzH,EAAQG,EAAQC,GAClDsgB,EAAoBlZ,GAAe+M,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQqH,QAAgBjH,EAErFogB,EAAkBne,EAAKE,SACzBke,EAAAA,EAAAA,IAAyB5gB,EAAQG,EAAQC,GACzCsgB,GAAmBG,qBAAuBH,GAAmBjD,iBAE3DqD,EAAS,IACVngB,EACH6B,OACAue,WAAYvZ,EACZmZ,kBACAK,WAAWC,EAAAA,EAAAA,IAAgBjhB,EAAQG,EAAQC,GAC3C8gB,QAAQC,EAAAA,EAAAA,IAAWnhB,EAAQA,EAAOgY,gBAGpCtX,EAAQ4H,gBAAgB,CAAE3B,eAAWpG,EAAWN,UAChDS,EAAQ0gB,oBAAoB,CAAEnhB,UAE9B,MAAMohB,GAAY1gB,EAAQsd,aAAetd,EAAQsd,YAAYjW,QAAU,EACjEsZ,GAAaD,GAAY1gB,EAAQ4gB,oBAEvC,GAAIF,EAAU,CACZ,MAAM,YAAEpD,KAAgBuD,GAAeV,EACvCW,GAAYzhB,EAAQ,IACfwhB,EACHhD,WAAYP,EAAcA,EAAY,QAAK1d,GAC1CN,EACL,MAAO,GAAIqhB,EAAW,CACpB,MAAM,KACJ/d,EAAI,SAAE+D,EAAQ,YAAE2W,KAAgByD,GAC9BZ,EACEa,EAo2CV,SAAgC1D,GAC9B,OAAOA,EAAYxY,QAAO,CAACC,EAAK8Y,EAAYoD,EAAOC,IACnC,IAAVD,GACFlc,EAAIG,KAAK,CAAC2Y,IACH9Y,IAGIoc,GAAkBtD,KACVsD,GAAkBD,EAAID,EAAQ,IAEjDlc,EAAIA,EAAIsC,OAAS,GAAGnC,KAAK2Y,GAEzB9Y,EAAIG,KAAK,CAAC2Y,IAGL9Y,IACN,GACL,CAr3CmBqc,CAAuB9D,GAEtC0D,EAAOlW,SAAQ,CAACuW,EAAOC,KACrB,MAAMC,GAAqBC,EAAAA,EAAAA,IAAMH,EAA0BI,EAAAA,KAC3D,IAAK,IAAI7D,EAAI,EAAGA,EAAI2D,EAAmBla,OAAQuW,IAAK,CAClD,MAAO8D,KAAoBC,GAAmBJ,EAAmB3D,GAC3DzU,EAAa,GAAE4C,KAAKC,QAAQsV,IAAa1D,IAEzCgE,EAAgB,IAANhE,GAA0B,IAAf0D,EAE3BR,GAAYzhB,EAAQ,IACf0hB,EACHne,KAAMgf,EAAUhf,OAAOhD,EACvB+G,SAAUib,EAAUjb,OAAW/G,EAC/Bie,WAAY6D,EACZvY,UAAWwY,EAAgBta,OAAS,EAAI8B,OAAYvJ,GACnDN,GAEHqiB,EAAgB7W,SAAS+S,IACvBiD,GAAYzhB,EAAQ,IACf0hB,EACHlD,aACA1U,aACC7J,EAAM,GAEb,IAEJ,KAAO,CACL,MAAM,KACJsD,EAAI,SAAE+D,EAAQ,YAAE2W,EAAW,WAAE8C,KAAeW,GAC1CZ,EAEAvd,GACFke,GAAYzhB,EAAQ,IACf0hB,EACHne,OACA+D,WACAyZ,cACC9gB,GAGLge,GAAaxS,SAAS+S,IACpBiD,GAAYzhB,EAAQ,IACf0hB,EACHlD,cACCve,EAAM,GAEb,CAEgB,KAGlBQ,EAAAA,EAAAA,IAAiB,eAAe,CAACT,EAAQU,EAASC,KAChD,MAAM,KAAE4C,EAAI,SAAE+D,EAAQ,MAAErH,GAAQC,EAAAA,EAAAA,OAAsBS,EAChDgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGF,MAAM,OAAExB,EAAM,SAAEC,EAAUoB,KAAMiD,GAAoB9C,EAC9Ca,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAC1B+E,GAAUsd,EAAAA,EAAAA,IAAqBxiB,EAAQG,EAAQC,EAAUqE,GAC1DjC,GAAS0C,KAITgY,EAAAA,EAAAA,IAAQ,cAAe,CAC1B1a,OAAM0C,UAAS3B,OAAM+D,WAAU0Z,WAAWC,EAAAA,EAAAA,IAAgBjhB,EAAQG,EAAQC,KAE5Eyd,EAAAA,GAAAA,gBAAwB4E,KAAK,IAAIC,EAAAA,GAAa,CAC5CC,OAAOzd,EAAQ5D,GACfshB,QAAQpgB,EAAKlB,GACbuhB,QAAQ7iB,EAAOgY,cACfzU,SACCuf,OAAOC,aAEVriB,EAAQsiB,aAAa,CAAErc,eAAWpG,EAAWN,UAAQ,KAGvDQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,OAAER,EAAM,UAAEwG,GAAchG,EACxBuE,GAAUqP,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQwG,GAC5Csc,EAAmB/d,GAAWsW,GAAwB0H,KAAIC,EAAAA,EAAAA,IAAqBje,IACjF+d,IACFG,EAAAA,EAAAA,IAAkBH,GAGpBviB,EAAQsN,UAAU,CAChB,QAAS,iBACT9D,IAAK,CAACvD,GACNxG,UACA,KAGJM,EAAAA,EAAAA,IAAiB,aAAa8Y,MAAOvZ,EAAQU,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,MAAEiH,EAAK,YAAEE,GACvB5G,EACJ,IAAK0G,EACH,OAGF,MAAM,KAAE9D,EAAI,SAAE+D,GAAaD,EACrB7E,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAC1BkjB,GAAOlC,EAAAA,EAAAA,IAAWnhB,EAAQG,GAC5BkjB,IAAQC,EAAAA,EAAAA,IAAcD,KAE1Bhc,EAAMkc,SAAU,EAChBlc,EAAME,YAAcA,EACpBvH,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQC,EAAU,QAASiH,GAC/DrH,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAAEsjB,UAAWhW,KAAK0K,MAAMzL,KAAKC,MAAQ,QAEzEtJ,EAAAA,EAAAA,IAAUrD,SAEWkd,EAAAA,EAAAA,IAAQ,YAAa,CACxC1a,OACAe,OACA+D,WACAoc,cAAcjc,EAAAA,EAAAA,IAAmBzH,EAAQG,EAAQC,GACjDA,UAAUwgB,EAAAA,EAAAA,IAAyB5gB,EAAQG,EAAQC,OAInDiH,EAAMkc,SAAU,GAGlBvjB,GAASsJ,EAAAA,EAAAA,MACTtJ,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQC,EAAU,QAASiH,GAC/DrH,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAAEsjB,UAAWhW,KAAK0K,MAAMzL,KAAKC,MAAQ,QAEzEtJ,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,cAAc,CAACT,EAAQU,EAASC,KAC/C,MAAM,OACJR,EAAM,SAAEC,EAAWmB,EAAAA,GAAc,UAAEoiB,EAAS,YAAEpc,GAC5C5G,EACJ,KAAKijB,EAAAA,EAAAA,IAAY5jB,EAAQG,EAAQC,GAC/B,OAGF,MAAMoC,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAE3BwjB,IACEzG,EAAAA,EAAAA,IAAQ,aAAc1a,GAAMoe,EAAAA,EAAAA,IAAyB5gB,EAAQG,EAAQC,IAG5E,MAAMyjB,EAAiCtc,EAAc,CAAEA,cAAahE,KAAM,SAAOhD,EAIjF,OAHAP,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQC,EAAU,QAASyjB,IACtDL,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAAEsjB,eAAWljB,GAEpC,KAGfE,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,OAAER,EAAM,SAAEC,EAAQ,UAAE4gB,GAAcrgB,EAExC,OAAO+F,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQC,EAAU,YAAa4gB,EAAU,KAG7EvgB,EAAAA,EAAAA,IAAiB,cAAc,CAACT,EAAQU,EAASC,KAC/C,MAAM,UACJgG,EAAS,QAAEmd,EAAO,UAAEC,EAAS,SAAEC,EAAQ,MAAE/jB,GAAQC,EAAAA,EAAAA,OAC/CS,EAEE6B,GAAOsJ,EAAAA,EAAAA,IAAkB9L,EAAQC,GAClCuC,IAIA0a,EAAAA,EAAAA,IAAQ,aAAc,CACzB1a,OAAMmE,YAAWmd,UAASC,YAAWC,YACrC,KAGJvjB,EAAAA,EAAAA,IAAiB,oBAAoB8Y,MAAOvZ,EAAQU,EAASC,KAC3D,MAAM,OAAER,EAAM,SAAEC,GAAaO,EACvB6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EACH,OAGF,MAAMyhB,GAAQrD,EAAAA,EAAAA,IAAyB5gB,EAAQG,EAAQC,SACjD8c,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE1a,OAAMpC,SAAU6jB,IAEpDjkB,GAASsJ,EAAAA,EAAAA,MACTtJ,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQwC,EAAKlB,GAAIC,EAAAA,GAAgB,YAAa,KAC1E8B,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,kBAAkB8Y,MAAOvZ,EAAQU,EAASC,KACzD,MAAM,WAAE6D,EAAU,mBAAE0f,EAAkB,MAAEjkB,GAAQC,EAAAA,EAAAA,OAAsBS,EAChEgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAEF,MAAM,OAAExB,EAAM,SAAEC,GAAauB,EACvBa,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAEhC,UACQ0d,EAAAA,GAAAA,gBACFsG,oBAAoB,IAAIC,EAAAA,GAAa,CACrCC,QAAQ7f,EACRoe,QAAQziB,EACR0iB,QAAQ7iB,EAAOgY,cACfsM,OAAOJ,IACNpB,UACA5F,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE1a,OAAMgC,aAAY0f,uBACnD,MAAM,YAAChc,GAAelI,EAAO4O,MAAM2V,KAAKpkB,GAExC,GAAG+H,GAAeA,EAAY5G,IACzBkD,EAAWkG,SAASxC,EAAY5G,IAAI,CACrC,MAAMmW,GAAInO,EAAAA,EAAAA,OACVjG,EAAAA,EAAAA,IAAU,IACLoU,EACH7I,MAAM,IACD6I,EAAE7I,MACL2V,KAAK,IACA9M,EAAE7I,MAAM2V,KACX,CAACpkB,GAAQ,IACJsX,EAAE7I,MAAM2V,KAAKpkB,GAChB+H,iBAAY3H,MAKtB,CAGF,MAAMikB,GAAYC,EAAAA,EAAAA,IAAgBzkB,EAAQG,EAAQC,GAC9CokB,GAAahgB,EAAWkG,SAAS8Z,IACnC9jB,EAAQsiB,aAAa,CAAErc,eAAWpG,EAAWN,SAEjD,CAAC,MAAOuR,GACN0F,QAAQC,MAAM3F,EAChB,MAIF/Q,EAAAA,EAAAA,IAAiB,2BAA2B,CAACT,EAAQU,EAASC,KAC5D,MAAM,WAAE6D,EAAU,MAAEvE,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5CgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGF,MAAM,OAAExB,GAAWwB,EACba,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,IAE3B+c,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE1a,OAAMgC,eAEhD,MAAMggB,GAAYE,EAAAA,EAAAA,IAAyB1kB,EAAQG,GAC/CqkB,GAAahgB,EAAWkG,SAAS8Z,IACnC9jB,EAAQsiB,aAAa,CAAErc,eAAWpG,EAAWN,SAC/C,KAGFQ,EAAAA,EAAAA,IAAiB,iBAAiB8Y,MAAOvZ,EAAQU,EAASC,KACxD,MAAM,OAAER,EAAM,mBAAE+jB,EAAkB,MAAEjkB,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5D6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EACH,aAGI0a,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE1a,OAAM0hB,uBAEvClkB,GAASsJ,EAAAA,EAAAA,MACT,MAAMqb,GAAatkB,EAAAA,EAAAA,IAAyBL,EAAQC,GAChD0kB,GAAcA,EAAWxkB,SAAWA,GACtCO,EAAQ4C,SAAS,CAAEhC,QAAIf,EAAWN,SACpC,KAGFQ,EAAAA,EAAAA,IAAiB,kBAAkB8Y,MAAOvZ,EAAQU,EAASC,KACzD,MAAM,WACJ6D,EAAU,OAAEogB,EAAM,YAAEC,EAAW,MAAE5kB,GAAQC,EAAAA,EAAAA,OACvCS,EACEgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGF,MAAM,OAAExB,GAAWwB,EACba,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAE1BqF,QAAe0X,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7C4H,KAAMtiB,EAAMgC,aAAYogB,SAAQC,gBAGlCnkB,EAAQ2L,iBAAiB,CACvBnH,QAASM,GACLuf,EAAAA,EAAAA,IAAU,2BACV,2EACJ9kB,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,qBAAqB8Y,MAAOvZ,EAAQU,EAASC,KAC5D,MAAM,OAAEmU,EAAM,OAAE3U,EAAM,SAAEC,GAAaO,EACrC,GAAIR,IAAWH,EAAOgY,cAAe,OAErC,MAAMxV,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EAAM,OACX,MAAM6gB,GAAOlC,EAAAA,EAAAA,IAAWnhB,EAAQG,GAC5BkjB,KAAS2B,EAAAA,EAAAA,IAAU3B,KAASC,EAAAA,EAAAA,IAAcD,WAExCnG,EAAAA,EAAAA,IAAQ,oBAAqB,CACjC4H,KAAMtiB,EAAMpC,WAAU0U,UACtB,KAGJrU,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,MAAE6M,EAAK,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBS,EAEvCgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGF,MAAM,OAAExB,EAAM,SAAEC,GAAauB,EACvBa,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EACH,OAGFkZ,IAAwB,MACjBwB,EAAAA,EAAAA,IAAQ,sBAAuB,CAClC1a,OAAMpC,WAAUoN,SAChB,IAGArN,IAAW8M,EAAAA,MACbjN,EAAS,IACJA,EACH+M,qBAAsB/M,EAAO+M,qBAAqB/H,KAAKsN,GAC9CA,EAAavE,UAAYuE,EAAahR,IAAMkM,EAAQ,IAAK8E,EAAcvE,UAAU,GAAUuE,MAKxG,MAAMzL,GAAcC,EAAAA,EAAAA,IAAkB9G,EAAQG,EAAQC,EAAUH,GAC1DglB,GAAQC,EAAAA,EAAAA,IAAoBllB,EAAQG,EAAQC,EAAUH,GAC5D,IAAK4G,IAAgBoe,IAAUziB,EAAK2iB,YAClC,OAAOnlB,EAGT,MAAMolB,EA0/BR,SAAwBlb,EAAeuV,EAAc4F,GACnD,IAAIC,EAAQ,EAEZ,IAAK,IAAI/G,EAAI,EAAG9K,EAAIvJ,EAAIlC,OAAQuW,EAAI9K,IAC9BvJ,EAAIqU,IAAMkB,GAAQvV,EAAIqU,IAAM8G,GAC9BC,MAGEpb,EAAIqU,IAAM8G,IALuB9G,KAUvC,OAAO+G,CACT,CAxgCoBC,CAAe1e,EAAcoe,EAAOzX,GACtD,IAAK4X,EACH,OAAOplB,EAGT,GAAIwC,EAAKE,SAAWF,EAAKgW,SAASpY,GAAW,CAC3C,MAAMolB,EAAQhjB,EAAKgW,OAAOpY,GAC1BJ,GAASylB,EAAAA,EAAAA,IAAiBzlB,EAAQG,EAAQC,EAAU,CAClDslB,uBAAwBlY,IAE1B,MAAMmY,EAAsBlY,KAAKC,IAAI,EAAG8X,EAAML,YAAcC,GAM5D,OAL4B,IAAxBO,IACF3lB,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAClCglB,YAAa1X,KAAKC,IAAI,EAAGlL,EAAK2iB,YAAc,OAGzCS,EAAAA,EAAAA,IAAY5lB,EAAQG,EAAQC,EAAU,CAC3C+kB,YAAaQ,GAEjB,CAGA,OAAIvlB,IAAamB,EAAAA,IAIViiB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAChCulB,uBAAwBlY,EACxB2X,YAAa1X,KAAKC,IAAI,EAAGlL,EAAK2iB,YAAcC,UAN9C,CAOE,KAGJ3kB,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,WAAE6D,EAAU,MAAEvE,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5C6B,GAAOsJ,EAAAA,EAAAA,IAAkB9L,EAAQC,GAClCuC,IAIA0a,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE1a,OAAMgC,cAAa,KAGxD/D,EAAAA,EAAAA,IAAiB,sBAAsB8Y,MAAOvZ,EAAQU,EAASC,KAC7D,MAAM,KAAE4C,EAAI,MAAEtD,GAAQC,EAAAA,EAAAA,OAAsBS,EAEtCklB,QAAuB3I,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEhY,QAAS3B,IAEvEvD,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B6lB,kBACC5lB,IACHoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,IAAKK,EAAAA,EAAAA,IAAehB,EAAQC,GAAO4lB,eAInC,OAAO7jB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B6lB,oBAAgBtlB,GACfN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gBAAgB,CAACT,EAAQU,EAASC,KACjD,MAAM,OAAER,EAAM,UAAEwG,EAAS,QAAEmf,GAAYnlB,EACjC6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAE5BqC,IACG0a,EAAAA,EAAAA,IAAQ,eAAgB,CAAE1a,OAAMmE,YAAWmf,WAClD,KAGFrlB,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,OAAER,EAAM,UAAEwG,GAAchG,EACxB6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAE5BqC,IACG0a,EAAAA,EAAAA,IAAQ,eAAgB,CAAE1a,OAAMmE,YAAWmf,QAAS,IAC3D,KAGFrlB,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAASC,KAC9C,MAAM,OAAER,EAAM,UAAEwG,GAAchG,EACxB6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAC1B4lB,GAAOxR,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQwG,IAAYQ,QAAQ4e,KAC/DvjB,GAAQujB,IACL7I,EAAAA,EAAAA,IAAQ,YAAa,CAAE1a,OAAMmE,YAAWof,QAC/C,KAGFtlB,EAAAA,EAAAA,IAAiB,yBAAyB8Y,MAAOvZ,EAAQU,EAASC,KAChE,MAAM,KACJ6B,EAAI,UAAEmE,EAAS,OAAEqf,EAAM,OAAE3W,EAAM,MAAEuG,EAAK,kBAAEqQ,EAAiB,MAAEhmB,GAAQC,EAAAA,EAAAA,OACjES,EAEE6E,QAAe0X,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD1a,OAAMmE,YAAWqf,SAAQ3W,SAAQuG,UAGnC,IAAKpQ,EACH,OAGFxF,GAASsJ,EAAAA,EAAAA,MAETtJ,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqB9X,EAAO+X,MAAO,OAE7D,MAAM3b,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,IAClC,YAAEkJ,GAAgBvH,GAClB,OAAEwH,GAAWxH,EAASuH,YAE5BnJ,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BmJ,YAAa,IACRA,EACHC,OAAQ,IACHA,EACH,CAAC4c,IAAS/P,EAAAA,EAAAA,IAAO,KACVgQ,GAAqB7c,GAAUA,EAAO4c,GAAU5c,EAAO4c,GAAU,MAClExgB,GAAUA,EAAO+X,MAAMvY,KAAKqe,GAASA,EAAK/hB,QAGlD4kB,QAAS,IACH/c,EAAY+c,QAAU/c,EAAY+c,QAAU,CAAC,EACjD,CAACF,GAASxgB,EAAO2gB,YAAc,MAGlClmB,IACHoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,OAAER,EAAM,IAAE+J,GAAQvJ,EAClB6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAC5BqC,IACG0a,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE1a,OAAM0H,OAC7C,KAGFzJ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,SAAEqjB,EAAQ,YAAEvD,EAAW,MAAExgB,GAAQC,EAAAA,EAAAA,OAAsBS,GAEvD,WACJkK,EAAU,WAAErG,EAAU,SAAEjC,EAAQ,YAAEuI,EAAW,UAAEI,EAAS,WAAEC,EAAU,WAAEib,IACpEplB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOqC,gBAC5B+jB,GAAuBC,EAAAA,EAAAA,IAA2BtmB,GAClDumB,EAAW1b,GAAapI,EAAAA,EAAAA,IAAWzC,EAAQ6K,QAActK,EACzDimB,EAASjkB,GAAWE,EAAAA,EAAAA,IAAWzC,EAAQuC,QAAYhC,EACnDwE,EAAW8F,GAAcrG,EAC3BA,EACCa,MAAK,CAAC6Y,EAAGuI,IAAMvI,EAAIuI,IACnBzhB,KAAK1D,IAAOiT,EAAAA,EAAAA,IAAkBvU,EAAQ6K,EAAYvJ,KAAK2D,OAAOgC,cAC/D1G,EAEJ,IAAKgmB,IAAaC,IAAWzhB,GAAaqhB,IAAeI,EAAO9jB,QAC9D,OAGF,MAAMwe,GAASwF,EAAAA,EAAAA,IAAa1mB,EAAQuC,GAE9BokB,EAAe5hB,EAASE,QAAQ2hB,KAAOC,EAAAA,EAAAA,IAA6BD,KACtED,EAAa3e,SACVkV,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9BqJ,WACAC,SACAJ,aACArhB,SAAU4hB,EACV3C,WACAvD,cACAS,SACApW,cACAI,YACAC,aACAkb,yBAIJthB,EACGE,QAAQ2hB,IAAMC,EAAAA,EAAAA,IAA6BD,KAC3Cnb,SAASvG,IACR,MAAM,KAAE3B,EAAI,SAAE+D,GAAapC,EAAQiC,QAAQ5D,MAAQ,CAAC,GAC9C,QAAEkO,EAAO,KAAEsU,GAAS7gB,EAAQiC,QAE7Bsa,GAAYzhB,EAAQ,CACvBwC,KAAMgkB,EACN7F,gBAAiByF,EACjB7iB,OACA+D,WACAmK,UACAsU,OACA/B,WACAvD,cACAS,UACCjhB,EAAM,IAGbD,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BsC,gBAAiB,CAAC,GACjBrC,IACHoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,wBAAwB8Y,MAAOvZ,EAAQU,EAASC,KAC/D,MAAM,OAAER,GAAWQ,EACb6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EACH,OAGF,MAAMgD,QAAe0X,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE1a,SACxD,IAAKgD,EACH,OAGF,MAAM,SAAET,GAAaS,EAEf+e,GAAOjH,EAAAA,EAAAA,IAAqBvY,EAAU,MACtCmF,EAAMtC,OAAOC,KAAK0c,GAAMvf,IAAIiD,QAAQ5C,MAAK,CAAC6Y,EAAGuI,IAAMA,EAAIvI,IAK7D,GAHAle,GAASsJ,EAAAA,EAAAA,MACTtJ,GAAS8mB,EAAAA,EAAAA,IAAyB9mB,EAAQwC,EAAKlB,GAAIijB,GACnDvkB,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQwC,EAAKlB,GAAIC,EAAAA,GAAgB,eAAgB2I,GACzE1H,GAAME,QAAS,CACjB,MAAMqkB,EAA+C,CAAC,EACtDhiB,EAAS0G,SAASvG,IAChB,MAAM9E,GAAW4mB,EAAAA,EAAAA,IAA0BhnB,EAAQkF,GAC7C+hB,EAAoBF,EAAmB3mB,IAAa,GAC1D6mB,EAAkBphB,KAAKX,EAAQ5D,IAC/BylB,EAAmB3mB,GAAY6mB,CAAiB,IAGlDrf,OAAOsf,QAAQH,GAAoBtb,SAAQ,EAAErL,EAAU+mB,MACrDnnB,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQwC,EAAKlB,GAAI2G,OAAO7H,GAAW,eAAgB+mB,EAAa,GAEhG,EACA9jB,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,OACJR,EAAM,GAAEmB,GACNX,EAEE6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAE3BqC,IAIA0a,EAAAA,EAAAA,IAAQ,wBAAyB,CACpC1a,OACA0H,IAAK,CAAC5I,IACN,KAGJb,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,OACJR,EAAM,UAAEwG,EAAS,YAAE8Z,GACjB9f,EAEE6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAC1B+E,EAAU1C,IAAQ4kB,EAAAA,EAAAA,IAAuBpnB,EAAQwC,EAAKlB,GAAIqF,GAC3DnE,GAAS0C,IAITgY,EAAAA,EAAAA,IAAQ,oBAAqB,CAChC1a,OACA0C,UACAub,eACA,KAGJhgB,EAAAA,EAAAA,IAAiB,2BAA2B8Y,MAAOvZ,EAAQU,EAASC,KAClE,MAAM,OAAER,EAAM,SAAEC,GAAaO,EACvB6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EACH,OAGF,MAAMgD,QAAe0X,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE1a,OAAMpC,aAC3DoF,IACLxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqB9X,EAAO+X,MAAO,QAC7Dla,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,mBAAmB8Y,MAAOvZ,EAAQU,EAASC,KAC1D,MAAM,UAAEgG,EAAS,OAAExG,GAAWQ,EAExB6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAEhC,IAAKqC,EAAM,OAEXxC,GAASod,EAAAA,EAAAA,IAAkBpd,EAAQG,EAAQwG,EAAW,CACpD0gB,gBAAiB,MAGnBhkB,EAAAA,EAAAA,IAAUrD,GAEV,MAAMwF,QAAe0X,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE1a,OAAMmE,cAExD3G,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASod,EAAAA,EAAAA,IAAkBpd,EAAQG,EAAQwG,EAAW,CACpD0gB,gBAAiB7hB,EACjB8hB,sBAAuB9hB,KAGzBnC,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,oBAAoB8Y,MAAOvZ,EAAQU,EAASC,KAC3D,MAAM,IAAEuJ,EAAG,YAAEqd,GAAgB5mB,EACvB6mB,EAAoBD,EAAcrd,GACpC+L,EAAAA,EAAAA,IAAO/L,EAAIjF,QAAQ8M,IAAgB/R,EAAOqS,aAAakS,KAAKxS,MAC1D0V,QAAoBvK,EAAAA,EAAAA,IAAQ,mBAAoB,CACpDnL,WAAYyV,IAETC,IAELznB,GAASsJ,EAAAA,EAAAA,MACTtJ,EAAS,IACJA,EACHqS,aAAc,IACTrS,EAAOqS,aACVkS,KAAM,IACDvkB,EAAOqS,aAAakS,SACpBjH,EAAAA,EAAAA,IAAqBmK,EAAa,UAI3CpkB,EAAAA,EAAAA,IAAUrD,GAAO,IAGnB,MAAM0nB,GAAoD,CAAC,EAC3DnO,eAAe3O,GACb5K,EACAwC,EACApC,EACA+b,EACAxR,EACAyR,GAAa,EACbP,GAAkB,MACd5b,GAAQC,EAAAA,EAAAA,QAEZ,MAAMC,EAASqC,EAAKlB,GACpB,IAAIqmB,EACJ,OAAQhd,GACN,KAAKiR,EAAAA,GAAAA,UACH+L,OAAYpnB,EACZ,MACF,KAAKqb,EAAAA,GAAAA,OACH+L,IAAcla,KAAK0K,MAAM4E,EAAAA,IAAqB,GAAK,GACnD,MACF,KAAKnB,EAAAA,GAAAA,SACH+L,IAAc5K,EAAAA,IAAqB,GAKvC,IAAI6K,GAAO,GADX5nB,GAASsJ,EAAAA,EAAAA,OAEEvE,SAASuG,SAASnL,IAAaH,EAAO+E,SAASuG,SAASnL,GAAQ0nB,aAAqFtnB,MAAtEP,EAAO+E,SAASuG,SAASnL,GAAQ0nB,aAAY,GAAMC,kBAC3I9nB,GAAS0c,EAAAA,EAAAA,IAAuB1c,EAAQG,EAAQC,EAAU,GAAIH,GAC9D2nB,GAAO,GAEL5nB,EAAO+E,SAASuG,SAASnL,IAAaH,EAAO+E,SAASuG,SAASnL,GAAQ0nB,aAA+EtnB,MAAhEP,EAAO+E,SAASuG,SAASnL,GAAQ0nB,aAAY,GAAM9L,YAC3I/b,GAAS+nB,EAAAA,EAAAA,IAAgB/nB,EAAQG,EAAQC,EAAU,IACnDwnB,GAAO,GAGNA,IACDvkB,EAAAA,EAAAA,IAAUrD,GAEZ,MAAMqI,EAAgB7F,GAAM0F,YAAc1F,GAAM0F,YAAY5G,GAAK,EAC3D0mB,GAAYljB,EAAAA,EAAAA,IAAmB9E,EAAOwC,EAAMlB,IAElD,IAAI2mB,GAAO,EACPC,GAAalM,EAAAA,EAAAA,IAAgBhc,EAAQG,EAAQC,GACjD,MAAM+nB,EAAe,GAUrB,IAAI3iB,EATJ0iB,GAAYzc,SAASnK,KACf8mB,EAAAA,EAAAA,IAAiB9mB,IACnB6mB,EAAKtiB,KAAKvE,EACZ,KAGE6mB,EAAKngB,OAAS,GAAKmgB,EAAKA,EAAKngB,OAAS,GAAKK,GAAoD,IAAlCT,OAAOC,KAAKmgB,GAAWhgB,UACtFigB,GAAO,GAGT,IACE,GAAGP,GAA0BllB,EAAKlB,IAChC,OAEF4V,QAAQmR,IAAI,eAAe,CAACloB,OAAOqC,EAAKlB,GAAG+G,gBAAc4f,SACzDP,GAA0BllB,EAAKlB,KAAM,EACrC,MAAMgnB,QAAYzK,EAAAA,GAAAA,gBAAwBsG,oBAAoB,IAAIoE,EAAAA,GAAW,CAC3ElgB,gBACAlI,OAAOqC,EAAKlB,GACZsU,MAAOmH,EAAAA,IACPkL,SACCnF,SACH,IAAIwF,EACF,OAEF,MAAM5I,EAAM8I,EAAAA,GAAAA,SAAoBF,GAChC,GAAG5I,EAAIxL,MAAQuU,EAAAA,GAAAA,SACb,OAEFjjB,EAASoU,KAAKa,MAAMiF,EAAK/e,QAC3B,CAAC,MAAO6Q,GAER,CAYA,GAXAnI,YAAW,YAAYqe,GAA0BllB,EAAKlB,GAAG,GAAE,MAWtDkE,EACH,OAGF,IAAI,SACFT,EAAQ,MAAEwY,EAAK,MAAE3O,EAAK,mBAAE8Z,GACtBljB,EAEDT,EAASiD,OAAS,GAAKK,EAAgBtD,EAASA,EAASiD,OAAS,GAAG1G,KACtEkB,EAAK0F,YAAcnD,EAASA,EAASiD,OAAS,GAC1C4G,IACFA,EAAQ,IAEVA,EAAM/I,KAAKrD,IAGb0U,QAAQmR,IAAI,eAAetjB,EAASwY,GACpCvd,GAASsJ,EAAAA,EAAAA,MAET,MAAMqf,EAAgBxoB,IAAW8M,EAAAA,IAC7BjN,EAAO+M,qBAAqB9H,QAAO,EAAG2jB,gBAAiBA,IAAW5jB,KAAI,EAAGE,aAAcA,IACvF,GACE2jB,EAAe,GAAoBC,OAAO/jB,EAAU4jB,GACpDpE,GAAOjH,EAAAA,EAAAA,IAAqBuL,EAAa,MACzC3e,EAAMtC,OAAOC,KAAK0c,GAAMvf,IAAIiD,QAElCjI,GAAS+oB,EAAAA,EAAAA,IAAoB/oB,EAAQG,EAAQokB,GAC7CvkB,EAASoc,GACL4M,EAAAA,EAAAA,IAAkBhpB,EAAQG,EAAQC,EAAU8J,EAAKjK,IACjD8nB,EAAAA,EAAAA,IAAgB/nB,EAAQG,EAAQC,EAAU8J,GAE9ClK,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqBC,EAAO,OACtDvd,GAASipB,EAAAA,EAAAA,IAASjpB,GAAQsd,EAAAA,EAAAA,IAAqB1O,EAAO,OACtD5O,GAASkpB,EAAAA,EAAAA,IAAkBlpB,EAAQG,EAAQuoB,GAE3C,IAAI3M,GAAYC,EAAAA,EAAAA,IAAgBhc,EAAQG,EAAQC,GAChD,MAAM6b,GAAcC,EAAAA,EAAAA,IAAkBlc,EAAQG,EAAQC,EAAUH,GAWhE,GATImc,GAAcL,GAAaE,IACxBA,EAAYjU,UAAUmhB,EAAAA,EAAAA,IAA4BpN,EAAWE,KAChEjc,GAAS+nB,EAAAA,EAAAA,IAAgB/nB,EAAQG,EAAQC,EAAU6b,GACnDF,GAAYC,EAAAA,EAAAA,IAAgBhc,EAAQG,EAAQC,GAC5CJ,GAASiC,EAAAA,EAAAA,IAAsBjC,EAAQG,EAAQC,EAAU,mBAAeG,EAAWN,GACnFmc,GAAa,KAIZP,EAAiB,CACpB,MAAMQ,EAAaD,EAAaH,EAAeF,GACzC,eAAEO,GAAmBG,GAAiBJ,EAAYF,EAAUxR,GAClE3K,GAAS0c,EAAAA,EAAAA,IAAuB1c,EAAQG,EAAQC,EAAUkc,EAAiBrc,EAC7E,EAEAoD,EAAAA,EAAAA,IAAUrD,EACZ,CA+CA,SAASyc,GACP2M,EACAjN,EACAxR,GAEA,MAAM,OAAE3C,GAAWohB,EACbxH,EAAQzF,EArBhB,SAA0BiN,EAAqBjN,GAC7C,OAAIA,EAAWiN,EAAU,GAChB,EAGLjN,EAAWiN,EAAUA,EAAUphB,OAAS,GACnCohB,EAAUphB,OAAS,EAGrBohB,EAAUxW,WAAU,CAACtR,EAAIid,IAC9Bjd,IAAO6a,GACH7a,EAAK6a,GAAYiN,EAAU7K,EAAI,GAAKpC,GAE5C,CAQ2BkN,CAAiBD,EAAWjN,IAAa,EAE5DmN,EADc3e,IAAciR,EAAAA,GAAAA,UACMgG,EAASA,EAAQ,GAAM5Z,EACzDyX,EAAO6J,EAAoBvM,EAAAA,IAC3BsI,EAAKiE,EAAoBvM,EAAAA,IAAqB,EAC9CT,EAAiB8M,EAAUtc,MAAMW,KAAKC,IAAI,EAAG+R,GAAO4F,EAAK,GAE/D,IAAI9I,EACAC,EACJ,OAAQ7R,GACN,KAAKiR,EAAAA,GAAAA,UACHW,EAAe+M,EAAoB,EACnC9M,EAAciD,GAAQ,EACtB,MACF,KAAK7D,EAAAA,GAAAA,SACHW,EAAe+M,EAAoBthB,EACnCwU,EAAc6I,GAAMrd,EAAS,EAC7B,MACF,KAAK4T,EAAAA,GAAAA,OACL,QACEW,EAAeD,EAAetU,OAAS,EACvCwU,EAAcF,EAAetU,SAAW+U,EAAAA,IAI5C,MAAO,CAAET,iBAAgBC,eAAcC,cACzC,CAEAjD,eAAekI,GAAmCzhB,EAAW8gB,MAezD7gB,GAAQC,EAAAA,EAAAA,QACV,IAAIqS,EACJ,MAAM0Q,EAAmBnC,EAAOtC,WAAajF,MAAOgQ,EAAkBC,KACpE,MAAMC,EAAiBD,EAAaloB,GAkBpC,GAjBKka,GAAwBkO,IAAID,KAC/BlX,EAAUkX,EACVjO,GAAwBmO,IAAIF,EAAgBxG,IAG9CjjB,GAASsJ,EAAAA,EAAAA,MAETtJ,EAAS,IACJA,EACH4pB,YAAa,CACXC,iBAAkB,IACb7pB,EAAO4pB,YAAYC,iBACtB,CAACJ,GAAiB,CAAEF,gBAI1BlmB,EAAAA,EAAAA,IAAUrD,GACM,IAAbupB,EACD,UACQ1L,EAAAA,GAAAA,gBACFsG,oBAAoB,IAAI2F,EAAAA,GAAQ,CAChCnpB,QAAQiZ,KAAKC,UAAU,CACrBkQ,IAAIP,MAEL1G,QACP,CAAC,MAAO3L,GACND,QAAQC,MAAM,kBACd0G,EAAAA,GAAAA,gBAAwBmM,OAAO,CAC7B,CACElV,OAAQmV,EAAAA,GAAAA,eACRtpB,QAAS,CACPR,OAAQqpB,EAAarpB,OACrBoS,QAASiX,EAAaloB,GACtB6V,MAAO,oBAIf,CACF,EAEEoC,MAAOgQ,EAAkBC,KAC3B,UACQ3L,EAAAA,GAAAA,gBACFsG,oBAAoB,IAAI2F,EAAAA,GAAQ,CAChCnpB,QAAQiZ,KAAKC,UAAU,CACrBkQ,IAAIP,MAEL1G,QACP,CAAC,MAAO3L,GACND,QAAQC,MAAM,kBACd0G,EAAAA,GAAAA,gBAAwBmM,OAAO,CAC7B,CACElV,OAAQmV,EAAAA,GAAAA,eACRtpB,QAAS,CACPR,OAAQqpB,EAAarpB,OACrBoS,QAASiX,EAAaloB,GACtB6V,MAAO,oBAIf,IAIE2J,EAAOC,YAAcmJ,EAAAA,WACjBC,EAAAA,EAAAA,MAGRnqB,GAASsJ,EAAAA,EAAAA,MAET,MAAM3H,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAEF,MAAM,SAAEvB,GAAauB,EAEhBmf,EAAOC,YAAc3gB,IAAamB,EAAAA,KACrCuf,EAAOC,YAAaH,EAAAA,EAAAA,IAAyB5gB,EAAQ8gB,EAAOte,KAAKlB,GAAIlB,IAGnE0gB,EAAOC,aAAeD,EAAOH,iBAAmBvgB,IAAamB,EAAAA,KAC/Duf,EAAOH,iBAAkBC,EAAAA,EAAAA,IAAyB5gB,EAAQ8gB,EAAOte,KAAKlB,GAAIlB,UAEtE8c,EAAAA,EAAAA,IAAQ,cAAe4D,EAAQmC,GACjCA,GAAoB1Q,GACtBiJ,GAAwB4O,OAAO7X,EAEnC,CAkYA,SAASuP,GAAkBtD,GACzB,MAAM,iBACJ6L,EAAgB,SAAE3L,GAChBF,EACJ,OAAI6L,EAAyB,OACzBC,EAAAA,IAAAA,IAAkC5L,IAAa6L,EAAAA,IAAAA,IAAkC7L,GAAkB,QACnG8L,EAAAA,IAAAA,IAAkC9L,GAAkB,QACpDF,EAAWiM,MAAc,QACtB,MACT,EAzYAhqB,EAAAA,EAAAA,IAAiB,sBAAsB8Y,MAAOvZ,EAAQU,EAASC,KAC7D,MAAM,OAAER,EAAM,SAAEC,GAAaO,EACvB6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EACH,OAGF,MAAMgD,QAAe0X,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE1a,OAAMpC,aAC5D,IAAKoF,EACH,OAGF,MAAM,SAAET,EAAQ,MAAE6J,EAAK,MAAE2O,GAAU/X,EAE7B+e,GAAOjH,EAAAA,EAAAA,IAAqBvY,EAAU,MACtCmF,EAAMtC,OAAOC,KAAK0c,GAAMvf,IAAIiD,QAAQ5C,MAAK,CAAC6Y,EAAGuI,IAAMA,EAAIvI,IAE7Dle,GAASsJ,EAAAA,EAAAA,MACTtJ,GAAS+oB,EAAAA,EAAAA,IAAoB/oB,EAAQwC,EAAKlB,GAAIijB,GAC9CvkB,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQwC,EAAKlB,GAAIlB,EAAU,YAAa8J,GACpElK,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqBC,EAAO,OACtDvd,GAASipB,EAAAA,EAAAA,IAASjpB,GAAQsd,EAAAA,EAAAA,IAAqB1O,EAAO,QACtDvL,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,cAAc8Y,MAAOvZ,EAAQU,EAASC,KACrD,MAAM,OAAER,EAAM,UAAEwG,GAAchG,EACxB6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EACH,OAGF,MAAMgD,QAAe0X,EAAAA,EAAAA,IAAQ,cAAe,CAAE1a,OAAMmE,cAC/CnB,IAILxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASod,EAAAA,EAAAA,IAAkBpd,EAAQG,EAAQwG,EAAW,CACpD+jB,cAAellB,KAEjBnC,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,OAAER,EAAM,SAAEwqB,GAAahqB,EACvB6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAC1ByqB,GAAanoB,EAAAA,EAAAA,IAAWzC,EAAQ2qB,KAAaxJ,EAAAA,EAAAA,IAAWnhB,EAAQ2qB,GACtE,GAAKnoB,GAASooB,EAMd,OAFK1N,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEgE,OAAQ0J,EAAYpoB,UAEjDghB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAChC0qB,SAAU,IACLroB,EAAKqoB,SACRF,aAEF,KAGJlqB,EAAAA,EAAAA,IAAiB,cAAc8Y,MAAOvZ,EAAQU,EAASC,KACrD,MAAM,OAAER,GAAWQ,EACb6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EACH,OAGF,MAAMgD,QAAe0X,EAAAA,EAAAA,IAAQ,cAAe,CAAE1a,SAC9C,IAAKgD,EAOH,OANAxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAClC2qB,cAAe,UAEjBznB,EAAAA,EAAAA,IAAUrD,GAKZA,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqB9X,EAAO+X,MAAO,OAC7Dvd,GAASipB,EAAAA,EAAAA,IAASjpB,GAAQsd,EAAAA,EAAAA,IAAqB9X,EAAOoJ,MAAO,OAC7D5O,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAAE2qB,cAAetlB,EAAO0b,UAC5D7d,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,yBAAyB8Y,MAAOvZ,EAAQU,EAASC,KAChE,MAAM,OAAER,GAAWQ,EACb6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EACH,OAGF,MAAMgD,QAAe0X,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE1a,SACpDgD,IAILxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAAS+qB,EAAAA,EAAAA,IAAuB/qB,EAAQG,EAAQqF,EAAOT,SAAS,IAChE/E,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqB9X,EAAO+X,MAAO,OAC7Dvd,GAASipB,EAAAA,EAAAA,IAASjpB,GAAQsd,EAAAA,EAAAA,IAAqB9X,EAAOoJ,MAAO,QAC7DvL,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,OAAER,GAAWQ,EACb6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAC1B+E,GAAU8lB,EAAAA,EAAAA,IAAuBhrB,EAAQG,GAC1CqC,GAAS0C,IAITgY,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE1a,OAAMyoB,OAAQ/lB,EAAQgmB,UAAW,KAG1EzqB,EAAAA,EAAAA,IAAiB,uBAAuB8Y,MAAOvZ,EAAQU,EAASC,KAC9D,MAAM,OAAER,EAAM,SAAEgc,GAAaxb,EACvB6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EAAM,OAEX,MAAMgD,QAAe0X,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE1a,OAAM2Z,aAE5D,IAAK3W,EAAQ,OAEb,MAAM,SAAET,EAAQ,MAAE6J,EAAK,MAAE2O,GAAU/X,EAE7B+e,GAAOjH,EAAAA,EAAAA,IAAqBvY,EAAU,MACtCmF,EAAMtC,OAAOC,KAAK0c,GAAMvf,IAAIiD,QAElCjI,GAASsJ,EAAAA,EAAAA,MACTtJ,GAAS+oB,EAAAA,EAAAA,IAAoB/oB,EAAQwC,EAAKlB,GAAIijB,GAC9CvkB,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqBC,EAAO,OACtDvd,GAASipB,EAAAA,EAAAA,IAASjpB,GAAQsd,EAAAA,EAAAA,IAAqB1O,EAAO,OACtD5O,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAClCgrB,eAAgB,IAAK3oB,EAAK2oB,gBAAkB,MAAQjhB,MAGtD7G,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,WAAE6D,EAAU,MAAEvE,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5C6B,GAAOsJ,EAAAA,EAAAA,IAAkB9L,EAAQC,GACvC,IAAKuC,EAAM,OAEX,MAAM2oB,GAAkB3oB,EAAK2oB,gBAAkB,IAAIlmB,QAAQ3D,IAAQkD,EAAWkG,SAASpJ,KACvFtB,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQwC,EAAKlB,GAAI,CACnC6pB,oBAGF9nB,EAAAA,EAAAA,IAAUrD,GAEVU,EAAQ0qB,iBAAiB,CAAE5mB,aAAYvE,SAAQ,KAGjDQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAE5C6B,GAAOsJ,EAAAA,EAAAA,IAAkB9L,EAAQC,GAElCuC,GAAM2oB,gBAEXzqB,EAAQ6H,aAAa,CAAEpI,OAAQqC,EAAKlB,GAAIqF,UAAWnE,EAAK2oB,eAAe,GAAIlrB,SAAQ,KAGrFQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAE5C6B,GAAOsJ,EAAAA,EAAAA,IAAkB9L,EAAQC,GACvC,GAAKuC,EAIL,OAFA0a,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE1a,UAEtBghB,EAAAA,EAAAA,IAAWxjB,EAAQwC,EAAKlB,GAAI,CACjC+pB,yBAAqB9qB,EACrB4qB,oBAAgB5qB,GAChB,KAGJE,EAAAA,EAAAA,IAAiB,WAAW,CAACT,EAAQU,EAASC,KAC5C,MAAM,IAAEwT,EAAG,gBAAEmX,EAAe,MAAErrB,GAAQC,EAAAA,EAAAA,OAAsBS,EACtD4qB,GAAkBC,EAAAA,EAAAA,GAAerX,GAEvC,GAAIoX,EAAgBE,MAAMC,EAAAA,MAAgBH,EAAgBE,MAAME,EAAAA,KAE9D,YADAjrB,EAAQkrB,iBAAiB,CAAEzX,MAAKlU,UAIlC,MAAM,UAAE4rB,GAAc7rB,EACtB,GAAI6rB,EAAW,CACb,MAAMC,EAAY,IAAI/L,IAAIwL,GAE1B,GAAIM,EAAUE,iBAAiBrhB,SAASohB,EAAUE,UAGhD,OAFAF,EAAUG,aAAatC,IA96CD,kBA86C0BkC,EAAUK,qBAC1DlpB,OAAOC,KAAK6oB,EAAU3b,KAAM,SAAU,YAIxC,GAAI0b,EAAUM,eAAezhB,SAASohB,EAAUE,UAE9C,YADAtrB,EAAQ0rB,mBAAmB,CAAEjY,MAAKlU,SAGtC,CAE4BsrB,EAAgBE,MAAMY,EAAAA,MAAsBf,EAKtEtoB,OAAOC,KAAKsoB,EAAiB,SAAU,YAFvC7qB,EAAQ4rB,oBAAoB,CAAEnY,IAAKoX,EAAiBtrB,SAGtD,KAGFQ,EAAAA,EAAAA,IAAiB,yBAAyB8Y,MAAOvZ,EAAQU,EAASC,KAChE,MAAM,OAAER,EAAM,QAAEiW,EAAO,MAAEnW,GAAQC,EAAAA,EAAAA,OAAsBS,EACvD,IAAI0iB,GAAOlC,EAAAA,EAAAA,IAAWnhB,EAAQG,GAC9B,GAAIkjB,IAAQkJ,EAAAA,EAAAA,IAAmCvsB,EAAQC,GAAQ,CAC7D,IAAKojB,EAAKwH,SAAU,CAClB,MAAM,WAAE2B,GAAenJ,EACvBA,QAAanG,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE5b,GAAInB,EAAQqsB,eACpDxsB,GAASsJ,EAAAA,EAAAA,KACX,CAEA,GAAI+Z,GAAMwH,SAAU4B,gBAOlB,YANA/rB,EAAQgsB,WAAW,CACjB9Y,KAAM,CACJ1O,SAAS6f,EAAAA,EAAAA,IAAU,oCAAoC4H,EAAAA,EAAAA,IAAgBtJ,KAEzEpjB,SAIN,EAEK2sB,EAAAA,EAAAA,IAA8B5sB,EAAQG,EAAQF,IAKnDD,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BsC,gBAAiB,KACZtB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOqC,gBACjCC,SAAUpC,EACVimB,WAAYhQ,EACZnL,cAAc,IAEfhL,IACHoD,EAAAA,EAAAA,IAAUrD,GAEVU,EAAQ4C,SAAS,CAAEhC,GAAInB,EAAQC,SAAUgW,EAASnW,UAClDS,EAAQmsB,iBAAiB,CAAE5sB,UAC3BS,EAAQyB,sBAAsB,CAAElC,WAhB9BS,EAAQosB,oCAAoC,CAAE3sB,SAAQF,SAgBhB,KAG1CQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClDX,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BsC,gBAAiB,KACZtB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOqC,gBACjCC,SAAUvC,EAAOgY,gBAElB/X,IACHoD,EAAAA,EAAAA,IAAUrD,GAEVU,EAAQyB,sBAAsB,CAAElC,UAChCS,EAAQ4B,gBAAgB,CAAE0hB,UAAU,EAAM/jB,SAAQ,KAGpDQ,EAAAA,EAAAA,IAAiB,6BAA6B,CAACT,EAAQU,EAASC,KAC9D,MAAM,OACJR,EAAM,GAAEmB,EAAE,eAAEyrB,GAAiBC,EAAAA,EAAAA,IAAmBhtB,GAAO,MAAEC,GAAQC,EAAAA,EAAAA,OAC/DS,EAIJ,OAFSssB,EAAAA,EAAAA,IAAkCjtB,EAAQG,EAAQmB,EAAIyrB,EAAgB9sB,EAElE,KAGfQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,OACJR,EAAM,GAAEmB,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAClBS,EAIJ,OAFSusB,EAAAA,EAAAA,IAAkCltB,EAAQG,EAAQmB,EAAIrB,EAElD,KAGfQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,OACJR,EAAM,WAAEqE,EAAU,eAAEuoB,GAAiBC,EAAAA,EAAAA,IAAmBhtB,IACtDW,EAEE6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,GAAKqC,EAcL,OAZAgC,EAAWiH,SAASnK,IAClBtB,GAASmtB,EAAAA,EAAAA,IAAyBntB,EAAQG,EAAQmB,EAAIyrB,EAAgB,CACpEK,WAAW,GACX,KAGJlQ,EAAAA,EAAAA,IAAQ,gBAAiB,CACvB1a,OACAgC,aACAuoB,mBAGK/sB,CAAM,KAGfS,EAAAA,EAAAA,IAAiB,oBAAoB8Y,MAAOvZ,EAAQU,EAASC,KAC3D,MAAM,OAAER,EAAM,IAAE+J,GAAQvJ,EAElB6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EAAM,OAEX,MAAMgD,QAAe0X,EAAAA,EAAAA,IAAQ,oBAAqB,CAChD1a,OACA0H,QAGG1E,IAELxF,GAASsJ,EAAAA,EAAAA,MACT9D,EAAOiG,SAAS4hB,IACdrtB,GAASod,EAAAA,EAAAA,IAAkBpd,EAAQG,EAAQktB,EAAO/rB,GAAI,CACpDgsB,MAAOD,EAAOC,MACdC,SAAUF,EAAOE,WAGnB,MAAMroB,GAAUqP,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQktB,EAAO/rB,IACzD,IAAK4D,EAAS,OAEd,MAAMsoB,EAAgBtoB,EAAQuoB,mBAAmBttB,OAC3CC,EAAW8E,EAAQuoB,mBAAmBrtB,SACvCotB,GAAkBptB,IAEvBJ,GAASylB,EAAAA,EAAAA,IAAiBzlB,EAAQwtB,EAAeptB,EAAU,CACzDstB,cAAeL,EAAOK,gBACtB,KAGJrqB,EAAAA,EAAAA,IAAUrD,GAAO,I,2BC3oDnB,MAGM2tB,IAAkBC,EAAAA,EAAAA,KAAUjS,GAAOA,KAAM,KAAK,GAkfpDpC,eAAesU,GAA0C7tB,EAAW4R,GAClE,MAAMkc,QAAuB5Q,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEtL,SACzDkc,IAIL9tB,GAASsJ,EAAAA,EAAAA,MAETtJ,EAAS,IACJA,EACH2R,SAAU,IACL3R,EAAO2R,SACVD,OAAQoc,KAGZzqB,EAAAA,EAAAA,IAAUrD,GACZ,CAEAuZ,eAAewU,GACb/tB,EACAU,EACAstB,MACI/tB,GAAQC,EAAAA,EAAAA,QAEZ,IAAI+tB,EACJ,IACEA,QAAmB/Q,EAAAA,EAAAA,IACjB,gBACA,CAAE8Q,kBAEN,CAAE,MAAO7W,GACP,GAAoC,uBAA/BA,EAAmBjS,QAatB,OAZAxE,EAAQ2L,iBAAiB,CACvBnH,SAAS6f,EAAAA,EAAAA,IAAU,6BACnB9kB,eAGE,cAAe+tB,IACdhtB,EAAAA,EAAAA,IAAehB,EAAQC,GAAO6V,4BAA8BkY,EAAeE,YAC9EluB,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B8V,+BAA2BvV,GAC1BN,IACHoD,EAAAA,EAAAA,IAAUrD,IAIhB,CAGA,GAFAA,GAASsJ,EAAAA,EAAAA,OAEJ2kB,EAEH,OAGF,MAAM,IAAEtE,EAAG,SAAEhY,EAAQ,MAAEwc,GAAUF,EAI3BG,GAFNpuB,GAASquB,EAAAA,EAAAA,IAAiBruB,EAAQ2pB,EAAIroB,GAAI,IAAKqoB,EAAKhY,WAAUwc,WAElCxc,SAAS2c,SAASvoB,MAC1CqoB,GAAgBD,EAAMC,KACxBpuB,GAASuuB,EAAAA,EAAAA,IAAwBvuB,KAGnCqD,EAAAA,EAAAA,IAAUrD,EACZ,CAkLAuZ,eAAeiV,GAAkCxuB,EAAWY,EAAe6tB,EAAsBpf,MAC3FpP,GAAQC,EAAAA,EAAAA,QACZ,MAAMsF,QAAe0X,EAAAA,EAAAA,IAAQ,aAAc,CAAEtc,QAAOyO,SAAQqf,SAAUD,IACjEjpB,IAILxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAAS2uB,EAAAA,EAAAA,IAAgB3uB,GAASqP,EAAQ7J,EAAOopB,KAAMppB,EAAO2gB,WAAYlmB,IAC1EoD,EAAAA,EAAAA,IAAUrD,GACZ,EA5uBAS,EAAAA,EAAAA,IAAiB,mBAAmB8Y,MAAOvZ,EAAQU,KACjD,MAAOmuB,EAAeC,SAA2BC,QAAQC,IAAI,EAC3D9R,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEtL,KAAM5R,EAAO2R,SAASQ,MAAMP,QAC1DsL,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEtL,KAAM5R,EAAOqS,aAAaF,MAAMP,SAE/Dkd,GAAsBD,IAI3B7uB,GAASsJ,EAAAA,EAAAA,MAETtJ,GAASivB,EAAAA,EAAAA,IACPjvB,EACA,QACA6uB,EAAcjd,KACdid,EAAcK,MAGhBlvB,GAASmvB,EAAAA,EAAAA,IACPnvB,EACA8uB,EAAkBld,KAClBkd,EAAkBI,OAGpB7rB,EAAAA,EAAAA,IAAUrD,GAEVU,EAAQ0uB,iBAAiB,CACvBllB,IAAKlK,EAAOgS,qBACZ,KAGJvR,EAAAA,EAAAA,IAAiB,qBAAqB8Y,MAAOvZ,EAAQU,EAASC,KAC5D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAEhDwR,OACEC,OAAQid,EAAc,IAExBC,SAAUC,GACRvvB,EAAO2R,UAETQ,OACEC,OAAQod,EAAoB,KAE5BxvB,EAAOqS,aACLod,EAAe,IAAIJ,KAAgBG,GACzC,GAAKC,EAAaznB,OAIlB,IAAK,IAAIuW,EAAI,EAAGA,EAAIkR,EAAaznB,OAAQuW,IAAK,CAC5C,MAAMjd,EAAKmuB,EAAalR,GACpBgR,EAAOjuB,IAAKqQ,WAGhBjR,EAAQqtB,aAAa,CACnBC,eAAgB,CAAE1sB,KAAIkrB,WAAY+C,EAAOjuB,GAAIkrB,YAC7CvsB,UAGEse,EA/D0B,IA+DQ,GAAKA,EAAI,SACvCmR,EAAAA,EAAAA,IAjEgB,KAmE1B,MAGFjvB,EAAAA,EAAAA,IAAiB,sBAAuBT,IACtC,MAAM,KAAE4R,GAAS5R,EAAO2R,SAASD,QAAU,CAAC,EACvCmc,GAAmB7tB,EAAQ4R,EAAK,KAGvCnR,EAAAA,EAAAA,IAAiB,wBAAwB8Y,UACvC,MAAM,KAAE3H,GAAS5R,EAAO2R,SAASge,UAAY,CAAC,EAExCC,QAAyB1S,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEtL,SAC7Dge,IAIL5vB,GAASsJ,EAAAA,EAAAA,MAETtJ,EAAS,IACJA,EACH2R,SAAU,IACL3R,EAAO2R,SACVge,SAAUC,KAGdvsB,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,uBAAuB8Y,UACtC,MAAM,KAAE3H,GAAS5R,EAAO2R,SAASke,SAAW,CAAC,EAEvCrqB,QAAe0X,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEnX,MAAO,OAAQ6L,SAClEpM,IAILxF,GAASsJ,EAAAA,EAAAA,MAETtJ,EAAS,IACJA,EACH2R,SAAU,IACL3R,EAAO2R,SACVke,QAAS,CACPje,KAAMpM,EAAOoM,KACbD,SAAUnM,EAAOmM,aAIvBtO,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,0BAA0B8Y,UACzC,MAAM,KAAE3H,GAAS5R,EAAO2R,SAASke,SAAW,CAAC,EAEvCrqB,QAAe0X,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEnX,MAAO,OAAQ6L,SAClEpM,IAILxF,GAASsJ,EAAAA,EAAAA,MAETtJ,EAAS,IACJA,EACH2R,SAAU,IACL3R,EAAO2R,SACVme,WAAY,CACVle,KAAMpM,EAAOoM,KACbD,SAAUnM,EAAOmM,aAIvBtO,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,wBAAwB8Y,UACvC,MAAM,KAAE3H,GAAS5R,EAAO2R,SAASoe,UAAY,CAAC,EAExCA,QAAiB7S,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEnX,MAAO,OAAQ6L,SACpEme,IAIL/vB,GAASsJ,EAAAA,EAAAA,MAETtJ,EAAS,IACJA,EACH2R,SAAU,IACL3R,EAAO2R,SACVoe,SAAU,CACRne,KAAMme,EAASne,KACfD,SAAUoe,EAASpe,SAAS1M,QAAQwM,GAA8B,OAAlBA,EAAQ1L,YAI9D1C,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,wBAAwB8Y,UACvC,MAAM,KAAE3H,GAAS5R,EAAO2R,SAASqe,UAAY,CAAC,EACxCC,QAAyB/S,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEtL,SAC7Dqe,IAILjwB,GAASsJ,EAAAA,EAAAA,MAETtJ,GAASivB,EAAAA,EAAAA,IACPjvB,EACA,WACAiwB,EAAiBre,KACjBqe,EAAiBf,OAEnB7rB,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,oBAAoB8Y,UACnC,MAAM0U,QAAmB/Q,EAAAA,EAAAA,IAAQ,qBACjC,IAAK+Q,EACH,OAGF,MAAM,IAAEtE,EAAG,SAAEhY,GAAasc,EAE1BjuB,GAASsJ,EAAAA,EAAAA,MACTtJ,EAAS,IACJA,EACHkwB,aAAc,IAAKvG,EAAKhY,cAE1BtO,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,yBAAyB8Y,UACxC,MAAM0U,QAAmB/Q,EAAAA,EAAAA,IAAQ,0BACjC,IAAK+Q,EACH,OAEFjuB,GAASsJ,EAAAA,EAAAA,MAET,MAAM,IAAEqgB,EAAG,SAAEhY,GAAasc,EAEpBkC,EAAU,IAAKxG,EAAKhY,YAE1B3R,GAASquB,EAAAA,EAAAA,IAAiBruB,EAAQmwB,EAAQ7uB,GAAI6uB,GAC9CnwB,EAAS,IACJA,EACHowB,oBAAqBD,EAAQ7uB,KAE/B+B,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,0BAA0B8Y,UACzC,MAAM0U,QAAmB/Q,EAAAA,EAAAA,IAAQ,4BACjC,IAAK+Q,EACH,OAEFjuB,GAASsJ,EAAAA,EAAAA,MAET,MAAM,IAAEqgB,EAAG,SAAEhY,GAAasc,EACpBkC,EAAU,IAAKxG,EAAKhY,YAE1B3R,GAASquB,EAAAA,EAAAA,IAAiBruB,EAAQmwB,EAAQ7uB,GAAI6uB,GAC9CnwB,EAAS,IAAKA,EAAQqwB,qBAAsBF,EAAQ7uB,KACpD+B,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,gBAAgB,CAACT,EAAQU,EAASC,KACjD,MAAM,eAAEqtB,EAAc,MAAE/tB,GAAQC,EAAAA,EAAAA,OAAsBS,EAChD2vB,GAAYC,EAAAA,EAAAA,IAAiBvwB,EAAQguB,GACvCsC,GAAaA,EAAUhL,QAAUgL,GAAW3e,UAAU3J,QACrD+lB,GAAa/tB,EAAQU,EAASstB,EAAgB/tB,EAAM,KAG3DQ,EAAAA,EAAAA,IAAiB,sBAAsB8Y,UACrC,MAAOiX,EAAQC,SAAiB1B,QAAQC,IAAI,EAC1C9R,EAAAA,EAAAA,IAAQ,wBACRA,EAAAA,EAAAA,IAAQ,+BAELsT,GAAWC,IAIhBzwB,GAASsJ,EAAAA,EAAAA,MAETtJ,GAAS0wB,EAAAA,EAAAA,IAAsB1wB,EAAQ,IAAKwwB,EAAO7G,IAAKhY,SAAU6e,EAAO7e,WACzE3R,EAAS,IACJA,EACH2wB,qBAAsB,IAAKF,EAAQ9G,IAAKhY,SAAU8e,EAAQ9e,YAG5DtO,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,2BAA2B8Y,UAC1C,MAAM0U,QAAmB/Q,EAAAA,EAAAA,IAAQ,4BACjC,IAAK+Q,EACH,OAEFjuB,GAASsJ,EAAAA,EAAAA,MAET,MAAM,IAAEqgB,EAAG,SAAEhY,GAAasc,EAE1BjuB,EAAS,IACJA,EACH4wB,oBAAqB,IAAKjH,EAAKhY,cAEjCtO,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,iBAAiB8Y,UAChC,MAAM,KAAE3H,GAAS5R,EAAO4uB,KAAKiC,MAEvBC,QAAkB5T,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEtL,SAC/Ckf,IAIL9wB,GAASsJ,EAAAA,EAAAA,MAETtJ,EAAS,IACJA,EACH4uB,KAAM,IACD5uB,EAAO4uB,KACViC,MAAOC,KAGXztB,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,WAAW8Y,MAAOvZ,EAAQU,EAASC,KAClD,MAAM,IACJowB,EAAG,aAAEC,EAAY,MACjB/wB,GAAQC,EAAAA,EAAAA,OACNS,EACEqH,EAAShI,EAAO4uB,KAAKiC,MAAMjC,MAAM5mB,OAEjC4N,GAAQqb,EAAAA,GAAAA,GAAmBjxB,EAAQ,aACnCkxB,GAAeC,EAAAA,GAAAA,GAAmBnxB,EAAQ,aAC1CoxB,GAAY9K,EAAAA,EAAAA,IAA2BtmB,GAoB7C,IAlBKgxB,GAAgBhpB,GAAUA,GAAU4N,GACvClV,EAAQ2L,iBAAiB,CACvBkE,MAAO5L,EAAAA,GAAuB,2BAA4BiR,EAAM7N,YAChE7C,QAASksB,EAAYzsB,EAAAA,GAAuB,2CACxCA,EAAAA,GAAuB,mCACvBusB,EAAanpB,gBACZqpB,GAAa,CAChBtc,OAAQ,CACNA,OAAQ,mBACRnU,QAAS,CAAEV,WAGfoxB,UAAW,YACXpxB,iBAIiBid,EAAAA,EAAAA,IAAQ,UAAW,CAAE6T,MAAKC,iBAE7C,OAGFhxB,GAASsJ,EAAAA,EAAAA,MACT,MAAMslB,EAAO5uB,EAAO4uB,KAAKiC,MAAMjC,MAAM3pB,QAAO,EAAG3D,QAASA,IAAOyvB,EAAIzvB,MAAO,GACpEgwB,EAAUN,EAAepC,EAAO,CAACmC,KAAQnC,GAE/C5uB,EAAS,IACJA,EACH4uB,KAAM,IACD5uB,EAAO4uB,KACViC,MAAO,IACF7wB,EAAO4uB,KAAKiC,MACfjC,KAAM0C,MAIZjuB,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,eAAe,CAACT,EAAQU,EAASC,KAChD,MAAM,QAAE8Q,EAAO,MAAExR,GAAQC,EAAAA,EAAAA,OAAsBS,EACzC4wB,EAAUvxB,EAAO2R,SAASge,SAAShe,SAAS3J,OAC5C4N,GAAQqb,EAAAA,GAAAA,GAAmBjxB,EAAQ,iBACnCkxB,GAAeC,EAAAA,GAAAA,GAAmBnxB,EAAQ,iBAC1CoxB,GAAY9K,EAAAA,EAAAA,IAA2BtmB,GAEzCuxB,GAAW3b,GACblV,EAAQ2L,iBAAiB,CACvBkE,MAAO5L,EAAAA,GAAuB,+BAAgCiR,EAAM7N,YACpE7C,QAASksB,EAAYzsB,EAAAA,GAAuB,+CACxCA,EAAAA,GAAuB,uCACvBusB,EAAanpB,gBACZqpB,GAAa,CAChBtc,OAAQ,CACNA,OAAQ,mBACRnU,QAAS,CAAEV,WAGfoxB,UAAW,YACXpxB,UAIAwR,IACGyL,EAAAA,EAAAA,IAAQ,cAAe,CAAEzL,WAChC,KAGFhR,EAAAA,EAAAA,IAAiB,iBAAiB,CAACT,EAAQU,EAASC,KAClD,MAAM,QAAE8Q,GAAY9Q,EAEhB8Q,IACFzR,GAASsJ,EAAAA,EAAAA,MAITtJ,EAAS,IACJA,EACH2R,SAAU,IACL3R,EAAO2R,SACVge,SAAU,IACL3vB,EAAO2R,SAASge,SACnBhe,SAAU3R,EAAO2R,SAASge,SAAShe,SAAS1M,QAAO,EAAG3D,QAASA,IAAOmQ,EAAQnQ,SAIpF+B,EAAAA,EAAAA,IAAUrD,IAELkd,EAAAA,EAAAA,IAAQ,cAAe,CAAEzL,UAAS+f,QAAQ,IACjD,KAGF/wB,EAAAA,EAAAA,IAAiB,uBAAuB8Y,MAAOvZ,EAAQU,EAASC,KAC9D,MAAM,QAAE8Q,GAAY9Q,QAECuc,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEzL,aAKtDoc,IADSvkB,EAAAA,EAAAA,MACiB,KAG5B7I,EAAAA,EAAAA,IAAiB,uBAAuB8Y,gBACjB2D,EAAAA,EAAAA,IAAQ,yBAI7Bld,GAASsJ,EAAAA,EAAAA,MACTtJ,EAAS,IACJA,EACH2R,SAAU,IACL3R,EAAO2R,SACVD,OAAQ,CACNC,SAAU,OAIhBtO,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,aAAE8wB,GAAiB9wB,EACnBstB,GAAasC,EAAAA,EAAAA,IAAiBvwB,EAAQyxB,GAC5C,IAAKxD,EACH,OAGF,MAAM,WAAEzB,EAAU,cAAEkF,EAAa,WAAEC,GAAe1D,EAC5C2D,GAAeD,GAAc1qB,QAAQyqB,IAEtCxU,EAAAA,EAAAA,IAAS0U,EAAoC,sBAAtB,oBAA6C,CAAEH,eAAcjF,cAAa,KAGxG/rB,EAAAA,EAAAA,IAAiB,qBAAqB8Y,MAAOvZ,EAAQU,EAASC,KAC5D,MAAM,SAAEkxB,GAAalxB,EAErB,IAAImxB,EAAuB9xB,EAAO+xB,cAAcF,GAChD,GAAIC,GAAsBrY,UACxB,OAGFzZ,EAAS,IACJA,EACH+xB,cAAe,IACV/xB,EAAO+xB,cACV,CAACF,GAAW,IACPC,EACHrY,WAAW,MAIjBpW,EAAAA,EAAAA,IAAUrD,GAEV,MAAM+xB,QAAsB7U,EAAAA,EAAAA,IAAQ,qBAAsB,CACxD2U,WACAG,YAAaF,EAAuBA,EAAqB9kB,QAAU,IAMrE,GAFA8kB,GADA9xB,GAASsJ,EAAAA,EAAAA,OACqByoB,cAAcF,IAEvCE,EAaH,OAZA/xB,EAAS,IACJA,EACH+xB,cAAe,IACV/xB,EAAO+xB,cACV,CAACF,GAAW,IACPC,EACHrY,WAAW,UAIjBpW,EAAAA,EAAAA,IAAUrD,GAKZA,EAAS,IACJA,EACH+xB,cAAe,IACV/xB,EAAO+xB,cACV,CAACF,GAAW,CACVpY,WAAW,EACXzM,QAAS+kB,EAAc/kB,QACvBilB,SAAU,IACJH,GAAsBG,YACvBF,EAAcE,cAKzB5uB,EAAAA,EAAAA,IAAUrD,EAAO,KAqEnBS,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzCC,GACG+sB,IAAgBpU,UACnB,MAAM/T,QAAe0X,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEtc,UAEjD,IAAK4E,EACH,OAGFxF,GAASsJ,EAAAA,EAAAA,MACT,MAAM,SAAEgmB,EAAQ,MAAEnd,GAAUnS,EAAO2R,SAE7BxC,EAAY3J,EAAO0pB,KAAKlqB,KAAI,EAAG1D,QAASA,IAE1C6Q,EAAMC,QACRD,EAAMC,OAAO3G,SAASnK,IACpB,IAAK6N,EAAUzE,SAASpJ,GAAK,CAC3B,MAAM,MAAEiP,GAAU+e,EAAShuB,IAAO,CAAC,EAC/BiP,IAAS2hB,EAAAA,GAAAA,GAAY3hB,EAAO3P,IAC9BuO,EAAUH,QAAQ1N,EAEtB,KAIJtB,GAASivB,EAAAA,EAAAA,IACPjvB,EACA,SACAwF,EAAOoM,KACPpM,EAAO0pB,MAGTlvB,GAASmyB,EAAAA,EAAAA,IAAoBnyB,EAAQwF,EAAOoM,KAAMzC,EAAWlP,IAC7DoD,EAAAA,EAAAA,IAAUrD,EAAO,GAErB,KAGFS,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAExB,iBAAVC,GACJ+sB,IAAgB,KACnBa,GAAWxuB,EAAQY,EAAOZ,EAAOoyB,QAAQC,uBAAmB9xB,EAAWN,EAAM,GAEjF,KAGFQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,MAAEC,EAAK,OAAEyO,IAAWrO,EAAAA,EAAAA,IAAehB,EAAQC,GAAOmP,UAEnC,iBAAVxO,GACJ+sB,IAAgB,KACnBa,GAAWxuB,EAAQY,EAAOZ,EAAOoyB,QAAQC,kBAAmBhjB,EAAQpP,EAAM,GAE9E,KAGFQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEoF,GAAUpF,GACZ,KAAEiR,GAAS5R,EAAO2R,SAAS2c,SAE5BX,IAAgBpU,UACnBvZ,GAASsJ,EAAAA,EAAAA,MACTtJ,EAAS,IACJA,EACH2R,SAAU,IACL3R,EAAO2R,SACV2c,SAAU,IACLtuB,EAAO2R,SAAS2c,SACnBvoB,YAIN1C,EAAAA,EAAAA,IAAUrD,GAEV,MAAMwF,QAAe0X,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEnX,QAAO6L,SAE/D5R,GAASsJ,EAAAA,EAAAA,MAEJ9D,GAAUxF,EAAO2R,SAAS2c,SAASvoB,QAAUA,IAIlD/F,GAASsyB,EAAAA,EAAAA,IAAuBtyB,EAAQ+F,EAAOP,EAAOmM,SAAUnM,EAAOoM,OAEvEvO,EAAAA,EAAAA,IAAUrD,GAAO,GACjB,KAGJS,EAAAA,EAAAA,IAAiB,yBAA0BT,IAClC,IACFA,EACH2R,SAAU,IACL3R,EAAO2R,SACV2c,SAAU,CAAC,QAKjB7tB,EAAAA,EAAAA,IAAiB,2BAA2B,CAACT,EAAQU,EAASC,KAC5D,MAAM,MAAEoF,GAAUpF,EAElB,OAAO4xB,EAAAA,EAAAA,IAA0BvyB,EAAQ+F,EAAM,KAGjDtF,EAAAA,EAAAA,IAAiB,4BAA6BT,IACrC,IACFA,EACHqS,aAAc,IACTrS,EAAOqS,aACVic,SAAU,CAAC,QAKjB7tB,EAAAA,EAAAA,IAAiB,6BAA6B8Y,UAC5C,MAAM0W,QAAyB/S,EAAAA,EAAAA,IAAQ,8BAClC+S,IAILjwB,GAASsJ,EAAAA,EAAAA,MACTtJ,EAAS,IACJA,EACHqS,aAAc,IACTrS,EAAOqS,aACVmgB,YAAavC,EAAiBf,KAAKlqB,KAAI,EAAG1D,QAASA,IACnDijB,KAAM,IACDvkB,EAAOqS,aAAakS,SACpBjH,EAAAA,EAAAA,IAAqB2S,EAAiBf,KAAKuD,SAAS9I,GAAQA,EAAIhY,UAAY,KAAK,QAGxFA,SAAU,IACL3R,EAAO2R,SACV2d,SAAU,IACLtvB,EAAO2R,SAAS2d,aAChBhS,EAAAA,EAAAA,IAAqB2S,EAAiBf,KAAM,UAIrD7rB,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,kBAAkB8Y,MAAOvZ,EAAQU,EAASC,KACzD,MAAM,eAAEqtB,EAAc,MAAE/tB,GAAQC,EAAAA,EAAAA,OAAsBS,GACjD4vB,EAAAA,EAAAA,IAAiBvwB,EAAQguB,UACtBD,GAAa/tB,EAAQU,EAASstB,EAAgB/tB,GAGtDD,GAASsJ,EAAAA,EAAAA,MACT,MAAMqgB,GAAM4G,EAAAA,EAAAA,IAAiBvwB,EAAQguB,GAChCrE,GAAKuE,YAIVluB,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B8V,0BAA2B6T,EAAIuE,WAC9BjuB,IACHoD,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,2BAA2B8Y,UAC1C,MAAM/T,QAAe0X,EAAAA,EAAAA,IAAQ,4BACxB1X,IAILxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAAS0yB,EAAAA,EAAAA,IAA+B1yB,EAAQwF,EAAOoM,KAAMpM,EAAOmtB,gBACpEtvB,EAAAA,EAAAA,IAAUrD,GAAO,I,cCvuBnB,MAAM2tB,IAAkBC,EAAAA,EAAAA,KAAUjS,GAAOA,KAAM,KAAK,GAuJpDpC,eAAeqZ,GACb5yB,EACAY,EAAQ,GAAIY,EAAkCqxB,EAAqBrwB,EAAgBswB,EAAkBC,MACjG9yB,GAAQC,EAAAA,EAAAA,QAuGd,CCrJAqZ,eAAeyZ,GACbhzB,EACAwC,EACApC,EACAoB,EACA2a,EACAN,GAAkB,MACd5b,GAAQC,EAAAA,EAAAA,QAEZ,MAAMsF,QAAe0X,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD1a,OACAhB,OACAoU,MAA4B,EAArBqd,EAAAA,IACPC,aAAc9yB,IAAamB,EAAAA,QAAiBhB,EAAYH,EACxD+b,aAGF,IAAK3W,EACH,OAGF,MAAM,MACJoJ,EAAK,MAAE2O,EAAK,SAAExY,EAAQ,WAAEouB,EAAU,aAAEC,GAClC5tB,EAEE+e,GAAOjH,EAAAA,EAAAA,IAAqBvY,EAAU,MACtCsuB,EAAczrB,OAAOC,KAAK0c,GAAMvf,IAAIiD,QAE1CjI,GAASsJ,EAAAA,EAAAA,OAEagqB,EAAAA,EAAAA,IAAyBtzB,EAAQC,KAKvDD,GAASipB,EAAAA,EAAAA,IAASjpB,GAAQsd,EAAAA,EAAAA,IAAqB1O,EAAO,OACtD5O,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqBC,EAAO,OACtDvd,GAAS+oB,EAAAA,EAAAA,IAAoB/oB,EAAQwC,EAAKlB,GAAIijB,GAC9CvkB,GAASuzB,EAAAA,EAAAA,IAA8BvzB,EAAQwC,EAAKlB,GAAIlB,EAAUoB,EAAM6xB,EAAaF,EAAYC,EAAcnzB,IAC/GoD,EAAAA,EAAAA,IAAUrD,GAEL6b,GACEmX,GAAkBhzB,EAAQwC,EAAMpC,EAAUoB,EAAM4xB,GAAc,EAAMnzB,GAE7E,EDtJAQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzCC,GACG+sB,IAAgBpU,UAEnB,MAAMia,GADNxzB,GAASsJ,EAAAA,EAAAA,OACwBsF,MAAM6kB,QAAQC,OAC/C,IAAIF,EACF,OAEF,MAAMG,EAA4B,GAC5BC,EAAmB,GAEnBC,EAAajsB,OAAOC,KAAK7H,EAAOud,MAAMgH,MAC5C,IAAK,IAAIhG,EAAI,EAAGA,EAAIsV,EAAW7rB,OAAQuW,IAAK,CAC1C,MAAM7O,EAASmkB,EAAWtV,GACpB8E,GAAOlC,EAAAA,EAAAA,IAAWnhB,EAAO0P,GAE7B8jB,EAAkB9oB,SAASgF,KACxB2T,GAAMyQ,WAAazQ,GAAMyQ,UAAUC,cAAchwB,QAAQnD,EAAMmzB,gBAAkB,GACjF1Q,GAAM2Q,UAAY3Q,GAAM2Q,SAASD,cAAchwB,QAAQnD,EAAMmzB,gBAAkB,GAC/E1Q,GAAMwH,UAAYxH,GAAMwH,SAASoJ,KAAO5Q,GAAMwH,SAASoJ,IAAIF,cAAchwB,QAAQnD,EAAMmzB,gBAAkB,IAG5GH,EAAQ/tB,KAAK6J,EAEjB,CAEA,IAAK,IAAI6O,EAAI,EAAGA,EAAIiV,EAAkBxrB,OAAQuW,IAAK,CACjD,MAAMpe,EAASqzB,EAAkBjV,GAC3B/b,GAAOC,EAAAA,EAAAA,IAAWzC,EAAOG,GAC5BqC,GAAQA,GAAM+N,MAAMxM,QAAQnD,IAAU,IAAMgzB,EAAQlpB,SAASlI,GAAMlB,KACpEsyB,EAAQ/tB,KAAKrD,GAAMlB,IAErB,MAAMyD,GAAWD,EAAAA,EAAAA,IAAmB9E,EAAOG,GAC3C,GAAG4E,EAAS,CACV,MAAMP,EAAaoD,OAAOC,KAAK9C,GAC/B,IAAK,IAAIwZ,EAAI,EAAGA,EAAI/Z,EAAWwD,OAAQuW,IAAK,CAC1C,MAAM5X,EAAYsB,OAAOzD,EAAW+Z,IAC9BrZ,GAAUqP,EAAAA,EAAAA,IAAkBvU,EAAOG,EAAOwG,GAC7CzB,GAASiC,SAAWjC,GAASiC,QAAQ5D,MAAQ2B,GAASiC,QAAQ5D,KAAKA,MACjE2B,GAASiC,QAAQ5D,KAAKA,KAAKwwB,cAAchwB,QAAQnD,EAAMmzB,gBAAkB,GAC1EJ,EAAa9tB,KAAKX,EAGxB,CACF,CAEF,CACA,MAAMgvB,GAAqBC,EAAAA,EAAAA,IAA+Bn0B,EAAQC,GAClE,GAA4B,IAAxB0zB,EAAa3rB,SAAiBksB,GAAuBtzB,IAAUszB,EAGjE,OAFAl0B,GAASo0B,EAAAA,EAAAA,IAAiCp0B,EAAQ,CAAE+E,UAAU,GAAS9E,QACvEoD,EAAAA,EAAAA,IAAUrD,GAGZA,GAASq0B,EAAAA,EAAAA,IAA0Br0B,EAAO2zB,EAAaA,EAAa3rB,OAAO,OAAO,EAAE/H,GACpFD,GAASuO,EAAAA,EAAAA,IAAmBvO,EAAQ,CAClCyO,aAAc,CACZmlB,UACAU,QA/CqB,KAiDtBr0B,IAEHoD,EAAAA,EAAAA,IAAUrD,EAAO,GAErB,KAgDFS,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,KAAEuM,EAAI,MAAEjN,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5BuM,IAAOqnB,EAAAA,GAAAA,IAAiBrnB,GAExClN,GAASuO,EAAAA,EAAAA,IAAmBvO,EAAQ,CAClCkN,OACAtM,MAAO,GACP8N,cAAe,KACV1N,EAAAA,EAAAA,IAAehB,EAAQC,GAAOqO,aAAaI,cAC9CnL,KAAM,CACJ4vB,gBAAY5yB,EACZi0B,SAAU,GACVpB,aAAc,KAGjBnzB,IACHoD,EAAAA,EAAAA,IAAUrD,GAEV,MAAM,OAAEG,IAAWa,EAAAA,EAAAA,IAAehB,EAAQC,GAAOqO,aAEjDskB,GAAqB5yB,EAAQ,GAAI,EAAQO,EAD5BJ,IAASsC,EAAAA,EAAAA,IAAWzC,EAAQG,GACiB2yB,EAAS5lB,EAAMjN,EAAM,KAGjFQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,KAAEa,EAAI,MAAEvB,GAAQC,EAAAA,EAAAA,OAAsBS,GACtC,MACJC,EAAK,cAAE8N,EAAa,OAAEvO,EAAM,KAAE+M,IAC5BlM,EAAAA,EAAAA,IAAehB,EAAQC,GAAOqO,aAClBpB,IAAOqnB,EAAAA,GAAAA,IAAiBrnB,GAClBwB,IAAgBlN,IAAsC4xB,aAI5ER,GAAqB5yB,EAAQY,EAAOY,EAAM4xB,EAF7BjzB,IAASsC,EAAAA,EAAAA,IAAWzC,EAAQG,GAEqB2yB,EAAS5lB,EAAMjN,EAAM,KCtJrFQ,EAAAA,EAAAA,IAAiB,2BAA2B8Y,MAAOvZ,EAAQU,EAASC,KAClE,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACnEuC,EAAOrC,GAASsC,EAAAA,EAAAA,IAAWzC,EAAQG,QAAUI,EACnD,IAAIk0B,GAAgBC,EAAAA,EAAAA,IAAwB10B,EAAQC,GACpD,IAAKuC,IAASiyB,IAAkBr0B,EAC9B,OAGF,MAAM,MAAEQ,EAAK,QAAE0O,GAAYmlB,EACrBtY,EAAW7M,GAAS8jB,aAE1B,IAAIF,EACJ,GAAI9yB,IAAamB,EAAAA,GAAgB,CAC/B,MAAM4G,GAAaC,EAAAA,EAAAA,IAAiBpI,EAAQG,EAASC,GACrD8yB,EAAe/qB,GAAY+qB,YAC7B,CAEA,IAAKtyB,EACH,OAGF,MAAM4E,QAAe0X,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD1a,OACAhB,KAAM,OACNZ,QACAsyB,eACAtd,MAAO+e,EAAAA,IACPxY,aAGF,IAAK3W,EACH,OAGF,MAAM,MACJoJ,EAAK,MAAE2O,EAAK,SAAExY,EAAQ,WAAEouB,EAAU,aAAEC,GAClC5tB,EAEE+e,GAAOjH,EAAAA,EAAAA,IAAqBvY,EAAU,MACtCsuB,EAAczrB,OAAOC,KAAK0c,GAAMvf,IAAIiD,QAE1CjI,GAASsJ,EAAAA,EAAAA,MAETmrB,GAAgBC,EAAAA,EAAAA,IAAwB10B,EAAQC,GAC3Cw0B,GAAiB7zB,IAAU6zB,EAAc7zB,QAI9CZ,GAASipB,EAAAA,EAAAA,IAASjpB,GAAQsd,EAAAA,EAAAA,IAAqB1O,EAAO,OACtD5O,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqBC,EAAO,OACtDvd,GAAS+oB,EAAAA,EAAAA,IAAoB/oB,EAAQwC,EAAKlB,GAAIijB,GAC9CvkB,GAAS40B,EAAAA,EAAAA,IAA6B50B,EAAQwC,EAAKlB,GAAIlB,EAAUizB,EAAaF,EAAYC,EAAcnzB,IACxGoD,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,4BAA4B,CAACT,EAAQU,EAASC,KAC7D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAMoC,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAC1Bs0B,GAAgBnB,EAAAA,EAAAA,IAAyBtzB,EAAQC,GAEvD,IAAKuC,IAASiyB,EACZ,OAGF,MAAQI,YAAarzB,EAAI,cAAEkN,GAAkB+lB,EACvCK,EAAiBtzB,GAAQkN,GAAiBA,EAAclN,GACxD2a,EAAW2Y,GAAgB1B,aAE5B5xB,GAIAwxB,GAAkBhzB,EAAQwC,EAAMpC,EAAUoB,EAAM2a,OAAU5b,EAAWN,EAAM,KAGlFQ,EAAAA,EAAAA,IAAiB,wBAAwB8Y,MAAOvZ,EAAQU,EAASC,KAC/D,MAAM,UAAEo0B,EAAS,MAAE90B,GAAQC,EAAAA,EAAAA,OAAsBS,GAE3C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAC/D,IAAKE,EACH,OAGF,MAAMqC,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EACH,OAGF,MAAMmE,QAAkBuW,EAAAA,EAAAA,IAAQ,8BAA+B,CAC7D1a,OACAuyB,cAGGpuB,GAILjG,EAAQ6H,aAAa,CACnBpI,OAAQqC,EAAKlB,GACbqF,YACA1G,SACA,KCrHJQ,EAAAA,EAAAA,IAAiB,mBAAmB8Y,MAAOvZ,EAAQU,EAASC,KAC1D,MAAM,SAAE+tB,EAAQ,MAAEzuB,GAAQC,EAAAA,EAAAA,OAAsBS,GAE1C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAC/D,IAAKE,EACH,OAIF,IAAIa,EAAAA,EAAAA,IAAehB,EAAQC,GAAO4Q,WAAW0Y,WAAayL,EAAAA,GAAAA,WACxD,OAGFh1B,GAASi1B,EAAAA,EAAAA,IACPj1B,EAAQG,EAAQ,CAAE+0B,yBAAqB30B,EAAW40B,qBAAiB50B,GAAaN,IAElFoD,EAAAA,EAAAA,IAAUrD,GAEV,MAAM,OAAEwF,EAAM,MAAE2R,SAAiB+F,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEwR,aAEhE1uB,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASo1B,EAAAA,EAAAA,IACPp1B,GAAmB,IAAXwF,EAAkBwvB,EAAAA,GAAAA,SAA8BA,EAAAA,GAAAA,MAA0B/0B,GAEpFD,GAASi1B,EAAAA,EAAAA,IAAiBj1B,EAAQG,EAAQ,CACxC+0B,qBAAgC,IAAX1vB,EACrB2vB,gBAAiBzG,EACjBvX,SACClX,IACHoD,EAAAA,EAAAA,IAAUrD,QAEKO,IAAXiF,GACF9E,EAAQ20B,sBAAsB,CAAEzf,MAAO,iBAAkB3V,SAC3D,KAGFQ,EAAAA,EAAAA,IAAiB,oBAAoB8Y,MAAOvZ,EAAQU,EAASC,KAC3D,MAAM,SAAE+tB,EAAQ,MAAEzuB,GAAQC,EAAAA,EAAAA,OAAsBS,GAE1C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAC/D,IAAKE,EACH,OAGF,MAAMqC,QAAa8yB,EAAAA,EAAAA,IAAmBt1B,EAAQU,EAASP,EAAQF,GAC/D,IAAKuC,EAAM,OAEXxC,GAASsJ,EAAAA,EAAAA,MAETtJ,GAASo1B,EAAAA,EAAAA,IAAyBp1B,EAAQg1B,EAAAA,GAAAA,WAA+B/0B,IACzEoD,EAAAA,EAAAA,IAAUrD,GAEV,MAAMwF,QAAe0X,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE1a,OAAMksB,aAExD1uB,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASo1B,EAAAA,EAAAA,IAAyBp1B,EAAQwF,EAASwvB,EAAAA,GAAAA,SAA8BA,EAAAA,GAAAA,MAA0B/0B,GAC3GD,GAASi1B,EAAAA,EAAAA,IAAiBj1B,EAAQG,EAAQ,CACxC+0B,yBAAqB30B,EACrB40B,qBAAiB50B,EACjB4W,WAAO5W,GACNN,IACHoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACzDuC,EAAOrC,IAAUsC,EAAAA,EAAAA,IAAWzC,EAAQG,GACrCA,GAAWqC,IAIhB0a,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE1a,QAAO,KAGxC/B,EAAAA,EAAAA,IAAiB,4BAA4B,CAACT,EAAQU,EAASC,KAC7D,MAAM,OAAER,EAAM,OAAEo1B,EAAM,MAAEt1B,GAAQC,EAAAA,EAAAA,OAAsBS,EAEtDX,GAASi1B,EAAAA,EAAAA,IAAiBj1B,EAAQG,EAAQ,CAAEq1B,cAAeD,GAAUt1B,IACrEoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,OAAER,EAAM,OAAEo1B,EAAM,MAAEt1B,GAAQC,EAAAA,EAAAA,OAAsBS,EAEhD0sB,EAASkI,EAAS,CAAEE,WAAY,CAAEF,WAAa,CAAEE,gBAAYl1B,GAEnEP,GAASi1B,EAAAA,EAAAA,IAAiBj1B,EAAQG,EAAQktB,EAAQptB,IAClDoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,2BAA2B8Y,MAAOvZ,EAAQU,EAASC,KAClE,MAAM,OACJR,EAAM,QAAEu1B,EAAO,UAAEC,EAAS,MAAE/f,EAAK,MAAE3V,GAAQC,EAAAA,EAAAA,OACzCS,EACEmkB,GAAOriB,EAAAA,EAAAA,IAAWzC,EAAQG,GAC1By1B,GAAQzU,EAAAA,EAAAA,IAAWnhB,EAAQ01B,GAAW11B,EAAOgY,eACnD,IAAK8M,IAAS8Q,EAAO,OAErB,MAAMpwB,QAAe0X,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD4H,OAAM8Q,QAAOD,YAAW/f,UAE1B,IAAKpQ,EACH,OAEFxF,GAASsJ,EAAAA,EAAAA,MACT,MAAM,QAAEusB,EAAO,MAAEtY,GAAU/X,EAE3BxF,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqBC,EAAO,OAEtD,MAAM8P,EAASsI,EAAY,CAAEG,eAAgBD,GAAY,CAAEA,WAC3D71B,GAASi1B,EAAAA,EAAAA,IAAiBj1B,EAAQG,EAAQktB,EAAQptB,IAClDoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,0BAA0B8Y,MAAOvZ,EAAQU,EAASC,KACjE,MAAM,OACJR,EAAM,KAAE+P,EAAI,UAAEylB,EAAS,WAAEI,EAAU,WAAEC,EAAU,gBAAEC,EAAe,MAAE1lB,EAAK,MAAEtQ,GAAQC,EAAAA,EAAAA,OAC/ES,EACEmkB,GAAOriB,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAK2kB,EAAM,OAEX,MAAMtf,QAAe0X,EAAAA,EAAAA,IAAQ,yBAA0B,CACrD4H,OACA5U,OACAylB,YACAI,aACAC,aACAC,kBACA1lB,UAEF,IAAK/K,EACH,OAGF,MAAM,UAAE0wB,EAAS,UAAEC,EAAS,MAAE5Y,GAAU/X,EAExCxF,GAASsJ,EAAAA,EAAAA,MACT,MAAM,WAAEuH,IAAe7P,EAAAA,EAAAA,IAAehB,EAAQC,GACxC41B,GAAWhlB,EAAWvF,SAASnL,GAAQ01B,SAAW,IACrD5wB,QAAQssB,GAAYA,EAAQrhB,OAASgmB,EAAUhmB,OAC5C4lB,EAAiB,IAAKjlB,EAAWvF,SAASnL,GAAQ21B,gBAAkB,IAEtEK,EAAUR,UACZG,EAAe9mB,QAAQmnB,GAEvBN,EAAQhwB,KAAKswB,GAGfn2B,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqBC,EAAO,OAEtDvd,GAASi1B,EAAAA,EAAAA,IAAiBj1B,EAAQG,EAAQ,CACxC01B,UACAC,kBACC71B,IACHoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,oBAAoB8Y,MAAOvZ,EAAQU,EAASC,KAC3D,MAAM,OACJR,EAAM,WAAE41B,EAAU,WAAEC,EAAU,gBAAEC,EAAe,MAAE1lB,EAAK,MAAEtQ,GAAQC,EAAAA,EAAAA,OAC9DS,EACEmkB,GAAOriB,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAK2kB,EAAM,OAEX,MAAMtf,QAAe0X,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/C4H,OACAiR,aACAC,aACAC,kBACA1lB,UAEF,IAAK/K,EACH,OAGFxF,GAASsJ,EAAAA,EAAAA,MACT,MAAMusB,GAAU70B,EAAAA,EAAAA,IAAehB,EAAQC,GAAO4Q,WAAWvF,SAASnL,GAAQ01B,SAAW,GACrF71B,GAASi1B,EAAAA,EAAAA,IAAiBj1B,EAAQG,EAAQ,CACxC01B,QAAS,IAAIA,EAASrwB,IACrBvF,IACHoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,4BAA4B8Y,MAAOvZ,EAAQU,EAASC,KACnE,MAAM,OACJR,EAAM,KAAE+P,EAAI,MAAEjQ,GAAQC,EAAAA,EAAAA,OACpBS,EACEmkB,GAAOriB,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAK2kB,EAAM,OAMX,UAJqB5H,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD4H,OACA5U,SAGA,OAGFlQ,GAASsJ,EAAAA,EAAAA,MACT,MAAM8sB,GAAkBp1B,EAAAA,EAAAA,IAAehB,EAAQC,GAAO4Q,WAAWvF,SAASnL,GAC1EH,GAASi1B,EAAAA,EAAAA,IAAiBj1B,EAAQG,EAAQ,CACxC01B,QAASO,GAAiBP,SAAS5wB,QAAQswB,GAAWA,EAAOrlB,OAASA,IACtE4lB,eAAgBM,GAAiBN,gBAAgB7wB,QAAQswB,GAAWA,EAAOrlB,OAASA,KACnFjQ,IACHoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,oCAAoC8Y,MAAOvZ,EAAQU,EAASC,KAC3E,MAAM,OACJR,EAAM,QAAEu1B,EAAO,MAAEz1B,GAAQC,EAAAA,EAAAA,OACvBS,EACEmkB,GAAOriB,EAAAA,EAAAA,IAAWzC,EAAQG,GAC1By1B,GAAQzU,EAAAA,EAAAA,IAAWnhB,EAAQ01B,GAAW11B,EAAOgY,eAC9C8M,GAAS8Q,SAEO1Y,EAAAA,EAAAA,IAAQ,mCAAoC,CAC/D4H,OACA8Q,YAMF51B,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASi1B,EAAAA,EAAAA,IAAiBj1B,EAAQG,EAAQ,CACxC21B,eAAgB,IACf71B,IACHoD,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,2BAA2B8Y,MAC1CvZ,EAAQU,EAASC,KAEjB,MAAM,OACJR,EAAM,KAAE+P,EAAI,WAAEmmB,EAAU,aAAEC,EAAY,MAAE1gB,EAAK,MAAE3V,GAAQC,EAAAA,EAAAA,OACrDS,EACEmkB,GAAOriB,EAAAA,EAAAA,IAAWzC,EAAQG,GAC1Bo2B,EAAaD,GAAenV,EAAAA,EAAAA,IAAWnhB,EAAQs2B,QAAgB/1B,EACrE,IAAKukB,GAASwR,IAAiBC,EAAa,OAE5C,MAAM/wB,QAAe0X,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD4H,OACA5U,OACAmmB,aACAE,aACA3gB,UAEF,IAAKpQ,EACH,OAEF,MAAM,UAAEgxB,EAAS,MAAEjZ,GAAU/X,EAE7BxF,GAASsJ,EAAAA,EAAAA,MACT,MAAMmtB,GAAoBz1B,EAAAA,EAAAA,IAAehB,EAAQC,GAAO4Q,WAAWvF,SAASnL,IAASs1B,WAChFgB,GAAmBlB,QAAUkB,EAAkBlB,OAAOrlB,OAASA,IAIpElQ,GAASi1B,EAAAA,EAAAA,IAAiBj1B,EAAQG,EAAQ,CACxCs1B,WAAY,IACPgB,EACHD,cAEDv2B,GACHD,GAASqd,EAAAA,EAAAA,IAASrd,EAAQud,IAC1Bla,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,4BAA4B8Y,MAC3CvZ,EAAQU,EAASC,KAEjB,MAAM,OACJR,EAAM,KAAE+P,EAAI,WAAEmmB,EAAU,aAAEC,EAAY,MAAE1gB,EAAK,MAAE3V,GAAQC,EAAAA,EAAAA,OACrDS,EACEmkB,GAAOriB,EAAAA,EAAAA,IAAWzC,EAAQG,GAC1Bo2B,EAAaD,GAAenV,EAAAA,EAAAA,IAAWnhB,EAAQs2B,QAAgB/1B,EACrE,IAAKukB,GAASwR,IAAiBC,EAAa,OAE5C,MAAM/wB,QAAe0X,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD4H,OACA5U,OACAmmB,aACAE,aACA3gB,QACA8gB,aAAa,IAEf,IAAKlxB,EACH,OAEF,MAAM,UAAEgxB,EAAS,MAAEjZ,GAAU/X,EAE7BxF,GAASsJ,EAAAA,EAAAA,MACT,MAAMmtB,GAAoBz1B,EAAAA,EAAAA,IAAehB,EAAQC,GAAO4Q,WAAWvF,SAASnL,IAASs1B,WAChFgB,GAAmBlB,QAAUkB,EAAkBlB,OAAOrlB,OAASA,IAGpElQ,GAASi1B,EAAAA,EAAAA,IAAiBj1B,EAAQG,EAAQ,CACxCs1B,WAAY,IACPgB,EACHE,WAAYH,IAEbv2B,GACHD,GAASqd,EAAAA,EAAAA,IAASrd,EAAQud,IAC1Bla,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,wBAAwB8Y,MAAOvZ,EAAQU,EAASC,KAC/D,MAAM,OACJR,EAAM,WAAEk2B,EAAa,EAAC,aAAEC,EAAY,MAAE1gB,EAAQ,GAC5CjV,EACEmkB,GAAOriB,EAAAA,EAAAA,IAAWzC,EAAQG,GAC1Bo2B,EAAaD,GAAenV,EAAAA,EAAAA,IAAWnhB,EAAQs2B,QAAgB/1B,EACrE,IAAKukB,GAASwR,IAAiBC,EAAa,OAE5C,MAAM/wB,QAAe0X,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD4H,OACAuR,aACAE,aACA3gB,QACA8gB,aAAa,IAEf,IAAKlxB,EACH,OAEF,MAAM,UAAEgxB,EAAS,MAAEjZ,GAAU/X,EAE7BxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAAEy2B,aAAcJ,IACpDx2B,GAASqd,EAAAA,EAAAA,IAASrd,EAAQud,IAC1Bla,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,uBAAuB8Y,MAAOvZ,EAAQU,EAASC,KAC9D,MAAM,OACJR,EAAM,OAAEuP,EAAM,WAAEmnB,GACdl2B,EACEmkB,GAAOriB,EAAAA,EAAAA,IAAWzC,EAAQG,GAC1BkjB,GAAOlC,EAAAA,EAAAA,IAAWnhB,EAAQ0P,GAChC,IAAKoV,IAASzB,EAAM,OAOpB,UALqBnG,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD4H,OACAzB,OACAwT,eAEW,OAEb72B,GAASsJ,EAAAA,EAAAA,MACT,MAAMwtB,GAAar0B,EAAAA,EAAAA,IAAWzC,EAAQG,GACjC22B,IAEL92B,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAClCy2B,aAAcE,EAAWF,cAAc3xB,QAAQ8xB,GAAaA,EAASrnB,SAAWA,OAElFrM,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,2BAA2B8Y,MAAOvZ,EAAQU,EAASC,KAClE,MAAM,OACJR,EAAM,WAAE02B,EAAU,KAAE3mB,GAClBvP,EACEmkB,GAAOriB,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAK2kB,EAAM,OAOX,UALqB5H,EAAAA,EAAAA,IAAQ,0BAA2B,CACtD4H,OACA+R,aACA3mB,SAEW,OAEblQ,GAASsJ,EAAAA,EAAAA,MACT,MAAMwtB,GAAar0B,EAAAA,EAAAA,IAAWzC,EAAQG,GACjC22B,IAEL92B,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAClCy2B,aAAc,GACd/L,SAAU,IACLiM,EAAWjM,SACdmM,mBAAoB,GACpBC,gBAAiB,MAGrB5zB,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,uBAAuB8Y,MAAOvZ,EAAQU,EAASC,KAC9D,MAAM,OAAER,GAAWQ,EACb6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAC3BqC,SAEgB0a,EAAAA,EAAAA,IAAQ,sBAAuB1a,KAGpDxC,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAClCkV,cAAU9U,KAEZ8C,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,6BAA6B8Y,MAAOvZ,EAAQU,EAASC,KACpE,MAAM,OACJ+O,EAAM,KAAEwnB,EAAI,UAAEC,EAAS,MAAEl3B,GAAQC,EAAAA,EAAAA,OAC/BS,EAEE0iB,GAAOlC,EAAAA,EAAAA,IAAWnhB,EAAQ0P,GAChC,IAAK2T,EAAM,OAEXrjB,GAASo1B,EAAAA,EAAAA,IAAyBp1B,EAAQg1B,EAAAA,GAAAA,WAA+B/0B,IACzEoD,EAAAA,EAAAA,IAAUrD,GAEV,MAAMwF,QAAe0X,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDmG,OACA6T,OACAC,cAGF,IAAK3xB,EAKH,OAJAxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASo1B,EAAAA,EAAAA,IAAyBp1B,EAAQg1B,EAAAA,GAAAA,MAA0B/0B,QACpEoD,EAAAA,EAAAA,IAAUrD,GAKZA,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqB9X,EAAO+X,MAAO,QAC7Dla,EAAAA,EAAAA,IAAUrD,GAEV,MAAM,GAAEsB,EAAE,WAAEkrB,GAAenJ,EAE3B,UADsBnG,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE5b,KAAIkrB,eAKnD,OAHAxsB,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASo1B,EAAAA,EAAAA,IAAyBp1B,EAAQg1B,EAAAA,GAAAA,MAA0B/0B,QACpEoD,EAAAA,EAAAA,IAAUrD,GAIZU,EAAQ02B,kBAAkB,CAAEC,UAAW3nB,IAEvC1P,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASo1B,EAAAA,EAAAA,IAAyBp1B,EAAQg1B,EAAAA,GAAAA,SAA6B/0B,IACvEoD,EAAAA,EAAAA,IAAUrD,GAENk3B,IAASC,GACXz2B,EAAQ2L,iBAAiB,CACvBnH,QAASP,EAAAA,GAAuB,4CAA4C2yB,EAAAA,EAAAA,IAAuBjU,IACnGpjB,SAEJ,I,gBCjbF,IAAIs3B,GAwMA5c,GACA6c,IAvMJ/2B,EAAAA,EAAAA,IAAiB,QAAQ,CAACT,EAAQU,KAC5BuW,EAAAA,KAEFC,QAAQmR,IAAI,kBAEVkP,IACFjtB,aAAaitB,IAGfv3B,GAASsJ,EAAAA,EAAAA,MACTtJ,EAAS,IAAKA,EAAQy3B,WAAW,IACjCp0B,EAAAA,EAAAA,IAAUrD,GAGVu3B,GAAuBv0B,OAAOqG,YAAW,KACvCrJ,GAASsJ,EAAAA,EAAAA,MACTtJ,EAAS,IAAKA,EAAQy3B,WAAW,IACjCp0B,EAAAA,EAAAA,IAAUrD,GACVu3B,QAAuBh3B,CAAS,GAtBL,MAyB7B,MAAM,aAAEm3B,EAAY,uBAAEC,GAA2Bj3B,EAEjDg3B,EAAa,CACXE,SAAU,SACVC,eAAe,EACfC,UAAWve,UAETvZ,GAASsJ,EAAAA,EAAAA,MACTtJ,EAAS,IACJA,EACH+3B,aAAcrrB,KAAKC,MACnB8qB,WAAW,IAEbp0B,EAAAA,EAAAA,IAAUrD,GAENiX,EAAAA,KAEFC,QAAQmR,IAAI,oBAGd2P,EAAAA,EAAAA,MACAN,EAAa,CAAEE,SAAU,WAAYC,eAAe,KAC/C3a,EAAAA,EAAAA,IAAQ,oBACbya,GAAwB,GAE1B,KA2JJM,EAAAA,GAAAA,KAAaj4B,IACX,MAAM,gBAAEk4B,EAAe,UAAEC,GAAcn4B,EACjCo4B,EAAUva,EAAAA,GAAAA,gBACV,YAAE5C,IAAgBja,EAAAA,EAAAA,IAAehB,GACvC,IAAKib,GAAgBN,IAAgBud,kBAAoBA,GACpDvd,IAAgBwd,YAAcA,EAMjC,OALGC,GAAWZ,KAA2BzZ,EAAAA,GAAAA,QAAyBqa,GAASta,aAAeC,EAAAA,GAAAA,SACtFsa,EAAAA,EAAAA,MAAaC,OAEjBd,GAAyBY,GAASta,gBAClCnD,GAAiB3a,GAIK,yBAApBk4B,GAA4D,4BAAdC,IAE7CC,GAASta,aAAeC,EAAAA,GAAAA,QAAyBqa,GAASta,aAAeC,EAAAA,GAAAA,YAC1Esa,EAAAA,EAAAA,MAAaC,QAGjBd,GAAyBY,GAASta,WAClCnD,GAAiB3a,CAAM,KC5PzBS,EAAAA,EAAAA,IAAiB,cAAc8Y,MAAOvZ,EAAQU,EAASC,KACrD,MAAM,OACJR,EAAM,OACNykB,EAAM,YACNC,EAAW,MACX5kB,GAAQC,EAAAA,EAAAA,OACNS,EACJ,IAAKR,EACH,OAGF,MAAMqC,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EACH,OAGF,MAAMgD,QAAe0X,EAAAA,EAAAA,IAAQ,aAAc,CACzC4H,KAAMtiB,EACNoiB,SACAC,gBAGFnkB,EAAQ2L,iBAAiB,CACvBnH,QAASM,GACLuf,EAAAA,EAAAA,IAAU,2BACV,2EACJ9kB,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,sBAAsB8Y,MAAOvZ,EAAQU,EAASC,KAC7D,MAAM,OACJR,EAAM,OACNykB,EAAM,YACNC,EAAW,MACX0T,EAAK,MACLt4B,GAAQC,EAAAA,EAAAA,OACNS,EACJ,IAAKR,EACH,OAGF,MAAMqC,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,IAAS+1B,EACZ,OAGF,MAAM/yB,QAAe0X,EAAAA,EAAAA,IAAQ,qBAAsB,CACjD4H,KAAMtiB,EACN+1B,QACA3T,SACAC,gBAGFnkB,EAAQ2L,iBAAiB,CACvBnH,QAASM,GACLuf,EAAAA,EAAAA,IAAU,2BACV,2EACJ9kB,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,sBAAsB8Y,UACrC,MAAM/T,QAAe0X,EAAAA,EAAAA,IAAQ,uBACxB1X,IAILxF,GAASsJ,EAAAA,EAAAA,MACTtJ,EAAS,IACJA,EACHw4B,eAAgB,CACdC,OAAQjzB,EAAOkzB,eACfC,cAAe/wB,OAAOC,KAAKrC,EAAOkzB,gBAClCE,QAASpzB,EAAOozB,WAGpBv1B,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,0BAA0B8Y,MAAOvZ,EAAQU,EAASC,KACjE,MAAM,KAAEiR,GAASjR,EAGjB,UADqBuc,EAAAA,EAAAA,IAAQ,yBAA0BtL,GAErD,OAGF5R,GAASsJ,EAAAA,EAAAA,MAET,MAAQ,CAACsI,GAAOinB,KAAoBC,GAAgB94B,EAAOw4B,eAAeC,OAE1Ez4B,EAAS,IACJA,EACHw4B,eAAgB,CACdC,OAAQK,EACRH,cAAe34B,EAAOw4B,eAAeG,cAAc1zB,QAAQ8zB,GAAOA,IAAOnnB,OAG7EvO,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,8BAA8B8Y,UAE7C,UADqB2D,EAAAA,EAAAA,IAAQ,8BAE3B,OAIF,MAAM8b,GADNh5B,GAASsJ,EAAAA,EAAAA,OACyBkvB,eAAeG,cAC9CjtB,MAAMkG,GAAS5R,EAAOw4B,eAAeC,OAAO7mB,GAAMqnB,YACrD,IAAKD,EACH,OAEF,MAAME,EAAiBl5B,EAAOw4B,eAAeC,OAAOO,GAEpDh5B,EAAS,IACJA,EACHw4B,eAAgB,CACdC,OAAQ,CACN,CAACO,GAAqBE,GAExBP,cAAe,CAACK,MAGpB31B,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,yBAAyB8Y,MAAOvZ,EAAQU,EAASC,KAChE,MAAM,KAAEiR,EAAI,gBAAEunB,EAAe,sBAAEC,GAA0Bz4B,QACpCuc,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDtL,OACAunB,kBACAC,4BAOFp5B,GAASsJ,EAAAA,EAAAA,MACTtJ,EAAS,IACJA,EACHw4B,eAAgB,IACXx4B,EAAOw4B,eACVC,OAAQ,IACHz4B,EAAOw4B,eAAeC,OACzB,CAAC7mB,GAAO,IACH5R,EAAOw4B,eAAeC,OAAO7mB,WACRrR,IAApB44B,EAAgC,CAAEA,wBAAoB54B,UAC5BA,IAA1B64B,EAAsC,CAAEA,8BAA0B74B,OAK9E8C,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,oBAAoB8Y,MAAOvZ,EAAQU,EAASC,KAC3D,MAAM,KAAE04B,GAAS14B,QAEIuc,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEmc,WAMnDr5B,GAASsJ,EAAAA,EAAAA,MACTtJ,EAAS,IACJA,EACHw4B,eAAgB,IACXx4B,EAAOw4B,eACVI,QAASS,KAGbh2B,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,yBAAyB8Y,UACxC,MAAM/T,QAAe0X,EAAAA,EAAAA,IAAQ,0BAC7B,IAAK1X,EACH,OAEF,MAAM,MAAE+X,EAAK,kBAAE+b,GAAsB9zB,EACrCxF,GAASsJ,EAAAA,EAAAA,MAETtJ,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqBC,EAAO,OAEtDvd,EAAS,IACJA,EACHu5B,kBAAmB,CACjBd,OAAQa,EACRX,cAAe/wB,OAAOC,KAAKyxB,MAG/Bj2B,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,6BAA6B8Y,MAAOvZ,EAAQU,EAASC,KACpE,MAAM,KAAEiR,GAASjR,EAGjB,UADqBuc,EAAAA,EAAAA,IAAQ,4BAA6BtL,GAExD,OAGF5R,GAASsJ,EAAAA,EAAAA,MAET,MAAQ,CAACsI,GAAOinB,KAAoBC,GAAgB94B,EAAOu5B,kBAAkBd,OAE7Ez4B,EAAS,IACJA,EACHu5B,kBAAmB,CACjBd,OAAQK,EACRH,cAAe34B,EAAOu5B,kBAAkBZ,cAAc1zB,QAAQ8zB,GAAOA,IAAOnnB,OAGhFvO,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,iCAAiC8Y,gBAC3B2D,EAAAA,EAAAA,IAAQ,mCAK7Bld,GAASsJ,EAAAA,EAAAA,MAETtJ,EAAS,IACJA,EACHu5B,kBAAmB,CACjBd,OAAQ,CAAC,EACTE,cAAe,MAGnBt1B,EAAAA,EAAAA,IAAUrD,GAAO,ICjNnB,MACMw5B,IAAwB5L,EAAAA,EAAAA,KAAUjS,GAAOA,KAAM,KAAK,GC7BnD,SAAS8d,GACdz5B,EAAW0uB,EAAkBgL,MACzBz5B,GAAQC,EAAAA,EAAAA,QAEZ,MAAM0B,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B25B,WAAY,IACP/3B,EAAS+3B,WACZC,WAAY,IACPh4B,EAAS+3B,WAAWC,WACvB,CAAClL,GAAWgL,KAGfz5B,EACL,CAEO,SAAS45B,GACd75B,EAAWyZ,MACPxZ,GAAQC,EAAAA,EAAAA,QAEZ,OAAO8B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B25B,WAAY,KACP34B,EAAAA,EAAAA,IAAehB,EAAQC,GAAO05B,WACjClgB,cAEDxZ,EACL,EDKAQ,EAAAA,EAAAA,IAAiB,gBAAgB8Y,MAAOvZ,EAAQU,EAASC,KACvD,MAAM,OAAE+O,GAAW/O,EACb0iB,GAAOlC,EAAAA,EAAAA,IAAWnhB,EAAQ0P,GAChC,IAAK2T,EACH,OAGF,MAAM,GAAE/hB,EAAE,WAAEkrB,GAAenJ,EACrByW,QAAgB5c,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE5b,KAAIkrB,eACrD,IAAKsN,EAAS,OAEd,MAAMC,EAAuB1W,EAAK2W,aAAeF,EAAQE,WACnDC,EAAyB5W,EAAKwH,UAAUqP,cAAc54B,KAAOw4B,EAAQjP,UAAUqP,cAAc54B,GAC7F64B,EAA0B9W,EAAKwH,UAAUuP,eAAe94B,KAAOw4B,EAAQjP,UAAUuP,eAAe94B,GAChG+4B,EAA0BhX,EAAKwH,UAAUyP,eAAeh5B,KAAOw4B,EAAQjP,UAAUyP,eAAeh5B,IACjGy4B,GAAwBE,GAA0BE,GAA2BE,IAC7EhX,EAAKkX,QAAQvyB,QAChBtH,EAAQ02B,kBAAkB,CAAEC,UAAW3nB,GACzC,KAGFjP,EAAAA,EAAAA,IAAiB,YAAY8Y,MAAOvZ,EAAQU,EAASC,KACnD,MAAM,OAAE+O,GAAW/O,EACb0iB,GAAOlC,EAAAA,EAAAA,IAAWnhB,EAAQ0P,GAChC,IAAK2T,EACH,OAGF,MAAM7d,QAAe0X,EAAAA,EAAAA,IAAQ,aAAc,CAAEK,MAAO,CAAC8F,KACrD,IAAK7d,EACH,OAGF,MAAM,MAAE+X,EAAK,iBAAEid,GAAqBh1B,EAEpCxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASy6B,EAAAA,EAAAA,IAAYz6B,GAAQsd,EAAAA,EAAAA,IAAqBC,EAAO,OACzDvd,GAAS06B,EAAAA,EAAAA,IAAoB16B,EAAQ,IAChCA,EAAOud,MAAMod,gBACbH,KAELn3B,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,gBAAgB8Y,UAC/B,MAAQqhB,UAAU,gBAAEC,IAAsB76B,EAE1C,GAAO66B,MAAmB1tB,EAAAA,EAAAA,MAAkB0tB,EAlDX,IAmD/B,OAGF,MAAMr1B,QAAe0X,EAAAA,EAAAA,IAAQ,iBAC7B,IAAK1X,EACH,OAGF,MAAM,IAAE0E,EAAG,MAAEqT,GAAU/X,EAEvBxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqBC,EAAO,OACtDvd,EAAS,IACJA,EACH46B,SAAU,IACL56B,EAAO46B,SACVtG,QAASpqB,EACT2wB,iBAAiB1tB,EAAAA,EAAAA,SAGrB9J,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,mBAAmB8Y,UAClC,MAAMuhB,QAAoB5d,EAAAA,EAAAA,IAAQ,oBAClC,IAAK4d,EACH,OAGF96B,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqBwd,EAAYvd,MAAO,OAClEvd,GAASipB,EAAAA,EAAAA,IAASjpB,GAAQsd,EAAAA,EAAAA,IAAqBwd,EAAYlsB,MAAO,OAClE5O,GAAS+6B,EAAAA,EAAAA,IAAgB/6B,EAAQ86B,EAAYN,kBAG7C,MAAMQ,EAAoB3X,GAAmBA,EAAK2Q,UAAY3Q,EAAKyQ,WAAa,GAC1EmH,EAAW,IAAIC,KAAKC,SAAS,SAE7BC,EAAcN,EAAYvd,MAAMlY,MAAK,CAAC6Y,EAAGuI,IAC7CwU,EAASI,QAAQL,EAAiB9c,GAAI8c,EAAiBvU,MACtDxhB,QAAQoe,IAAUA,EAAKiY,SAE1Bt7B,EAAS,IACJA,EACH86B,YAAa,CACXxG,QAAS8G,EAAYp2B,KAAKqe,GAASA,EAAK/hB,QAG5C+B,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,mBAAmB,MAC7Byc,EAAAA,EAAAA,IAAQ,mBAAmB,KAGlCzc,EAAAA,EAAAA,IAAiB,mBAAmB8Y,MAAOvZ,EAAQU,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACzDojB,EAAOljB,GAASghB,EAAAA,EAAAA,IAAWnhB,EAAQG,QAAUI,EACnD,IAAK8iB,IAAQ2B,EAAAA,EAAAA,IAAU3B,IAASA,EAAKkY,aAAaC,cAChD,OAGF,MAAMhuB,EAAQ6V,EAAKkY,aAAa/tB,MAC1BhI,QAAe0X,EAAAA,EAAAA,IAAQ,mBAAoBmG,EAAK/hB,GAAI+hB,EAAKmJ,WAAahf,GAC5E,IAAKhI,EACH,OAGF,MAAM,MAAEoJ,EAAK,QAAEglB,EAAO,cAAE4H,GAAkBh2B,EAE1CxF,GAASsJ,EAAAA,EAAAA,MACLsF,EAAM5G,SACRhI,GAASipB,EAAAA,EAAAA,IAASjpB,GAAQsd,EAAAA,EAAAA,IAAqB1O,EAAO,QAExD5O,GAASy7B,EAAAA,EAAAA,IAAWz7B,EAAQqjB,EAAK/hB,GAAI,CACnCi6B,YAAa,CACX/tB,MAAOomB,EAAQ5rB,OAAS4rB,EAAQA,EAAQ5rB,OAAS,GAAK,IACtDkC,KAAK+L,EAAAA,EAAAA,KAAQoN,EAAKkY,aAAarxB,KAAO,IAAI4e,OAAO8K,IACjD4H,oBAIJn4B,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,iBAAiB8Y,MAAOvZ,EAAQU,EAASC,KACxD,MAAM,OACJ+O,EAAM,QAAE/G,GAAU,EAAK,UAAEmrB,EAAS,SAAEE,EAAQ,uBAAE0H,EAAsB,MACpEz7B,GAAQC,EAAAA,EAAAA,OACNS,EAEE0iB,GAAOlC,EAAAA,EAAAA,IAAWnhB,EAAQ0P,GAChC,IAAK2T,EACH,OASF,IAAI7d,EACJ,GAPA9E,EAAQi7B,qBAAqB,CAAEx7B,OAAQuP,EAAQ/G,YAE/C3I,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASo1B,EAAAA,EAAAA,IAAyBp1B,EAAQg1B,EAAAA,GAAAA,WAA+B/0B,IACzEoD,EAAAA,EAAAA,IAAUrD,IAGLqjB,EAAKuY,WAAavY,EAAKwY,YAC1Br2B,QAAe0X,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE4e,MAAOzY,EAAKwY,YAAa/H,YAAWE,iBACzE,CACL,MAAM,GAAE1yB,EAAE,WAAEkrB,GAAenJ,EAC3B7d,QAAe0X,EAAAA,EAAAA,IAAQ,gBAAiB,CACtC5b,KACAkrB,aACAqP,YAAa,GACb/H,YACAE,WACA0H,0BAEJ,CAEIl2B,IACF9E,EAAQq7B,iBAAiB,CAAE57B,OAAQuP,IAEnC1P,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASy7B,EAAAA,EAAAA,IACPz7B,EACAqjB,EAAK/hB,GACL,CACEwyB,YACAE,cAGJ3wB,EAAAA,EAAAA,IAAUrD,IAGZA,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASo1B,EAAAA,EAAAA,IAAyBp1B,EAAQg1B,EAAAA,GAAAA,SAA6B/0B,GACvED,GAAS6P,EAAAA,EAAAA,IAAsB7P,EAAQC,IACvCoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,iBAAiB8Y,MAAOvZ,EAAQU,EAASC,KACxD,MAAM,OAAE+O,GAAW/O,EAEb0iB,GAAOlC,EAAAA,EAAAA,IAAWnhB,EAAQ0P,GAEhC,IAAK2T,EACH,OAGF,MAAM,GAAE/hB,EAAE,WAAEkrB,GAAenJ,QAErBnG,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE5b,KAAIkrB,cAAa,KAGpD/rB,EAAAA,EAAAA,IAAiB,qBAAqB8Y,MAAOvZ,EAAQU,EAASC,KAC5D,MAAM,UAAE02B,GAAc12B,EAChBq7B,GAAYC,EAAAA,EAAAA,IAAS5E,GAE3B,IAAIhU,EAAO2Y,GAAY7a,EAAAA,EAAAA,IAAWnhB,EAAQq3B,QAAa92B,EACvD,MAAMiC,EAAQw5B,OAA4Cz7B,GAAhCkC,EAAAA,EAAAA,IAAWzC,EAAQq3B,GAC7C,IAAKhU,IAAS7gB,EACZ,OAGF,GAAI6gB,IAASA,GAAMwH,SAAU,CAC3B,MAAM,GAAEvpB,EAAE,WAAEkrB,GAAenJ,EAE3B,GADAA,QAAanG,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE5b,KAAIkrB,gBACvCnJ,EAAM,MACb,CAEA,MAAM7d,QAAe0X,EAAAA,EAAAA,IAAQ,qBAAsBmG,EAAM7gB,GACzD,IAAKgD,IAAWA,EAAO+0B,OACrB,OAGFv6B,GAASsJ,EAAAA,EAAAA,MAET,MAAM4yB,EAAa7Y,GAAQ7gB,GACrB,OAAE+3B,EAAM,MAAEhd,GAAU/X,EAC1B+0B,EAAOl1B,MAAM6Y,GAAOA,EAAE5c,KAAO46B,GAAYlC,YAAc,EAAI,IAC3D,MAAMI,EAAgB/W,GAAMwH,UAAUuP,cAChCE,EAAgBjX,GAAMwH,UAAUyP,cAClCF,GAAeG,EAAO10B,KAAKu0B,GAC3BE,GAAeC,EAAOvrB,QAAQsrB,GAElCt6B,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqBC,EAAO,OAGpDvd,EADEg8B,GACOP,EAAAA,EAAAA,IAAWz7B,EAAQq3B,EAAW,CAAEkD,YAEhC/W,EAAAA,EAAAA,IAAWxjB,EAAQq3B,EAAW,CAAEkD,YAG3Cl3B,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,sBAAsB,CAACT,EAAQU,EAASC,KACvD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAExCC,GAEA44B,IAAsBjgB,UACzB,MAAM/T,QAAe0X,EAAAA,EAAAA,IAAQ,cAAe,CAAEtc,UAE9CZ,GAASsJ,EAAAA,EAAAA,MACT,MAAM4qB,GAAqBlzB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOk8B,WAAWv7B,MAEpE,IAAK4E,IAAW0uB,GAAuBtzB,IAAUszB,EAG/C,OAFAl0B,GAASo8B,EAAAA,EAAAA,IAA+Bp8B,GAAQ,EAAOC,QACvDoD,EAAAA,EAAAA,IAAUrD,GAIZ,MAAM,WAAEq8B,EAAU,YAAEC,GAAgB92B,EAEpC,IAAIiK,EACAD,EACA6sB,EAAWr0B,SACbhI,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqB+e,EAAY,OAC3D5sB,EAAe4sB,EAAWr3B,KAAI,EAAG1D,QAASA,KAExCg7B,EAAYt0B,SACdhI,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqBgf,EAAa,OAC5D9sB,EAAgB8sB,EAAYt3B,KAAI,EAAG1D,QAASA,KAG9CtB,GAASo8B,EAAAA,EAAAA,IAA+Bp8B,GAAQ,EAAOC,GACvDD,GAASuP,EAAAA,EAAAA,IAAiBvP,EAAQ,CAAEyP,eAAcD,iBAAiBvP,IAEnEoD,EAAAA,EAAAA,IAAUrD,EAAO,GACjB,KAGJS,EAAAA,EAAAA,IAAiB,iBAAiB8Y,MAAOvZ,EAAQU,EAASC,KACxD,MACEk7B,YAAaC,EAAK,UAAEhI,EAAS,SAAEE,EAAQ,MACvC/zB,GAAQC,EAAAA,EAAAA,OACNS,EAEE6E,QAAe0X,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE4e,QAAOhI,YAAWE,aAC7DxuB,GASL9E,EAAQ4C,SAAS,CAAEhC,GAAIkE,EAAQvF,UAE/BD,GAASsJ,EAAAA,EAAAA,MACTtJ,GAAS6P,EAAAA,EAAAA,IAAsB7P,EAAQC,IACvCoD,EAAAA,EAAAA,IAAUrD,IAZRU,EAAQ2L,iBAAiB,CACvBnH,QAASP,EAAAA,GAAuB,qCAChC1E,SAUa,KAGnBQ,EAAAA,EAAAA,IAAiB,cAAc,CAACT,EAAQU,EAASC,KAC/C,MAAM,OAAER,GAAWQ,EACbu7B,GAAaD,EAAAA,EAAAA,IAAS97B,IAAUghB,EAAAA,EAAAA,IAAWnhB,EAAQG,IAAUsC,EAAAA,EAAAA,IAAWzC,EAAQG,GACjF+7B,IAIAhf,EAAAA,EAAAA,IAAQ,aAAcgf,EAAW,KAGxCz7B,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,YAAE47B,EAAW,QAAEC,GAAY77B,GAE5Buc,EAAAA,EAAAA,IAAQ,oBAAqBqf,EAAaC,EAAQ,I,gBE/VzD,MAAMC,GAAkBvS,EAAAA,IAAUwS,EAAAA,GAEnB,MAAMC,GAGnBC,YAAoBC,EAA2BC,G,UAA6B,KAAxDD,SAAAA,EAAiB,KAAUC,OAAAA,E,EAA2B,K,OAAA,G,+SAAA,gB,uFAC1E,CAEAC,kBACON,KAELO,KAAKC,UAAYj6B,OAAOC,KAAK,mBAAe1C,EAAWy8B,KAAKH,UACxDG,KAAKC,UACPD,KAAKC,UAAUC,OAEfF,KAAKF,WAET,CAEA75B,KAAKkR,GACH,GAAI6oB,KAAKC,UAKP,OAJAD,KAAKC,UAAWE,SAAShtB,KAAOgE,EAChC6oB,KAAKC,UAAWG,aAChBJ,KAAKC,eAAY18B,GAKnB,IAAKk8B,GAAiB,CACpB,MAAMY,EAAQr6B,OAAOC,KAAKkR,OAAK5T,EAAWy8B,KAAKH,UAC3CQ,EACFA,EAAMD,QAENJ,KAAKF,UAET,CACF,CAEAQ,gBACEN,KAAKC,WAAWM,QAChBP,KAAKC,eAAY18B,CACnB,ECdF,MAAMi9B,GAAY,4BAEZC,IAAwBhtB,EAAAA,EAAAA,KAAUkL,GAAOA,KAAM,KAAK,GA6kB1DpC,eAAemkB,GACb19B,EAAW29B,EAAcC,EAAoBC,SAEvC3gB,EAAAA,EAAAA,IAAQ,kBAAmB,CAAEygB,MAAKE,iBAAgBD,cACxD59B,GAASsJ,EAAAA,EAAAA,YACHw0B,GAAe99B,EACvB,CAEAuZ,eAAeukB,GAAsC99B,EAAW4R,GAC9D,MAAMpM,QAAe0X,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEtL,SAC5CpM,IAILxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqB9X,EAAO+X,MAAO,OAC7Dvd,EAAS,IACJA,EACH+9B,WAAY,CACVnsB,KAAMpM,EAAOoM,KACbosB,KAAMx4B,EAAOw4B,QAGjB36B,EAAAA,EAAAA,IAAUrD,GACZ,CAgMA,SAASi+B,GACPj+B,EACAU,EACAyT,EAAa3O,MACTvF,GAAQC,EAAAA,EAAAA,QAEZ,GAAoB,YAAhBsF,EAAOhE,KAAoB,CAC7BxB,GAASsJ,EAAAA,EAAAA,MACT,MAAM1H,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,IAAK2B,EAASs8B,QAAS,OACvB,MAAM,OAAEC,EAAM,IAAER,EAAG,yBAAES,GAA6B54B,EAYlD,OAXAxF,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9Bk+B,QAAS,IACJt8B,EAASs8B,QACZG,QAAS,CACPF,SACA3pB,MAAOmpB,EAAIr8B,GACX88B,8BAGHn+B,QACHoD,EAAAA,EAAAA,IAAUrD,EAEZ,CAEA,MAAMs+B,EAA0B,aAAhB94B,EAAOhE,KAAsBgE,EAAO2O,IAAMA,EAC1DnR,OAAOC,KAAKq7B,EAAS,SAAU,YAC/B59B,EAAQ69B,kBAAkB,CAAEt+B,SAC9B,CAiEAsZ,eAAeilB,GACbh8B,EAAepC,EAAWmB,EAAAA,GAAgBk9B,EAAiB1d,EAAqBG,SAE1EhE,EAAAA,EAAAA,IAAQ,cAAe,CAC3B1a,OACAme,gBAAiBvgB,EACjBmD,KAAMk7B,EACN1d,aACAG,WACA3H,MAAOgQ,EAASC,WACV3L,EAAAA,GAAAA,gBACFsG,oBAAoB,IAAI2F,EAAAA,GAAQ,CAChCnpB,QAAQiZ,KAAKC,UAAU,CACrBkQ,IAAIP,MAEL1G,QAAO,GAEhB,CAEA,IAAI4b,GAEJnlB,eAAeolB,GACb3+B,EACAU,EAAgC8B,EAAemE,EAAmBiN,EAAegrB,GAAS,MACtF3+B,GAAQC,EAAAA,EAAAA,QAEZ,MAAM,WACJwsB,EAAU,iBAAErgB,EAAgB,QAAEwyB,EAAO,SAAEC,GACrCp+B,EAEAk+B,IACGF,KACHA,GAAc,IAAI/B,GAAa,8BAA8B,KAC3DtwB,EAAiB,CAAEnH,QAAS,qCAAsCjF,SAAQ,KAI9Ey+B,GAAY3B,mBAGd,MAAMv3B,QAAe0X,EAAAA,EAAAA,IAAQ,uBAAwB,CACnD/c,OAAQqC,EAAKlB,GACbkrB,WAAYhqB,EAAKgqB,WACjB7lB,YACAiN,OACAgrB,WAGF,IAAKp5B,EACH,OAEF,MAAM,QAAEN,EAAS65B,MAAOC,EAAO,IAAE7qB,GAAQ3O,EAErCw5B,EACFtS,EAAW,CAAE9Y,KAAM,CAAE1O,QAASA,GAAW,SAAWjF,UAC3CiF,EACTmH,EAAiB,CAAEnH,UAASjF,UACnBkU,IACLyqB,EAEEzqB,EAAIzJ,SAAS8yB,IACfkB,GAAaz7B,KAAKkR,IAElBuqB,GAAapB,gBACbwB,EAAS,CACP3qB,MAAKhU,OAAQqC,EAAKlB,GAAIqF,YAAW1G,WAIrC4+B,EAAQ,CAAE1qB,MAAKlU,UAGrB,CC34BAsZ,eAAe0lB,GACbj/B,EAAWk/B,MACPj/B,GAAQC,EAAAA,EAAAA,QAEZ,MAAMsF,QAAe0X,EAAAA,EAAAA,IAAQ,iBAAkBgiB,GAC/C,IAAK15B,EACH,OAGF,MAAM,KAAE25B,EAAI,QAAEC,EAAO,MAAE7hB,GAAU/X,EAQjC,OANAxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASq/B,EAAAA,EAAAA,IAAer/B,EAAQm/B,EAAMl/B,GACtCD,GAASs/B,EAAAA,EAAAA,IAAet/B,EAAQu/B,EAAAA,GAAAA,SAAsBt/B,GACtDD,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqBC,EAAO,QACtDla,EAAAA,EAAAA,IAAUrD,GAEHo/B,CACT,CAqUA7lB,eAAeimB,GACbx/B,EAAWk/B,EAAsCO,EAAkBC,MAC/Dz/B,GAAQC,EAAAA,EAAAA,QAEZ,MAAMsF,QAAe0X,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDgiB,eAAcO,cAAaC,eAE7B,IAAKl6B,EACH,OAGF,MAAM,GAAElE,EAAE,gBAAEq+B,GAAoBn6B,EAChCxF,GAASsJ,EAAAA,EAAAA,MAETtJ,GAAS4/B,EAAAA,EAAAA,IAAiB5/B,EAAQsB,EAAIrB,GAClC0/B,GACF3/B,GAAS6/B,EAAAA,EAAAA,IAAsB7/B,EAAQ2/B,EAAiB1/B,GACxDD,GAASs/B,EAAAA,EAAAA,IAAet/B,EAAQu/B,EAAAA,GAAAA,SAAsBt/B,IAEtDD,GAASs/B,EAAAA,EAAAA,IAAet/B,EAAQu/B,EAAAA,GAAAA,SAAsBt/B,IAExDoD,EAAAA,EAAAA,IAAUrD,EACZ,ED1aAS,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,UAAEgG,EAAS,OAAEm5B,EAAM,MAAE7/B,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzD,OAAQm/B,EAAOt+B,MACb,IAAK,UACHd,EAAQ89B,eAAe,CAAEC,QAASqB,EAAOv8B,KAAMtD,UAC/C,MACF,IAAK,MAAO,CACV,MAAM,IAAEkU,GAAQ2rB,EAChBp/B,EAAQm+B,QAAQ,CAAE1qB,MAAKlU,UACvB,KACF,CACA,IAAK,WAAY,CACf,MAAMuC,GAAOsJ,EAAAA,EAAAA,IAAkB9L,EAAQC,GACvC,IAAKuC,EACH,OAGGm8B,GAAqB3+B,EAAQU,EAAS8B,EAAMmE,EAAWm5B,EAAOlsB,UAAMrT,EAAWN,GACpF,KACF,CACA,IAAK,cACHS,EAAQq/B,cAAc,CAAExzB,OAAQuzB,EAAOvzB,OAAQtM,UAC/C,MACF,IAAK,eAAgB,CACnB,MAAMojB,EAAOrjB,EAAOgY,eAAgBmJ,EAAAA,EAAAA,IAAWnhB,EAAQA,EAAOgY,oBAAiBzX,EAC/E,IAAK8iB,EACH,OAEF3iB,EAAQgsB,WAAW,CACjB9Y,KAAM,CACJioB,YAAaxY,EAAKwY,YAClB/H,UAAWzQ,EAAKyQ,UAChBE,SAAU3Q,EAAK2Q,SACftkB,OAAQ2T,EAAK/hB,IAEfrB,UAEF,KACF,CACA,IAAK,UAAW,CACd,MAAMuC,GAAOsJ,EAAAA,EAAAA,IAAkB9L,EAAQC,GACvC,IAAKuC,EACH,OAEF,MAAM,iBAAEw9B,GAAqBF,EAC7Bp/B,EAAQu/B,WAAW,CACjBD,mBAAkB7/B,OAAQqC,EAAKlB,GAAIqF,YAAW1G,UAEhD,KACF,CACA,IAAK,MAAO,CACV,MAAMuC,GAAOsJ,EAAAA,EAAAA,IAAkB9L,EAAQC,GACvC,IAAKuC,EACH,OAEF9B,EAAQw/B,YAAY,CAClB//B,OAAQqC,EAAKlB,GACbqF,YACA1G,UAEF,KACF,CACA,IAAK,OAAQ,CACX,MAAMuC,GAAOsJ,EAAAA,EAAAA,IAAkB9L,EAAQC,GACvC,IAAKuC,EACH,OAGGm8B,GAAqB3+B,EAAQU,EAAS8B,EAAMmE,OAAWpG,GAAW,EAAMN,GAC7E,KACF,CACA,IAAK,kBAAmB,CACtB,MAAM,MAAEW,EAAK,WAAEu/B,GAAeL,EAC9Bp/B,EAAQ0/B,gBAAgB,CACtBx/B,QAAOu/B,aAAYx5B,YAAW1G,UAEhC,KACF,CAEA,IAAK,cAAe,CAClB,MAAM,OAAEyP,GAAWowB,EACnBp/B,EAAQ2/B,iBAAiB,CAAE/+B,GAAIoO,EAAQzP,UACvC,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,IAAEkU,GAAQ2rB,GACV,OAAE3/B,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAC/D,IAAKE,EACH,OAEF,MAAM+E,GAAUqP,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQwG,GAClD,IAAKzB,GAASwP,SAAU,OACxB,MAAM4rB,GAAQC,EAAAA,GAAAA,MACd7/B,EAAQ8/B,qBAAqB,CAC3BrsB,MAAKK,MAAOtP,GAASwP,SAAU4rB,QAAOG,WAAYX,EAAOv8B,KAAMtD,UAEjE,KACF,CAEA,IAAK,UAAW,CACd,MAAM,IAAEkU,GAAQ2rB,EACVt9B,GAAOsJ,EAAAA,EAAAA,IAAkB9L,EAAQC,GACvC,IAAKuC,EACH,OAEF,MAAM0C,GAAUqP,EAAAA,EAAAA,IAAkBvU,EAAQwC,EAAKlB,GAAIqF,GACnD,IAAKzB,EACH,OAEF,MAAMsP,EAAQtP,EAAQuP,UAAYvP,EAAQwP,SAC1C,IAAKF,EACH,OAEF,MAAM8rB,GAAQC,EAAAA,GAAAA,MACd7/B,EAAQggC,eAAe,CACrBvsB,MACAK,QACAmsB,OAAQn+B,EAAKlB,GACbg/B,QACAG,WAAYX,EAAOv8B,KACnBtD,UAEF,KACF,CACA,IAAK,UAAW,CACd,MAAM,IAAEkU,GAAQ2rB,EACVt9B,GAAOsJ,EAAAA,EAAAA,IAAkB9L,EAAQC,GACvC,IAAKuC,EACH,OAEF9B,EAAQkgC,kBAAkB,CACxBzgC,OAAQqC,EAAKlB,GACbqF,YACAk6B,SAAUf,EAAOe,SACjB1sB,MACAlU,UAEF,KACF,EAAC,KAILQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,QAAE89B,EAAO,OAAEt+B,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,EACjD6B,EAAOrC,GAASsC,EAAAA,EAAAA,IAAWzC,EAAQG,IAAU2L,EAAAA,EAAAA,IAAkB9L,EAAQC,GACvE0B,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAE5D,IAAKuC,IAASb,EACZ,OAGF,MAAM,SAAEvB,GAAauB,EACrBjB,EAAQ4H,gBAAgB,CAAE3B,eAAWpG,EAAWN,UAChDS,EAAQ0gB,oBAAoB,CAAEnhB,UAEzBu+B,GACHh8B,EAAMpC,EAAUq+B,GAASh3B,EAAAA,EAAAA,IAAmBzH,EAAQwC,EAAKlB,GAAIlB,IAAWsmB,EAAAA,EAAAA,IAAa1mB,EAAQwC,EAAKlB,IACnG,KAGHb,EAAAA,EAAAA,IAAiB,cAAc8Y,MAAOvZ,EAAQU,EAASC,KACrD,MAAM,OAAER,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,GACxC,cAAEqX,GAAkBhY,EACpBwC,GAAOsJ,EAAAA,EAAAA,IAAkB9L,EAAQC,GACjC09B,EAAM3lB,IAAiB8oB,EAAAA,EAAAA,IAAc9gC,EAAQG,GAC9C6X,GAAkBxV,GAASm7B,SAIXzgB,EAAAA,EAAAA,IAAQ,iBAAkBygB,EAAIr8B,GAAIq8B,EAAInR,cAK3DxsB,GAASsJ,EAAAA,EAAAA,MACTtJ,GAAS+gC,EAAAA,EAAAA,IAAqB/gC,EAAQ29B,EAAIr8B,KAC1C+B,EAAAA,EAAAA,IAAUrD,GACLw+B,GAAeh8B,EAAMjB,EAAAA,GAAgB,cAAUhB,GAAWmmB,EAAAA,EAAAA,IAAa1mB,EAAQG,IAAQ,KAG9FM,EAAAA,EAAAA,IAAiB,qBAAqB8Y,UACpC,MAAM,gBAAEshB,GAAoB76B,EAAOghC,cACnC,GAAInG,IAAmB1tB,EAAAA,EAAAA,MAAkB0tB,EA3LR,GA4L/B,OAGF,MAAMr1B,QAAe0X,EAAAA,EAAAA,IAAQ,sBAC7B,IAAK1X,EACH,OAGF,MAAM,IAAE0E,EAAG,MAAEqT,GAAU/X,EAEvBxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqBC,EAAO,OACtDvd,EAAS,IACJA,EACHghC,cAAe,IACVhhC,EAAOghC,cACV1M,QAASpqB,EACT2wB,iBAAiB1tB,EAAAA,EAAAA,SAGrB9J,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,kBAAkB8Y,MAAOvZ,EAAQU,EAASC,KACzD,MAAM,OACJR,EAAM,SAAEuuB,EAAQ,MAAE9tB,EAAK,OAAEyO,EAAM,MAC/BpP,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,IAAIsgC,GAAgBjgC,EAAAA,EAAAA,IAAehB,EAAQC,GAAO05B,WAAWC,WAAWlL,GACxE,IAAsB,IAAlBuS,EAAJ,CAIA,QAAsB1gC,IAAlB0gC,EAA6B,CAC/B,MAAQ5d,KAAM6d,EAAS,KAAE1+B,SAAe0a,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEwR,cAAe,CAAC,EAEpF,GADA1uB,GAASsJ,EAAAA,EAAAA,OACJ43B,IAAc1+B,EAGjB,OAFAxC,EAASy5B,GAAyBz5B,EAAQ0uB,GAAU,EAAOzuB,QAC3DoD,EAAAA,EAAAA,IAAUrD,GAIZA,GAASqd,EAAAA,EAAAA,IAASrd,EAAQ,CAAE,CAACkhC,EAAU5/B,IAAK4/B,IAC5ClhC,GAASipB,EAAAA,EAAAA,IAASjpB,EAAQ,CAAE,CAACwC,EAAKlB,IAAKkB,IACvCy+B,EAAgB,CACd3/B,GAAI4/B,EAAU5/B,GACdV,MAAO,GACPyO,OAAQ,GACR8xB,cAAU5gC,EACV6gC,aAAa,EACb9xB,QAAS,GACT+xB,UAAW,GAGbrhC,EAASy5B,GAAyBz5B,EAAQ0uB,EAAUuS,EAAehhC,IACnEoD,EAAAA,EAAAA,IAAUrD,EACZ,EAEIY,IAAUqgC,EAAcrgC,OAAUqgC,EAAcG,cAI/C3D,IAAsB,MAykB7BlkB,eAAsDvZ,GAAW,SAC/D0uB,EAAQ,cACRuS,EAAa,OACb9gC,EAAM,MACNS,EAAK,OACLyO,OAOKpP,GAAQC,EAAAA,EAAAA,QACbF,GAASsJ,EAAAA,EAAAA,MACT,MAAMq0B,GAAMxc,EAAAA,EAAAA,IAAWnhB,EAAQihC,EAAc3/B,IACvCkB,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKw9B,IAAQn7B,EACX,OAGF,MAAM8+B,EAAwBL,EAAcrgC,QAAUA,EAEtDZ,EAASy5B,GADTz5B,EAAS65B,GAA2B75B,GAAQ,EAAMC,GACRyuB,EAAU,IAC/CuS,EACHrgC,WACI0gC,GAAyB,CAAEjyB,YAAQ9O,EAAW+O,QAAS,KAC1DrP,IACHoD,EAAAA,EAAAA,IAAUrD,GAEV,MAAMwF,QAAe0X,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDygB,MACAn7B,OACA5B,QACAyO,OAAQiyB,OAAwB/gC,EAAY8O,IAG9CrP,GAASsJ,EAAAA,EAAAA,MACT,MAAMi4B,GAAmBvgC,EAAAA,EAAAA,IAAehB,EAAQC,GAAO05B,WAAWC,WAAWlL,GAE7E,GADA1uB,EAAS65B,GAA2B75B,GAAQ,EAAOC,IAC9CuF,IAAW+7B,GAAoB3gC,IAAU2gC,EAAiB3gC,MAE7D,YADAyC,EAAAA,EAAAA,IAAUrD,GAIZ,MAAMwhC,EAAa,IAAIC,KAAKF,EAAiBjyB,SAAW,IAAItK,KAAK4O,GAASA,EAAKtS,MACzEogC,EAAal8B,EAAO8J,QAAQrK,QAAQ2O,IAAU4tB,EAAW9X,IAAI9V,EAAKtS,MAExEtB,EAASy5B,GAAyBz5B,EAAQ0uB,EAAU,IAC/C6S,EACHI,KAAMn8B,EAAOm8B,KACbN,UAAW30B,KAAKC,MAA2B,IAAnBnH,EAAO67B,aAC3BK,EAAW15B,QAAU,CAAE45B,UAAWp8B,EAAOo8B,cACzCp8B,EAAO27B,UAAY,CAAEA,SAAU37B,EAAO27B,UAC1CC,YAAa57B,EAAO8J,QAAQtH,OAAS,GAAKf,QAAQzB,EAAO2gB,YACzD7W,QAAqC,KAA5BiyB,EAAiBlyB,QAAiBkyB,EAAiBlyB,SAAW7J,EAAO2gB,WAC1E3gB,EAAO8J,SACNiyB,EAAiBjyB,SAAW,IAAIwZ,OAAO4Y,GAC5CryB,OAAQqyB,EAAW15B,OAASxC,EAAO2gB,WAAa,IAC/ClmB,IAEHoD,EAAAA,EAAAA,IAAUrD,EACZ,CAroBI6hC,CAAgB7hC,EAAQ,CACtB0uB,WACAuS,cAAeA,EACf9gC,SACAS,QACAyO,UACCpP,EAAM,GAtCX,CAuCE,KAGJQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,MACJC,EAAK,WAAEu/B,EAAU,UAAEx5B,EAAS,MAAE1G,GAAQC,EAAAA,EAAAA,OACpCS,EACE6B,GAAOsJ,EAAAA,EAAAA,IAAkB9L,EAAQC,GACvC,IAAKuC,EACH,OAEF,MAAM0C,GAAUqP,EAAAA,EAAAA,IAAkBvU,EAAQwC,EAAKlB,GAAIqF,GACnD,IAAKzB,EACH,OAGF,MAAM48B,GAAY3gB,EAAAA,EAAAA,IAAWnhB,EAAQkF,EAAQuP,UAAYvP,EAAQwP,UAC5DotB,GAILphC,EAAQqhC,kBAAkB,CACxBx+B,KAAO,IAAGu+B,EAAUE,UAAW,GAAGtT,YAAY9tB,IAC9CT,OAAQggC,EAAa39B,EAAKlB,QAAKf,EAC/BN,SAEc,KAGlBQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,GACJW,EAAE,QAAE2gC,EAAO,SAAEje,EAAQ,YAAEvD,EAAW,MAClCxgB,GAAQC,EAAAA,EAAAA,OACNS,EACEgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,IAAuBL,EAC1B,OAGF,MAAM,OAAEnB,EAAM,SAAEC,GAAauB,EAEvBa,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAC1B4gB,GAAatZ,EAAAA,EAAAA,IAAmBzH,EAAQG,EAAQC,GACtD,IAAIugB,EAEAI,GAAc3gB,IAAamB,EAAAA,KAC7Bof,GAAkBC,EAAAA,EAAAA,IAAyB5gB,EAAQG,EAAQC,IAG7DM,EAAQ4H,gBAAgB,CAAE3B,eAAWpG,EAAWN,UAChDS,EAAQ0gB,oBAAoB,CAAEnhB,WAEzBid,EAAAA,EAAAA,IAAQ,sBAAuB,CAClC1a,OACA0/B,SAAU5gC,EACV2gC,UACAlhB,aACAJ,kBACAO,QAAQwF,EAAAA,EAAAA,IAAa1mB,EAAQG,GAC7B6jB,WACAme,aAAc1hB,GACd,KAGJhgB,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,SAAE+tB,EAAQ,MAAE/d,EAAK,MAAE1Q,GAAQC,EAAAA,EAAAA,OAAsBS,EAEvD,IAAIsgC,GAAgBjgC,EAAAA,EAAAA,IAAehB,EAAQC,GAAO05B,WAAWC,WAAWlL,GAEnEuS,KAIAtwB,GAASjE,KAAKC,MAAQs0B,EAAcI,YAEzCJ,EAAgB,CACd3/B,GAAI2/B,EAAc3/B,GAClBV,MAAO,GACPyO,OAAQ,GACR8xB,cAAU5gC,EACV6gC,aAAa,EACb9xB,QAAS,GACT+xB,UAAW,GAGbrhC,EAASy5B,GAAyBz5B,EAAQ0uB,EAAUuS,EAAehhC,IACnEoD,EAAAA,EAAAA,IAAUrD,IAAO,KAGnBS,EAAAA,EAAAA,IAAiB,sBAAsB,CAACT,EAAQU,EAASC,KACvD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5Cg5B,GAAa34B,EAAAA,EAAAA,IAAehB,EAAQC,GAAO05B,WAAWC,WAE5DhyB,OAAOC,KAAK8xB,GAAYluB,SAASijB,IAC/BhuB,EAAQ0hC,eAAe,CAAE1T,WAAUzuB,SAAQ,GAC3C,KAGJQ,EAAAA,EAAAA,IAAiB,YAAY8Y,MAAOvZ,EAAQU,EAASC,KACnD,MAAM,MAAE6T,EAAK,MAAE6tB,GAAU1hC,EAEzB,IAAIg9B,GAAMxc,EAAAA,EAAAA,IAAWnhB,EAAQwU,GACxBmpB,IAGAA,EAAI9S,gBAAgB3N,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE5b,GAAIq8B,EAAIr8B,GAAIkrB,WAAYmR,EAAInR,aAChFxsB,GAASsJ,EAAAA,EAAAA,MACTq0B,GAAMxc,EAAAA,EAAAA,IAAWnhB,EAAQwU,GACrBmpB,EAAI9S,UAAUyX,iBAAiBplB,EAAAA,EAAAA,IAAQ,iBAAkBygB,EAAIr8B,GAAIq8B,EAAInR,kBAEnEtP,EAAAA,EAAAA,IAAQ,WAAY,CACxBygB,MACA4E,WAAYF,IACZ,KAGJ5hC,EAAAA,EAAAA,IAAiB,wBAAwB8Y,MAAOvZ,EAAQU,EAASC,KAC/D,MAAM,IACJwT,EAAG,MAAEK,EAAK,MAAE8rB,EAAK,WAAEG,EAAU,MAC7BxgC,GAAQC,EAAAA,EAAAA,OACNS,EAEEg9B,GAAMxc,EAAAA,EAAAA,IAAWnhB,EAAQwU,GAC/B,IAAKmpB,EAAK,OAEV,KAAKhpB,EAAAA,EAAAA,IAAmB3U,EAAQwU,GAY9B,OAXAxU,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B4U,gBAAiB,CACfJ,QACAhT,KAAM,SACNqT,UAAW,CACTC,OAAQ,uBACRnU,aAGHV,QACHoD,EAAAA,EAAAA,IAAUrD,GAIZ,MAAMwiC,QAAmBtlB,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE/I,MAAKwpB,MAAK2C,UAChEkC,IAILxiC,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9ByiC,OAAQ,CACNtuB,IAAKquB,EACLhuB,QACAisB,eAEDxgC,IACHoD,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,kBAAkB8Y,MAAOvZ,EAAQU,EAASC,KACzD,MAAM,IACJwT,EAAG,MAAEK,EAAK,OAAEmsB,EAAM,MAAEL,EAAK,SAAEtc,EAAQ,WAAEyc,EAAU,cAAEiC,EAAa,WAAEH,EAAU,MAC1EtiC,GAAQC,EAAAA,EAAAA,OACNS,EAEEg9B,GAAMxc,EAAAA,EAAAA,IAAWnhB,EAAQwU,GAC/B,IAAKmpB,EAAK,OACV,MAAM7Y,GAAOriB,EAAAA,EAAAA,IAAWzC,EAAQ2gC,GAChC,IAAK7b,EAAM,OAEX,KAAKnQ,EAAAA,EAAAA,IAAmB3U,EAAQwU,GAY9B,OAXAxU,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B4U,gBAAiB,CACfJ,QACAhT,KAAM,SACNqT,UAAW,CACTC,OAAQ,iBACRnU,aAGHV,QACHoD,EAAAA,EAAAA,IAAUrD,GAIZ,MAAM2B,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGF,MAAM,OAAExB,EAAM,SAAEC,GAAauB,EACvBghC,EAAQxiC,IAAUsH,EAAAA,EAAAA,IAAmBzH,EAAQG,EAAQC,GACrD8gB,GAASwF,EAAAA,EAAAA,IAAa1mB,EAAQG,GAC9BqF,QAAe0X,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7C/I,MACAwpB,MACA7Y,OACAwb,QACAtc,WACAvG,iBAAkBklB,QAASpiC,EAC3BH,WACAsiC,gBACAH,aACArhB,WAEF,IAAK1b,EACH,OAGF,MAAQ2O,IAAKquB,EAAU,QAAEP,GAAYz8B,EAErCxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9ByiC,OAAQ,CACNtuB,IAAKquB,EACLhuB,QACAytB,UACAxkB,iBAAkBklB,QAASpiC,EAC3BH,WACAqgC,eAEDxgC,IACHoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,kBAAkB8Y,MAAOvZ,EAAQU,EAASC,KACzD,MAAM,MACJ6T,EAAK,OAAEmsB,EAAM,SAAE3c,EAAQ,iBAAEvG,EAAgB,QAAEwkB,EAAO,SAAE7hC,EAAQ,MAC5DH,GAAQC,EAAAA,EAAAA,OACNS,EAEEg9B,GAAMxc,EAAAA,EAAAA,IAAWnhB,EAAQwU,GAC/B,IAAKmpB,EAAK,OACV,MAAM7Y,GAAOriB,EAAAA,EAAAA,IAAWzC,EAAQ2gC,GAChC,IAAK7b,EAAM,OAEX,MAAM5D,GAASwF,EAAAA,EAAAA,IAAa1mB,EAAQ2gC,SAEfzjB,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7CygB,MACA7Y,OACAd,WACAvG,mBACArd,WACA6hC,UACA/gB,YAIAxgB,EAAQkiC,YAAY,CAAE3iC,SACxB,KAGFQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,IACJg9B,EAAG,KAAE/pB,EAAI,WAAE6sB,GACT9/B,GAEJuc,EAAAA,EAAAA,IAAQ,kBAAmB,CACzBygB,MACA/pB,OACA6sB,cACA,KAGJhgC,EAAAA,EAAAA,IAAiB,eAAe,CAACT,EAAQU,EAASC,KAChD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5ByiC,YAAQliC,GACPN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAChCiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,GAAK2B,EAAS6gC,QAAQtuB,IAEtB,OAAOnS,EAAAA,EAAAA,GAAehC,EAAQ,CAC5ByiC,OAAQ,IACH7gC,EAAS6gC,OACZI,KAAMliC,EAAQkiC,OAEf5iC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B4U,qBAAiBrU,GAChBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,MAAE6T,EAAK,MAAEvU,GAAQC,EAAAA,EAAAA,OAAsBS,GACvC,cAAEmiC,GAAkB9iC,EAEpB+iC,EAAmB,IAAItB,IAAIqB,GACjCC,EAAiBC,IAAIxuB,GAErBxU,EAAS,IACJA,EACH8iC,cAAeG,MAAMxjB,KAAKsjB,IAG5B,MAAMnhC,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,GAAI2B,EAASgT,iBAAiBC,UAAW,CACvC,MAAM,OAAEC,EAAQnU,QAASuiC,GAAoBthC,EAASgT,gBAAgBC,UAEtEnU,EAAQoU,GAAQouB,EAClB,CAEAljC,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B4U,qBAAiBrU,GAChBN,IAEHoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,kBAAkB8Y,MAAOvZ,EAAQU,EAASC,KACzD,MAAM,KAAEiR,GAASjR,GAAW,CAAC,QACvBm9B,GAAe99B,EAAQ4R,EAAK,KAGpCnR,EAAAA,EAAAA,IAAiB,mBAAmB8Y,MAAOvZ,EAAQU,EAASC,KAC1D,MAAM,MAAE6T,EAAK,eAAEqpB,EAAc,UAAED,GAAcj9B,EAEvCg9B,GAAMxc,EAAAA,EAAAA,IAAWnhB,EAAQwU,GAE1BmpB,SAECD,GAAgB19B,EAAQ29B,EAAKC,EAAWC,EAAe,KA6B/Dp9B,EAAAA,EAAAA,IAAiB,iBAAiB,CAACT,EAAQU,EAASC,KAClD,MAAM,OACJR,EAAM,IAAEw9B,EAAG,IAAExpB,EAAG,WAAEouB,EAAU,SAAEniC,EAAQ,MACtCH,GAAQC,EAAAA,EAAAA,OACNS,EACE+hC,GAAiB/E,EACvB,IAAK+E,IAAkB1iC,EAAO+9B,WAAWC,KAAKL,EAAIr8B,IAChD,OAAOU,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BmjC,0BAA2B,CACzBxF,MACA9oB,UAAW,CACTC,OAAQ,gBACRnU,aAGHV,GAEL,MAAMqgC,GAAQC,EAAAA,GAAAA,MACd7/B,EAAQ4C,SAAS,CAAEhC,GAAInB,EAAQC,WAAUH,UACzCS,EAAQggC,eAAe,CACrBvsB,MACAwsB,OAAQxgC,EACRqU,MAAOkuB,EAAgBviC,EAASw9B,EAAIr8B,GACpCg/B,QACAG,WAAY,GACZiC,gBACAH,aACAtiC,SAGc,KAGlBQ,EAAAA,EAAAA,IAAiB,2BAA2B8Y,MAAOvZ,EAAQU,EAASC,KAClE,MAAM,eAAEk9B,EAAc,MAAE59B,GAAQC,EAAAA,EAAAA,OAAsBS,GAChD,0BAAEwiC,IAA8BniC,EAAAA,EAAAA,IAAehB,EAAQC,IAEvD,IAAE09B,EAAG,UAAE9oB,GAAcsuB,EAE3BnjC,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BmjC,+BAA2B5iC,GAC1BN,IACHoD,EAAAA,EAAAA,IAAUrD,GAEV,MAAMojC,GAAUjiB,EAAAA,EAAAA,IAAWnhB,EAAQ29B,EAAIr8B,IACvC,GAAK8hC,UAEC1F,GAAgB19B,EAAQojC,GAAS,EAAMvF,GACzChpB,GAAW,CACb,MAAM,OAAEC,EAAQnU,QAAS0iC,GAAkBxuB,EAE3CnU,EAAQoU,GAAQuuB,EAClB,MAGF5iC,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BmjC,+BAA2B5iC,GAC1BN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,IACJg9B,EAAG,OAAE14B,EAAM,WAAEs9B,EAAU,MAAEtiC,GAAQC,EAAAA,EAAAA,OAC/BS,EACE2iC,GAAgBjjC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAQE,OAEzDojC,EAAmB5F,EAAI6F,UAAUv+B,QAAQzD,GACpC,SAATA,GAAmByD,EAAOyF,SAASlJ,KAGhC+hC,EAAiBv7B,QAUtBhI,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9ByjC,yBAA0B,CACxB9F,MACA14B,OAAQs+B,EACRhB,eAEDtiC,IACHoD,EAAAA,EAAAA,IAAUrD,IAhBRU,EAAQgjC,cAAc,CACpBvjC,OAAQmjC,GAAiB3F,EAAIr8B,GAC7Bq8B,MACA4E,aACAtiC,SAYa,KAGnBQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5ByjC,8BAA0BljC,GACzBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqB8Y,MAAOvZ,EAAQU,EAASC,KAC5D,MAAM,OACJR,EAAM,SAAE0gC,EAAQ,UAAEl6B,EAAS,IAAEwN,EAAG,MAAElU,GAAQC,EAAAA,EAAAA,OACxCS,EAEE6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EACH,OAGF,MAAMgD,QAAe0X,EAAAA,EAAAA,IAAQ,oBAAqB,CAChD1a,OACAq+B,WACAl6B,cAGGnB,IACLxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9Bk+B,QAAS,CACP/pB,MACA2rB,OAAQ,CACNe,WACAl6B,YACAxG,OAAQqC,EAAKlB,MAGhBrB,IACHoD,EAAAA,EAAAA,IAAUrD,GACVi+B,GAAoBj+B,EAAQU,EAASyT,EAAK3O,EAAQvF,GAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,oBAAoB8Y,MAAOvZ,EAAQU,EAASC,KAC3D,MAAM,eAAEk9B,EAAc,MAAE59B,GAAQC,EAAAA,EAAAA,OAAsBS,EAChDiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,IAAK2B,EAASs8B,SAAS4B,OAAQ,OAC/B,MAAM,OACJA,EAAM,IAAE3rB,GACNvS,EAASs8B,SACP,OAAE/9B,EAAM,UAAEwG,EAAS,SAAEk6B,GAAaf,EAElCt9B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EACH,OAGF,MAAMgD,QAAe0X,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/C1a,OACAmE,YACAk6B,WACAhD,mBAEGr4B,GAELy4B,GADAj+B,GAASsJ,EAAAA,EAAAA,MACmB5I,EAASyT,EAAK3O,EAAQvF,EAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,sBAAsB8Y,MAAOvZ,EAAQU,EAASC,KAC7D,MAAM,IAAEwT,EAAG,MAAElU,GAAQC,EAAAA,EAAAA,OAAsBS,EAErC6E,QAAe0X,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE/I,QAChD3O,IACLxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9Bk+B,QAAS,CACP/pB,QAEDlU,IACHoD,EAAAA,EAAAA,IAAUrD,GACVi+B,GAAoBj+B,EAAQU,EAASyT,EAAK3O,EAAQvF,GAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,qBAAqB8Y,MAAOvZ,EAAQU,EAASC,KAC5D,MAAM,eAAEk9B,EAAc,MAAE59B,GAAQC,EAAAA,EAAAA,OAAsBS,EAChDiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,IAAK2B,EAASs8B,SAAS/pB,IAAK,OAC5B,MAAM,IAAEA,GAAQvS,EAASs8B,QAEnB14B,QAAe0X,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE/I,MAAK0pB,mBACpDr4B,GAELy4B,GADAj+B,GAASsJ,EAAAA,EAAAA,MACmB5I,EAASyT,EAAK3O,EAAQvF,EAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5Bk+B,aAAS39B,GACRN,EAAM,I,UE3zBXQ,EAAAA,EAAAA,IAAiB,oBAAoB8Y,UACnC,MAAM/T,QAAe0X,EAAAA,EAAAA,IAAQ,mBACxB1X,IAILxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAAS2jC,EAAAA,EAAAA,IAAgB3jC,EAAQ,CAAE4jC,YAAap+B,EAAOo+B,cACvD5jC,GAAS6jC,EAAAA,EAAAA,IAAoB7jC,EAAQ,CAAEqe,KAAM7Y,EAAO6Y,QACpDhb,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,iBAAiB8Y,MAAOvZ,EAAQU,EAASC,KACxD,MAAM,gBAAEmjC,EAAe,UAAEC,GAAcpjC,EAEvCX,GAAS6jC,EAAAA,EAAAA,IAAoB7jC,EAAQ,CAAEyZ,WAAW,EAAMtC,WAAO5W,KAC/D8C,EAAAA,EAAAA,IAAUrD,GAEV,MAAMgkC,QAAkB9mB,EAAAA,EAAAA,IAAQ,gBAAiB4mB,GAEjD9jC,GAASsJ,EAAAA,EAAAA,MACTtJ,GAAS6jC,EAAAA,EAAAA,IAAoB7jC,EAAQ,CAAEyZ,WAAW,KAClDpW,EAAAA,EAAAA,IAAUrD,GAENgkC,GACFD,GACF,KAGFtjC,EAAAA,EAAAA,IAAiB,iBAAiB8Y,MAAOvZ,EAAQU,EAASC,KACxD,MAAM,gBAAEmjC,EAAe,UAAEC,GAAcpjC,EAEvCX,GAAS6jC,EAAAA,EAAAA,IAAoB7jC,EAAQ,CAAEyZ,WAAW,EAAMtC,WAAO5W,KAC/D8C,EAAAA,EAAAA,IAAUrD,GAEV,MAAMgkC,QAAkB9mB,EAAAA,EAAAA,IAAQ,gBAAiB4mB,GAEjD9jC,GAASsJ,EAAAA,EAAAA,MACTtJ,GAAS6jC,EAAAA,EAAAA,IAAoB7jC,EAAQ,CAAEyZ,WAAW,KAClDpW,EAAAA,EAAAA,IAAUrD,GAENgkC,GACFD,GACF,KAGFtjC,EAAAA,EAAAA,IAAiB,kBAAkB8Y,MAAOvZ,EAAQU,EAASC,KACzD,MAAM,gBACJmjC,EAAe,SAAE1lB,EAAQ,KAAEC,EAAI,MAAE4lB,EAAK,UAAEF,GACtCpjC,EAEJX,GAAS6jC,EAAAA,EAAAA,IAAoB7jC,EAAQ,CAAEyZ,WAAW,EAAMtC,WAAO5W,KAC/D8C,EAAAA,EAAAA,IAAUrD,GAEV,MAAMgkC,QAAkB9mB,EAAAA,EAAAA,IAAQ,iBAAkB4mB,EAAiB1lB,EAAUC,EAAM4lB,GAEnFjkC,GAASsJ,EAAAA,EAAAA,MACTtJ,GAAS6jC,EAAAA,EAAAA,IAAoB7jC,EAAQ,CAAEyZ,WAAW,KAClDpW,EAAAA,EAAAA,IAAUrD,GAENgkC,GACFD,GACF,KAGFtjC,EAAAA,EAAAA,IAAiB,uBAAuB8Y,MAAOvZ,EAAQU,EAASC,KAC9D,MAAM,gBACJmjC,EAAe,MAAEG,EAAK,UAAEF,GACtBpjC,EAEJX,GAAS6jC,EAAAA,EAAAA,IAAoB7jC,EAAQ,CAAEyZ,WAAW,EAAMtC,WAAO5W,KAC/D8C,EAAAA,EAAAA,IAAUrD,GAEV,MAAMgkC,QAAkB9mB,EAAAA,EAAAA,IAAQ,sBAAuB4mB,EAAiBG,GAExEjkC,GAASsJ,EAAAA,EAAAA,MACTtJ,GAAS6jC,EAAAA,EAAAA,IAAoB7jC,EAAQ,CAAEyZ,WAAW,EAAOyqB,4BAAwB3jC,KACjF8C,EAAAA,EAAAA,IAAUrD,GAENgkC,GACFD,GACF,KAGFtjC,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,KAAEwjC,GAASxjC,GAEZuc,EAAAA,EAAAA,IAAQ,2BAA4BinB,EAAK,KAGhD1jC,EAAAA,EAAAA,IAAiB,mBAAoBT,IAC5B6jC,EAAAA,EAAAA,IAAoB7jC,EAAQ,CAAEmX,WAAO5W,OD7D9CE,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,YAAE8+B,EAAW,SAAE2E,EAAQ,MAAEnkC,GAAQC,EAAAA,EAAAA,OAAsBS,EAEvDu+B,GAAemF,EAAAA,EAAAA,IAA0BrkC,EAAQC,GACvD,GAAKi/B,EAIL,GAAI,SAAUA,EACPM,GAAsBx/B,EAAQk/B,EAAcO,EAAa2E,EAAUnkC,OACnE,CACL,MAAMuC,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQk/B,EAAa/+B,QAC7C,IAAKqC,EACH,OAGGg9B,GAAsBx/B,EAAQ,CACjCwC,OACAmE,UAAWu4B,EAAav4B,WACvB84B,EAAa2E,EAAUnkC,EAC5B,MAGFQ,EAAAA,EAAAA,IAAiB,eAAe8Y,MAAOvZ,EAAQU,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EACtC,IAAIy+B,EACJ,GAAI,SAAUz+B,EACZy+B,QAAgBH,GAAej/B,EAAQ,CAAE6iC,KAAMliC,EAAQkiC,MAAQ5iC,OAC1D,CACL,MAAMuC,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQW,EAAQR,QACxC,IAAKqC,EACH,OAGF48B,QAAgBH,GAAej/B,EAAQ,CACrCwC,OACAmE,UAAWhG,EAAQgG,WAClB1G,EACL,CAEKm/B,IAILp/B,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASskC,EAAAA,EAAAA,IAAetkC,EAAQo/B,EAASn/B,GACzCD,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B0Y,QAAS,KACJ1X,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyY,QACjCwmB,aAAcv+B,EACd4jC,oBAAoB,EACpB9rB,OAAQ,YACR+rB,gBAAkB7jC,EAAgB6jC,kBAEnCvkC,IACHoD,EAAAA,EAAAA,IAAUrD,GAAO,KAuBnBS,EAAAA,EAAAA,IAAiB,cAAc8Y,MAAOvZ,EAAQU,EAASC,KACrD,MAAM,iBACJq/B,EAAgB,OAAE7/B,EAAM,UAAEwG,EAAS,MAAE1G,GAAQC,EAAAA,EAAAA,OAC3CS,EACE6B,EAAOrC,IAAUsC,EAAAA,EAAAA,IAAWzC,EAAQG,GAC1C,IAAKwG,IAAcq5B,IAAqBx9B,EACtC,OAGF,MAAMgD,QAAe0X,EAAAA,EAAAA,IAAQ,aAAc1a,EAAMw9B,GACjD,IAAKx6B,EACH,OAGFxF,GAASsJ,EAAAA,EAAAA,MACT,MAAMpE,GAAUqP,EAAAA,EAAAA,IAAkBvU,EAAQwC,EAAKlB,GAAIqF,GACnD3G,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqB9X,EAAO+X,MAAO,OAC7Dvd,GAASykC,EAAAA,EAAAA,IAAWzkC,EAAQwF,EAAOk/B,QAASx/B,EAASjF,IACrDoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClDX,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B0Y,QAAS,KACJ1X,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyY,QACjCvB,WAAO5W,IAERN,IACHoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,gBAAgB,CAACT,EAAQU,EAASC,KACjD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B0Y,QAAS,KACJ1X,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyY,QACjCgsB,aAASnkC,IAEVN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,YAAEgkC,EAAW,MAAE1kC,GAAQC,EAAAA,EAAAA,OAAsBS,GAE7C,eAAEikC,IAAmB5jC,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyY,SACnD,KAAE9E,GAAS+wB,EAEjB,GAAuB,WAAnBC,EAA6B,CAC/B,MAAMC,GAAiBC,EAAAA,EAAAA,IAA6B9kC,EAAQC,GAC5D,IAAK4kC,EACH,QA0ENtrB,eACEvZ,EACA4T,EACAixB,MACI5kC,GAAQC,EAAAA,EAAAA,QAEZ,MAAMU,EErPD,SAA0BgT,GAC/B,MAAMhT,EAAQgH,OAAOC,KAAK+L,GAAM5O,KAAK+/B,GAAO,GAAEA,KAAKnxB,EAAKmxB,OAAM5+B,KAAK,KACnE,OAAOvF,EAAMoH,OAAS,EAAK,IAAGpH,IAAU,EAC1C,CFkPgBokC,CAAiB,CAC7B,eAAgBpxB,EAAKqxB,WACrB,kBAAmBrxB,EAAKsxB,YACxB,iBAAkBtxB,EAAKuxB,WACvB,YAAavxB,EAAKwxB,IAClB,oBAAqBxxB,EAAKyxB,IAC1B,wBAAyBzxB,EAAK0xB,UAG1B1uB,QAAiBF,MAAO,mCAAkC9V,IAAS,CACvE2kC,OAAQ,OACRZ,YAAa,cACba,QAAS,CACP,eAAgB,oCAChBC,cAAgB,UAASZ,OAGvBr/B,QAAeoR,EAAS8uB,OAC9B,GAAIlgC,EAAO2R,MAAO,CAChB,MAAMA,GAAQwuB,EAAAA,EAAAA,IAAengC,EAAO2R,OAYpC,OAXAnX,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B0Y,QAAS,KACJ1X,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyY,QACjCD,OAAQ,SACRtB,MAAO,IACFA,KAGNlX,QACHoD,EAAAA,EAAAA,IAAUrD,EAEZ,CACAA,GAASsJ,EAAAA,EAAAA,MACTtJ,GAAS4lC,EAAAA,EAAAA,IAAkB5lC,EAAQ,CACjCwB,KAAMgE,EAAOhE,KACbF,GAAIkE,EAAOlE,IACVrB,GACHD,GAASs/B,EAAAA,EAAAA,IAAet/B,EAAQu/B,EAAAA,GAAAA,SAAsBt/B,IACtDoD,EAAAA,EAAAA,IAAUrD,EACZ,CAtHS6lC,CAAsB7lC,EAAQ4T,EAAMixB,EAAgB5kC,EAC3D,MAAO,GAAuB,gBAAnB2kC,EAAkC,CAC3C,MAAMkB,GAAcC,EAAAA,EAAAA,IAA0B/lC,EAAQC,GACtD,IAAK6lC,EACH,QAoHNvsB,eACEvZ,EACA4T,EACAkyB,MACI7lC,GAAQC,EAAAA,EAAAA,QAEZ,MAAM4gB,EAAS,CACbklB,KAAM,CACJC,OAAQryB,EAAKqxB,WAAW70B,QAAQ,OAAQ,IACxC81B,iBAAkBtyB,EAAKsxB,YACvBiB,gBAAiBvyB,EAAKuxB,WACtBiB,cAAexyB,EAAKwxB,IAAIh1B,QAAQ,OAAQ,MAGtC+D,EAAMkyB,EAAAA,IACR,+DACA,oDAEEzvB,QAAiBF,MAAMvC,EAAK,CAChCoxB,OAAQ,OACRC,QAAS,CACPc,OAAQ,mBACR,eAAgB,mBAChB,iBAAkBR,GAEpBS,KAAM3sB,KAAKC,UAAUiH,KAEjBtb,QAAeoR,EAAS8uB,OAE9B,GAAsB,OAAlBlgC,EAAOiT,OAAiB,CAE1B,MAAMtB,EAAQ,CAAE0N,YAAa,iBAY7B,OAXA7kB,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B0Y,QAAS,KACJ1X,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyY,QACjCD,OAAQ,SACRtB,MAAO,IACFA,KAGNlX,QACHoD,EAAAA,EAAAA,IAAUrD,EAEZ,CAEAA,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASwmC,EAAAA,EAAAA,IAAuBxmC,EAAQ,CACtCwB,KAAM,OACNilC,MAAOjhC,EAAOoO,KAAK6yB,OAClBxmC,GACHD,GAASs/B,EAAAA,EAAAA,IAAet/B,EAAQu/B,EAAAA,GAAAA,SAAsBt/B,IACtDoD,EAAAA,EAAAA,IAAUrD,EACZ,CAvKS0mC,CAA2B1mC,EAAQ4T,EAAMkyB,EAAa7lC,EAC7D,MAGFQ,EAAAA,EAAAA,IAAiB,mBAAmB8Y,MAAOvZ,EAAQU,EAASC,KAC1D,MAAM,iBACJgmC,EAAgB,gBAAEC,EAAe,kBAAEC,EAAiB,UAAEC,EAAS,MAC/D7mC,GAAQC,EAAAA,EAAAA,OACNS,EACEu+B,GAAemF,EAAAA,EAAAA,IAA0BrkC,EAAQC,GACjD8mC,GAASC,EAAAA,EAAAA,IAAoBhnC,EAAQC,GACrCgnC,GAAgBC,EAAAA,EAAAA,IAAuBlnC,EAAQC,IAC/C,eAAE2kC,EAAc,kBAAEuC,IAAsBnmC,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyY,QACtEmsB,EAAoC,WAAnBD,GACnBE,EAAAA,EAAAA,IAA6B9kC,EAAQC,IAAS8lC,EAAAA,EAAAA,IAA0B/lC,EAAQC,GAEpF,KAAKi/B,GAAiB2F,GAAmBkC,GAAWnC,GAClD,OAGF,IAAIwC,EACJ,GAAI,SAAUlI,EACZkI,EAAsB,CACpBvE,KAAM3D,EAAa2D,UAEhB,CACL,MAAMrgC,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQk/B,EAAa/+B,QAC7C,IAAKqC,EACH,OAGF4kC,EAAsB,CACpB5kC,OACAmE,UAAWu4B,EAAav4B,UAE5B,CAEA3G,GAASqnC,EAAAA,EAAAA,IAAcrnC,EAAQ,CAAEyY,OAAQ,WAAaxY,IACtDoD,EAAAA,EAAAA,IAAUrD,GAEV,MAAM2kC,EAAc,CAClB2C,KAAMV,EACNhzB,KAAyB,WAAnBgxB,GACF2C,EAAAA,EAAAA,IAAwBvnC,EAAQC,IAASunC,EAAAA,EAAAA,IAA6BxnC,EAAQC,UAE/Did,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9CgiB,aAAckI,EACdL,SACApC,cACA8C,gBAAiBR,EACjBN,mBACAE,oBACAM,kBAAmBA,GAAmBO,MACtCZ,gBAOF9mC,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASqnC,EAAAA,EAAAA,IAAcrnC,EAAQ,CAAEyY,OAAQ,QAAUxY,GACnDD,GAAS4Y,EAAAA,EAAAA,IAAa5Y,EAAQC,IAC9BoD,EAAAA,EAAAA,IAAUrD,GAAO,KA0GnBS,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,KAAEgnC,EAAI,MAAE1nC,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5C,OAAO2+B,EAAAA,EAAAA,IAAet/B,EAAQ2nC,QAAAA,EAAQpI,EAAAA,GAAAA,SAAsBt/B,EAAM,KAGpEQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,SAAEinC,EAAQ,MAAE3nC,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAEtDiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,GAAK2B,EAASC,aACd,OAAOG,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B6B,aAAc,IACTD,EAASC,gBACR+lC,GAAY,CAAE7lC,QAAQ,GAC1B8M,WAAY+4B,IAEb3nC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB8Y,MAAOvZ,EAAQU,EAASC,KAC3D,MAAM,eACJknC,EAAc,WAAEC,EAAU,UAAE9D,EAAS,OAAE+D,EAAM,aAAEC,EAAY,SAAEC,EAAQ,MACrEhoC,GAAQC,EAAAA,EAAAA,OACNS,GAAW,CAAC,EAEhBD,EAAQwnC,sBAER,MAAM1iC,QAAe0X,EAAAA,EAAAA,IAAQ,qBACxB1X,IAELxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqB9X,EAAO+X,MAAO,OAE7Dvd,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B6B,aAAc,CACZC,MAAO0D,EAAO1D,MACd+lC,iBACA9lC,QAAQ,EACR+lC,aACAG,WACAF,SACAC,eACAhE,cAED/jC,IACHoD,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,wBAAwB8Y,MAAOvZ,EAAQU,EAASC,KAC/D,MAAM,UAAEwnC,EAAS,MAAEloC,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EACvD6E,QAAe0X,EAAAA,EAAAA,IAAQ,qBAC7B,IAAK1X,EAAQ,OAEbxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqB9X,EAAO+X,MAAO,OAG7D,MAAM6qB,EAAQ5iC,EAAO1D,MAAMgkB,QAAQpa,MAAMsa,GAA6B,IAAlBA,EAAOqiB,SAE3DroC,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BsoC,iBAAkB,CAChBvmC,QAAQ,EACRomC,YACAI,gBAAiBH,EAAMI,SACvBC,cAAeL,EAAMM,SAEtBzoC,IACHoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClDX,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BsoC,iBAAkB,CAAEvmC,QAAQ,IAC3B9B,IACHoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,2BAA2B8Y,MAAOvZ,EAAQU,EAASC,KAClE,MAAM,SAAEyd,EAAQ,MAAEne,GAAQC,EAAAA,EAAAA,OAAsBS,EAC1C6E,QAAe0X,EAAAA,EAAAA,IAAQ,gCAAiCkB,GAE9Dpe,GAASsJ,EAAAA,EAAAA,MAKPtJ,EAHGwF,EAEM,UAAWA,GACX6hC,EAAAA,EAAAA,IAAcrnC,EAAQ,CAAEmX,MAAO,CAAEjS,QAASM,EAAO2R,MAAOwxB,MAAO,aAAgB1oC,IAE/EonC,EAAAA,EAAAA,IAAcrnC,EAAQ,CAAEmnC,kBAAmB3hC,EAAQmiC,KAAMpI,EAAAA,GAAAA,UAAwBt/B,IAJjFonC,EAAAA,EAAAA,IAAcrnC,EAAQ,CAAEmX,MAAO,CAAEjS,QAAS,gBAAiByjC,MAAO,aAAgB1oC,IAO7FoD,EAAAA,EAAAA,IAAUrD,EAAO,I,4BG3anB,MAAM4oC,GAAoB,GAAKC,GAAAA,GACzBC,GAA0B,KAAOD,GAAAA,GAC1BE,GAAwB,KAAOF,GAAAA,GAC/BG,GAAwB,GAAKH,GAAAA,GACpCI,GAAqB,OAASJ,GAAAA,G,uCCsB7B,SAASK,GAA6BlpC,EAAqBmpC,GAEhE,OAAOA,IADUnoC,EAAAA,EAAAA,IAAehB,GACVkR,qBAAsBhI,EAAAA,EAAAA,MACxClJ,EAAO4Q,mBArBew4B,EAqBuBC,GAAAA,EAAAA,MAAiBn0B,OApBhDo0B,EAAAA,IACT77B,KAAK87B,IACV97B,KAAKC,IAAkB,IAAd07B,EAAoBJ,IACf,IAAdI,GAIAA,EAAcI,EAAAA,IACT/7B,KAAK87B,IACV97B,KAAKC,IAAkB,IAAd07B,EAAoBJ,IACf,GAAdI,GAIGL,IAOH,GAtBN,IAA4BK,CAuB5B,CAwDO,SAASK,GACdzpC,EAAWG,EAAgBktB,GAE3B,OAAO7J,EAAAA,GAAAA,IAAWxjB,EAAQG,EAAQktB,OAAQ9sB,GAAW,EACvD,CC1EA,IAAImpC,GAAqB,GAEzBjpC,EAAAA,EAAAA,IAAiB,0BAA0B8Y,UACzC,MAAM/T,QAAe0X,EAAAA,EAAAA,IAAQ,yBACxB1X,IAKLA,EAAOiG,SAASk+B,IACVA,EAAkBC,iBACpBC,GAAAA,GAAmB,UAASF,EAAkBC,gBAAgBtoC,KAAMwoC,EAAAA,GAAAA,SAElEH,EAAkBI,YACpBF,GAAAA,GAAmB,UAASF,EAAkBI,WAAWzoC,KAAMwoC,EAAAA,GAAAA,QACjE,IAGF9pC,GAASsJ,EAAAA,EAAAA,MACTtJ,EAAS,IACJA,EACHgqC,mBAAoBxkC,IAEtBnC,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,6BAA6B,CAACT,EAAQU,EAASC,KAC9D,MAAM,MACJoF,EAAK,EAAEojC,EAAC,EAAEc,EAAC,UAAEC,EAAS,WAAEC,EAAU,MAAElqC,GAAQC,EAAAA,EAAAA,OAC1CS,EAEEypC,EAAyB,CAC7B9oC,GAAIooC,KACJW,eAAgBtkC,EAChBojC,EAAGD,GAA6BlpC,EAAQmpC,GApCV,GAoCe17B,KAAKwd,SAClBqf,GAChCL,EAAGA,EAtC2B,GAsCvBx8B,KAAKwd,SAAuCqf,GACnDJ,YACAC,cAGF,OAAOnoC,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BuqC,wBAAyB,KAAKvpC,EAAAA,EAAAA,IAAehB,EAAQC,GAAOsqC,yBAA2B,GAAKH,IAC3FnqC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,UACJgG,EAAS,OAAExG,EAAM,MAAE4F,EAAK,aAAEykC,GACxB7pC,EAEE6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAE3BqC,GAASuD,GAAS5F,IAAWH,EAAOgY,gBAIpCkF,EAAAA,EAAAA,IAAQ,uBAAwB,CACnC1a,OACAmE,YACA8jC,SAAU1kC,EACV2kC,WAAYF,GACZ,KAGJ/pC,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,OACJR,EAAM,UAAEwG,EAAS,MAAE1G,GAAQC,EAAAA,EAAAA,OACzBS,EACEgqC,GAAWC,EAAAA,EAAAA,IAAsB5qC,EAAQG,GACzC+E,GAAUqP,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQwG,GAE7CgkC,GAAazlC,KAAW2lC,EAAAA,EAAAA,IAAe3lC,IAE5CxE,EAAQoqC,eAAe,CACrB3qC,SACAwG,YACAgkC,WACA1qC,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,OAAER,EAAM,SAAEwqC,EAAQ,MAAE1qC,GAAQC,EAAAA,EAAAA,OAAsBS,EACxD,IAAI,UAAEgG,GAAchG,EAEpB,MAAM6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAI+E,GAAUqP,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQwG,GAEhD,IAAKnE,IAAS0C,EACZ,OAGF,MAAM6lC,EAAoB9jC,QAAQ/B,EAAQ4E,aAAe5E,EAAQ8lC,UAC3DC,EAA8BF,GAChC//B,EAAAA,EAAAA,IAA0BhL,EAAQG,EAAQ+E,EAAQ4E,WAAa,QAC/DvJ,EACJ2E,EAAU6lC,IACNx2B,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQ8qC,IAClC/lC,EACJyB,EAAYzB,GAAS5D,IAAMqF,EAE3B,MAAMukC,GAAgBC,EAAAA,EAAAA,IAAiBjmC,GACjCkmC,EAAcF,EAAcG,MAAMC,IAAiBC,EAAAA,EAAAA,IAAeD,EAAcX,KAEhFa,EAAmBJ,EACrBF,EAAcjmC,QAAQqmC,KAAkBC,EAAAA,EAAAA,IAAeD,EAAcX,KAAa,IAAIO,EAAeP,GAEnG/0B,GAAQ61B,EAAAA,EAAAA,IAAuBzrC,GAE/B0rC,EAAYF,EAAiB1+B,OAAO8I,IAErCsH,EAAAA,EAAAA,IAAQ,eAAgB,CAAE1a,OAAMmE,YAAW+kC,cAEhD,MAAM,eAAEt2B,GAAmBpV,EAAOqV,SAASC,MAErC1T,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,GAAImV,IAAmBu2B,EAAAA,IAAqB,CAC1C,MAAMC,EAAqBR,GAAcptB,EAAAA,EAAAA,IAAKpc,EAASM,gBAAiB,CAACyE,IAAc,IAClF/E,EAASM,gBACZ,CAACyE,GAAY,IACP/E,EAASM,gBAAgByE,IAAc,GAC3C,CACEA,YACAgkC,cAIN3qC,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BkC,gBAAiB0pC,GAChB3rC,EACL,CAEA,ODrHK,SACLD,EAAWkF,EAAqBgmC,GAEhC,MAAMW,EAAmB3mC,EAAQwmC,WAAa,CAAEp8B,QAAS,IAGnDA,EAAUu8B,EAAiBv8B,QAAQtK,KAAKusB,IAC5Cua,EAAAA,EAAAA,IAAiBva,GAAW,IACvBA,EACHwa,iBAAaxrC,EACb+kB,MAAOiM,EAAQjM,MAAQ,GACrBiM,IACHtsB,QAAO,EAAGqgB,WAAYA,EAAQ,IAEjC4lB,EAAcz/B,SAAQ,CAACk/B,EAAUpsB,KAC/B,MAAMytB,EAAgB18B,EAAQsD,WAAWq5B,IAAMV,EAAAA,EAAAA,IAAeU,EAAEtB,SAAUA,KACtEqB,GAAiB,EACnB18B,EAAQ08B,GAAiB,IACpB18B,EAAQ08B,GACXD,YAAaxtB,EACb+G,MAAOhW,EAAQ08B,GAAe1mB,MAAQ,GAGxChW,EAAQzJ,KAAK,CACX8kC,WACAoB,YAAaxtB,EACb+G,MAAO,GAEX,IAGF,IAAI,gBAAE4mB,EAAkB,IAAOL,EAc/B,OAZIK,EAAgBlkC,SAClBkkC,EAAkBA,EAAgBjnC,QAAO,EAAGyK,YAAaA,IAAW1P,EAAOgY,iBAG7EkzB,EAAcz/B,SAASk/B,IACrB,MAAM,cAAE3yB,GAAkBhY,EAC1BksC,EAAgBl9B,QAAQ,CACtBU,OAAQsI,EACR2yB,YACA,KAGGvtB,EAAAA,GAAAA,IAAkBpd,EAAQkF,EAAQ/E,OAAQ+E,EAAQ5D,GAAI,CAC3DoqC,UAAW,IACNG,EACHv8B,UACA48B,oBAGN,CCiESC,CAAmBnsC,EAAQkF,EAASwmC,EAAU,KAGvDjrC,EAAAA,EAAAA,IAAiB,sBAAsB,CAACT,EAAQU,EAASC,KACvD,MAAM,UAAEgG,EAAS,SAAEgkC,EAAQ,MAAE1qC,GAAQC,EAAAA,EAAAA,OAAsBS,EAErDiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,IAAK2B,EAASM,gBAAgByE,IAAY0kC,MAAM3X,IAAW6X,EAAAA,EAAAA,IAAe7X,EAAOiX,SAAUA,KACzF,OAAO3qC,EAGT,MAAMosC,EAA4BxqC,EAASM,gBAAgByE,GACxD1B,QAAQyuB,KAAY6X,EAAAA,EAAAA,IAAe7X,EAAOiX,SAAUA,KAEjDiB,EAAqBQ,EAA0BpkC,OAAS,IACzDpG,EAASM,gBACZ,CAACyE,GAAYylC,IACXpuB,EAAAA,EAAAA,IAAKpc,EAASM,gBAAiB,CAACyE,IAEpC,OAAO3E,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BkC,gBAAiB0pC,GAChB3rC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,sBAAsB8Y,MAAOvZ,EAAQU,EAASC,KAC7D,MAAM,SAAEgqC,GAAahqC,QAEAuc,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEytB,gBAKrD3qC,GAASsJ,EAAAA,EAAAA,OAEG8oB,QAKZpyB,EAAS,IACJA,EACHoyB,OAAQ,IACHpyB,EAAOoyB,OACVia,gBAAiB1B,KAGrBtnC,EAAAA,EAAAA,IAAUrD,IAXRU,EAAQ4rC,aAWO,KAGnB7rC,EAAAA,EAAAA,IAAiB,8BAA8B,CAACT,EAAQU,EAASC,KAC/D,MAAM,GAAEW,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAAsBS,EAE1C,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BuqC,yBAAyBvpC,EAAAA,EAAAA,IAAehB,EAAQC,GAC7CsqC,yBAAyBtlC,QAAQyuB,GAAWA,EAAOpyB,KAAOA,KAC5DrB,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gBAAgB8Y,MAAOvZ,EAAQU,EAASC,KACvD,MAAM,OAAER,EAAM,UAAEwG,EAAS,SAAEgkC,GAAahqC,EAClC6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAC1B+E,GAAUqP,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQwG,GAClD,IAAKnE,IAAS0C,EACZ,OAGF,MAAMmK,EAASnK,EAAQqnC,UAAUpmB,WAC3B3gB,QAAe0X,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDytB,WACAnoC,OACAmE,YACA0I,WAGG7J,IAILxF,GAASsJ,EAAAA,EAAAA,MAEL9D,EAAO+X,OAAOvV,SAChBhI,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqB9X,EAAO+X,MAAO,QAG/Dvd,GAASod,EAAAA,EAAAA,IAAkBpd,EAAQG,EAAQwG,EAAW,CACpD4lC,SAAU/mC,KAEZnC,EAAAA,EAAAA,IAAUrD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,IAAEuJ,EAAG,OAAE/J,GAAWQ,EAElB6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAE3BqC,IAIL0a,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEhT,MAAK1H,QAAO,KAGjD/B,EAAAA,EAAAA,IAAiB,gCAAgC,CAACT,EAAQU,EAASC,KACjE,MAAM,OACJR,EAAM,SAAEsqC,EAAQ,EAAEtB,EAAC,EAAEc,EAAC,UAAEC,EAAS,WAAEC,EAAU,GAAE7oC,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OACzDS,EAEE6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAE1ByB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,GAAKuC,GAASZ,EAAS2oC,yBAAyBc,MAAMmB,GAAgBA,EAAYlrC,KAAOA,KACpFnB,IAAWH,EAAOgY,cAMvB,OAFAkF,EAAAA,EAAAA,IAAQ,+BAAgC,CAAE1a,OAAMioC,cAEzCzoC,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BuqC,wBAAyB3oC,EAAS2oC,wBAAwBvlC,KAAKolC,GACzDA,EAAuB9oC,KAAOA,EACzB,IACF8oC,EACHjB,EAAGD,GAA6BlpC,EAAQmpC,GACxCc,IACAC,YACAC,cAGGC,KAERnqC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB8Y,MAAOvZ,EAAQU,EAASC,KAC/D,MAAM,OAAER,EAAM,SAAEgc,GAAaxb,EACvB6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EAAM,OAEX,MAAMgD,QAAe0X,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE1a,OAAM2Z,WAAUwL,UAAWxL,GAAY,OAAI5b,IAGlG,IAAKiF,IAAWA,EAAOT,SAASiD,OAO9B,OALAhI,EAASypC,GADTzpC,GAASsJ,EAAAA,EAAAA,MAC8BnJ,EAAQ,CAC7CssC,qBAAsB,SAGxBppC,EAAAA,EAAAA,IAAUrD,GAIZ,MAAM,SAAE+E,EAAQ,MAAE6J,EAAK,MAAE2O,GAAU/X,EAE7B+e,GAAOjH,EAAAA,EAAAA,IAAqBvY,EAAU,MACtCmF,EAAMtC,OAAOC,KAAK0c,GAAMvf,IAAIiD,QAElCjI,GAASsJ,EAAAA,EAAAA,MACTtJ,GAAS+oB,EAAAA,EAAAA,IAAoB/oB,EAAQwC,EAAKlB,GAAIijB,GAC9CvkB,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqBC,EAAO,OAEtDvd,EAASypC,GADTzpC,GAASipB,EAAAA,EAAAA,IAASjpB,GAAQsd,EAAAA,EAAAA,IAAqB1O,EAAO,OACfzO,EAAQ,CAC7CusC,gBAAiB,IAAKlqC,EAAKkqC,iBAAmB,MAAQxiC,MAGxD7G,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,WAAE6D,EAAU,MAAEvE,GAAQC,EAAAA,EAAAA,OAAsBS,GAE5C,eAAEyU,GAAmBpV,EAAOqV,SAASC,MAErC9S,GAAOsJ,EAAAA,EAAAA,IAAkB9L,EAAQC,GACvC,GAAKuC,EAAL,CAEA,GAAIA,EAAKiqC,qBAAsB,CAC7B,MAAMA,EAAuBjqC,EAAKiqC,qBAAuBjoC,EAAWwD,OAC9D0kC,GAAmBlqC,EAAKkqC,iBAAmB,IAAIznC,QAAQ3D,IAAQkD,EAAWkG,SAASpJ,KAEzFtB,EAASypC,GAAsBzpC,EAAQwC,EAAKlB,GAAI,CAC9CorC,qBAGFrpC,EAAAA,EAAAA,IAAUrD,IAEL0sC,EAAgB1kC,QAAUykC,GAC7B/rC,EAAQisC,qBAAqB,CAAExsC,OAAQqC,EAAKlB,GAAI6a,SAAU1O,KAAK87B,OAAO/kC,IAE1E,CAIA,GAFA9D,EAAQ0qB,iBAAiB,CAAE5mB,aAAYvE,UAEnCmV,IAAmBu2B,EAAAA,IAIvB,OAFA3rC,GAASsJ,EAAAA,EAAAA,OAEFtH,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BkC,gBAAiB,KACZlB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOiC,mBAC9B0F,OAAOglC,YAAYpoC,EAAWQ,KAAK2B,IACpC,MAAMzB,GAAUqP,EAAAA,EAAAA,IAAkBvU,EAAQwC,EAAKlB,GAAIqF,GAEnD,IAAKzB,EAAS,OAEd,MAAM2nC,EAAS3nC,EAAQwmC,WAAWQ,iBAAiBjnC,QAAO,EAAG8I,cAAeA,IAE5E,IAAK8+B,EAAQ,OAEb,MAAMnB,EAAYmB,EAAO7nC,KAAK0M,GAAWA,EAAOi5B,WAEhD,MAAO,CAAChkC,EAAW+kC,EAAU1mC,KAAKinC,IAAC,CACjCtlC,YACAgkC,SAAUsB,MACR,IACHhnC,OAAOgC,YAEXhH,EA3CwB,CA2ClB,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5C6B,GAAOsJ,EAAAA,EAAAA,IAAkB9L,EAAQC,GAElCuC,GAAMkqC,iBAEXhsC,EAAQ6H,aAAa,CAAEpI,OAAQqC,EAAKlB,GAAIqF,UAAWnE,EAAKkqC,gBAAgB,GAAIzsC,SAAQ,KAGtFQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5C6B,GAAOsJ,EAAAA,EAAAA,IAAkB9L,EAAQC,GACvC,GAAKuC,EAIL,OAFA0a,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE1a,SAEvBinC,GAAsBzpC,EAAQwC,EAAKlB,GAAI,CAC5CmrC,0BAAsBlsC,EACtBmsC,qBAAiBnsC,GACjB,KCjYJE,EAAAA,EAAAA,IAAiB,kBAAkB8Y,MAAOvZ,EAAQU,EAASC,KACzD,MAAM,OAAER,EAAM,QAAE2sC,EAAO,MAAE7sC,GAAQC,EAAAA,EAAAA,OAAsBS,EACjD6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,GAAMqoB,SACT,OAGF,MAAMrlB,QAAe0X,EAAAA,EAAAA,IAAQ4vB,EAAU,uBAAyB,yBAA0B,CAAEtqC,SAC5F,IAAKgD,EACH,OAGFxF,GAASsJ,EAAAA,EAAAA,MACT,MAAM,MAAEyjC,EAAK,MAAExvB,GAAU/X,EAIzB,GAFAxF,GAASqd,EAAAA,EAAAA,IAASrd,GAAQsd,EAAAA,EAAAA,IAAqBC,EAAO,OAElD,sBAAuBwvB,GAASA,EAAMC,kBAAkBhlC,OAAQ,CAClE,MAAMjD,GAAWD,EAAAA,EAAAA,IAAmB9E,EAAQG,GAE5C4sC,EAAMC,kBAAoBD,EAAMC,kBAAkBhoC,KAAKE,IAAO,IAAWA,KAAYH,EAASG,EAAQ+nC,UACxG,CAEAjtC,GAASktC,EAAAA,EAAAA,IAAiBltC,EAAQG,EAAQ4sC,EAAO9sC,IACjDoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,yBAAyB8Y,MAAOvZ,EAAQU,EAASC,KAChE,MAAM,OAAER,EAAM,UAAEwG,EAAS,MAAE1G,GAAQC,EAAAA,EAAAA,OAAsBS,EACnD6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,GAAMqoB,SACT,OAGF,IAAIrlB,QAAe0X,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE1a,OAAMmE,cACxDnB,IACHA,EAAS,CAAC,GAGZxF,GAASsJ,EAAAA,EAAAA,MAET,MAAM,MAAEgkB,EAAK,SAAEC,IAAazoB,EAAAA,EAAAA,IAAmB9E,EAAQG,GAAQwG,GAC/DnB,EAAO8nB,MAAQA,EACf9nB,EAAO+nB,SAAWA,EAElB,MAAM4f,EAAO3qC,EAAKqoB,SAAUuiB,eACtBC,QAAuBnwB,EAAAA,EAAAA,IAAQ,6BAA8B,CAAE1a,OAAMmE,YAAWwmC,SACtF3nC,EAAO6nC,eAAiBA,GAAgBrlC,OACxCxC,EAAO8nC,mBAAqBD,EAE5BrtC,GAASsJ,EAAAA,EAAAA,MAETtJ,GAASutC,EAAAA,EAAAA,IAAwBvtC,EAAQwF,EAAQvF,IACjDoD,EAAAA,EAAAA,IAAUrD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,4BAA4B8Y,MAAOvZ,EAAQU,EAASC,KACnE,MAAM,OACJR,EAAM,MAAEsmC,EAAK,KAAE+G,EAAI,aAAEC,EAAY,MAAExtC,GAAQC,EAAAA,EAAAA,OACzCS,EACE6B,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,GAAMqoB,SACT,OAGF,MAAMsiB,EAAO3qC,EAAKqoB,SAAUuiB,eACtB5nC,QAAe0X,EAAAA,EAAAA,IAAQ,4BAA6B,CAAEupB,QAAO0G,OAAMM,iBAEpEjoC,IAILxF,GAASsJ,EAAAA,EAAAA,MACTtJ,GAAS0tC,EAAAA,EAAAA,IAAsB1tC,EAAQG,EAAQqtC,EAAMhoC,EAAQvF,IAC7DoD,EAAAA,EAAAA,IAAUrD,GAAO,I,0BCvDnBS,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAAS2sB,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAQ3qB,QAASirC,EAAW,wBAAEC,IAA4BnrC,EAAAA,EAAAA,IAAWzC,EAAQqtB,EAAO/rB,KAAO,CAAC,EAsC5F,OApCI+rB,EAAO7qB,KAAKorC,yBAA2BA,GACtCvgB,EAAO7qB,KAAKorC,wBAA0BA,IACzCvgB,EAAS,IACJA,EACH7qB,MAAMwb,EAAAA,EAAAA,IAAKqP,EAAO7qB,KAAM,CAAC,6BAI7BxC,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQqtB,EAAO/rB,GAAI+rB,EAAO7qB,KAAM6qB,EAAOwgB,kBAC3DxqC,EAAAA,EAAAA,IAAUrD,GAELqtB,EAAOygB,oBAAsBC,EAAAA,EAAAA,GAAmB/tC,EAAQqtB,EAAO/rB,KAElEZ,EAAQstC,eAGN3gB,EAAO7qB,KAAKlB,KACd2sC,EAAAA,GAAAA,IAA0B,CACxB9tC,OAAQktB,EAAO7qB,KAAKlB,GACpBokB,uBAAwB2H,EAAO7qB,KAAKkjB,8BAIxC9d,OAAO2S,OAAOva,EAAOqZ,SAAS5N,SAAQ,EAAGnK,GAAIrB,MAC3C,MAAQE,OAAQmjC,IAAkBjjC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACxEiuC,EAAa7gB,EAEfiW,IAAkB4K,EAAW5sC,IAC5B,YAAa4sC,EAAW1rC,MAAQmrC,IAAgBO,EAAW1rC,KAAKE,UAC/DirC,GACFjtC,EAAQmC,gBAAgB,CAAE5C,UAE5BS,EAAQ4C,SAAS,CAAEhC,GAAIgiC,EAAerjC,UACxC,GAIJ,CAEA,IAAK,iBAAkB,CACrB,MAAM23B,GAAWuW,EAAAA,EAAAA,IAAmBnuC,EAAQqtB,EAAO/rB,IACnD,IAAKs2B,EACH,OAGF53B,GAASouC,EAAAA,EAAAA,IAAkBpuC,EAAQ43B,EAAU,CAACvK,EAAO/rB,KACrDtB,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQqtB,EAAO/rB,GAAI,CAAE+sC,aAAa,KACtDhrC,EAAAA,EAAAA,IAAUrD,GAEV,MAAMwC,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQqtB,EAAO/rB,IAKvC,YAJIkB,GACF9B,EAAQ4tC,kBAAkB,CAAEnuC,OAAQqC,EAAKlB,KAI7C,CAEA,IAAK,kBACH,OAAOitC,EAAAA,EAAAA,IAAUvuC,EAAQqtB,EAAO/rB,IAGlC,IAAK,kBACH,OAAOkiB,EAAAA,EAAAA,IAAWxjB,EAAQqtB,EAAO/rB,GAAI+rB,EAAO7qB,MAG9C,IAAK,yBAA0B,CAC7B,MAAM,GAAElB,EAAE,SAAElB,EAAWmB,EAAAA,GAAc,aAAEitC,GAAiBnhB,EAaxD,OAZArtB,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQsB,EAAIlB,EAAU,eAAgBouC,IAClEnrC,EAAAA,EAAAA,IAAUrD,QAEVqJ,YAAW,KACTrJ,GAASsJ,EAAAA,EAAAA,MACT,MAAMmlC,GAAsBC,EAAAA,EAAAA,IAAkB1uC,EAAQsB,EAAIlB,EAAU,gBAChEouC,GAAgBC,GAAuBD,EAAazZ,YAAc0Z,EAAoB1Z,YACxF/0B,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQsB,EAAIlB,EAAU,oBAAgBG,IAClE8C,EAAAA,EAAAA,IAAUrD,GACZ,GAnF0B,IAuF9B,CAEA,IAAK,aAAc,CACjB,MAAM,QAAEkF,GAAYmoB,EACpB,GAAInoB,EAAQwP,WAAa1U,EAAOgY,gBAAkB9S,EAAQypC,gBACxD,OAGF,MAAMnsC,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQqtB,EAAOltB,QACvC,IAAKqC,EACH,OAGF,MAAMosC,EAAa3nC,QAAQomB,EAAOnoB,QAAQ5D,IAAM+rB,EAAOnoB,QAAQ2pC,kBAoB/D,OAnBIzmB,EAAAA,EAAAA,IAAiBljB,EAAQ5D,MAC3BtB,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQqtB,EAAOltB,OAAQ,CACzCglB,YAAa3iB,EAAK2iB,YAAc3iB,EAAK2iB,YAAc,EAAI,KACnDypB,GAAc,CAAEvjB,qBAAsB7oB,EAAK6oB,qBAAuB,GAAK,MAG3EujB,IACF5uC,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQqtB,EAAOltB,OAAQ,CACzCgrB,eAAgB,IAAK3oB,EAAK2oB,gBAAkB,GAAKkC,EAAOnoB,QAAQ5D,QAIpE+B,EAAAA,EAAAA,IAAUrD,QAEV8uC,EAAAA,GAAAA,IAAmB,CACjBtsC,OACA0C,WAIJ,CAEA,IAAK,0BACL,IAAK,wBAAyB,CAC5B,MAAM,IAAEgF,EAAG,cAAE6kC,GAAkB1hB,EAC/B,IAAuC,IAAnC0hB,EAAcF,iBAChB,OAsBF,OAnBA3kC,EAAIuB,SAASnK,IACX,MAAMnB,EAAU,cAAektB,EAASA,EAAO2hB,WAAYC,EAAAA,EAAAA,IAAsBjvC,EAAQsB,GACnFkB,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAE5BqC,GAAMiqC,uBACRzsC,EAASypC,GAAsBzpC,EAAQG,EAAQ,CAC7CssC,qBAAuBjqC,EAAKiqC,qBAAuB,QAAMlsC,EACzDmsC,gBAAiBlqC,EAAKkqC,iBAAiBznC,QAAQsZ,GAAMA,IAAMjd,OAI3DkB,GAAM6oB,sBACRrrB,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAClCkrB,oBAAsB7oB,EAAK6oB,oBAAsB,QAAM9qB,EACvD4qB,eAAgB3oB,EAAK2oB,gBAAgBlmB,QAAQsZ,GAAMA,IAAMjd,MAE7D,IAGKtB,CACT,CAEA,IAAK,qBAAsB,CACzB,MAAM,SAAE6qB,GAAawC,EACfyJ,EAAa92B,EAAO4O,MAAM2V,KAAK8I,EAAO/rB,IAC5C,IAAKw1B,EACH,OAGF,OAAOtT,EAAAA,EAAAA,IAAWxjB,EAAQqtB,EAAO/rB,GAAI,CACnCupB,SAAU,IACLiM,EAAWjM,YACXA,IAGT,CAEA,IAAK,sBAAuB,CAC1B,MAAM,IAAE3gB,EAAG,SAAEjG,GAAaopB,EACpBuK,EAAW3zB,IAAairC,EAAAA,IAAqB,WAAa,SAEhE,MAAO,IACFlvC,EACH4O,MAAO,IACF5O,EAAO4O,MACVugC,iBAAkB,IACbnvC,EAAO4O,MAAMugC,iBAChB,CAACvX,GAAW1tB,EAAIlC,OAASkC,OAAM3J,IAIvC,CAEA,IAAK,mBAAoB,CACvB,MAAM,GAAEe,EAAE,SAAE8tC,GAAa/hB,EACnBuK,GAAWuW,EAAAA,EAAAA,IAAmBnuC,EAAQsB,GAC5C,IAAKs2B,EACH,OAGF,MAAQ,CAACA,GAAWuX,GAAqBnvC,EAAO4O,MAAMugC,iBAEtD,IAAIE,EAAsBF,GAAoB,GAC9C,GAAKC,GAEE,IAAKC,EAAoB3kC,SAASpJ,GAAK,CAK5C,GAAiB,WAAbs2B,GAAyByX,EAAoBrnC,QAAUsnC,EAAAA,IAAyB,CAClF,MAAM7b,EAAUzzB,EAAO4O,MAAM6kB,QAAQC,OACrC2b,EAAsBA,EAAoBpqC,QAAQsqC,GAAa9b,GAAWA,EAAQ/oB,SAAS6kC,IAC7F,CAEAF,EAAsB,CAAC/tC,KAAO+tC,EAChC,OAZEA,EAAsBA,EAAoBpqC,QAAQsqC,GAAaA,IAAajuC,IAc9E,MAAO,IACFtB,EACH4O,MAAO,IACF5O,EAAO4O,MACVugC,iBAAkB,IACbnvC,EAAO4O,MAAMugC,iBAChB,CAACvX,GAAWyX,EAAoBrnC,OAASqnC,OAAsB9uC,IAIvE,CAEA,IAAK,qBAAsB,CACzB,MAAM,GAAEe,EAAE,SAAE2C,GAAaopB,EAEzB,OAAOmiB,EAAAA,EAAAA,IAAmBxvC,EAAQsB,EAAI2C,EACxC,CAEA,IAAK,mBAAoB,CACvB,MAAM,GAAE3C,EAAE,OAAEmuC,GAAWpiB,GACf9I,KAAMmrB,EAAe,WAAE7rC,GAAe7D,EAAO2vC,YAE/CC,EAAqBH,EACvB,IAAKC,EAAiB,CAACpuC,GAAKmuC,IAC5BI,EAAAA,EAAAA,IACAH,EACA9nC,OAAOC,KAAK6nC,GAAiB1qC,IAAIiD,QAAQhD,QAAQhB,GAAaA,IAAa3C,KAGzEwuC,EAAgBL,EAClB5rC,GAAcA,EAAW6G,SAASpJ,GAAMuC,EAAa,IAAKA,GAAc,GAAKvC,GAC7EuC,EAAaA,EAAWoB,QAAQ8qC,GAAcA,IAAczuC,SAAMf,EAEtE,MAAO,IACFP,EACH2vC,YAAa,IACR3vC,EAAO2vC,YACVprB,KAAMqrB,EACN/rC,WAAYisC,GAGlB,CAEA,IAAK,yBAA0B,CAC7B,MAAM,WAAEjsC,GAAewpB,EAEvB,MAAO,IACFrtB,EACH2vC,YAAa,IACR3vC,EAAO2vC,YACV9rC,cAGN,CAEA,IAAK,+BAAgC,CACnC,MAAM,QAAEmsC,GAAY3iB,EAEpB,MAAO,IACFrtB,EACH2vC,YAAa,IACR3vC,EAAO2vC,YACVM,YAAaD,GAGnB,CAEA,IAAK,oBAAqB,CACxB,MAAMlZ,EAAa92B,EAAO4O,MAAM2V,KAAK8I,EAAO/rB,KACtC,gBAAE4uC,EAAe,YAAEC,EAAW,gBAAEC,GAAoB/iB,EAC1D,IAAKyJ,EACH,OAGF,IAAIuZ,GAAe,EACfC,EAAUxZ,EAAWjM,UAAUylB,QAC/B,IAAIxZ,EAAWjM,SAASylB,SACxB,GAEJ,GAAIJ,EACFI,EAAUJ,EACVG,GAAe,OACV,GAAIF,EAENG,EAAQtoC,QACLsoC,EAAQjF,MAAMzkB,GAAMA,EAAElX,SAAWygC,EAAYzgC,WAEjD4gC,EAAQzqC,KAAKsqC,GACbE,GAAe,QAEZ,GAAIC,EAAQtoC,QAAUooC,EAAiB,CAC5C,MAAMG,EAAcD,EAAQ19B,WAAWgU,GAAMA,EAAElX,SAAW0gC,IACtDG,GAAe,IACjBD,EAAQxjC,MAAMyjC,EAAa,GAC3BF,GAAe,EAEnB,CAEA,GAAIA,EAAc,CAChB,MAAMG,EAAeF,EAAQrrC,QAAO,EAAGwrC,UAASC,aAAcD,GAAWC,IAGzE,OAAOltB,EAAAA,EAAAA,IAAWxjB,EAAQqtB,EAAO/rB,GAAI,CACnCqvC,aAAcL,EAAQtoC,OACtB6iB,SAAU,IACLiM,EAAWjM,SACdylB,UACAM,kBAAkBtzB,EAAAA,EAAAA,IAAqBkzB,EAAc,YAG3D,CAEA,MACF,CAEA,IAAK,sBAAuB,CAC1B,MAAM,OAAErwC,EAAM,IAAE+J,GAAQmjB,EAClB7qB,EAAOxC,EAAO4O,MAAM2V,KAAKpkB,GAE/B,OAAIqC,GAAM+3B,QACD/W,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAChCo6B,OAAQ/3B,EAAK+3B,OAAOt1B,QAAQszB,IAAWruB,EAAIQ,SAAS6tB,EAAMj3B,aAI9D,CACF,CAEA,IAAK,eAAgB,CACnB,MAAM,OACJnB,EAAM,cAAE0wC,EAAa,KAAE3jC,EAAI,aAAE1F,EAAY,SAAEpH,GACzCitB,EAEJ,IADartB,EAAO4O,MAAM2V,KAAKpkB,GAE7B,OAMF,OAHAH,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQC,GAAYmB,EAAAA,GAAgB,QAASsvC,GACjF7wC,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQC,GAAYmB,EAAAA,GAAgB,eAAgBiG,GACxFxH,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAAEsjB,UAAWvW,GAEnD,CAEA,IAAK,aAAc,CACjB,MAAM,KAAE0G,GAASyZ,EAMjB,YAJAzlB,OAAO2S,OAAOva,EAAOqZ,SAAS5N,SAAQ,EAAGnK,GAAIrB,MAC3CS,EAAQgsB,WAAW,CAAE9Y,OAAM3T,SAAQ,GAIvC,CAEA,IAAK,4BAA6B,CAChC,MAAM,OAAEE,EAAM,gBAAE82B,EAAe,mBAAED,GAAuB3J,EAClD7qB,EAAOxC,EAAO4O,MAAM2V,KAAKpkB,GAC/B,IAAKqC,EACH,OAaF,OAVAxC,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAClC0qB,SAAU,IACLroB,EAAKqoB,SACRoM,kBACAD,yBAGJ3zB,EAAAA,EAAAA,IAAUrD,QAEVU,EAAQowC,qBAAqB,CAAE3wC,UAEjC,CAEA,IAAK,oBAAqB,CACxB,MAAM,OAAEA,EAAM,QAAEiW,EAAO,SAAEg5B,GAAa/hB,EAGtC,IADartB,EAAO4O,MAAM2V,KAAKpkB,GAE7B,OAQF,OALAH,GAAS4lB,EAAAA,EAAAA,IAAY5lB,EAAQG,EAAQiW,EAAS,CAC5Cg5B,kBAEF/rC,EAAAA,EAAAA,IAAUrD,EAGZ,CAEA,IAAK,0BAA2B,CAC9B,MAAM,OAAEG,EAAM,MAAE8R,GAAUob,EAG1B,IADartB,EAAO4O,MAAM2V,KAAKpkB,GACpB,OAOX,OALAH,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAClC4wC,sBAAuB9+B,SAEzB5O,EAAAA,EAAAA,IAAUrD,EAGZ,CAEA,IAAK,cAAe,CAClB,MAAM,OAAEG,EAAM,QAAEiW,GAAYiX,EAEtB7qB,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,GAAME,QAAS,OAIpB,YAFAhC,EAAQswC,cAAc,CAAE7wC,SAAQiW,WAGlC,CAEA,IAAK,eAAgB,CACnB,MAAM,OAAEjW,GAAWktB,EAEb7qB,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,GAAME,QAAS,OAIpB,YAFAhC,EAAQuwC,WAAW,CAAE9wC,SAAQwQ,OAAO,GAGtC,EAGc,I,gBC7YlB,MAAMugC,GAAkB,IAqlBxB,SAASC,GACPnxC,EACAG,EACAmB,EACAoqC,EACAlpC,EACA6K,EACAnI,GAEA,MAAM2mC,EAAmB3mC,GAASwmC,UAGlC,GAAIG,IAAoBuF,EAAAA,GAAAA,GAAa1F,EAAWG,GAC9C,OAAO7rC,EAKT,GAFAA,GAASod,EAAAA,EAAAA,IAAkBpd,EAAQG,EAAQmB,EAAI,CAAEoqC,eAE5Cr+B,EACH,OAAOrN,EAGT,MAAMqxC,EAA2B7uC,EAAKkqC,iBAAiBhiC,SAASpJ,GAGhE,IAAIgwC,EAAAA,EAAAA,IAA0BtxC,EAAQ0rC,KAAe2F,EAA0B,CAC7ErxC,EAASypC,GAAsBzpC,EAAQG,EAAQ,CAC7CssC,sBAAuBjqC,GAAMiqC,sBAAwB,GAAK,EAC1DC,gBAAiB,IAAKlqC,GAAMkqC,iBAAmB,GAAKprC,KAGtD,MAAMiwC,GAAah9B,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQmB,GAErD,IAAKkB,IAAS+uC,EAAY,OAAOvxC,GAEjC2c,EAAAA,EAAAA,KAAU,MACRmyB,EAAAA,GAAAA,IAAmB,CACjBtsC,OACA0C,QAASqsC,EACTC,YAAY,GACZ,GAEN,MAAWH,IACTrxC,EAASypC,GAAsBzpC,EAAQG,EAAQ,CAC7CssC,sBAAuBjqC,GAAMiqC,sBAAwB,GAAK,EAC1DC,gBAAiBlqC,GAAMkqC,iBAAiBznC,QAAQsZ,GAAMA,IAAMjd,OAIhE,OAAOtB,CACT,CAEA,SAASyxC,GACPzxC,EAA6BG,EAAgBmB,EAAYytC,EAAoC2C,GAAc,GAE3G,MAAMC,EAAiBD,GACnBtqB,EAAAA,EAAAA,IAAuBpnB,EAAQG,EAAQmB,IACvCiT,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQmB,GAGtC,GAAIqwC,GAAkB5C,EAAc5nC,QAAS,CAC3C,MAAM,MACJoxB,EAAK,MAAEqZ,EAAK,QAAEngC,EAAO,SAAEzB,IACrB6hC,EAAAA,EAAAA,IAAkBF,GAClBpZ,GAASwW,EAAc5nC,QAAQoxB,OACjCwW,EAAc5nC,QAAQoxB,MAAM9Z,QAAU8Z,EAAM9Z,QAC5CswB,EAAc5nC,QAAQoxB,MAAMuZ,UAAYvZ,EAAMuZ,WACrCF,GAAS7C,EAAc5nC,QAAQyqC,MACxC7C,EAAc5nC,QAAQyqC,MAAMnzB,QAAUmzB,EAAMnzB,QACnChN,GAAWs9B,EAAc5nC,QAAQsK,QAC1Cs9B,EAAc5nC,QAAQsK,QAAQsgC,oBAAsBtgC,EAAQsgC,oBACnD/hC,GAAY++B,EAAc5nC,QAAQ6I,WAC3C++B,EAAc5nC,QAAQ6I,SAASgiC,eAAiBhiC,EAASgiC,eAE7D,CAEA,MAAMT,EAAaI,EAAiB,IAAKA,KAAmB5C,GAAkBA,EAE9E,OAAO2C,GACHO,EAAAA,EAAAA,IAAuBjyC,EAAQG,EAAQmB,EAAIiwC,IAC3Cn0B,EAAAA,EAAAA,IAAkBpd,EAAQG,EAAQmB,EAAIiwC,EAC5C,CAEA,SAASW,GACPlyC,EAAWU,EAAgCwE,EAAqByY,GAEhE,MAAM,OAAExd,GAAW+E,GAEb,WAAEiD,IAAegqC,EAAAA,EAAAA,IAAsBnyC,EAAQkF,IAAY,CAAC,EAElE,IAAKiD,GAAcjD,EAAQuY,iBAAkB,CAC3C,MAAM20B,GAAgB79B,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQ+E,EAAQuY,kBAC5D20B,EACFpyC,GAAS4d,EAAAA,EAAAA,IAAuC5d,EAAQoyC,EAAejyC,EAAQ+E,EAAQ5D,GAAIqc,GAE3Fjd,EAAQgd,YAAY,CAClBvd,SACAwG,UAAWzB,EAAQuY,iBACnBR,aAAc,CACZU,aACAtV,cAAenD,EAAQ5D,KAI/B,CAEA,OAAOtB,CACT,CAEA,SAASqyC,GACPryC,EAAWU,EAAgCwE,GAE3C,MAAM,GAAE5D,EAAE,OAAEnB,GAAW+E,GAEjB,WAAEiD,EAAU,eAAEmqC,IAAmBH,EAAAA,EAAAA,IAAsBnyC,EAAQkF,IAAY,CAAC,EAE5E1C,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAC1BoyC,EAAwB/vC,GAAM2iB,eAAgBnJ,EAAAA,EAAAA,IAAgBhc,EAAQG,EAAQoB,EAAAA,IA+BpF,OA7BAvB,EAASkyC,GAAmBlyC,EAAQU,EAASwE,GAEzCiD,KACEmqC,IAAmBzH,EAAAA,EAAAA,IAAe3lC,KACpClF,GAAS+nB,EAAAA,EAAAA,IAAgB/nB,EAAQG,EAAQgI,EAAW/H,SAAU,CAACkB,IAE/DsG,OAAO2S,OAAOva,EAAOqZ,SAAS5N,SAAQ,EAAGnK,GAAIrB,OACvCyH,EAAAA,EAAAA,IAAuB1H,EAAQG,EAAQgI,EAAW/H,SAAUH,KAC9DD,GAASwyC,EAAAA,EAAAA,IAAcxyC,EAAQG,EAAQgI,EAAW/H,SAAUkB,EAAIrB,GAE3DqyC,IACHtyC,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQgI,EAAW/H,SAAU,iBAAkB8E,EAAQ5D,KAE/F,KAIJtB,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQgI,EAAW/H,SAAU,aAAc,IAC1E+H,EACHE,cAAenD,EAAQ5D,MAGpBupC,EAAAA,EAAAA,IAAe3lC,KAClBlF,GAASylB,EAAAA,EAAAA,IAAiBzlB,EAAQG,EAAQgI,EAAW/H,SAAU,CAC7DstB,eAAgBvlB,EAAWulB,eAAiB,GAAK,MAKnD6kB,IAIJvyC,GAAS+nB,EAAAA,EAAAA,IAAgB/nB,EAAQG,EAAQoB,EAAAA,GAAgB,CAACD,IAE1DsG,OAAO2S,OAAOva,EAAOqZ,SAAS5N,SAAQ,EAAGnK,GAAIrB,MAC3C,IAAIyH,EAAAA,EAAAA,IAAuB1H,EAAQG,EAAQoB,EAAAA,GAAgBtB,GAAQ,CAEjE,MAAMwyC,GAAgBvtB,EAAAA,EAAAA,IAAoBllB,EAAQG,EAAQoB,EAAAA,GAAgBtB,GACpEyyC,GAAkBF,EAAAA,EAAAA,IAAcxyC,EAAQG,EAAQoB,EAAAA,GAAgBD,EAAIrB,GACpEqc,GAAiBxV,EAAAA,EAAAA,IAAkB4rC,EAAiBvyC,EAAQoB,EAAAA,GAAgBtB,GAE7EwyC,IAAiBn2B,EAAgB5R,SAAS+nC,KAC7CzyC,EAAS0yC,EAEb,MAfO1yC,CAmBX,CAEA,SAAS2yC,GACP3yC,EACAG,EACA+E,EACAyL,GAAQ,GAER,MAAM,MAAE/B,GAAU5O,EACZwC,EAAOoM,EAAM2V,KAAKpkB,GAClByyC,EAAqBpwC,GAAM0F,YAE3Bsd,EAAQhjB,GAAME,SAAUmwC,EAAAA,EAAAA,IAAuB7yC,EAAQkF,QAAW3E,EAOxE,OANIilB,IACFxlB,GAAS4lB,EAAAA,EAAAA,IAAY5lB,EAAQG,EAAQqlB,EAAMlkB,GAAI,CAC7C+G,cAAenD,EAAQ5D,OAIvBsxC,GAAuBjiC,GAEvBiiC,EAAmBtxC,KAAO4D,EAAQ5D,IAAMsxC,EAAmBtxC,KAAO4D,EAAQ2I,iBACvE3I,EAAQ5D,GAAKsxC,EAAmBtxC,IAO9BkiB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAAE+H,YAAahD,IAJxClF,CAOb,CAEA,SAAS8yC,GAAuC9yC,EAAWG,GACzD,MAAMokB,GAAOzf,EAAAA,EAAAA,IAAmB9E,EAAQG,GAClC4b,GAAYC,EAAAA,EAAAA,IAAgBhc,EAAQG,EAAQoB,EAAAA,IAElD,IAAKgjB,IAASxI,EACZ,OAGF,IAAIwC,EAAIxC,EAAU/T,OAClB,KAAOuW,KAAK,CACV,MAAMrZ,EAAUqf,EAAKxI,EAAUwC,IAC/B,IAAKrZ,EAAQyY,WACX,OAAOzY,CAEX,CAGF,CAEA,SAAS6tC,GACP/yC,EAAWG,EAA4B+J,EAAexJ,GAItD,GAAIP,EAAQ,CACV,MAAMqC,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAChC,IAAKqC,EAAM,OAEX0H,EAAIuB,SAASnK,IACXtB,GAASod,EAAAA,EAAAA,IAAkBpd,EAAQG,EAAQmB,EAAI,CAC7Cqc,YAAY,IAKd,MAAMq1B,EAAiBF,GAFvB9yC,GAASizC,EAAAA,EAAAA,IAAwBjzC,EAAQG,EAAQmB,GAEFnB,GAC3C6yC,IACFhzC,EAAS2yC,GAAsB3yC,EAAQG,EAAQ6yC,GAAgB,IAG7DxwC,EAAKgW,SAASlX,KAChBtB,GAASkzC,EAAAA,EAAAA,IAAYlzC,EAAQG,EAAQmB,GACvC,IAGFZ,EAAQ4tC,kBAAkB,CAAEnuC,WAE5B,MAAMgzC,EAA8B,GA4BpC,OA1BAjpC,EAAIuB,SAASnK,IACX,MAAM4D,GAAUqP,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQmB,GAClD,IAAK4D,EACH,OAGFlF,EAASkyC,GAAmBlyC,EAAQU,EAASwE,GAAS,GAEtD,MAAM9E,GAAW4mB,EAAAA,EAAAA,IAA0BhnB,EAAQkF,GAC/C9E,GACF+yC,EAAkBttC,KAAKzF,EACzB,KAGFiD,EAAAA,EAAAA,IAAUrD,QAEVqJ,YAAW,KACTrJ,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASozC,EAAAA,EAAAA,IAAmBpzC,EAAQG,EAAQ+J,IAC5C7G,EAAAA,EAAAA,IAAUrD,IAEViW,EAAAA,EAAAA,IAAOk9B,GAAmB1nC,SAASrL,IACjCM,EAAQ2yC,wBAAwB,CAAElzC,SAAQC,YAAW,GACrD,GACD8wC,GAGL,CAIA,MAAMoC,EAA6B,GAEnCppC,EAAIuB,SAASnK,IACX,MAAMiyC,GAAkBtE,EAAAA,EAAAA,IAAsBjvC,EAAQsB,GACtD,GAAIiyC,EAAiB,CACnBD,EAAiBztC,KAAK0tC,GAMtB,MAAMP,EAAiBF,GAJvB9yC,GAASod,EAAAA,EAAAA,IAAkBpd,EAAQuzC,EAAiBjyC,EAAI,CACtDqc,YAAY,IAGiC41B,GAC3CP,IACFhzC,EAAS2yC,GAAsB3yC,EAAQuzC,EAAiBP,GAAgB,IAG1E3pC,YAAW,KACTrJ,GAASsJ,EAAAA,EAAAA,MACTtJ,GAASozC,EAAAA,EAAAA,IAAmBpzC,EAAQuzC,EAAiB,CAACjyC,KACtD+B,EAAAA,EAAAA,IAAUrD,EAAO,GAChBkxC,GACL,MAGF7tC,EAAAA,EAAAA,IAAUrD,IAEViW,EAAAA,EAAAA,IAAOq9B,GAAkB7nC,SAASnK,IAChCZ,EAAQ4tC,kBAAkB,CAAEnuC,OAAQmB,GAAK,GAE7C,EA14BAb,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAAS2sB,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAM,OACJltB,EAAM,GAAEmB,EAAE,QAAE4D,EAAO,iBAAEsuC,GACnBnmB,EAEJrtB,EAASqyC,GADTryC,EAASyxC,GAAqBzxC,EAAQG,EAAQmB,EAAI4D,GACNxE,EAASwE,GAEjDA,EAAQuoB,oBACVztB,GAASylB,EAAAA,EAAAA,IACPzlB,EACAkF,EAAQuoB,kBAAkBttB,OAC1B+E,EAAQuoB,kBAAkBrtB,SAC1B8E,EAAQuoB,oBAIZ,MAAM8jB,GAAah9B,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQmB,GAC/CkB,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAC5BqC,GAAME,SACL6uC,EAAWkC,gBACVZ,EAAAA,EAAAA,IAAuB7yC,EAAQuxC,IAChCA,EAAW9zB,kBACd/c,EAAQswC,cAAc,CAAE7wC,SAAQiW,QAASm7B,EAAW9zB,mBAGtD7V,OAAO2S,OAAOva,EAAOqZ,SAAS5N,SAAQ,EAAGnK,GAAIrB,MAC3C,MAAMsjB,GAAUsnB,EAAAA,EAAAA,IAAe3lC,GAC/B,IAAIwuC,EAAAA,EAAAA,IAAoC1zC,EAAQG,EAAQ+E,EAAuBjF,GAAQ,CACrF,GAAIsjB,GAAWre,EAAQmI,aAAgBnI,EAAQiC,SAAS2N,OAAS,CAC/D,MAAMnT,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GACxD0B,GAEFjB,EAAQ6H,aAAa,CACnBpI,SACAC,SAAUuB,EAAmBvB,SAC7BuG,UAAWzB,EAAQ5D,GACnBiI,aAAa,EACbU,qBAAqB,EACrBhK,SAGN,CAEA,MAAM,WAAEkI,IAAegqC,EAAAA,EAAAA,IAAsBnyC,EAAQkF,IAA0B,CAAC,EAC5EiD,IAAeob,GACjB7iB,EAAQ2yC,wBAAwB,CAAElzC,SAAQC,SAAU+H,EAAW/H,WAK5DmjB,GACHla,YAAW,KACTrJ,GAASsJ,EAAAA,EAAAA,MACLkqC,IACFxzC,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQoB,EAAAA,GAAgB,eAAgBD,IAE9EtB,EAAS2yC,GAAsB3yC,EAAQG,EAAQoxC,IAC/CluC,EAAAA,EAAAA,IAAUrD,EAAO,GAChBkxC,GAEP,MACElxC,EAAS2yC,GAAsB3yC,EAAQG,EAAQoxC,EACjD,KAGFluC,EAAAA,EAAAA,IAAUrD,IAGL+tC,EAAAA,EAAAA,GAAmB/tC,EAAQG,IAC9BO,EAAQstC,eAGV,KACF,CAEA,IAAK,8BACHpmC,OAAO2S,OAAOva,EAAOqZ,SAAS5N,SAAQ,EAAGnK,GAAIrB,MAC3C,MAAQE,OAAQmjC,IAAkBjjC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAE9E,GAAIqjC,IAAkBjW,EAAO/rB,GAAI,OACjC,MAAM4D,GAAUqP,EAAAA,EAAAA,IAAkBvU,EAAQsjC,EAAejW,EAAO1mB,WAEhE,IAAKzB,EAAS,OAGd,IAAIyuC,EAAAA,EAAAA,IAAezuC,KAAamoB,EAAOtnB,MAAO,OAE9C,MAAMnE,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxCD,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BuqC,wBAAyB,IAAK3oC,EAAS2oC,yBAA2B,GAAK,CACrEjpC,GAAIM,EAAS2oC,yBAAyBviC,QAAU,EAChDqiC,eAAgBhd,EAAOtnB,MACvBY,UAAW0mB,EAAO1mB,aAEnB1G,EAAM,KAGXoD,EAAAA,EAAAA,IAAUrD,GAEV,MAGF,IAAK,sBAAuB,CAC1B,MAAM,OAAEG,EAAM,GAAEmB,EAAE,QAAE4D,GAAYmoB,EAEhCrtB,EAASyxC,GAAqBzxC,EAAQG,EAAQmB,EAAI4D,GAAS,GAE3D,MAAMiiB,GAAeysB,EAAAA,EAAAA,IAAmB5zC,EAAQG,EAAQoB,EAAAA,KAAmB,GAC3EvB,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQoB,EAAAA,GAAgB,gBAAgB0U,EAAAA,EAAAA,IAAO,IAAIkR,EAAc7lB,KAErG,MAAMlB,GAAW4mB,EAAAA,EAAAA,IAA0BhnB,EAAQkF,GACnD,GAAI9E,IAAamB,EAAAA,GAAgB,CAC/B,MAAMsyC,GAAqBD,EAAAA,EAAAA,IAAmB5zC,EAAQG,EAAQC,IAAa,GAC3EJ,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQC,EAAU,gBAAgB6V,EAAAA,EAAAA,IAAO,IAAI49B,EAAoBvyC,IACvG,EAEA+B,EAAAA,EAAAA,IAAUrD,GAEV,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,OAAEG,EAAM,GAAEmB,EAAE,QAAE4D,GAAYmoB,EAC1BskB,GAAiBp9B,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQmB,GACnDkB,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAEhCH,EAASyxC,GAAqBzxC,EAAQG,EAAQmB,EAAI4D,GAElD,MAAMqsC,GAAah9B,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQmB,GACjD4D,EAAQuoB,oBACVztB,GAASylB,EAAAA,EAAAA,IACPzlB,EACAkF,EAAQuoB,kBAAkBttB,OAC1B+E,EAAQuoB,kBAAkBrtB,SAC1B8E,EAAQuoB,oBAIRkkB,IACF3xC,EAAS2yC,GAAsB3yC,EAAQG,EAAQoxC,IAG7CrsC,EAAQwmC,WAAalpC,IACvBxC,EAASmxC,GAAgBnxC,EAAQG,EAAQmB,EAAI4D,EAAQwmC,UAAWlpC,EAAM+uC,EAAWlkC,WAAYskC,IAG3FzsC,EAAQiC,SAAS5D,MAAMA,OAASouC,GAAgBxqC,SAAS5D,MAAMA,OACjEvD,GAASizC,EAAAA,EAAAA,IAAwBjzC,EAAQG,EAAQmB,KAGnD+B,EAAAA,EAAAA,IAAUrD,GAEV,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,OAAEG,EAAM,GAAEmB,EAAE,QAAE4D,GAAYmoB,EAE1BskB,GAAiBvqB,EAAAA,EAAAA,IAAuBpnB,EAAQG,EAAQmB,GAC9D,IAAKqwC,EACH,OAGF3xC,EAASyxC,GAAqBzxC,EAAQG,EAAQmB,EAAI4D,GAAS,GAC3D,MAAMgF,EAAMtC,OAAOC,MAAKhD,EAAAA,EAAAA,IAA4B7E,EAAQG,IAAW,CAAC,GAAG6E,IAAIiD,QAAQ5C,MAAK,CAAC6Y,EAAGuI,IAAMA,EAAIvI,IAC1Gle,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQoB,EAAAA,GAAgB,eAAgB2I,GAE5E,MAAM9J,GAAW4mB,EAAAA,EAAAA,IAA0BhnB,EAAQ2xC,GACnD,GAAIvxC,IAAamB,EAAAA,GAAgB,CAC/B,MAAMsyC,GAAqBD,EAAAA,EAAAA,IAAmB5zC,EAAQG,EAAQC,IAAa,GAC3EJ,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQC,EAAU,eAAgByzC,EAAmBxuC,MAAK,CAAC6Y,EAAGuI,IAAMA,EAAIvI,IAC9G,EACA7a,EAAAA,EAAAA,IAAUrD,GAEV,KACF,CAEA,IAAK,6BAA8B,CACjC,MAAM,OAAEG,EAAM,QAAEoS,EAAO,QAAErN,GAAYmoB,EACrCrtB,EAASqyC,GAA2BryC,EAAQU,EAASwE,GAErD,MAAMysC,GAAiBp9B,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQoS,GAEzDvS,GAASozC,EAAAA,EAAAA,IAAmBpzC,EAAQG,EAAQ,CAACoS,IAGzCrN,EAAQwsC,cACV1xC,GAAS8zC,EAAAA,EAAAA,IAA4B9zC,EAAQG,EAAQ,CAACoS,KAGxDvS,GAASod,EAAAA,EAAAA,IAAkBpd,EAAQG,EAAQ+E,EAAQ5D,GAAI,IAClDqwC,KACAzsC,EACH2I,gBAAiB0E,IAGnB,MAAMg/B,GAAah9B,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQ+E,EAAQ5D,IAC7DtB,EAAS2yC,GAAsB3yC,EAAQG,EAAQoxC,GAE/C,MAAMwC,GAAS5B,EAAAA,EAAAA,IAAsBnyC,EAAQkF,GAE7C0C,OAAO2S,OAAOva,EAAOqZ,SAAS5N,SAAQ,EAAGnK,GAAIrB,MAC3C,MAAQE,OAAQmjC,EAAeljC,SAAU4zC,IAAoB3zC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACrGqjC,IAAkBnjC,IAChB4zC,GAAQ5rC,YAAY/H,UAAYmB,EAAAA,MAAoByyC,GAI1DtzC,EAAQuzC,oBAAoB,CAAEzmC,MAAOtI,EAAQ5D,GAAIrB,SAAQ,IAEvD8zC,GAAQ5rC,aACVnI,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQ4zC,EAAO5rC,WAAW/H,SAAU,aAAc,IACjF2zC,EAAO5rC,WACVE,cAAenD,EAAQ5D,GACvBokB,uBAAwBxgB,EAAQ5D,OAIpC+B,EAAAA,EAAAA,IAAUrD,GAEV,KACF,CAEA,IAAK,sCAAuC,CAC1C,MAAM,OAAEG,EAAM,QAAEoS,EAAO,QAAErN,GAAYmoB,EAC/BlG,GAAeysB,EAAAA,EAAAA,IAAmB5zC,EAAQG,EAAQoB,EAAAA,KAAmB,GAC3EvB,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQoB,EAAAA,GAAgB,eAAgB,IAAI4lB,EAAcjiB,EAAQ5D,KAEtG,MAAMlB,GAAW4mB,EAAAA,EAAAA,IAA0BhnB,EAAQkF,GACnD,GAAI9E,IAAamB,EAAAA,GAAgB,CAC/B,MAAMsyC,GAAqBD,EAAAA,EAAAA,IAAmB5zC,EAAQG,EAAQC,IAAa,GAC3EJ,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQC,EAAU,eAAgB,IAAIyzC,EAAoB3uC,EAAQ5D,IACxG,CAEA,MAAMqwC,GAAiBvqB,EAAAA,EAAAA,IAAuBpnB,EAAQG,EAAQoS,GAE9DvS,GAAS8zC,EAAAA,EAAAA,IAA4B9zC,EAAQG,EAAQ,CAACoS,IACtDvS,GAASiyC,EAAAA,EAAAA,IAAuBjyC,EAAQG,EAAQ+E,EAAQ5D,GAAI,IACvDqwC,KACAzsC,EACH2I,gBAAiB0E,KAGnBlP,EAAAA,EAAAA,IAAUrD,GACV,KACF,CAEA,IAAK,kBAAmB,CACtB,MAAM,OAAEG,EAAM,SAAEivC,EAAQ,WAAE5qC,GAAe6oB,EAEnCtoB,GAAWmvC,EAAAA,EAAAA,KAAWpvC,EAAAA,EAAAA,IAAmB9E,EAAQG,GAASqE,GAC1D2vC,EAA4C,CAChD,CAAC5yC,EAAAA,IAAiBiD,GAEpBoD,OAAO2S,OAAOxV,GAAU0G,SAASvG,IAC/B,MAAM9E,GAAW4mB,EAAAA,EAAAA,IAA0BhnB,EAAQkF,GACnD,GAAI9E,IAAamB,EAAAA,GAAgB,OACjC,MAAM6yC,EAAyBD,EAAgB/zC,IAAa,GAC5Dg0C,EAAuBvuC,KAAKX,EAAQ5D,IACpC6yC,EAAgB/zC,GAAYg0C,CAAsB,IAGpDxsC,OAAOsf,QAAQitB,GAAiB1oC,SAAQ,EAAErL,EAAU8J,MAClD,MAAMmqC,GAAYC,EAAAA,EAAAA,IAAgBt0C,EAAQG,EAAQoB,EAAAA,KAAmB,GAC/DgzC,EAAenF,GACjBn5B,EAAAA,EAAAA,IAAOo+B,EAAUvrB,OAAO5e,IAAM7E,MAAK,CAAC6Y,EAAGuI,IAAMA,EAAIvI,IACjDm2B,EAAUpvC,QAAQ3D,IAAQ4I,EAAIQ,SAASpJ,KAC3CtB,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQ8H,OAAO7H,GAAW,YAAam0C,EAAa,KAE1FlxC,EAAAA,EAAAA,IAAUrD,GAEV,KACF,CAEA,IAAK,mBAAoB,CACvB,MAAM,OACJG,EAAM,SAAEC,EAAQ,WAAE+H,EAAU,eAAEmqC,GAC5BjlB,EAEEmnB,GAAoBpsC,EAAAA,EAAAA,IAAiBpI,EAAQG,EAAQC,GACrDq0C,EAAgB,IACjBD,KACArsC,GAGL,IAAKssC,EAAcr0C,SACjB,OAGFJ,GAASylB,EAAAA,EAAAA,IAAiBzlB,EAAQG,EAAQC,EAAUq0C,GAEhDnC,IACFtyC,GAAS0G,EAAAA,EAAAA,IAAmB1G,EAAQG,EAAQC,EAAU,iBAAkBkyC,IAG1E,MAAM9vC,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAMhC,GALIqC,GAAME,SAAWyF,EAAWud,yBAA2B8uB,GAAmB9uB,wBAC5EhlB,EAAQswC,cAAc,CAAE7wC,SAAQiW,QAAShW,IAIvC+H,EAAW+qB,eAAiB9yB,IAAaoC,GAAME,QAAS,CAC1D,MAAMgjB,EAAyBljB,GAAMkjB,uBAC/BgvB,EAAiCD,EAAc/uB,wBAA0BA,EAC3EA,GAA0BgvB,IAC5B10C,GAASylB,EAAAA,EAAAA,IAAiBzlB,EAAQG,EAAQC,EAAU,CAClDslB,uBAAwBjY,KAAKC,IAAIgnC,EAAgChvB,KAGvE,EAEAriB,EAAAA,EAAAA,IAAUrD,GAEV,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAQsB,GAAInB,GAAWktB,EACjBsnB,GAAe7vC,EAAAA,EAAAA,IAAmB9E,EAAQG,GAE5Cw0C,KAAiB1Y,EAAAA,EAAAA,IAAS97B,KAC5BH,GAASozC,EAAAA,EAAAA,IAAmBpzC,EAAQG,EAAQyH,OAAOC,KAAK8sC,GAAc3vC,IAAIiD,UAC1E5E,EAAAA,EAAAA,IAAUrD,GACVU,EAAQk0C,aAAa,CAAEz0C,SAAQwQ,OAAO,EAAM1Q,OAAOC,EAAAA,EAAAA,SAGrD,KACF,CAEA,IAAK,iBAAkB,CACrB,MAAM,IAAEgK,EAAG,OAAE/J,GAAWktB,EAExB0lB,GAAe/yC,EAAQG,EAAQ+J,EAAKxJ,GACpC,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,IAAEwJ,EAAG,OAAE/J,GAAWktB,GAyjB9B,SACEltB,EAA4B+J,EAAexJ,EAAgCV,GAEtEG,IAIL+J,EAAIuB,SAASnK,IACXtB,GAASiyC,EAAAA,EAAAA,IAAuBjyC,EAAQG,EAAQmB,EAAI,CAClDqc,YAAY,GACZ,KAGJta,EAAAA,EAAAA,IAAUrD,GAEVqJ,YAAW,KACTrJ,GAASsJ,EAAAA,EAAAA,MACTtJ,GAAS8zC,EAAAA,EAAAA,IAA4B9zC,EAAQG,EAAQ+J,GACrD,MAAM2qC,GAAoBhwC,EAAAA,EAAAA,IAA4B7E,EAAQG,GAC9DH,GAAS0G,EAAAA,EAAAA,IACP1G,EAAQG,EAAQoB,EAAAA,GAAgB,eAAgBqG,OAAOC,KAAKgtC,GAAqB,CAAC,GAAG7vC,IAAIiD,UAE3F5E,EAAAA,EAAAA,IAAUrD,EAAO,GAChBkxC,IACL,CA/kBM4D,CAAwB30C,EAAQ+J,EAAKxJ,EAASV,GAC9C,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,OAAEG,GAAWktB,EACbzoB,EAAe5E,EAAO+E,SAASuG,SAASnL,GAY9C,GAXIA,IAAW8M,EAAAA,MACbjN,EAAS,IACJA,EACH+M,qBAAsB/M,EAAO+M,qBAAqB/H,KAAKsN,IAAY,IAC9DA,EACHsW,WAAW,QAGfvlB,EAAAA,EAAAA,IAAUrD,IAGR4E,EAAc,CAChB,MAAMsF,EAAMtC,OAAOC,KAAKjD,EAAa2f,MAAMvf,IAAIiD,QAE/C8qC,GADA/yC,GAASsJ,EAAAA,EAAAA,MACcnJ,EAAQ+J,EAAKxJ,EACtC,MACEA,EAAQ4tC,kBAAkB,CAAEnuC,WAG9B,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,IAAE+J,EAAG,cAAE6kC,GAAkB1hB,EAE/BnjB,EAAIuB,SAASnK,IACX,MAAMnB,GAAS8uC,EAAAA,EAAAA,IAAsBjvC,EAAQsB,GACzCnB,IACFH,GAASod,EAAAA,EAAAA,IAAkBpd,EAAQG,EAAQmB,EAAIytC,GACjD,KAGF1rC,EAAAA,EAAAA,IAAUrD,GAEV,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,UAAEgvC,EAAS,IAAE9kC,EAAG,cAAE6kC,GAAkB1hB,EAE1CnjB,EAAIuB,SAASnK,IACXtB,GAASod,EAAAA,EAAAA,IAAkBpd,EAAQgvC,EAAW1tC,EAAIytC,EAAc,KAGlE1rC,EAAAA,EAAAA,IAAUrD,GAEV,KACF,CAEA,IAAK,oBAAqB,CACxB,MAAM,OAAE+0C,EAAM,WAAEC,GAAe3nB,EAEzBnoB,GAAU+vC,EAAAA,EAAAA,IAA0Bj1C,EAAQ+0C,GAElD,GAAI7vC,GAASiC,QAAQ4e,KAAM,CACzB,MAAMmvB,EAAahwC,EAAQiC,QAAQ4e,KAAKzW,QACxC,IAAIoyB,EAAawT,EACbF,EAAW1lC,SAASA,UACjB4lC,EAAW5lC,SAAY0lC,EAAW1lC,QAAQ6lC,MAEpCD,EAAW5lC,UACpBoyB,EAAa,IACRsT,EAAW1lC,QACdA,QAAS0lC,EAAW1lC,QAAQA,QAAQtK,KAAKQ,IAAM,IAC1CA,EACH4vC,SAAUF,EAAW5lC,QAAS5D,MAAMugC,GAAMA,EAAEjmB,SAAWxgB,EAAOwgB,UAASovB,aAEzED,WAAO50C,IARTmhC,EAAasT,EAAW1lC,SAY5B,MAAM+lC,EAAc,IAAKnwC,EAAQiC,QAAQ4e,QAASivB,EAAY1lC,QAASoyB,GAEvE1hC,GAASod,EAAAA,EAAAA,IACPpd,EACAkF,EAAQ/E,OACR+E,EAAQ5D,GACR,CACE6F,QAAS,IACJjC,EAAQiC,QACX4e,KAAMsvB,MAIZhyC,EAAAA,EAAAA,IAAUrD,EACZ,CACA,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,OAAE+0C,EAAM,OAAErlC,EAAM,QAAEoW,GAAYuH,EAC9BnoB,GAAU+vC,EAAAA,EAAAA,IAA0Bj1C,EAAQ+0C,GAClD,IAAK7vC,IAAYA,EAAQiC,QAAQ4e,OAAS7gB,EAAQiC,QAAQ4e,KAAKzW,QAC7D,MAGF,MAAM,KAAEyW,GAAS7gB,EAAQiC,SAEnB,eAAEmuC,EAAc,YAAEC,EAAW,QAAEjmC,GAAYyW,EAAKzW,QAChDkmC,EAAoBF,EAAiB,IAAIA,GAAkB,GAC3DG,EAAiBF,EAAcA,EAAc,EAAI,EACjD7T,EAAapyB,EAAU,IAAIA,GAAW,GAE5CkmC,EAAkB3vC,KAAK6J,GAEvBoW,EAAQra,SAASua,IACf,MAAM0vB,EAAoBhU,EAAW9uB,WAAWpN,GAAWA,EAAOwgB,SAAWA,IACvE2vB,EAAejU,EAAWgU,GAC1BE,EAA+BD,EAAe,IAAKA,GAAiB,CAAE3vB,SAAQ6vB,YAAa,GAEjGD,EAAcC,aAAe,EACzBnmC,IAAW1P,EAAOgY,gBACpB49B,EAAcR,UAAW,GAGvBM,EACFhU,EAAWgU,GAAqBE,EAEhClU,EAAW77B,KAAK+vC,EAClB,IAGF51C,GAASod,EAAAA,EAAAA,IACPpd,EACAkF,EAAQ/E,OACR+E,EAAQ5D,GACR,CACE6F,QAAS,IACJjC,EAAQiC,QACX4e,KAAM,IACDA,EACHzW,QAAS,IACJyW,EAAKzW,QACRgmC,eAAgBE,EAChBD,YAAaE,EACbnmC,QAASoyB,QAMnBr+B,EAAAA,EAAAA,IAAUrD,GAEV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,QAAEkF,GAAYmoB,GAEhByoB,EAAAA,EAAAA,IAAyB91C,IAC3BU,EAAQ4M,0BAA0B,CAAEpI,YAGtC,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,OAAE/E,EAAM,GAAEmB,EAAE,UAAEoqC,GAAcre,EAC5BnoB,GAAUqP,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQmB,GAC5CkB,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQqtB,EAAOltB,QAEvC,IAAKqC,IAAS0C,EAAS,OAEvBlF,EAASmxC,GAAgBnxC,EAAQG,EAAQmB,EAAIoqC,EAAWlpC,EAAM0C,EAAQmI,WAAYnI,IAClF7B,EAAAA,EAAAA,IAAUrD,GACV,KACF,CAEA,IAAK,6BAA8B,CACjC,MAAM,OACJG,EAAM,GAAEmB,EAAE,MAAEy0C,EAAK,QAAEC,GACjB3oB,EACEnoB,GAAUqP,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQmB,GAGlD,KAFamB,EAAAA,EAAAA,IAAWzC,EAAQqtB,EAAOltB,UAEzB+E,EAAS,OAEvB,GAAI8wC,EAAS,CACX,IAAK9wC,EAAQiC,QAAQi4B,QAAS,OAC9Bp/B,GAASod,EAAAA,EAAAA,IAAkBpd,EAAQG,EAAQmB,EAAI,CAC7C6F,QAAS,IACJjC,EAAQiC,QACXi4B,QAAS,IACJl6B,EAAQiC,QAAQi4B,QACnB6W,cAAeD,OAIrB3yC,EAAAA,EAAAA,IAAUrD,EACZ,MAAW+1C,IACT/1C,GAASod,EAAAA,EAAAA,IAAkBpd,EAAQG,EAAQmB,EAAI,CAC7C6F,QAAS,IACJ4uC,MAGP1yC,EAAAA,EAAAA,IAAUrD,IAGZ,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,gBAAEqnB,EAAe,KAAE9jB,EAAI,UAAE6pB,GAAcC,EAE7CrtB,EAAS,IACJA,EACHk2C,eAAgB,IACXl2C,EAAOk2C,eACV,CAAC7uB,GAAkB,IACbrnB,EAAOk2C,eAAe7uB,IAAoB,CAAC,EAC/CA,kBACA9jB,OACA6pB,gBAIN/pB,EAAAA,EAAAA,IAAUrD,GACV,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,OAAEG,EAAM,QAAEoS,EAAO,MAAE4E,GAAUkW,EAE/BlW,EAAMsU,MAAM,2BACd7jB,OAAO2S,OAAOva,EAAOqZ,SAAS5N,SAAQ,EAAGnK,GAAIrB,MAC3CS,EAAQosB,oCAAoC,CAAE3sB,SAAQF,SAAQ,IAIlED,GAASod,EAAAA,EAAAA,IAAkBpd,EAAQG,EAAQoS,EAAS,CAAE4jC,aAAc,+BACpE9yC,EAAAA,EAAAA,IAAUrD,GACV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,OACJG,EAAM,WAAEqE,EAAU,eAAEuoB,EAAc,aAAEqpB,GAClC/oB,EAEJrtB,GAASq2C,EAAAA,EAAAA,IAA0Br2C,EAAQG,EAAQqE,EAAYuoB,EAAgBqpB,IAE/E/yC,EAAAA,EAAAA,IAAUrD,GACV,KACF,EAAC,ICxoBL,MAEMs2C,IAA8B1oB,EAAAA,EAAAA,KASpC,WAEE,IAAI5tB,GAASsJ,EAAAA,EAAAA,MAEbtJ,GAAS06B,EAAAA,EAAAA,IAAoB16B,EAAQ,IAChCA,EAAOud,MAAMod,gBACb4b,MAELlzC,EAAAA,EAAAA,IAAUrD,GAEVu2C,GAAuB,CAAC,CAC1B,GAtB+B,KAE0D,GAEzF,IAAIA,GAAsD,CAAC,GAoB3D91C,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAAS2sB,KAC9C,OAAQA,EAAO,UACb,IAAK,gBACH,OAAOmpB,EAAAA,EAAAA,IAAcx2C,EAAQqtB,EAAO/rB,IAGtC,IAAK,aAgBH,OAfAsG,OAAO2S,OAAOva,EAAOqZ,SAAS5N,SAAQ,EAAGnK,GAAIrB,MACvCotB,EAAO/rB,KAAOtB,EAAOgY,eAAiBqV,EAAOhK,KAAK+N,aAAc9K,EAAAA,EAAAA,IAA2BtmB,KAEzFqtB,EAAOhK,KAAK+N,WAAW1wB,EAAQ+1C,iBAAiB,CAAEzS,WAAW,EAAM/jC,UAGvED,EAAS,IACJA,EACHo2C,aAAc,CACZ9qC,SAAU,CAAC,IAGjB,KAGKmwB,EAAAA,EAAAA,IAAWz7B,EAAQqtB,EAAO/rB,GAAI+rB,EAAOhK,MAG9C,IAAK,0BACH3iB,EAAQg2C,aAAa,CAAEhnC,OAAQ2d,EAAO/rB,KACtC,MAGF,IAAK,wBACH,OAAOm6B,EAAAA,EAAAA,IAAWz7B,EAAQqtB,EAAO3d,OAAQ,CAAE6sB,YAAalP,EAAOkP,cAGjE,IAAK,mBAGH,OAvDwB7sB,EAsDH2d,EAAO3d,OAtDYinC,EAsDJtpB,EAAO5U,OArD/C89B,GAAqB7mC,GAAUinC,OAC/BL,KAwDE,IAAK,qBAAsB,CACzB,MAAM,GAAEh1C,EAAE,SAAEupB,GAAawC,EACnBupB,EAAa52C,EAAOud,MAAMgH,KAAKjjB,GACrC,IAAKs1C,EACH,OAGF,OAAOnb,EAAAA,EAAAA,IAAWz7B,EAAQsB,EAAI,CAC5BupB,SAAU,IACL+rB,EAAW/rB,YACXA,IAGT,CAEA,IAAK,sBAAuB,CAC1B,MAAM,MAAErW,EAAK,OAAEsrB,GAAWzS,EAEpBupB,GAAaz1B,EAAAA,EAAAA,IAAWnhB,EAAQwU,GACtC,IAAKoiC,GAAY/rB,UAAUgsB,QACzB,OAGF,OAAOpb,EAAAA,EAAAA,IAAWz7B,EAAQwU,EAAO,CAC/BqW,SAAU,IACL+rB,EAAW/rB,SACdgsB,QAAS,IACJD,EAAW/rB,SAASgsB,QACvBC,WAAYhX,KAIpB,EA1FJ,IAA8BpwB,EAAgBinC,CA6F5B,KCvGlBl2C,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAAS2sB,KAC9C,GACO,qBADCA,EAAO,SAEX,OAAOgB,EAAAA,EAAAA,IAAiBruB,EAAQqtB,EAAO/rB,GAAI+rB,EAAOY,WAItC,KCHlBxtB,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAAS2sB,KAC9C,OAAQA,EAAO,UACb,IAAK,oBACH,OAAIA,EAAOiV,WACFyU,EAAAA,EAAAA,IAAkB/2C,EAAQqtB,EAAO/rB,KAEjCy/B,EAAAA,EAAAA,IAAqB/gC,EAAQqtB,EAAO/rB,IAG/C,IAAK,yBACHtB,EAAS,IACJA,EACH86B,YAAa,CACXxG,QAAS,MAGbjxB,EAAAA,EAAAA,IAAUrD,GACV,MAEF,IAAK,eACHU,EAAQ4rC,aACR,MAEF,IAAK,yBACH5rC,EAAQs2C,uBACR,MAEF,IAAK,uBACHt2C,EAAQmtB,qBACR,MAEF,IAAK,4BACHntB,EAAQu2C,0BACR,MAEF,IAAK,4BAA6B,CAChC,MAAMC,EAAW7pB,EAAOnb,cAAgBlS,EAAOqS,aAAaF,MAAMC,OAASpS,EAAO2R,SAASQ,MAAMC,OACjG,IAAK8kC,EAAU,OAAOl3C,EACtB,MAAMm3C,EAAW,CAAC9pB,EAAO/rB,MAAO41C,EAASjyC,QAAQ3D,GAAOA,IAAO+rB,EAAO/rB,MACtEZ,EAAQ02C,mBAAmB,CAAEnlC,MAAOklC,EAAUjlC,cAAemb,EAAOnb,gBACpE,KACF,CAEA,IAAK,oBACHxR,EAAQ22C,kBACR,MAEF,IAAK,yBACH32C,EAAQ02C,mBAAmB,CAAEnlC,MAAOob,EAAOpb,MAAOC,cAAemb,EAAOnb,gBACxE,MAEF,IAAK,kBACHxR,EAAQ42C,gBACR,MAEF,IAAK,gBACHt3C,EAAS,IACJA,EACHqV,SAAU,IACLrV,EAAOqV,SACVkiC,QAAS,IACJv3C,EAAOqV,SAASkiC,QACnB,CAAClqB,EAAOmqB,KAAMnqB,EAAOoqB,UAI3Bp0C,EAAAA,EAAAA,IAAUrD,GACV,MAEF,IAAK,kCACH4H,OAAO2S,OAAOva,EAAOqZ,SAAS5N,SAAQ,EAAGnK,GAAIrB,MAC3CD,GAAS03C,EAAAA,EAAAA,IAAqB13C,EAAQqtB,EAAOlZ,IAAKlU,GAClDD,GAASs/B,EAAAA,EAAAA,IAAet/B,EAAQu/B,EAAAA,GAAAA,eAA4Bt/B,EAAM,KAEpEoD,EAAAA,EAAAA,IAAUrD,GACV,MAEF,IAAK,0BACH4H,OAAO2S,OAAOva,EAAOqZ,SAAS5N,SAAS7J,IACjCA,EAAS6gC,QAAQR,UAAY5U,EAAO4U,UACtCvhC,EAAQ4H,gBAAgB,CAAE3B,eAAWpG,EAAWN,MAAO2B,EAASN,KAChEZ,EAAQkiC,YAAY,CAAE3iC,MAAO2B,EAASN,KACxC,IAKU,KCzFlBb,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAAS2sB,KAC9C,OAAQA,EAAO,UACb,IAAK,uBACH,OAAOsqB,EAAAA,EAAAA,IAAqB33C,EAAQqtB,EAAOuqB,SAAUvqB,EAAOrJ,SAAUqJ,EAAOwqB,oBAG/E,IAAK,yBAA0B,CAC7B,MAAM,OACJ13C,EAAM,QAAEwI,EAAO,SAAEqb,EAAQ,mBAAE6zB,GACzBxqB,EACSrtB,EAAO4O,MAAM2V,KAAKpkB,KAG7BH,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAAEwI,aAGxC3I,GAAS83C,EAAAA,EAAAA,IAAmB93C,EAAQG,EAAQ,CAAEwI,UAASqb,WAAU6zB,wBACjEx0C,EAAAA,EAAAA,IAAUrD,GACV,KACF,CAEA,IAAK,8BAA+B,CAClC,MAAM,OACJG,EAAM,QAAEiW,EAAO,QAAEzN,GACf0kB,EAEJrtB,GAAS4lB,EAAAA,EAAAA,IAAY5lB,EAAQG,EAAQiW,EAAS,CAAEzN,aAEhDtF,EAAAA,EAAAA,IAAUrD,GACV,KACF,EAGc,KCrClBS,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAAS2sB,KAC9C,OAAQA,EAAO,UACb,IAAK,2BACH,MAAO,IACFrtB,EACH+3C,cAAe,IACV/3C,EAAO+3C,cACVt+B,WAAW,EACXyqB,uBAAwB7W,EAAOrlB,SAKrC,IAAK,mBACH,MAAO,IACFhI,EACH+3C,cAAe,IACV/3C,EAAO+3C,cACV5gC,MAAOkW,EAAOnoB,UAMN,I,6BCblBzE,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAAS2sB,KAC9C,OAAQA,EAAO,UACb,IAAK,kBAAmB,CACtB,GAAoC,cAAhCA,EAAO2qB,KAAK9f,gBACd,OAAIl4B,EAAOi4C,WAAWC,uBAChB,mBAAoBx3C,GAASA,EAAQy3C,eAAe,CAAEC,cAAc,EAAMn4C,OAAOC,EAAAA,EAAAA,UAG9Em4C,EAAAA,GAAAA,IAAgBr4C,EAAQqtB,EAAO2qB,KAAK12C,IAI/C,MAAMg3C,GAAYC,EAAAA,GAAAA,IAAgBv4C,EAAQqtB,EAAO2qB,KAAK12C,IAChDnB,EAASm4C,GAAWn4C,OAO1B,OANIA,IACFH,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAClCq4C,eAAiBF,EAAUG,kBAAoB,GAAKxxC,QAAQqxC,EAAUI,cAAc1wC,YAIjF2wC,EAAAA,GAAAA,IACL34C,EACAqtB,EAAO2qB,KAAK12C,IACZ0c,EAAAA,EAAAA,IAAKqP,EAAO2qB,KAAM,CAAC,yBACnBz3C,EACA8sB,EAAO2qB,KAAKS,kBAEhB,CACA,IAAK,wBAAyB,CAC5B,MAAMj2C,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQqtB,EAAOltB,QASvC,OARIqC,IACFxC,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQqtB,EAAOltB,OAAQ,CACzC0qB,SAAU,IACLroB,EAAKqoB,SACR+tB,YAAavrB,EAAO2qB,KAAK12C,OAIxBtB,CACT,CACA,IAAK,8BAA+B,CAClC,MAAM,YAAE44C,EAAW,aAAEF,EAAY,WAAEvyB,GAAekH,GAC5C,cAAErV,GAAkBhY,EAG1BA,GAASsJ,EAAAA,EAAAA,MACTovC,EAAajtC,SAASotC,IAChBA,EAAYv3C,KACdtB,GAAS84C,EAAAA,GAAAA,IACP94C,EAAQ44C,EAAaC,EAAYv3C,GAAIu3C,EAAa5xC,QAAQkf,IAAenO,IAAkB6gC,EAAYv3C,IAE3G,IAEE6kB,IACFnmB,GAAS24C,EAAAA,GAAAA,IAAgB34C,EAAQ44C,EAAa,CAC5CzyB,gBAIJ,MAAMmyB,GAAYC,EAAAA,GAAAA,IAAgBv4C,EAAQ44C,GACpCz4C,EAASm4C,GAAWn4C,OAM1B,OALIA,IACFH,GAASwjB,EAAAA,EAAAA,IAAWxjB,EAAQG,EAAQ,CAClCq4C,eAAiBF,EAAUG,kBAAoB,GAAKxxC,QAAQqxC,EAAUI,cAAc1wC,WAGjFhI,CACT,CACA,IAAK,kBAAmB,CACtB,IAAK+4C,EAAAA,GAAqB,OAE1B,MAAM,UACJC,EAAS,cACThhC,GACEhY,GAEE,KAAEg4C,GAAS3qB,EAEjB,GAAI2rB,EACF,MAAmB,cAAfhB,EAAKiB,OACPv4C,EAAQw4C,mBAAmB,CAAEC,MAAO,QAChC,WAAYz4C,GAASA,EAAQ04C,OAAO,CAAEn5C,OAAOC,EAAAA,EAAAA,QAE1C,IACFF,KACCg4C,EAAKqB,YAAc,CAAEC,gBAAiBtB,UAI9C,EAKF,GAFmBA,GAAMtiB,UAAY1d,GAEH,cAAfggC,EAAKiB,MAgBtB,OAfAt8B,EAAAA,EAAAA,KAAU,KACR3c,GAASsJ,EAAAA,EAAAA,OACTiwC,EAAAA,GAAAA,IAAgB,CACdvB,OACA30B,MAAMm2B,EAAAA,GAAAA,IAAoBx5C,IAC1B,KAGJy5C,EAAAA,EAAAA,OACKC,EAAAA,EAAAA,IAAmC15C,EAAQU,EAASs3C,EAAK2B,SAASz5C,EAAAA,EAAAA,OACvEF,EAAS,IACJA,EACHg5C,UAAWhB,IAGNh2C,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B45C,oBAAoB,IACnB15C,EAAAA,EAAAA,MAEP,EAGc,I,gBCzHlBO,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAAS2sB,KAEvC,gCADCA,EAAO,UAEXzlB,OAAO2S,OAAOva,EAAOqZ,SAAS5N,SAAQ,EAAGnK,GAAIrB,MAC3C,MAAM,aAAEi/B,IAAiBl+B,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyY,QAEvD,GAAIwmB,GAAgB,WAAYA,GAAgB,cAAeA,EAAc,CAC3E,MAAMh6B,GAAUqP,EAAAA,EAAAA,IAAkBvU,EAAQk/B,EAAa/+B,OAAQ++B,EAAav4B,WAE5E,GAAIzB,GAAWA,EAAQiC,QAAQi4B,QAAS,CACtC,MAAM,OAAEsJ,EAAM,SAAEF,EAAQ,MAAEj4B,GAAUrL,EAAQiC,QAAQi4B,QAEpD1+B,EAAQ2L,iBAAiB,CACvBpM,QACAiF,QAASP,EAAAA,GAAuB,kBAAmB,EACjDk1C,EAAAA,GAAAA,GAAenR,EAAQF,EAAU7jC,EAAAA,KAAgCw/B,MACjE5zB,KAGN,CACF,CAKKupC,EAAAA,KACH95C,GAAS4Y,EAAAA,EAAAA,IAAa5Y,EAAQC,IAG5BotB,EAAOwV,MAAQ3D,GAAgB,SAAUA,GAAgBA,EAAa2D,OAASxV,EAAOwV,OAI1F7iC,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B0Y,QAAS,KACJ1X,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyY,QACjCD,OAAQ,SAETxY,GAAM,GAKC,I,yECjDH,SAAS85C,GAAgBC,IACtCC,EAAAA,EAAAA,KAAU,KACD/gC,EAAAA,EAAAA,IAAe8gC,IACrB,CAACA,GACN,C,gBCLA,MAAME,GAAelqC,SAASmqC,cAAc,yBACtCC,GAAyBF,IAAcG,aAAa,YAAc,GAkCxE,SAASC,GAAa9oC,GACpBA,EAAE+oC,gBACJ,C,4ECjCA,MAQA,IAAeC,EAAAA,EAAAA,KAR6BC,IAC1C,MAAM,OAAE14C,GAAW04C,EACbC,GAAkBC,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoB74C,GAG3E,OAAO24C,EAAkBG,EAAAA,GAAAA,cAACH,EAAoBD,QAAYl6C,CAAS,I,uCCArE,MAmBA,IAAei6C,EAAAA,EAAAA,KAnBqBM,EAAGC,qBACrCC,EAAAA,GAAAA,MACA,MAAMC,GAA2BnjC,EAAAA,EAAAA,MAQjC,IANAmiC,EAAAA,EAAAA,KAAU,KACJc,IACFG,EAAAA,GAAAA,GAAeD,EACjB,GACC,CAACF,EAAeE,KAEfF,GAAkBE,EAItB,OACEJ,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,wBAAuB8pB,EAAAA,GAAAA,IAAqBF,GAAgC,I,iHCtBxF,IAAKG,GAAgB,SAAhBA,GAAgB,OAAhBA,EAAAA,EAAgB,yCAAhBA,EAAAA,EAAgB,qBAAhBA,EAAAA,EAAgB,mBAAhBA,CAAgB,MAYb,SAASC,GACtB32C,EACAwzB,EACAT,EACA6jB,EACA9kC,EACA+kC,GAEA,IAAI9iC,EAUA3U,EAWAP,EAWJ,OA3BEkV,EC5BW,WACb,MAAO+iC,EAAUC,IAAeC,EAAAA,EAAAA,IAAS14C,OAAO24C,UAAUC,QAgB1D,OAdA3B,EAAAA,EAAAA,KAAU,KACR,SAAS4B,IACPJ,EAAYz4C,OAAO24C,UAAUC,OAC/B,CAKA,OAHA54C,OAAO84C,iBAAiB,SAAUD,GAClC74C,OAAO84C,iBAAiB,UAAWD,GAE5B,KACL74C,OAAO+4C,oBAAoB,UAAWF,GACtC74C,OAAO+4C,oBAAoB,SAAUF,EAAa,CACnD,GACA,IAEIL,CACT,CDM0BQ,IACoB,8BAApB9jB,EAEbT,EACA2jB,GAAiBa,QAEjBb,GAAiBc,OAJjBd,GAAiBe,kBAS1Br4C,EADE2U,IAAW2iC,GAAiBc,QAAUX,EAC7B,OACFD,EACE,eACF9kC,EACE,YAEA,UAITiC,IAAW2iC,GAAiBe,kBAC9B54C,EAAOmB,EAAK,qBACH+T,IAAW2iC,GAAiBa,UACrC14C,EAAOmB,EAAK,aAGG,iBAAbZ,IACFP,EAAOA,EAAMwwB,cAAc3jB,QAAQ,OAAQ,KAGtC,CACLgsC,iBAAkB3jC,EAClB4jC,yBAA0Bv4C,EAC1Bw4C,qBAAsB/4C,EAE1B,C,0HE5CA,MA0BA,IAAei3C,EAAAA,EAAAA,KA1B+B+B,EAC5CH,mBACAE,uBACAE,cAEA,MAAM93C,GAAO+3C,EAAAA,GAAAA,KAEb,OACE5B,EAAAA,GAAAA,cAAA,OAAKv5C,GAAG,0BAA0Bo7C,IAAKh4C,EAAKi4C,MAAQ,WAAQp8C,EAAWi8C,QAASA,GAC9E3B,EAAAA,GAAAA,cAAC+B,GAAAA,EAAO,CAACC,MAAM,UACfhC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,cACbwpB,EAAAA,GAAAA,cAACiC,GAAAA,EAAU,CAACC,UAAWX,EAAkB5O,KAAK,cAC3C8O,IAGLzB,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACL7kC,OAAK,EACL8H,KAAK,OACL48B,MAAM,qBAENhC,EAAAA,GAAAA,cAAA,QAAMxpB,UAAU,gBAEd,I,sCCvCV,SAAyD,uBCmEzD,IAAempB,EAAAA,EAAAA,KA9CyByC,EACtCtS,WACAuS,WACA7rB,gBAEA,MAAM8rB,GAAcC,EAAAA,EAAAA,IAAsBzS,EAAS54B,YAE7CsrC,GAAmBC,EAAAA,GAAAA,GAAUJ,OAAyB38C,EAAd48C,GAExCI,GAAkBC,EAAAA,EAAAA,KAAQ,IACzBC,EAAAA,GACExa,MAAMxjB,KAAK,CAAEzX,OAbF,IAa2BhD,KAAI,IAqCrD,WACE,MAAMmkC,GAAK,GAAqB,GAAhB17B,KAAKwd,WAAkBxd,KAAKwd,SAAW,GAAM,GAAK,GAC5Dgf,EAAI,GAAqB,GAAhBx8B,KAAKwd,SAEpB,MAAQ,eAAcke,MAAMc,EAAI,MAAMd,KAAKc,GAC7C,CA1C2DyT,KADjB,IAErC,IAEH,GAAKL,GAAqBH,EAI1B,OACErC,EAAAA,GAAAA,cAAA,OAAKxpB,WAAWssB,EAAAA,GAAAA,GDxCG,uBCwCyBtsB,IACzCksB,EAAMv4C,KAAK44C,IACV,MAAMC,EAAS,wBAAuBD,OACtC,OAAIV,EAEArC,EAAAA,GAAAA,cAACiD,GAAAA,EAAW,CACV/rC,WAAY44B,EAAS54B,WACrBsf,UAAW0sB,GACXF,MAAOA,EACPG,qBAAmB,IAMvBnD,EAAAA,GAAAA,cAAA,OACEoD,IAAKZ,EACLa,IAAI,GACJ7sB,UAAW0sB,GACXF,MAAOA,GACP,IAGF,IC/CV,IAAerD,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAE14C,GAAW04C,EACb0D,GAAmBxD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqB74C,GAG7E,OAAOo8C,EAAmBtD,EAAAA,GAAAA,cAACsD,EAAqB1D,QAAYl6C,CAAS,ICkFvE,IAAei6C,EAAAA,EAAAA,KAAK4D,EAAAA,EAAAA,KAAYp+C,IAC9B,MAAM,cAAEgY,GAAkBhY,EACpBq+C,EAAcrmC,GAAgBmJ,EAAAA,EAAAA,IAAWnhB,EAAQgY,QAAiBzX,EAExE,MAAO,CACLg8B,YAAa8hB,GAAa9hB,YAC3B,GANiB6hB,EArEiBE,EAAG/hB,kBACtC,MAAM,eAAEgiB,EAAc,gBAAEC,IAAoBnmB,EAAAA,EAAAA,MAGtComB,GAAYC,EAAAA,EAAAA,IAA0B,OACrCC,EAAkBC,EAAsBC,IAA0BC,EAAAA,GAAAA,IAAQ,IAC1EC,EAAeC,EAAYC,IAAcH,EAAAA,GAAAA,IAAQ,IACjDI,EAAoBC,EAAkBC,IAAqBN,EAAAA,GAAAA,IAAQ,IACpE,SAAEO,IAAaC,EAAAA,EAAAA,MAEfC,EAAQhjB,GAAaijB,MAA4B,IAApBjjB,EAAYijB,MAAe9yC,KAAKC,MAAgC,KAAxB8yC,EAAAA,EAAAA,WAA+Bl/C,GAC1Gm/C,EAAAA,GAAAA,GAAWlB,EAAiBe,IAE5BI,EAAAA,GAAAA,IAAsB,EAAEC,MAClBjB,GAAoBpiB,GAAeqjB,GAAmBrjB,EAAYxqB,aAAe6tC,EAAgB7tC,aACnGitC,IACAH,IACF,GAEC,CAACtiB,EAAaoiB,EAAkBK,EAAYH,IAE/C,MAAMgB,GAAuBC,EAAAA,EAAAA,KAAaruC,IACxCmtC,IACAL,EAAe,CAAEhiB,YAAa9qB,GAAU,GACvC,CAACmtC,EAAsBL,KAE1BmB,EAAAA,GAAAA,GAAWT,EAAYF,EA7BE,UA6BmCx+C,GAE5D,MAAMw/C,GAAyBD,EAAAA,EAAAA,KAAY,KACzCX,GAAkB,GACjB,CAACA,IAEJ,OACEtE,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,iBACZpqB,QAAQ83C,GAAiBxiB,IACxBse,EAAAA,GAAAA,cAACoC,GAAiB,CAChBtS,SAAUpO,EACV2gB,UAAQ,EACR7rB,UAAU,wBAGdwpB,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACL7kC,OAAK,EACL6nC,IAAKvB,EACLwB,QAASZ,EACTp/B,KAAK,UACL48B,MAAM,cACNxrB,UAAU,eACVmrB,QAASuD,GAERxjB,EACCse,EAAAA,GAAAA,cAACiD,GAAAA,EAAW,CACVtG,IAAKjb,EAAYxqB,WACjBA,WAAYwqB,EAAYxqB,WACxBkO,KAxDc,GAyDdigC,UAAWC,EAAAA,MAEXtF,EAAAA,GAAAA,cAACuF,GAAAA,EAAW,OAElBvF,EAAAA,GAAAA,cAACsD,GAAgB,CACfkC,gBAAiB5B,EACjB18C,OAAQm9C,EACRoB,oBAAqBT,EACrBU,QAASnB,IAEP,K,gBCRV,MAAMoB,GAA0B,CAAC,EAAG,EAAG,GA6bvC,IAAehG,EAAAA,EAAAA,KAAK4D,EAAAA,EAAAA,KACjBp+C,IACC,MAAM4B,GAAWZ,EAAAA,EAAAA,IAAehB,IAE9BY,MAAO6/C,EAAW,eAAE9xC,EAAc,OAAExO,EAAM,KAAE+M,GAC1CtL,EAAS0M,cACP,cACJ0J,EAAa,gBAAEkgB,EAAe,UAAET,EAAS,gBAAEnhB,GACzCtW,GACIukB,KAAMm8B,GAAc1gD,EAAO4O,OAC7B,4BAAE+xC,EAA2B,eAAEvrC,GAAmBpV,EAAOqV,SAASC,MAExE,MAAO,CACLmrC,cACAhnC,YAAW9K,GAAiB1H,QAAQ0H,EAAe5J,UACnDiT,gBACA0oC,YACAE,mBAAoBzgD,EACpB0gD,WAAY3zC,EACZozB,OAAOwgB,EAAAA,EAAAA,IAAY9gD,GACnBoV,iBACA8iB,kBACAT,YACAspB,kBAAmB95C,SAAQ5G,EAAAA,EAAAA,IAAyBL,IACpD2gD,8BACAt6B,sBAAsBC,EAAAA,EAAAA,IAA2BtmB,GACjDghD,eAAgB/5C,QAAQjH,EAAO4O,MAAM6kB,QAAQC,QAC7Cta,YAAanS,QAAQjH,EAAOmZ,SAASC,aACrC6nC,WAAYh6C,QAAQrF,EAASq/C,YAC7B3qC,kBACD,GA9Be8nC,EA1b8B8C,EAChDC,mBACAh6C,UACAi6C,iBACAC,gBACAC,kBACAC,mBACAC,mBACAC,mBACAC,UACAjB,cACAhnC,YACA4M,uBACAs7B,uBACA3pC,gBACA4oC,qBACAC,aACAvgB,QACAlrB,iBACAsrC,YACAxoB,kBACAT,YACAspB,oBACAJ,8BACAK,iBACA5nC,cACA6nC,aACA3qC,sBAEA,MAAM,SACJhT,EAAQ,oBACRs+C,EAAmB,iBACnBC,EAAgB,sBAChBC,EAAqB,mBACrBC,EAAkB,WAClBC,EAAU,0BACVC,EAAyB,iBACzBC,EAAgB,QAChBrjB,EAAO,QACPsjB,EAAO,aACPC,IACE/pB,EAAAA,EAAAA,MAEE3zB,GAAO+3C,EAAAA,GAAAA,MACP,SAAE4C,IAAaC,EAAAA,EAAAA,MACf+C,EAAUl7C,IAAYm7C,EAAAA,GAAAA,SAGtBC,GAAqB/E,EAAAA,EAAAA,KAAQ,IAC1BqD,GACH2B,EAAAA,GAAAA,IAAmB,IAAI91C,KAAkB,IAAbm0C,SAC5BtgD,GACH,CAACsgD,IACE4B,GAA2BjF,EAAAA,EAAAA,KAAQ,IAClC6E,GAAY3B,EAIV94C,OAAO2S,OAAOmmC,GAAWj7C,QAAO,CAACi9C,EAAOlgD,KACxCmgD,EAAAA,EAAAA,IAAengD,IAIbA,EAAK2iB,YAAcu9B,EAAQ,EAHzBA,GAIR,GATM,GAUR,CAACL,EAAS3B,KAEP,iBAAEtE,EAAgB,qBAAEE,EAAoB,yBAAED,GAA6BhB,GAC3E32C,EAAMwzB,EAAiBT,EAAWspB,EAAmBJ,GAA8BK,GAG/E4B,GAAyB9C,EAAAA,EAAAA,KAAatuC,IAC1CA,EAAE+oC,iBACF/oC,EAAEqxC,kBACEzpC,EACF4oC,IAEAC,EAA0B,CAAElxC,OAAQ+xC,EAAAA,GAAAA,kBACtC,GACC,CAAC1pC,EAAa4oC,EAAYC,KAE7Bc,EAAAA,GAAAA,GAAW,CACT,eAAgBH,EAChB,cAAeA,EACf,eAAgBA,KACZI,EAAAA,IAAU,CAAE,QAASJ,KAG3B,MAAMK,GAAoBjgD,OAAOm6B,SAASnR,WAAak3B,EAAAA,KAAuBC,EAAAA,IAExEC,IAA8D5F,EAAAA,EAAAA,KAAQ,IACnE,EAAG6F,YAAWthD,YACnB84C,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACL7kC,OAAK,EACL8nC,OAAQoC,IAAYhD,EACpBp/B,KAAK,UACL48B,MAAM,cACNxrB,UAAWtvB,EAAS,SAAW,GAE/By6C,QAAS6F,EAAUgB,EAAY,IAAM3B,IACrC4B,UAAWjB,EAAU39C,EAAK,qBAAuB,uBAEjDm2C,EAAAA,GAAAA,cAAA,OAAKxpB,WAAWssB,EAAAA,GAAAA,GACd,sBACC0E,GAAW,aACZV,GAAwB,oBAK7B,CAACU,EAAShD,EAAU36C,EAAMg9C,EAASC,IAEhC4B,IAAoBzD,EAAAA,EAAAA,KAAY,KAC/BW,GACHY,EAAc,GAChB,GACC,CAACZ,EAAaY,IAEXmC,IAAyB1D,EAAAA,EAAAA,KAAY,KACzC+B,EAAiB,CAAElB,6BAA8BA,GAA8B,GAC9E,CAACA,EAA6BkB,IAE3B4B,IAAoB3D,EAAAA,EAAAA,KAAY,KACpCx8C,EAAS,CAAEhC,GAAI0W,EAAevW,sBAAsB,GAAO,GAC1D,CAACuW,EAAe1U,IAEbogD,IAAuB5D,EAAAA,EAAAA,KAAatuC,IACxCA,EAAEqxC,kBACF,MAAMc,EAAqB,UAAVrjB,EAAoB,OAAS,QAE9CuhB,EAAiB,CAAEvhB,MAAOqjB,IAC1B9B,EAAiB,CAAE+B,sBAAsB,KACzCC,EAAAA,GAAAA,GAAYF,EAAUvuC,IAAmBu2B,EAAAA,IAAoB,GAC5D,CAACv2B,EAAgBysC,EAAkBvhB,IAEhCwjB,IAA6BhE,EAAAA,EAAAA,KAAatuC,IAC9CA,EAAEqxC,kBAEF,MAAMkB,EAA8B,IAAnB3uC,EAAuB,EAAI,EAC5CorC,GAAwB/0C,SAAQ,CAACu4C,EAAGzlC,KAClCvO,SAASu2B,KAAK0d,UAAUC,OAAQ,mBAAkB3lC,IAAKwlC,IAAaxlC,EAAE,IAGxEsjC,EAAiB,CAAEzsC,eAAgB2uC,GAAW,GAC7C,CAAC3uC,EAAgBysC,IAEdsC,IAAuBrE,EAAAA,EAAAA,KAAY,KACvC98C,OAAOC,KAAKmhD,EAAAA,IAAoB,SAAU,WAAW,GACpD,IAEGC,IAAqBvE,EAAAA,EAAAA,KAAY,KCzOvCwE,aAAaC,QAJe,aAIgB3qC,KAAKC,UD0OxB,OACvB2qC,EAAAA,GAAAA,MACAtC,GAAkB,GACjB,CAACA,IAEEuC,IAAqB3E,EAAAA,EAAAA,KAAY,KACrCiC,EAAmB,CAAErzB,SAAUhqB,EAAK,0BAA2B,GAC9D,CAACA,EAAMq9C,IAEJ2C,IAAuB5E,EAAAA,EAAAA,KAAY,KACvCjhB,EAAQ,CAAE1qB,IAAKwwC,EAAAA,KAAe,GAC7B,CAAC9lB,IAEE+lB,IAAmB9E,EAAAA,EAAAA,KAAYvmC,UACnCjW,EAAS,CAAEhC,QAAIf,GAAa,CAAEskD,uBAAuB,IACrDx7C,YAAWkQ,UACT,MAAM,MAAC3K,EAAK,SAAC7J,IAAYuE,EAAAA,EAAAA,MACzB1B,OAAO2S,OAAO3L,EAAM2V,MAAM9Y,SAAQjJ,IAChCA,EAAK0F,iBAAc3H,EACnBwE,EAASuG,SAAS9I,EAAKlB,IAAIijB,KAAO,CAAC,EACnCxf,EAASuG,SAAS9I,EAAKlB,IAAIumB,aAAY,GAAMC,gBAAkB,GAC/D/iB,EAASuG,SAAS9I,EAAKlB,IAAIumB,aAAY,GAAM9L,UAAY,GACzDhX,EAASuG,SAAS9I,EAAKlB,IAAIumB,aAAY,GAAMi9B,sBAAmBvkD,CAAS,IAE3E6hD,EAAa,CACXr9C,WACA6J,gBAGIm2C,GAASC,MAAMC,EAAAA,WACfF,GAASC,MAAME,EAAAA,KACrB77C,YAAW,KACT8zB,SAASgoB,QAAQ,GACjB,IAAI,GACN,IAAI,GACL,CAACtmB,IACEumB,IAAqBtF,EAAAA,EAAAA,KAAY,KACrCx8C,EAAS,CAAEhC,QAAIf,GAAa,CAAEskD,uBAAuB,IACrDx7C,YAAW,KACT84C,EAAQ,CAAEkD,cAAc,IACxBjD,EAAa,CACXjqB,UAAU,sCACV,GACA,IAAI,GACP,CAAC70B,EAAS6+C,IAEPmD,IAAmBxF,EAAAA,EAAAA,KAAY,KACnCsC,EAAa,CACXjqB,UAAU,sCACV,GACD,CAACiqB,IAGEmD,IAAmBzF,EAAAA,EAAAA,KAAY,KACnCkC,GAAY,GACX,CAACA,IAEEwD,GACJv+C,QAAQ25C,IACLz5C,IAAYm7C,EAAAA,GAAAA,cACZn7C,IAAYm7C,EAAAA,GAAAA,UAGjBrI,EAAAA,EAAAA,KAAU,IAAOuL,IAAkBC,EAAAA,GAAAA,IAAsB,IAAM/D,WAAanhD,GAAY,CAACilD,GAAiB9D,IAE1G,MAAMgE,GAAyBv+C,IAAYm7C,EAAAA,GAAAA,SACvC59C,EAAK,iBACLA,EAAK,UAEHihD,GAAgBC,EAAAA,IAAW,GAAE/4C,EAAAA,iCAAwCoK,EAAAA,IAAQ4uC,sBAAeh5C,EAAAA,KAG5F,uCACJi5C,GAAsC,gCACtCC,KACEC,EAAAA,GAAAA,GAAsC7E,GAEpC8E,IAAYzI,EAAAA,EAAAA,KAAQ,IACxB3C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KAEI7iC,GACA6iC,EAAAA,GAAAA,cAACqL,GAAAA,EAAQ,CACPC,KAAK,WACL3J,QAAS+E,GAER78C,EAAK,aAIRsT,GACA6iC,EAAAA,GAAAA,cAACqL,GAAAA,EAAQ,CACPC,KAAK,iBACL3J,QAASiH,IAER/+C,EAAK,kBAqBVm2C,EAAAA,GAAAA,cAACqL,GAAAA,EAAQ,CACPC,KAAK,WACL3J,QAASkH,IAET7I,EAAAA,GAAAA,cAAA,QAAMxpB,UAAU,kBAAkB3sB,EAAK,cACvCm2C,EAAAA,GAAAA,cAACuL,GAAAA,EAAQ,CACP9kD,GAAG,WACH+kD,MAAO3hD,EAAe,SAAV47B,EAAmB,mCAAqC,mCACpEgmB,QAAmB,SAAVhmB,EACTimB,aAAW,KAGf1L,EAAAA,GAAAA,cAACqL,GAAAA,EAAQ,CACPC,KAAK,aACL3J,QAASsH,IAETjJ,EAAAA,GAAAA,cAAA,QAAMxpB,UAAU,6BAA6B3sB,EAAK,eAClDm2C,EAAAA,GAAAA,cAACuL,GAAAA,EAAQ,CACP9kD,GAAG,aACH+kD,MAAM,oBACNC,QAASlxC,EAAiB,KAS9BylC,EAAAA,GAAAA,cAACqL,GAAAA,EAAQ,CACPC,KAAK,MACL3J,QAASkI,IAERhgD,EAAK,cAERm2C,EAAAA,GAAAA,cAACqL,GAAAA,EAAQ,CACPC,KAAK,OACL3J,QAASoI,IACV,QAoBA3D,GACCpG,EAAAA,GAAAA,cAACqL,GAAAA,EAAQ,CACPC,KAAK,UACL3J,SAASgK,EAAAA,GAAAA,MACV,eAKDxuC,EAEA6iC,EAAAA,GAAAA,cAACqL,GAAAA,EAAQ,CACPC,KAAK,SACL3J,QAAS4I,IAER1gD,EAAK,YAENm2C,EAAAA,GAAAA,cAACqL,GAAAA,EAAQ,CACPC,KAAK,OACL3J,QAAS8I,IAER5gD,EAAK,YAIb,CACD0Q,EAAgBqtC,EAA0BxB,EAAY6C,GAA4BY,GAAsBhgD,EACxGy/C,GAAsBT,GAAsBe,GAAoBhB,GAAmBY,GACnF5C,EAAkBD,EAAkBD,EAAkBjhB,EAAO2iB,GAAmB3sC,IAGlF,OACEukC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,kBACbwpB,EAAAA,GAAAA,cAAA,OAAKv5C,GAAG,iBAAiB+vB,UAAU,eAChC3sB,EAAKi4C,OAAS9B,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,uBAC9BwpB,EAAAA,GAAAA,cAAC4L,GAAAA,EAAY,CACXC,QAAStD,GACTuD,OAAS,GAAEC,EAAAA,OAAYjB,KACvBt0B,WAAWssB,EAAAA,GAAAA,GACTj5C,EAAKi4C,OAAS,MACdwE,GAAoBz8C,EAAKi4C,OAAS,gBAClCmJ,GAAuCv0B,SAAW7sB,EAAKi4C,OAAS,sBAElEkK,UAAW1F,GAAoBz8C,EAAKi4C,MAAQ,QAAU,OACtDmK,gBAAiBpiD,EAAKi4C,MAAQoJ,QAAkCxlD,GAE/D0lD,IAEHpL,EAAAA,GAAAA,cAACkM,GAAAA,EAAW,CACVC,QAAQ,wBACRC,yBAAyB,aACzB51B,WAAWssB,EAAAA,GAAAA,GACRiD,GAAsBC,EAAc,wBAAqBtgD,EAC1D4gD,GAAoB,uBAEtBzZ,MAAO4Z,OAAkB/gD,EAAa6gD,GAAkBX,EACxDyG,QAAS1B,GACT/rC,UAAWA,GAA0C,cAA7B4iC,EACxB8K,aAA2C,cAA7B9K,EAA2C,cAAW97C,EACpE6mD,uBAAqD,cAA7B/K,GAAsD,UAAV/b,EAAoB,aAAU//B,EAClG8mD,YAAa3B,GACb4B,aAAa,MACbC,SAAUtgD,QAAQ25C,GAAsBC,GACxC2G,SAAUnG,EACVK,QAASA,EACT+F,QAASlE,GACTmE,eAA6C,cAA7BrL,EAA2CmH,QAAyBjjD,GAEnFgiD,GACC1H,EAAAA,GAAAA,cAAC8M,GAAAA,EAAkB,CACjBxB,KAAK,WACL51C,MAAOgyC,EACPgF,UAAQ,EACR/wC,YAAavP,QAAQ25C,GACrBvvB,UAAU,cACVmrB,QAASoF,EACTgG,SAlWmB,CAAE16C,UAAM3M,KAqW9BqgD,GACC/F,EAAAA,GAAAA,cAAC8M,GAAAA,EAAkB,CACjBE,aAAcjH,EACdpE,QAASsF,EACTyF,UAAQ,EACRK,SAzWmB,CAAEtmD,QAAIf,MA6W9B8lB,GAAwBw0B,EAAAA,GAAAA,cAACyD,GAAY,MACrCllC,GACCyhC,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACL7kC,OAAK,EACL8nC,QAASZ,EACTp/B,KAAK,UACL48B,MAAM,cACNyG,UAAY,GAAE5+C,EAAK,8DACnB83C,QAAS+I,GACTl0B,WAAWssB,EAAAA,GAAAA,IAAgBt3B,GAAwB,kBAEnDw0B,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,eAGjBwpB,EAAAA,GAAAA,cAACiN,GAAAA,EAAc,CACb/lD,OAAqC,YAA7Bs6C,EACR0L,UAAQ,EACR12B,UAAU,4BAEVwpB,EAAAA,GAAAA,cAAC0B,GAAuB,CACtBH,iBAAkBA,EAClBE,qBAAsBA,EACtBE,QAASgH,OAIX,K,wFExfV,MAAMwE,GACI,cA0EV,IAAexN,EAAAA,EAAAA,KAtEWyN,EACxB52B,YACA9gB,QACAO,WACAwxB,YACA4lB,aACAC,gBACAC,oBACA5L,UACAoL,eAGA,MAAMS,GAAS3J,EAAAA,EAAAA,IAAuB,MAwCtC,OAtCAzE,EAAAA,EAAAA,KAAU,KAMR,GAJInpC,QAAkCvQ,IAAtB6nD,GAAmCC,EAAO92B,SACxD82B,EAAO92B,QAAQ0yB,UAAUjhB,IAAIglB,KAG1Bl3C,QAAkCvQ,IAAtB6nD,EACf,OAGF,MAAME,EAAQD,EAAO92B,QACfg3B,EAAYD,EAAME,cAAeC,SAASL,GAChD,IAAKG,EAKH,YAHIz3C,IAAaw3C,EAAMrE,UAAUyE,SAASV,KACxCM,EAAMrE,UAAUjhB,IAAIglB,KAKxB,MAAMW,EAAaL,EAAMnO,cAA2B,aAC9CyO,EAAiBL,EAAUpO,cAA2B,aAGtD0O,EAAYD,EAAeJ,cAAeM,WAAaH,EAAWH,cAAeM,WACjFC,EAAcH,EAAeI,YAAcL,EAAWK,YAE5DJ,EAAe3E,UAAUgF,OAAO,WAChCN,EAAW1E,UAAUgF,OAAO,WAC5BN,EAAW9K,MAAMqL,UAAa,eAAcL,sBAA8BE,YAC1EI,EAAAA,GAAAA,GAAYR,GACZA,EAAW1E,UAAUjhB,IAAI,WACzB2lB,EAAW9K,MAAMqL,UAAY,OAE7BX,EAAUtE,UAAUgF,OAAOjB,IAC3BM,EAAMrE,UAAUjhB,IAAIglB,GAAkB,GACrC,CAACl3C,EAAUs3C,IAGZvN,EAAAA,GAAAA,cAAA,OACExpB,WAAWssB,EAAAA,GAAAA,GAAe,MAAOtsB,GACjCmrB,QAASA,IAAMA,EAAQoL,GACvB5H,IAAKqI,GAELxN,EAAAA,GAAAA,cAAA,aACGuO,EAAAA,GAAAA,GAAW74C,GACXtJ,QAAQihD,IACPrN,EAAAA,GAAAA,cAAA,QAAMxpB,WAAWssB,EAAAA,GAAAA,GAAe,QAASwK,GAhEpC,uBAgE+ED,GAErF5lB,GAAauY,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,4BAC3BwpB,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,cAEX,IC3DJg4B,GAAkBn/B,EAAAA,GAAS,IAAMwS,EAAAA,GAAa,IAAM,IA6D1D,IAAe8d,EAAAA,EAAAA,KA3De8O,EAC5BC,OAAMC,aAAYC,YAAWC,MAAKC,kBAGlC,MAAMC,GAAelL,EAAAA,EAAAA,IAAuB,MACtC0J,GAAoByB,EAAAA,GAAAA,GAAYJ,IAEtCK,EAAAA,GAAAA,GAAoBF,OAAcrpD,GAAW,IAG7C05C,EAAAA,EAAAA,KAAU,KACR,MAAM8P,EAAYH,EAAar4B,SACzB,YAAEy4B,EAAW,YAAEC,EAAW,WAAEC,GAAeH,EACjD,GAAIC,GAAeC,EACjB,OAGF,MAAME,EAAmBJ,EAAUK,WAAWX,GAC9C,IAAKU,EACH,OAGF,MAAQrB,WAAYuB,EAAqBJ,YAAaK,GAAyBH,EACzEI,EAAUF,EAAuBJ,EAAc,EAAMK,EAAuB,EAG9E78C,KAAK+8C,IAAID,EAAUL,GA9BK,KAkC5BO,EAAAA,GAAAA,GAA2BV,EAAWQ,EAASlB,GAAgB,GAC9D,CAACI,IAEJ,MAAM/kD,GAAO+3C,EAAAA,GAAAA,KAEb,OACE5B,EAAAA,GAAAA,cAAA,OACExpB,UAAY,sCAAoCq4B,EAAM,MAAQ,IAC9D1J,IAAK4J,EACLlN,IAAKh4C,EAAKi4C,MAAQ,WAAQp8C,GAEzBgpD,EAAKvkD,KAAI,CAAC0lD,EAAKnsC,KAAC,IAAAosC,EAAA,OACf9P,EAAAA,GAAAA,cAACoN,GAAG,CACFzQ,IAAW,QAARmT,EAAED,EAAIppD,UAAE,IAAAqpD,EAAAA,EAAID,EAAIn6C,MAEnBA,MAASi5C,GAAckB,EAAIppD,KAAOspD,EAAAA,IAAmCF,EAAIn6C,MAAtB7L,EAAKgmD,EAAIn6C,OAC5DO,SAAUyN,IAAMkrC,EAChBnnB,UAAWooB,EAAIpoB,UACf4lB,WAAYwC,EAAIxC,WAChBC,cAAeuC,EAAIvC,cACnBC,kBAAmBA,EACnB5L,QAASmN,EACT/B,SAAUrpC,GACV,IAEA,I,gBC3CV,MA+MA,IAAei8B,EAAAA,EAAAA,KAAK4D,EAAAA,EAAAA,KACjBp+C,IACC,MACE2vC,aACEprB,KAAMmrB,EACN7rC,WAAYgnD,GAEdj8C,OACE6kB,SAAS,SACPq3B,IAEH,cACD9yC,EAAa,aACb+f,EAAY,gBACZzhB,GACEtW,GACE,4BAAE+qD,EAA2B,iBAAEC,IAAqBhqD,EAAAA,EAAAA,IAAehB,GAEzE,MAAO,CACL0vC,kBACAmb,mBACAG,mBACAhzC,gBACAizC,kBAAkBC,EAAAA,EAAAA,IAAuBlrD,GACzC+3B,eACAgzB,8BACAI,iBAAkBlkD,QAAQ6jD,GAAU9iD,QACpCojD,YAAYn6B,EAAAA,GAAAA,GAAmBjxB,EAAQ,iBACvCsW,kBACD,GA7Be8nC,EA5M2BiN,EAC7CC,kBACAC,yBACAC,4BACA9b,kBACAmb,mBACAG,mBACAhzC,gBACAizC,mBACAlzB,eACAgzB,8BACAK,aACAK,uBACAN,mBACA70C,sBAEA,MAAM,gBACJo1C,EAAe,oBACfC,EAAmB,SACnBroD,IACE+0B,EAAAA,EAAAA,MAGEuzB,GAAgBlN,EAAAA,EAAAA,IAAuB,MAEvCh6C,GAAO+3C,EAAAA,GAAAA,MAEbxC,EAAAA,EAAAA,KAAU,KACJliB,GACF2zB,GACF,GACC,CAAC3zB,EAAc2zB,IAElB,MAAMG,GAAiBrO,EAAAA,EAAAA,KAAQ,KACtB,CACLl8C,GAAIspD,EAAAA,IACJr6C,MAAOs6C,IAAmB,KAAOD,EAAAA,IAAgBlmD,EAAK,uBAAyBA,EAAK,qBAErF,CAACmmD,EAAkBnmD,IAEhBonD,GAAmBtO,EAAAA,EAAAA,KAAQ,IACxBqN,EACHA,EAAiB7lD,KAAK1D,GAClBA,IAAOspD,EAAAA,IACFiB,EAGFnc,EAAgBpuC,IAAO,CAAC,IAC9B2D,OAAOgC,cACR1G,GACH,CAACmvC,EAAiBmc,EAAgBhB,IAE/BkB,EAAsBD,GAAkBl5C,WAAW68B,GAAWA,EAAOnuC,KAAOspD,EAAAA,MAC5EoB,EAAqBD,IAAwBf,EAC7CiB,EAxDmB,IAwDsBjB,EAEzCkB,GAAqBlR,EAAAA,GAAAA,MACrBmR,GAAa3O,EAAAA,EAAAA,KAAQ,KACzB,GAAKsO,GAAqBA,EAAiB9jD,OAI3C,OAAO8jD,EAAiB9mD,KAAI,EAAG1D,KAAIiP,SAASgO,KAC1C,MAAM+jB,EAAYhhC,IAAOspD,EAAAA,KAAiBrsC,EAAI6sC,EAAa,EAE3D,MAAQ,CACN9pD,KACAiP,QACA23C,WAAYgE,EAAmB5qD,IAAK8qD,WACpCjE,cAAelhD,QAAQilD,EAAmB5qD,IAAK+qD,oBAC/C/pB,YACD,GACD,GACD,CAACwpB,EAAkBI,EAAoBd,IAEpCkB,GAAkBxM,EAAAA,EAAAA,KAAal+B,IACnC+pC,EAAoB,CAAEX,iBAAkBppC,GAAS,CAAEijC,uBAAuB,GAAO,GAChF,CAAC8G,KAGJ1R,EAAAA,EAAAA,KAAU,KACHkS,GAAYnkD,QAIbgjD,GAAoBmB,EAAWnkD,QACjC2jD,EAAoB,CAAEX,iBAxFD,GAyFvB,GACC,CAACA,EAAkBmB,EAAYR,KAElC1R,EAAAA,EAAAA,KAAU,KACR,GAAK3tC,EAAAA,IAAiB6/C,GAAYnkD,SAAUijD,EAI5C,OAAOsB,EAAAA,GAAAA,IAAcX,EAAcr6B,QAAU,CAC3Ci7B,wBAAyB,aACzBC,QAAUA,CAACj7C,EAAG7G,IACRA,IAAc+hD,GAAAA,GAAAA,MAChBf,EACE,CAAEX,iBAAkBv9C,KAAK87B,IAAIyhB,EAAmB,EAAGmB,EAAWnkD,OAAS,IACvE,CAAE68C,uBAAuB,KAEpB,GACEl6C,IAAc+hD,GAAAA,GAAAA,QACvBf,EAAoB,CAAEX,iBAAkBv9C,KAAKC,IAAI,EAAGs9C,EAAmB,IAAM,CAAEnG,uBAAuB,KAC/F,IAKX,GACD,CAACmG,EAAkBmB,EAAYlB,EAAkBU,IAEpD,MAAMgB,GAAwBjO,EAAAA,EAAAA,MAC9BiO,EAAsBp7B,SAAW06B,GACjChS,EAAAA,EAAAA,KAAU,IAAO0S,EAAsBp7B,SAAUk0B,EAAAA,GAAAA,IAAsB,KACjEkH,EAAsBp7B,SACxBo6B,EAAoB,CAAEX,iBAxHD,GAyHvB,SACGzqD,GAAY,CAACyqD,EAAkBW,KAEpCiB,EAAAA,GAAAA,GAAe,CACb97C,UAAWm7C,EACXY,OAAQA,IAAMlB,EAAoB,CAAEX,iBA9Hb,GA8HqD,CAAEnG,uBAAuB,OAGvG5K,EAAAA,EAAAA,KAAU,KACR,MAAM6S,EAAiBt7C,IACrB,GAAIA,EAAEu7C,SAAWv7C,EAAEw7C,UAAYx7C,EAAE2yB,KAAK8oB,WAAW,UAAYd,EAAY,CACvE,MAAO,CAAEe,GAAS17C,EAAE2yB,KAAK1Y,MAAM,cAAgB,GAC/C,IAAKyhC,EAAO,OAEZ,GAxIsB,MAwIlBA,EAEF,YADA5pD,EAAS,CAAEhC,GAAI0W,EAAevW,sBAAsB,IAItD,MAAMguC,EAASxnC,OAAOilD,GAAS,EAC/B,GAAIzd,EAAS0c,EAAWnkD,OAAS,EAAG,OAEpC2jD,EAAoB,CAAEX,iBAAkBvb,GAAU,CAAEoV,uBAAuB,IAC3ErzC,EAAE+oC,gBACJ,GAKF,OAFAvqC,SAAS8rC,iBAAiB,UAAWgR,GAAe,GAE7C,KACL98C,SAAS+rC,oBAAoB,UAAW+Q,GAAe,EAAK,CAC7D,GACA,CAAC90C,EAAem0C,EAAY7oD,EAAUqoD,IAEzC,MACEwB,aAAcC,EAAuB,qBAAEC,IACrCC,EAAAA,GAAAA,IAAmBzC,OAAkBtqD,GAAW,GAEpD,SAASgtD,EAAiBz8C,GACxB,MAAM08C,EAAe5lD,OAAO2S,OAAOm1B,GAChChkC,MAAK,EAAGpK,QAASA,IAAO6qD,EAAYnB,GAAkB1pD,KACnDmsD,EAAWD,IAAiBxB,EAElC,OACEnR,EAAAA,GAAAA,cAAC6S,GAAAA,EAAQ,CACPC,WAAYF,EAAW,SAAW,MAClCxpD,SAAUwpD,EAAWD,EAAalsD,QAAKf,EACvCuQ,SAAUA,EACVm6C,iBAAkBA,EAClBlzB,aAAcA,EACduzB,gBAAiBA,EACjBC,uBAAwBA,EACxBC,0BAA2BA,EAC3BoC,kBAAmBzC,IAAqB70C,EAAgBC,SACxDD,gBAAiBA,GAGvB,CAEA,MAAMu3C,EAAsB1B,GAAcA,EAAWnkD,OAAS,EAE9D,OACE6yC,EAAAA,GAAAA,cAAA,OACExpB,WAAWssB,EAAAA,GAAAA,GACT,cACAkQ,GAAuBpC,GAAwB,6BAGhDoC,EACChT,EAAAA,GAAAA,cAACyO,GAAO,CAACC,KAAM4C,EAAY1C,UAAWuB,EAAkBrB,YAAa2C,EAAiB9C,YAAU,IAC9F4D,EACFvS,EAAAA,GAAAA,cAAA,OAAKxpB,WAAWssB,EAAAA,GAAAA,GAAe,mBAAoB0P,UACjD9sD,EACJs6C,EAAAA,GAAAA,cAACiC,GAAAA,EAAU,CACTkD,IAAK4L,EACLpe,KAAMud,EAA8B,OAASrmD,EAAKi4C,MAAQ,sBAAwB,kBAClFI,UAAWiO,EACX8C,YAAaD,EAAsB1B,EAAWnkD,YAASzH,GAEtDgtD,GAEC,K,gBClPV,MAOA,IAAe/S,EAAAA,EAAAA,KAPwBC,IACrC,MAAMsT,GAAapT,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAOmT,EAAalT,EAAAA,GAAAA,cAACkT,EAAetT,GAAYI,EAAAA,GAAAA,cAACmT,GAAAA,EAAO,KAAG,ICG7D,IAAexT,EAAAA,EAAAA,KAPyBC,IACtC,MAAMwT,GAActT,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAGnD,OAAOqT,EAAcpT,EAAAA,GAAAA,cAACoT,EAAgBxT,GAAYI,EAAAA,GAAAA,cAACmT,GAAAA,EAAO,KAAG,I,gBCU/D,MAiFA,IAAexT,EAAAA,EAAAA,KAjFqB0T,EAClCC,UACAC,mBACAC,eACAC,iBAEA,MAAM,aAAClM,IAAgB/pB,EAAAA,EAAAA,OAChBk2B,EAAYC,IAAiB9S,EAAAA,EAAAA,KAAS,IAE7CzB,EAAAA,EAAAA,KAAU,KACHkU,GACHK,GAAc,EAChB,GACC,CAACL,IAEJ,MAAMzpD,GAAO+3C,EAAAA,GAAAA,KAuCb,OArCqBkB,EAAAA,GAAAA,GACnB,gBACAwQ,GAAW,WACXI,GAAc,iBAGSzO,EAAAA,EAAAA,KAAY,KACnC0O,GAAeD,EAAW,GACzB,CAACA,KAEgBzO,EAAAA,EAAAA,KAAY,KAC9B0O,GAAc,EAAM,GACnB,KAGgB1O,EAAAA,EAAAA,KAAY,KAC7BsC,EAAa,CACX7kC,MAAMkxC,WAAWlxC,MACjB3O,MAAM6/C,WAAW7/C,MACjB7J,SAAS0pD,WAAW1pD,SACpB+1B,YAAY2zB,WAAW3zB,YACvBhsB,qBAAqB2/C,WAAW3/C,qBAChCk7B,mBAAmBykB,WAAWzkB,mBAC9BlH,cAAc2rB,WAAW3rB,cACzB/1B,qBAAqB0hD,WAAW1hD,qBAChC4iC,YAAY8e,WAAW9e,aACvB,GACD,KAGe6N,EAAAA,EAAAA,KAAQ,IACxB3C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACqL,GAAAA,EAAQ,CAACC,KAAK,UAAU3J,QAAS6R,GAAe3pD,EAAK,eACtDm2C,EAAAA,GAAAA,cAACqL,GAAAA,EAAQ,CAACC,KAAK,QAAQ3J,QAAS8R,GAAa5pD,EAAK,aAClDm2C,EAAAA,GAAAA,cAACqL,GAAAA,EAAQ,CAACC,KAAK,OAAO3J,QAAS4R,GAAmB1pD,EAAK,sBAExD,CAACA,EAAM2pD,EAAcC,EAAYF,IAC7B,IAuBC,I,gBCrDV,MAAMM,GAA0B9mD,OAAOC,KAAKy6C,EAAAA,IAAmBt6C,OAAS,EAGxE,IAAI2mD,GAEJ,MAkLA,IAAenU,EAAAA,EAAAA,KAlLgBoU,EAC7BznD,UACAs5C,cACAI,aACAS,kBACAF,iBACAO,uBACA2J,kBACAv0C,oBACAk0C,mBACA5J,gBACAwN,kBACAtD,yBACA7J,UACAoN,oBAEA,MAAM,gBAAEjsD,IAAoBw1B,EAAAA,EAAAA,OACrB02B,EAAsBC,IAA2BtT,EAAAA,EAAAA,IAASpvC,EAAAA,KAE3D,uBAAE2iD,EAAsB,6BAAEC,IAAiCC,EAAAA,GAAAA,GAAoBlE,GAC/EmE,EAAsBnE,GAAoB9jD,IAAYm7C,EAAAA,GAAAA,UAG1D6K,aAAckC,EACdhC,qBAAsBiC,IACpBhC,EAAAA,GAAAA,GAAkBv2C,GAEhBw4C,GAAgB7Q,EAAAA,EAAAA,KAAO,GAEvB8Q,GAAmB1P,EAAAA,EAAAA,KAAY,KAC/B34C,IAAYm7C,EAAAA,GAAAA,WAGhBiN,EAAch+B,SAAU,EACxBy9B,GAAwB,GAAK,GAC5B,CAAC7nD,IAEEsoD,GAAmB3P,EAAAA,EAAAA,KAAY,KACnCyP,EAAch+B,SAAU,EAEpBo9B,KACFrkD,aAAaqkD,IACbA,QAAepuD,GAGjBouD,GAAe3rD,OAAOqG,YAAW,KAC1BkmD,EAAch+B,SACjBy9B,GAAwB,EAC1B,GApDwB,IAqDD,GACxB,IAEGU,GAAuB5P,EAAAA,EAAAA,KAAY,KACvC+O,EAAgBvM,EAAAA,GAAAA,SAA2B,GAC1C,CAACuM,IAEEc,GAAuB7P,EAAAA,EAAAA,KAAY,KACvC+O,EAAgBvM,EAAAA,GAAAA,SAA2B,GAC1C,CAACuM,IAEEe,GAAuB9P,EAAAA,EAAAA,KAAY,KACvC+O,EAAgBvM,EAAAA,GAAAA,UAChBz/C,GAAiB,GAChB,CAACA,EAAiBgsD,IAEfgB,GAAoB/P,EAAAA,EAAAA,KAAYvmC,gBAC9BwrC,GAASC,MAAMC,EAAAA,KACrBjiD,OAAOm6B,SAASgoB,QAAQ,GACvB,IAEG2K,GAAyBhQ,EAAAA,EAAAA,KAAY,KACzC+O,EAAgBvM,EAAAA,GAAAA,gBAAkC,GACjD,CAACuM,IAEEkB,GAAuBjQ,EAAAA,EAAAA,KAAY,KACvC+O,EAAgBvM,EAAAA,GAAAA,cAAgC,GAC/C,CAACuM,KAEJ5U,EAAAA,EAAAA,KAAU,KACR,IAAI+V,EASJ,OARI7oD,IAAYm7C,EAAAA,GAAAA,SACd0N,EAAmBhtD,OAAOqG,YAAW,KACnC2lD,GAAwB,EAAM,GAtFR,MAwFfO,EAAch+B,SAAWjlB,EAAAA,KAClC0iD,GAAwB,GAGnB,KACDgB,IACF1lD,aAAa0lD,GACbA,OAAmBzvD,EACrB,CACD,GACA,CAAC4G,IAEJ,MAAMzC,GAAO+3C,EAAAA,GAAAA,KAEb,OACE5B,EAAAA,GAAAA,cAAA,OACEv5C,GAAG,kBACH2uD,aAAe3jD,EAAAA,QAAkC/L,EAAnBivD,EAC9BU,aAAe5jD,EAAAA,QAAkC/L,EAAnBkvD,GAE9B5U,EAAAA,GAAAA,cAACqG,GAAc,CACbC,iBAAkBiO,EAClBjoD,QAASA,EACTi6C,eAAgBA,EAChBC,cAAeA,EACfE,iBAAkBmO,EAClBlO,iBAAkBmO,EAClBlO,iBAAkBmO,EAClBlO,QAASA,EACTC,qBAAsBA,EACtBL,gBAAiBA,IAEnBzG,EAAAA,GAAAA,cAACiC,GAAAA,EAAU,CACTtP,KAAMmU,EAAuB,OAAS,YACtCmM,YAAaY,GACb3R,UAAW51C,EACXgpD,eAAa,EACbC,oBAAqB9N,EAAAA,GAAAA,WAEnBxxC,IACA,OAAQ3J,GACN,KAAKm7C,EAAAA,GAAAA,SACH,OACEzH,EAAAA,GAAAA,cAACwQ,GAAW,CACVI,qBAAsB2D,EACtB7D,uBAAwBA,EACxBC,0BAA2BqD,EAC3BvD,gBAAiBA,IAGvB,KAAKhJ,EAAAA,GAAAA,aACH,OACEzH,EAAAA,GAAAA,cAACkT,GAAU,CACTtN,YAAaA,EACbI,WAAYA,EACZ/vC,SAAUA,EACV4wC,QAASA,IAGf,KAAKY,EAAAA,GAAAA,SACH,OAAOzH,EAAAA,GAAAA,cAACoT,GAAW,CAAChpD,OAAQm8C,EAAgBtwC,SAAUA,EAAU4wC,QAASA,IAC3E,QACE,OAAiB,IAIxB2N,GACCxU,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACLqT,OAAK,EACLC,MAAI,EACJj/B,WAAWssB,EAAAA,GAAAA,GAAe,aAAc2R,GACxC9S,QAASqT,GAERnrD,EAAK,wBAGTuqD,GACCpU,EAAAA,GAAAA,cAAC0V,GAAAA,EAAU,CACTxuD,OAAQkpD,EACR10C,UAAW64C,EACXN,cAAeA,EACf0B,oBAAqBtB,IAGzBrU,EAAAA,GAAAA,cAACqT,GAAa,CACZC,QAASY,EACTX,iBAAkBuB,EAClBtB,aAAcyB,EACdxB,WAAYyB,IAEV,ICjNV,IAAevV,EAAAA,EAAAA,KAPsBC,IACnC,MAAMgW,GAAW9V,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,YAGhD,OAAO6V,EAAW5V,EAAAA,GAAAA,cAAC4V,EAAahW,GAAYI,EAAAA,GAAAA,cAACmT,GAAAA,EAAO,KAAG,ICGzD,IAAexT,EAAAA,EAAAA,KAPqBC,IAClC,MAAMiW,GAAU/V,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,WAG/C,OAAO8V,EAAU7V,EAAAA,GAAAA,cAAC6V,EAAYjW,GAAYI,EAAAA,GAAAA,cAACmT,GAAAA,EAAO,KAAG,ICEvD,IAAexT,EAAAA,EAAAA,KAP2BC,IACxC,MAAMkW,GAAgBhW,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAGrD,OAAO+V,EAAgB9V,EAAAA,GAAAA,cAAC8V,EAAkBlW,GAAYI,EAAAA,GAAAA,cAACmT,GAAAA,EAAO,KAAG,ICWxC,IAoBtB4C,GAAW,SAAXA,GAAW,OAAXA,EAAAA,EAAW,eAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,2BAAXA,CAAW,EAAXA,IAAW,IAWhB,MAAMC,GAAejpD,OAAOC,KAAK+oD,IAAa5oD,OAAS,EAEjD8oD,GAAoB9tD,OAAO+tD,eAAeC,QAAQ,sBAAwB1O,EAAAA,GAAAA,SAkchF,IAAe9H,EAAAA,EAAAA,KAAK4D,EAAAA,EAAAA,KACjBp+C,IACC,MAAM4B,GAAWZ,EAAAA,EAAAA,IAAehB,IAC1B,aACJ0D,EACA4K,cAAc,MACZ1N,EAAK,KACLsM,GACD,4BACD69C,EAA2B,iBAC3BC,EAAgB,mBAChBiG,GACErvD,GACE,gBACJgP,EAAe,cACfoH,EACAmB,UAAU,YACRC,GACD,kBACDrC,EAAiB,gBACjBT,GACEtW,EAEEsY,GAAcxM,EAAAA,EAAAA,IAAkB9L,GAChCkxD,EAAajqD,QAAQqR,GAAahX,IAClC2pD,GAAmBC,EAAAA,EAAAA,IAAuBlrD,GAC1C4C,EAAmBhB,EAASgB,iBAElC,MAAO,CACLuuD,qBAAqBztD,GAAc6lB,SACnCk3B,YAAa7/C,EACbigD,WAAY3zC,EACZkkD,wBAA8C,IAArBpG,EACzBD,8BACAn6C,kBACAoH,gBACAoB,cACA63C,qBACAC,aACAn6C,oBACAk0C,mBACAroD,mBACA0+C,gBAAiB1/C,EAAS0M,aAAaO,UACvCyH,kBACD,GA5Ce8nC,EAjceiT,EACjCF,uBACA1Q,cACAI,aACAuQ,0BACArG,8BACAn6C,kBACAoH,gBACAoB,cACA63C,qBACAC,aACAn6C,oBACAk0C,mBACAroD,mBACA0+C,kBACAhrC,sBAEA,MAAM,qBACJg7C,EAAoB,uBACpBC,EAAsB,sBACtBzP,EAAqB,kBACrB0P,EAAiB,oBACjB5P,EAAmB,iBACnB6P,EAAgB,gBAChBC,EAAe,mBACfC,EAAkB,qBAClBC,EAAoB,SACpBtuD,EAAQ,0BACR2+C,IACE5pB,EAAAA,EAAAA,MAGEw5B,GAAYnT,EAAAA,EAAAA,IAAuB,OAElCv3C,EAAS2qD,IAAcpW,EAAAA,EAAAA,IAA4BzzC,OAAO6oD,MAC1DiB,EAAgBC,IAAqBtW,EAAAA,EAAAA,IAASoH,EAAAA,GAAAA,OAC9C1B,EAAgB6Q,IAAqBvW,EAAAA,EAAAA,IAAiB,KACtDwW,EAAc5G,IAAmB6G,EAAAA,GAAAA,OAGjCC,EAAeC,IAAoB3W,EAAAA,EAAAA,IAAiB,GACrD4W,EAAeC,IACnBT,EAAWS,GACXvvD,OAAO+tD,eAAexM,QAAQ,oBAAoBgO,EAAExqD,WAAW,EAEjE,IAAIyqD,EAA2B5B,GAAY6B,KAC3C,OAAQtrD,GACN,KAAKm7C,EAAAA,GAAAA,SACHkQ,EAAc5B,GAAY8B,SAC1B,MACF,KAAKpQ,EAAAA,GAAAA,SACHkQ,EAAc5B,GAAYH,SAC1B,MACF,KAAKnO,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,gBACHkQ,EAAc5B,GAAY+B,WAC1B,MACF,KAAKrQ,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,cACHkQ,EAAc5B,GAAYgC,SAI9B,MAAMC,GAAc/S,EAAAA,EAAAA,KAAagT,IAC/B,SAASC,IACPT,EAAYhQ,EAAAA,GAAAA,UACZ2P,EAAkB,IAClBV,EAAuB,CAAE1iD,WAAW,IACpC2iD,IACAnoD,YAAW,KACTioD,EAAqB,CAAE1wD,MAAO,KAC9BghD,EAAoB,CAAE10C,UAAM3M,IAC5BuhD,EAAsB,CAAExgD,QAAIf,IAC5BgxD,EAAuB,CAAE1iD,WAAW,IACpCwjD,EAAiB3lD,KAAKC,MAAM,GA5EF,IA8E9B,CAEA,IAA8B,IAA1BmmD,EAKJ,GAAI3rD,IAAYm7C,EAAAA,GAAAA,cAKhB,GAAIn7C,IAAYm7C,EAAAA,GAAAA,gBAAhB,CAKA,GAAIn7C,IAAYm7C,EAAAA,GAAAA,cAAiC,CAC/C,MAAM0Q,EAAoBhjD,SAASijD,eAAe,2BAC9CD,GACFA,EAAkB91B,MAEtB,CAEA,GAAI/1B,IAAYm7C,EAAAA,GAAAA,SACd,OAAQyP,GACN,KAAKjP,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,SACL,KAAKA,EAAAA,GAAAA,SACL,KAAKA,EAAAA,GAAAA,aAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,MAGpB,KAAKA,EAAAA,GAAAA,sBAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,SAEpB,KAAKA,EAAAA,GAAAA,2BAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,uBAGpB,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,wBAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,SAGpB,KAAKA,EAAAA,GAAAA,oBAEH,YADAkP,EAAkB54C,EAAc0pC,EAAAA,GAAAA,gBAAkCA,EAAAA,GAAAA,kBAGpE,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,gBAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,iBAGpB,KAAKA,EAAAA,GAAAA,2BAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,qBAGpB,KAAKA,EAAAA,GAAAA,0BAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,+BAGpB,KAAKA,EAAAA,GAAAA,8BAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,2BAGpB,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,oBAEpB,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,iBAEpB,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,qBAEpB,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,+BAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,kBAEpB,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,iBAEpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,mBAEpB,KAAKA,EAAAA,GAAAA,oCACL,KAAKA,EAAAA,GAAAA,mCAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,sBAEpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,mBAEpB,KAAKA,EAAAA,GAAAA,iBAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,eAEpB,KAAKA,EAAAA,GAAAA,wBAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,kBAEpB,KAAKA,EAAAA,GAAAA,qBAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,yBAEpB,KAAKA,EAAAA,GAAAA,sBAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,sBAEpB,KAAKA,EAAAA,GAAAA,0BAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,uBAEpB,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,cAEpB,KAAKA,EAAAA,GAAAA,uBAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,4BAEpB,KAAKA,EAAAA,GAAAA,2BAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,wBAEpB,KAAKA,EAAAA,GAAAA,wBAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,4BAEpB,KAAKA,EAAAA,GAAAA,mBAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,mCAEpB,KAAKA,EAAAA,GAAAA,uBAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,oBAGpB,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,SAGpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,iCAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,+BAGpB,KAAKA,EAAAA,GAAAA,8BAGH,OAFAwP,EAAYhQ,EAAAA,GAAAA,eACZ0P,EAAkBlP,EAAAA,GAAAA,MAGpB,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,YAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,UAGpB,KAAKA,EAAAA,GAAAA,eAEH,YADAkP,EAAkBlP,EAAAA,GAAAA,UAOpB37C,IAAYm7C,EAAAA,GAAAA,UAA8B8O,EAC5CkB,EAAYhQ,EAAAA,GAAAA,cAKdyQ,GA7KA,MAFET,EAAYhQ,EAAAA,GAAAA,sBALZgQ,EAAYhQ,EAAAA,GAAAA,oBALZyQ,GAyLS,GACV,CACD5rD,EAASiqD,EAAyBG,EAAwBC,EAAmBF,EAC7E1P,EAAqBE,EAAuBiQ,EAAgB34C,IAGxD85C,GAAoBpT,EAAAA,EAAAA,KAAal/C,IACjCuG,IAAYm7C,EAAAA,GAAAA,UAKhBgQ,EAAYhQ,EAAAA,GAAAA,cAER1hD,IAAU6/C,GACZ6Q,EAAqB,CAAE1wD,WAPvBqxD,EAAkBrxD,EAQpB,GACC,CAACuG,EAASs5C,EAAa6Q,IAEpB6B,GAAoBrT,EAAAA,EAAAA,KAAY,KACpCgS,EAAWxP,EAAAA,GAAAA,cACXgP,EAAqB,CAAE1wD,MAAO,KAC9BkhD,EAAsB,CAAExgD,GAAIsB,GAAmB,GAC9C,CAACA,EAAkBk/C,EAAuBwP,KAE7CrX,EAAAA,EAAAA,KACE,IAAO9yC,IAAYm7C,EAAAA,GAAAA,UAA+B8O,IAA4BF,IAAejG,GACzFxF,EAAAA,GAAAA,IAAsB,IAAMoN,WAC5BtyD,GACJ,CAAC6wD,EAAyBjqD,EAAS0rD,EAAa3B,EAAYjG,IAG9D,MAAMmI,GAAqBtT,EAAAA,EAAAA,KAAatuC,IAClCrK,IAAYm7C,EAAAA,GAAAA,eAIhB9wC,EAAE+oC,iBACF+X,EAAYhQ,EAAAA,GAAAA,cAA+B,GAC1C,CAACn7C,IAEEksD,GAA4BvT,EAAAA,EAAAA,KAAatuC,IAC7CA,EAAE+oC,iBACFj3C,EAAS,CAAEhC,GAAI0W,EAAevW,sBAAsB,GAAO,GAC1D,CAACuW,EAAe1U,IAEbgwD,GAAsBxT,EAAAA,EAAAA,KAAatuC,IACvCA,EAAE+oC,iBACFuX,EAAWxP,EAAAA,GAAAA,SAA2B,GACrC,IAEGiR,GAAuBzT,EAAAA,EAAAA,KAAatuC,IACxCA,EAAE+oC,iBACF+X,EAAYhQ,EAAAA,GAAAA,SAA2B,GACtC,KAEHS,EAAAA,GAAAA,GAAW,CACT,cAAeqQ,EACf,cAAeC,KACXrQ,EAAAA,IAAU,CACZ,QAASqQ,EACT,QAASC,MAEPE,EAAAA,IAAaxQ,EAAAA,IAAU,CAAE,QAASuQ,MAGxCtZ,EAAAA,EAAAA,KAAU,KACRyX,IAEIK,IAAmBjP,EAAAA,GAAAA,SACrB2O,GACF,GACC,CAACC,EAAiBD,EAAkBM,KAEvC0B,EAAAA,GAAAA,IAAc,UACelzD,IAAvB0wD,IACFa,EAAWxP,EAAAA,GAAAA,UACX0P,EAAkBf,GAClBhP,EAA0B,CAAElxC,YAAQxQ,IACtC,GACC,CAAC0wD,EAAoBhP,IAExB,MAAM,WACJyR,EAAU,YAAEC,EAAW,cAAEC,GC9YtB,SACLC,EACAC,EACApS,EACAqS,EACAC,GAEA,MAAOljD,EAAUmjD,EAAcC,IAAkBpV,EAAAA,GAAAA,MAC1CqV,EAAeC,IAAoB1Y,EAAAA,EAAAA,OACnC2Y,EAAqBC,IAA0B5Y,EAAAA,EAAAA,MAEhD6Y,GAAkBzU,EAAAA,EAAAA,KAAa5qC,IACnC,IAAK2+C,EAAWtiC,QACd,OAGF,MAAMijC,EAAUt/C,EAAS,GAAEA,MAAY,GACvC2+C,EAAWtiC,QAAQssB,MAAM3oC,MAAQs/C,EAC7BR,GACFH,EAAWtiC,QAAQssB,MAAM4W,YAAYT,EAAiBQ,EACxD,GACC,CAACR,EAAiBH,IAUrB,SAASD,IACP5jD,SAASu2B,KAAK0d,UAAUgF,OAAO,mBACjC,CA8CA,OAxDAyL,EAAAA,EAAAA,KAAgB,KACTb,EAAWtiC,SAAYwiC,GAI5BQ,EAAgBR,EAAa,GAC5B,CAACC,EAAiBH,EAAYE,EAAcQ,KAsB/Cta,EAAAA,EAAAA,KAAU,KACR,IAAKnpC,EAAU,OAEf,MAAM6jD,EAAmBnjD,IACvB,MAAMojD,EAAWnnD,KAAKonD,KAAKR,EAAsB7iD,EAAEsjD,QAAUX,GAC7DI,EAAgBK,EAAS,EAG3B,SAASG,IACPC,IACAlB,EAASD,EAAWtiC,QAAS04B,YAC/B,CAEA,SAAS+K,IACPpB,IACA5jD,SAAS+rC,oBAAoB,YAAa4Y,GAAiB,GAC3D3kD,SAAS+rC,oBAAoB,UAAWgZ,GAAU,GAClD/kD,SAAS+rC,oBAAoB,OAAQgZ,GAAU,GAC/Cb,GACF,CAMA,OAJAlkD,SAAS8rC,iBAAiB,YAAa6Y,GAAiB,GACxD3kD,SAAS8rC,iBAAiB,UAAWiZ,GAAU,GAC/C/kD,SAAS8rC,iBAAiB,OAAQiZ,GAAU,GAErCC,CAAO,GACb,CAACX,EAAqBF,EAAeN,EAAYC,EAAUhjD,EAAUojD,EAAgBK,IAEjF,CAAEb,WA5CT,SAAoBliD,GAClBA,EAAE+oC,iBAEFvqC,SAASu2B,KAAK0d,UAAUjhB,IAAI,oBAE5BoxB,EAAiB5iD,EAAEsjD,SACnBR,EAAuBT,EAAWtiC,QAAS04B,aAC3CgK,GACF,EAoCqBN,YAlCrB,SAAqBniD,GACnBA,EAAE+oC,iBACFga,OAAgBh0D,GAChBmhD,GACF,EA8BkCkS,gBACpC,CD+TMqB,CAAUpD,GAAYh/C,GAAM8+C,EAAmB,CACjD/gD,gBAAiBiC,KACf++C,EAAsBhhD,EAAiB,uBAErCskD,GAA6BpV,EAAAA,EAAAA,KAAa/uC,IAC9CuhD,EAAYhQ,EAAAA,GAAAA,UACZ0P,EAAkBjhD,EAAO,GACxB,IAEH,OACE8pC,EAAAA,GAAAA,cAAA,OACEv5C,GAAG,aACH0+C,IAAK6R,GAELhX,EAAAA,GAAAA,cAACiC,GAAAA,EAAU,CACTtP,KAAMud,EAA8B,OAASoK,EAAAA,GAC7CrH,YAAa+C,GACb9T,UAAWyV,EACXrC,eAAa,EACbC,oBAAqBQ,GAAY6B,OAE/B3hD,IACA,OAAQ0hD,GACN,KAAK5B,GAAY8B,SACf,OACE7X,EAAAA,GAAAA,cAAC8V,GAAa,CACZ7/C,SAAUA,EACV4wC,QAASmR,EACT/D,cAAeqE,EACf7H,gBAAiBA,EACjBC,uBAAwB2J,EACxB1J,0BAA2B8G,EAC3BrH,iBAAkBA,EAClB30C,gBAAiBA,IAGvB,KAAKs6C,GAAYH,SACf,OACE5V,EAAAA,GAAAA,cAAC4V,GAAQ,CACP3/C,SAAUA,EACVskD,cAAerD,EACfG,aAAcA,EACd5G,gBAAiBA,EACjB+J,eAAgBH,EAChBxT,QAASmR,EACTlR,qBAAsBoJ,IAG5B,KAAK6F,GAAY+B,WACf,OACE9X,EAAAA,GAAAA,cAAC6V,GAAO,CACNlZ,IAAK4a,EACLthD,SAAUA,EACVwkD,WAAS,EACTnuD,QAASA,EACT0nD,gBAAiByD,EACjB5Q,QAASmR,IAGf,KAAKjC,GAAYgC,SACf,OACE/X,EAAAA,GAAAA,cAAC6V,GAAO,CACNlZ,IAAK4a,EACLthD,SAAUA,EACV3J,QAASA,EACT0nD,gBAAiByD,EACjB5Q,QAASmR,IAGf,QACE,OACEhY,EAAAA,GAAAA,cAAC+T,GAAQ,CACPznD,QAASA,EACTm6C,gBAAiBA,EACjBb,YAAaA,EACbI,WAAYA,EACZO,eAAgBA,EAChBkK,gBAAiBA,EACjBuD,gBAAiByD,EACjBjR,cAAe6R,EACf3H,uBAAwB2J,EACxBxT,QAASmR,EACTlR,qBAAsBoJ,EACtBh0C,kBAAmBA,EACnBk0C,iBAAkBA,EAClB6D,cAAeqE,IAEjB,IAIVtY,EAAAA,GAAAA,cAAA,OACExpB,UAAU,gBACVkkC,YAAa7B,EACb8B,UAAW5B,EACX6B,cAAe9B,IAEb,K,qJEjUV,SAAS+B,GAASvsB,EAAWc,EAAW/0B,EAAeC,EAAgBwgD,GACrE,MAAQ,IAAGxsB,KAAKc,EAAI0rB,KAAUA,KAAUA,eACtCzgD,OAAWC,EAAS,EAAIwgD,KAAUA,KAAUA,YAAiBzgD,MACjE,CAoCA,UAAeslC,EAAAA,EAAAA,KA3M+Bob,EAC5CtwC,QAAO1D,YAGP,MAAMgoC,GAAelL,EAAAA,EAAAA,IAAuB,MAEtCmX,GAAerY,EAAAA,EAAAA,KAAQ,IA8E/B,SAAyBl4B,EAAe1D,GACtC,MAAMk0C,EAAexwC,EAAQ1D,EAAQ,EAC/Bm0C,EAmBR,SAAsBzwC,GACpB,IAAIywC,EAAY,EAahB,OAZc,IAAVzwC,EACFywC,EAAY,GACO,IAAVzwC,EACTywC,EAAY,GACO,IAAVzwC,EACTywC,EAAY,IACO,IAAVzwC,GAEAA,EAAQ,KADjBywC,EAAY,KAKPA,CACT,CAlCoBC,CAAa1wC,GACzB2wC,EAmCR,SAAuB3wC,EAAe1D,GACpC,IAAIm0C,EAAY,GAahB,OAZc,IAAVzwC,EACFywC,EAAY,GACO,IAAVzwC,EACTywC,EAAY,GACO,IAAVzwC,EACTywC,EAAsB,IAAVn0C,EAAc,GAAK,IACZ,IAAV0D,GAEAA,EAAQ,KADjBywC,EAAY,KAKPA,CACT,CAlDqBG,CAAc5wC,EAAOwwC,GAClCK,EAmDR,SAAwB7wC,EAAeywC,GACrC,OAAOzwC,GAAS,EAAI,GAAKywC,EAAYzwC,EAAQ,GAAKA,EAAQ,EAC5D,CArDsB8wC,CAAe9wC,EAAOywC,GAEpCM,EAAc,WAAU/wC,IACxBgxC,EAoDR,SAAqBh1D,EAAYy0D,EAAmBzwC,GAGlD,IAAIixC,EAAI,GACR,GAAc,IAAVjxC,EACFixC,EAAIb,GAAS,EAAG,EAAG,EAAGK,EAJT,GAKTL,GAAS,EAAG,GAAI,EAAGK,EAAY,EALtB,GAMTL,GAAS,EAAG,GAAI,EAAGK,EANV,QAQb,IAAK,IAAIx3C,EAAI,EAAGA,EAAI+G,EAAO/G,IACzBg4C,GAAKb,GAAS,GAAIK,EAAY,GAAKx3C,EAAG,EAAGw3C,EAT9B,GAaf,MACG,iBAAgBz0D,uBACJi1D,wBAGjB,CAvEmBC,CAAYH,EAAYN,EAAWzwC,GAE9CmxC,EA4ER,SAA2B70C,EAAem0C,EAAmBzwC,GAC3D,OAAc,IAAVA,EACK,EACY,IAAVA,EACQ,IAAV1D,EAAc,EAAIm0C,EAAY,EAGzB,IAAVzwC,EACY,IAAV1D,EACK,EACY,IAAVA,EACF,GAGF,IAECm0C,EAAY,GAAKn0C,CAE7B,CA9FyB80C,CAAkBZ,EAAcC,EAAWzwC,GAC5DqxC,EA+FR,SAA4B/0C,EAAe0D,EAAeywC,EAAmBI,GAC3E,OAAI7wC,GAAS,GAIT1D,GAAS,EAHJ,EAKEA,GAAS0D,EAAQ,EACnB6wC,EAAc,IAGfJ,EAAY,GAAK,GAAKn0C,EAAQ,IAAMm0C,EAAY,EAC1D,CA3G0Ba,CAAmBd,EAAcxwC,EAAOywC,EAAWI,GAC3E,MAAO,CACLF,aACAK,WACAG,iBACAE,kBACAR,cACAE,aAEJ,CAhGWQ,CAAgBvxC,EAAO1D,IAC7B,CAAC0D,EAAO1D,IAyCX,IAvCAq4B,EAAAA,EAAAA,KAAU,KACR,IAAK2P,EAAar4B,QAChB,OAGF,MAAM,YACJ4kC,EAAW,gBACXQ,EAAe,WACfV,EAAU,eACVQ,EAAc,WACdJ,EAAU,SACVC,GACET,EAEEiB,EAAalN,EAAar4B,QAAQwlC,kBACxC,GAAInN,GAAcr4B,QAAS,CACzB,MAAMylC,EAAiBpN,EAAar4B,SAC9B,MAAEssB,GAAUmZ,EAClBnZ,EAAM1oC,OAAU,GAAEghD,MAClBtY,EAAMqL,UAAa,eAAcyN,OACjC9Y,EAAMyY,SAAY,SAAQD,MAC1B,MAAMY,EAAMD,EAAe7c,cAAc,OACnC+c,EAAMF,EAAe7c,cAAc,OACnCgd,EAAOH,EAAe7c,cAAc,QACrC8c,GACCH,IACFA,EAAWM,UAAa,oCAAmCd,mBAG3Da,IACFA,EAAKC,UAAYd,GAEfY,IACFA,EAAIrZ,MAAM1oC,OAAU,GAAE8gD,MACtBiB,EAAIrZ,MAAMqL,UAAa,cAAauN,OAExC,IACC,CAACZ,IAEU,IAAVvwC,EACF,OACEu1B,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,yBACbwpB,EAAAA,GAAAA,cAAA,OACExpB,UAAU,kCACV2uB,IAAK4J,KAMb,MAAM,YACJuM,EAAW,gBAAEQ,EAAe,WAAEV,EAAU,eAAEQ,EAAc,WAAEJ,GACxDR,EAEJ,OACEhb,EAAAA,GAAAA,cAAA,OAAKxpB,WAAWssB,EAAAA,GAAAA,GAAe,wBAAyBr4B,EAnElC,GAmE+D,+BACnFu1B,EAAAA,GAAAA,cAAA,OACExpB,UAAU,gCACV2uB,IAAK4J,EACL/L,MACG,oBAAmBwY,uCACVF,+BAAyCQ,SAGrD9b,EAAAA,GAAAA,cAAA,aACAA,EAAAA,GAAAA,cAAA,OACExpB,UAAU,6BACVwsB,MAAQ,WAAUoY,8BAAuCQ,WAGzD,I,4BCoDV,UAAejc,EAAAA,EAAAA,KA/G2B6c,EACxCnyD,UAASogB,QAAO1D,QAAO01C,cAAajmC,YAAWkmC,iBAAgB/a,UAASgb,uBAExE,MAAM,qBAAEC,IAAyBp/B,EAAAA,EAAAA,MAC3B3zB,GAAO+3C,EAAAA,GAAAA,KACPib,GAAiBC,EAAAA,GAAAA,GAAazyD,GAC9B0yD,GAAeta,EAAAA,GAAAA,IAASua,EAAAA,EAAAA,IAAoB3yD,EAAS,cAErD4yD,GAAYC,EAAAA,EAAAA,IAAoB7yD,IAE/B8yD,EAAmBC,EAAiBC,IAAoBpZ,EAAAA,GAAAA,KAEzDqZ,GAAqBrY,EAAAA,EAAAA,KAAY,KACrCoY,IAEIX,GACFA,EAAeryD,EAAQ5D,GACzB,GACC,CAAC42D,EAAkBX,EAAgBryD,EAAQ5D,KAExC82D,GAAeC,EAAAA,EAAAA,IAA6BnzD,GAE5CozD,GAA0BxY,EAAAA,EAAAA,KAAY,KACtCsY,GACFX,EAAqB,CAAE9wD,UAAWzB,EAAQ5D,GAAIw+B,OAAQs4B,GACxD,GACC,CAACX,EAAsBW,EAAclzD,EAAQ5D,MAEzCi3D,EAAcC,EAAkBC,IAAsB3Z,EAAAA,GAAAA,KAE7D,OACEjE,EAAAA,GAAAA,cAAA,OAAKxpB,WAAWssB,EAAAA,GAAAA,GAAe,8BAA+BtsB,IAC3D/L,EAAQ,GACPu1B,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACL7kC,OAAK,EACL8H,KAAK,UACL48B,MAAM,cACNxrB,UAAU,kBACViyB,UAAW5+C,EAAK,gCAChB83C,QAASgb,GAET3c,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,mBAGhBkmC,GACC1c,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACL7kC,OAAK,EACL8H,KAAK,UACL48B,MAAM,cACNyG,UAAW5+C,EAAK,0BAChB2sB,UAAU,eACVmrB,QAASyb,GAETpd,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,gBAGjBwpB,EAAAA,GAAAA,cAAC6d,GAAAA,EAAa,CACZ32D,OAAQi2D,EACRzX,QAAS2X,EACT30D,KAAK,wCACLo1D,aAAa,QACbC,eAAgBT,IAElBtd,EAAAA,GAAAA,cAAA,OACExpB,WAAWssB,EAAAA,GAAAA,GAAe,sBAAuB4a,GAAgB,YACjE/b,QAASA,EACTE,IAAKh4C,EAAKi4C,MAAQ,WAAQp8C,GAE1Bs6C,EAAAA,GAAAA,cAAC+a,GAAuB,CACtBtwC,MAAOA,EACP1D,MAAOA,IAER81C,GA2BT,SAAyBmB,EAAsBp6C,EAAkBq5C,GAC/D,MAAM,MAAE5iD,EAAK,OAAEC,IAAW2jD,EAAAA,GAAAA,MACpBC,EAASt6C,GAAWo6C,EAE1B,OACEhe,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,iBACXymC,GAAajd,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,qBAAqB4sB,IAAK8a,EAAQ7jD,MAAOA,EAAOC,OAAQA,EAAQ+oC,IAAI,KAClGrD,EAAAA,GAAAA,cAACme,GAAAA,EAAY,CAACH,aAAcE,EAAQE,UAAWhyD,QAAQ6wD,GAAY5iD,MAAOA,EAAOC,OAAQA,IAG/F,CArC2B+jD,CAAgBxB,EAAgBE,EAAcE,GACjEjd,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,gBACbwpB,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,QAAQqrB,IAAI,QACxB4a,GAAclO,EAAAA,GAAAA,GAAWkO,GAAgB,GAAE5yD,EAAK,oBAAoBkd,EAAQ,EAAK,KAAG0D,EAAQ1D,GAAU,MAEzGi5B,EAAAA,GAAAA,cAAA,KAAG6B,IAAI,QACL7B,EAAAA,GAAAA,cAACse,GAAAA,EAAc,CAACz0D,KAAMA,EAAMQ,QAASA,EAASk0D,QAASnyD,QAAQywD,MAEjE7c,EAAAA,GAAAA,cAACwe,GAAAA,EAAY,OAEdjB,GACCvd,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACL/8B,KAAK,OACLoR,UAAU,gBACVmrB,QAAS8b,EACTgB,uBAAqB,EACrBrJ,aAAe3jD,EAAAA,QAAkC/L,EAAnBi4D,EAC9BtI,aAAe5jD,EAAAA,QAAoC/L,EAArBk4D,GAE7BL,EAAa70D,OAIhB,I,iHClHJg2D,GAAkB,CAAErkD,MAAO,IAAKC,OAAQ,KACxCqkD,GAAe,I,4BCgCrB,MAAMC,GAAyC,CAC7C,GAAK,IACL,IAAM,GACN,EAAG,EACH,IAAK,IACL,EAAG,KAECC,GAAuB9xD,OAAOC,KAAK4xD,IAAgBp0D,OAAOL,IAAIiD,QA2SpE,IAAem2C,EAAAA,EAAAA,KACb,CAACp+C,GAAUkF,cACT,MAAMS,GAASC,EAAAA,EAAAA,IAAa5F,EAAQkF,GAC9B1C,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQkF,EAAQ/E,SAClC,OACJsI,EAAM,aAAEC,EAAY,QAAEC,EAAO,qBAAEG,IAC7B9H,EAAAA,EAAAA,IAAehB,GAAQ4I,YAE3B,MAAO,CACLjD,SACAnD,OACAiG,SACAC,eACAI,uBACAH,UACD,GAfL,EAtS+CgxD,EAC7Cz0D,UACAmsB,YACAuoC,OACAj0D,SACAnD,OACAiG,SACAC,eACAI,uBACAH,cAEA,MAAM,qBACJkxD,EAAoB,2BACpBC,EAA0B,oBAC1BC,EAAmB,aACnBxxD,EAAY,iBACZyxD,IACE3hC,EAAAA,EAAAA,MAGE2nB,GAAMtB,EAAAA,EAAAA,IAAuB,MAC7Bh6C,GAAO+3C,EAAAA,GAAAA,MACP,SAAE4C,IAAaC,EAAAA,EAAAA,OACf,MAAE2a,EAAK,MAAExvC,EAAK,MAAEmnB,IAAUC,EAAAA,EAAAA,IAAkB3sC,GAC5Cg1D,EAAUjzD,QAAQwjB,GAASmnB,GAC3BuoB,EAA6BD,IAAYD,GAAOG,UAAY,GAAKC,EAAAA,IACjEC,EAAa30D,GAASG,EAAAA,EAAAA,IAAepB,EAAMiB,QAAUpF,EACrDg6D,EAAY1wB,GAAAA,IAA0BguB,EAAAA,EAAAA,IAAoB3yD,EAAS,WACnEs1D,EDrEwBC,EAC9Bv1D,EAAqBS,EAA4BnD,KAEjD,MAAMkC,GAAO+3C,EAAAA,GAAAA,MAEP,MAAEwd,EAAK,MAAExvC,IAAUonB,EAAAA,EAAAA,IAAkB3sC,GACrCqL,EAAQ0pD,EAASA,EAAM1pD,OAAS0pD,EAAMS,SAAYjwC,EAAQ,gBAAkB,GAC5EkwC,EAASV,GAAOW,WAAcj1D,IAAUG,EAAAA,EAAAA,IAAepB,EAAMiB,GAC7Dk1D,EAASr4D,IAAQ+V,EAAAA,EAAAA,GAAa7T,EAAMlC,IAAU,WAE9Cs4D,EAAkBb,IAASc,EAAAA,EAAAA,IAAiBd,KAAUpC,EAAAA,EAAAA,IAAoB3yD,EAAS,aACnF80B,EAAar0B,IAAUq1D,EAAAA,EAAAA,IAAkBr1D,EAAQ,OACjDiM,EAAQqoD,GAASa,GAAoBrwC,GAASuP,EAC9C+b,GAAQuH,EAAAA,GAAAA,GAAS1rC,GAEjBqO,GAAOu9B,EAAAA,EAAAA,KAAQ,IA2BvB,SAAsByc,EAAkBxvC,EAAkBtW,GACxD,IAAKA,EAAK,OAAOolD,GACjB,GAAIU,EAAO,CACT,IAAKA,EAAMgB,gBAAgBjzD,OAAQ,OACnC,MAAMkzD,EAAYjB,EAAMgB,eAAevvD,MAAMuU,GAAuB,MAAdA,EAAKze,OAC3D,OAAO05D,GAAajB,EAAMgB,eAAe,EAC3C,CAEA,OAAIxwC,EACK0wC,GAAAA,QADT,CAKF,CAvCWC,CAAanB,EAAOxvC,EAAOsrB,IACjC,CAACkkB,EAAOlkB,EAAOtrB,KACVjlB,OAAQ2O,IAAQknD,EAAAA,GAAAA,IAAS,IAanC,SAAyBlnD,EAAc8L,GACrC,IAAK9L,EAAK,OAAO4a,QAAQusC,QAAQC,IACjC,IAAKt7C,EAAM,OAAOG,EAAAA,EAAAA,IAAYjM,EAAKqlD,GAAcA,IACjD,MAAMjwB,EAAM97B,KAAK87B,IAAItpB,EAAK/K,MAAO+K,EAAK9K,QACtC,GAAIo0B,EAAMiwB,GAAc,CACtB,MAAMgC,EAAQhC,GAAejwB,EAC7B,OAAOkyB,EAAAA,EAAAA,IAAWtnD,EAAKqnD,EACzB,CACA,OAAOzsC,QAAQusC,QAAQnnD,EACzB,CArBIunD,CAAgB3lB,EAAO91B,IACtB,CAAC81B,EAAO91B,GAAOs7C,IAClB,OAAO/d,EAAAA,EAAAA,KAAQ,KACNme,EAAAA,GAAAA,IAAmB,CACxBprD,QACAoqD,SACAE,QACAe,QAAS,CAAC,CAAE3d,IAAK9pC,OAElB,CAAC0mD,EAAOF,EAAQpqD,EAAO4D,GAAK,ECyCTsmD,CAAwBv1D,EAASS,EAAQnD,IAEzD,UACJq5D,EAAS,KACTC,EAAI,UACJC,EAAS,iBACTC,EAAgB,qBAChBC,EAAoB,QACpB15C,EAAO,OACP25C,EAAM,UACNC,EAAS,YACTC,EAAW,gBACXC,IACEC,EAAAA,GAAAA,IACFC,EAAAA,GAAAA,IAAYr3D,IACZs3D,EAAAA,EAAAA,IAAiBt3D,GACjBg1D,EAAU,QAAU,QACpBK,OACAh6D,EACAi6D,OACAj6D,GACA,OACAA,OACAA,GACAsqC,EAAAA,EAAAA,IAAe3lC,IACf,IAGI,kBACJu3D,EAAiB,wBACjBC,EAAuB,kBAAEC,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuB9c,GAErB+c,GAAcjd,EAAAA,EAAAA,KAAY,KAC9Bv3C,EAAa,CAAEpI,OAAQ+E,EAAQ/E,OAAQwG,UAAWzB,EAAQ5D,IAAK,GAC9D,CAACiH,EAAcrD,EAAQ/E,OAAQ+E,EAAQ5D,KAEpC07D,GAAcld,EAAAA,EAAAA,KAAY,KAC1Bic,GACFF,IAEF7B,KACAiD,EAAAA,GAAAA,MACAnB,GAAM,GACL,CAAC9B,EAAkB+B,EAAWF,EAAWC,IAEtCoB,GAAqBpd,EAAAA,EAAAA,KAAapY,IACtCmyB,EAAqB,CAAEpxD,OAAQi/B,EAAQ,MAEvCy0B,EAAUz0B,EAAQ,IAAI,GACrB,CAACmyB,EAAsBsC,IAEpBgB,GAAoBrd,EAAAA,EAAAA,KAAY,KAChCxzC,EAAAA,KAAiB4d,EAAAA,KACrBkyC,IACArC,EAAoB,CAAEpxD,SAAUA,IAAU,GACzC,CAACA,EAASoxD,EAAqBqC,IAE5BgB,GAAqBtd,EAAAA,EAAAA,KAAY,CAACud,EAAiBvsD,GAAW,KAClE,MAAMwsD,EAAO7D,GAAe4D,GACtBE,EA5FoB,IA4FHF,GAAqCvsD,EAC5DgpD,EAA2B,CAAEpxD,aAAc40D,EAAMx0D,qBAAsBy0D,IACvElB,EAAgBkB,EAAiBD,EA9FP,EA8FoC,GAC7D,CAACxD,EAA4BuC,IAE1BmB,GAAsB1d,EAAAA,EAAAA,KAAY,KACtC8c,IACA,MAAMa,EAAUx1D,OAAOL,OAAOsf,QAAQuyC,IAAgB/tD,MAAK,EAAE,CAAE4xD,KAAUA,IAAS50D,MAAgB,KAnGxE,EAqGpBg1D,GAAe50D,EAErBs0D,EACEM,GAxGwB,IAwGTD,EAvGc,EAuGmDA,EAChFC,EACD,GACA,CAACd,EAAwB9zD,EAAsBJ,EAAc00D,IAE1DO,GAAqB7d,EAAAA,EAAAA,KAAY,KACrC,MAAM8d,EAAch2D,OAAOsf,QAAQuyC,IAAgB/tD,MAAK,EAAE,CAAE4xD,KAAUA,IAAS50D,MAAgB,IA9GrE,EAgHpBnF,EAAQ,GAhHY,IAgHVmF,EA/Ge,EA+GuDk1D,KACtF,OACE/iB,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,oBACZorC,GAAqB5hB,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,oBAAoBmrB,QAASogB,IAElE/hB,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACL7kC,OAAK,EACLkZ,WAAWssB,EAAAA,GAAAA,GACT,kBAAmB70C,GAAwB,UAAW2zD,GAAqB,UAE7E5f,MAAM,cACN58B,KAAK,UACLqjC,UAAU,gBACVrD,QAASZ,EACT4Q,aAAc0M,EACdngB,QAASghB,EACTjI,YAAamH,EACbmB,cAAelB,GAEf9hB,EAAAA,GAAAA,cAAA,QAAMxpB,WAAWssB,EAAAA,GAAAA,GACf,wBACgB,IAAhBp6C,EAAKyE,QAAgB,QACL,IAAhBzE,EAAKyE,QAAgB,SAGpBzE,IAGD,GAEP,CACDm5D,EAAyBC,EAAmBC,EAAwBY,EAAqBf,EACzFpd,EAAUv2C,EAAsBJ,IAG5Bo1D,IAAatgB,EAAAA,EAAAA,KAAQ,IACV,IAAX/0C,GAAgBE,EAAgB,aAChCF,EAAS,GAAY,gBACrBA,EAAS,GAAY,gBAClB,iBACN,CAACA,EAAQE,IAEZ,IAAIixD,EAIJ,OACE/e,EAAAA,GAAAA,cAAA,OAAKxpB,WAAWssB,EAAAA,GAAAA,GAAe,cAAetsB,GAAYqrB,IAAKh4C,EAAKi4C,MAAQ,WAAQp8C,EAAWy/C,IAAKA,GAClGnF,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,sBAAsBmrB,QAASugB,GAC3C9C,EA+FT,SAAqBA,GACnB,MAAM,MAAE1pD,EAAK,UAAEqqD,EAAS,SAAEF,GAAaT,EAEvC,OACEpf,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,QAAQqrB,IAAI,SAAQ0M,EAAAA,GAAAA,GAAW74C,GAASmqD,IACtDE,GACC/f,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,WAAWqrB,IAAI,SAAQ0M,EAAAA,GAAAA,GAAWwR,IAIzD,CA1GiBmD,CAAY9D,GA4G7B,SAAqB+D,EAAkB1D,GACrC,OACEzf,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,QAAQqrB,IAAI,QAAQ4d,IAAclR,EAAAA,GAAAA,GAAWkR,IAC5Dzf,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,WAAWqrB,IAAI,QAAQshB,GAG5C,CAnHsCC,CAAYv5D,EAAK,eAAgB41D,GAC/Dzf,EAAAA,GAAAA,cAACwe,GAAAA,EAAY,OAGfxe,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACL7kC,OAAK,EACL8nC,QAASZ,EACTxC,MAAM,cACN58B,KAAK,UACLoR,UAAU,gBACV6sC,SAAU37C,IACVi6B,QAASyf,EACT3Y,UAAU,kBAEVzI,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,wBAEfwpB,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACL7kC,OAAK,EACL8nC,QAASZ,EACTxC,MAAM,cACN58B,KAAK,UACLoR,WAAWssB,EAAAA,GAAAA,GAAe,cAAe,gBAAiBoe,EAAY,QAAU,QAChFvf,QAASqf,EACTvY,UAAWyY,EAAY,cAAgB,cAEvClhB,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,cACbwpB,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,gBAEfwpB,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACL7kC,OAAK,EACL8nC,QAASZ,EACTxC,MAAM,cACN58B,KAAK,UACLoR,UAAU,gBACV6sC,SAAUhC,IACV1f,QAASwf,EACT1Y,UAAU,cAEVzI,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,oBAGfwpB,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,yBACbwpB,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACL7kC,OAAK,EACLkZ,UAAU,8BACVwrB,MAAM,cACN58B,KAAK,UACLqjC,UAAU,SACV9G,QAAS2gB,EACTld,QAASZ,GAETxE,EAAAA,GAAAA,cAAA,KAAGxpB,UAAWysC,OAGd5zC,EAAAA,IACA2wB,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,yBACbwpB,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,yBACfwpB,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,iBACbwpB,EAAAA,GAAAA,cAACsjB,GAAAA,EAAW,CAACC,MAAI,EAAC12B,MAAO/+B,EAAU,EAAa,IAATF,EAAc++C,SAAU0V,OAMtE/C,GACCtf,EAAAA,GAAAA,cAAC4L,GAAAA,EAAY,CACX4X,UAAW5B,EACX5V,UAAU,QACVyX,UAAU,MACVjtC,UAAU,qBACVq1B,QAASiX,EACTpd,QAASqc,EACT2B,OAAQ1B,EACR2B,qBAAsB5B,GAErBlD,GAAqB10D,KAAKs4D,GA0CrC,SACEA,EAAcmB,EAAqBjiB,EACnC1zC,GAEA,MAAM41D,EAAcD,IAAgBhF,GAAe6D,IAASx0D,GA1RhC,IA2RtBw0D,IAAmCx0D,EACzC,OACE+xC,EAAAA,GAAAA,cAACqL,GAAAA,EAAQ,CACP1O,IAAK8lB,EAEL9gB,QAASA,IAAMA,EAAQ8gB,GACvBnX,KAAMuY,EAAa,aAAUn+D,EAC7Bo+D,WAAaD,OAAkDn+D,EAArCs6C,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,sBAEtCisC,EAAK,IAGZ,CA1DmBsB,CAA2BtB,EAAM50D,EAAc00D,EAAoBt0D,MAKhF+xC,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACL7kC,OAAK,EACLkZ,UAAU,eACVwrB,MAAM,cACN58B,KAAK,UACLu8B,QAASwgB,EACT1Z,UAAU,gBAEVzI,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,gBAEX,I,2BCzRV,MAgJA,IAAempB,EAAAA,EAAAA,KAAK4D,EAAAA,EAAAA,KAClB,CAACp+C,GAAUG,aAAQ,CACjB6X,cAAehY,EAAOgY,cACtBxV,MAAMC,EAAAA,EAAAA,IAAWzC,EAAQG,GACzBkjB,MAAM4Y,EAAAA,EAAAA,IAAS97B,IAAUghB,EAAAA,EAAAA,IAAWnhB,EAAQG,QAAUI,KAJtC69C,EAhJ+BygB,EACjD1+D,SAAQkxB,YAAW7uB,OAAM6gB,OAAMhO,WAAU2C,oBAEzC,MAAM,qBACJ8mD,EAAoB,aACpBC,EAAY,WACZC,EAAU,WACVC,EAAU,aACVC,EAAY,eACZC,EAAc,cACdC,EAAa,mBACbC,EAAkB,oBAClBC,IACEjnC,EAAAA,EAAAA,MAEE3zB,GAAO+3C,EAAAA,GAAAA,MACN8iB,EAAsBC,EAAoBC,IAAuB3gB,EAAAA,GAAAA,MACjE4gB,EAAkBC,IAAuBjkB,EAAAA,EAAAA,KAAkB,IAC3DkkB,EAAkBC,IAAuBnkB,EAAAA,EAAAA,KAAkB,IAC5D,WAAElvB,GAAehqB,GAAQ,CAAC,GAC1B,eACJs9D,EAAc,cAAEC,EAAa,cAAEC,EAAa,gBAAEC,GAC5C5qD,GAAY,CAAC,EACX6qD,EAAe19D,IAAQ29D,EAAAA,EAAAA,IAAiB39D,GAExC49D,GAAmBtgB,EAAAA,EAAAA,KAAY,KACnCgf,EAAqB,CAAEpvD,OAAQvP,IAC3B2/D,GACFT,EAAmB,CAAE/9D,GAAInB,GAC3B,GACC,CAAC2+D,EAAsBgB,EAAgBT,EAAoBl/D,IAExDkgE,GAAqBvgB,EAAAA,EAAAA,KAAY,KACrC2f,IACAV,EAAa,CAAEuB,UAAWngE,EAAQqsB,WAAYA,IAC1CuzC,GAAiBL,GACnBV,EAAW,CAAE7+D,WAEXy/D,GACFX,EAAW,CAAE9+D,UACf,GACC,CACDqsB,EAAYuyC,EAAcU,EAAqBR,EAAYD,EAAYe,EAAeH,EACtFF,EAAkBv/D,IAGdogE,GAAyBzgB,EAAAA,EAAAA,KAAY,KACzCwf,EAAoB,CAAEn/D,UAAS,GAC9B,CAACA,EAAQm/D,IAENkB,GAAuB1gB,EAAAA,EAAAA,KAAY,KACvC2f,IACAT,EAAW,CAAE7+D,WACT+/D,GACFf,EAAe,CAAEh/D,SAAQuP,OAAQsI,IACjConD,EAAc,CAAEj/D,SAAQ+jB,oBAAoB,KAE5Cg7C,EAAa,CAAE/+D,UACjB,GACC,CACDA,EAAQs/D,EAAqBznD,EAAemnD,EAAgBC,EAAec,EAAchB,EAAcF,IAGzG,GAAK3pD,EAIL,OACEwlC,EAAAA,GAAAA,cAAA,OAAKxpB,WAAWssB,EAAAA,GAAAA,GAAe,kBAAmBtsB,GAAYqrB,IAAKh4C,EAAKi4C,MAAQ,WAAQp8C,GACrFy/D,GACCnlB,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACLyjB,QAAM,EACNpQ,OAAK,EACLpwC,KAAK,OACLoR,UAAU,0BACVmrB,QAAS4jB,GAER17D,EAAK,wBAGTu7D,GACCplB,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACLH,MAAM,SACN4jB,QAAM,EACNpQ,OAAK,EACLpwC,KAAK,OACLoR,UAAU,0BACVmrB,QAASgjB,GAER96D,EAAK,0BAGTq7D,IAAkBE,GACjBplB,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACLH,MAAM,SACN4jB,QAAM,EACNpQ,OAAK,EACLpwC,KAAK,OACLoR,UAAU,0BACVmrB,QAASgjB,GAER96D,EAAK,8BAGVm2C,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACL7kC,OAAK,EACL8nC,QAAM,EACNhgC,KAAK,OACL48B,MAAM,cACNL,QAAS+jB,EACTjd,UAAW5+C,EAAK,UAEhBm2C,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,gBAEfwpB,EAAAA,GAAAA,cAAC6d,GAAAA,EAAa,CACZ32D,OAAQw9D,EACRhf,QAASkf,EACTlvD,MAAO7L,EAAK,iBAAkB2e,GAAOiU,EAAAA,EAAAA,IAAuBjU,IAAQ9K,EAAAA,EAAAA,GAAa7T,EAAMlC,IACvFe,KAAM8f,EACF3e,EAAK,mCAAmCioB,EAAAA,EAAAA,IAAgBtJ,IACxD3e,EAAK,mCACTg8D,sBAAoB,EACpB/H,aAAcj0D,EAAK,SACnBk0D,eAAgBv1C,EAAOg9C,EAAqBG,GAE3Cn9C,GACCw3B,EAAAA,GAAAA,cAAC8lB,GAAAA,EAAQ,CACPta,MAAO3hD,EAAK,kBACZ4hD,QAASsZ,EACTgB,QAASf,IAGZx8C,GAAQ08C,GACPllB,EAAAA,GAAAA,cAAC8lB,GAAAA,EAAQ,CACPta,MAAO3hD,EAAK,cACZ4hD,QAASoZ,EACTkB,QAASjB,KAIX,KCoTV,IAAenlB,EAAAA,EAAAA,KAAK4D,EAAAA,EAAAA,KAClB,CAACp+C,GACCG,SAAQC,WAAUqE,kBAAiB46C,eAEnC,MAAM,kBACJnuC,EAAiB,4BAAE65C,EAA2B,YAAEniD,EAAW,aAAEuI,IAC3DnQ,EAAAA,EAAAA,IAAehB,IACb,aAAE+3B,GAAiB/3B,EACnBwC,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,IAExBA,OAAQ0gE,EAAal6D,UAAWm6D,GAAmBl4D,EACrDm4D,EAAeF,GAAeC,GAChCvsD,EAAAA,EAAAA,IAAkBvU,EAAQ6gE,EAAaC,QACvCvgE,EAEJ,IAAImtB,EACJ,GAAwB,WAApBjpB,EAA8B,CAChC,MAAM4vC,GAAYC,EAAAA,EAAAA,IAAgBt0C,EAAQG,EAAQC,GAClDstB,EAAgB2mB,GAAWrsC,MAC7B,MAAO,GAAwB,cAApBvD,EAAiC,CAC1C,MAAM0iB,GAAeysB,EAAAA,EAAAA,IAAmB5zC,EAAQG,EAAQC,GACxDstB,EAAgBvG,GAAcnf,MAChC,MAAO,GAAwB,WAApBvD,GAAgCrE,IAAamB,EAAAA,GAAgB,CACtE,MAAM4G,GAAaC,EAAAA,EAAAA,IAAiBpI,EAAQG,EAAQC,GACpDstB,EAAgBvlB,GAAYulB,eAAiB,CAC/C,CAEA,MAAMszC,EAAmC,WAApBv8D,GAAgCrE,IAAamB,EAAAA,GAC5D0/D,EAAgBz+D,IAAQ0+D,EAAAA,EAAAA,IAAoBlhE,EAAQwC,GACpD2+D,EAAgBl6D,QAAQg6D,IAAiBG,EAAAA,EAAAA,IAAoBphE,EAAQG,IACrEkhE,EAAcJ,IAAkBE,GAAiBl6D,SAAQq6D,EAAAA,EAAAA,IAA0BthE,EAAQG,IAI3FohE,EAAet6D,QACnBzE,IAASw+D,GAAgBx+D,EAAKE,YAAa8+D,EAAAA,EAAAA,IAAch/D,KAASi/D,EAAAA,EAAAA,IAAiBj/D,KAAUA,EAAK6rC,aAE9FqzB,EAAwBz6D,QAAQzE,GAAM6rC,aAAe7rC,EAAKm/D,eAC1DnzB,GAAeE,EAAAA,EAAAA,IAAkB1uC,EAAQG,EAAQC,EAAU,gBAC3DwhE,GAAiB5gE,EAAAA,EAAAA,IAAehB,GAAQ4hE,eAExC3oB,EAAoB,CACxBzK,eACAt9B,oBACA2wD,oBAAoB54D,EAAAA,EAAAA,IAAyBjJ,EAAQq/C,GACrDyiB,oBAAoBC,EAAAA,EAAAA,IAAqB/hE,GACzC+gE,eACAv+D,OACAkrB,gBACAs0C,gBAAgBC,EAAAA,EAAAA,IAAqBjiE,EAAQG,GAC7C43B,eACAgzB,8BACAmX,qBAAsBz0D,KAAKC,IAAI,EAAGyD,EAAanJ,OAAS,GACxDkwB,gBAAiBl4B,EAAOk4B,gBACxBT,UAAWz3B,EAAOy3B,UAClB0qC,kBAAmBd,GAAeF,GAAiBI,GAAgBG,EACnEU,0BAA2BR,GAAkBA,EAAeS,mBAGxD1tB,GAAe7vC,EAAAA,EAAAA,IAAmB9E,EAAQG,GAChD,GAAwB,WAApBsE,IAAiCkwC,EACnC,OAAOsE,EAKT,GAFArxC,OAAO06D,OAAOrpB,EAAO,CAAEtE,iBAEnBv0C,IAAamB,EAAAA,KAAmBiB,GAAME,QAAS,CACjD,MAAM6/D,GAAkB3hD,EAAAA,EAAAA,IAAyB5gB,EAAQG,EAAQC,GAC3D8E,EAAUq9D,GAAkBhuD,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQoiE,QAAmBhiE,EACjFiiE,EAAmBt9D,GAAUu9D,EAAAA,EAAAA,IAAsBziE,EAAQkF,QAAW3E,EACtE4H,GAAaC,EAAAA,EAAAA,IAAiBpI,EAAQG,EAAQC,GAEpD,MAAO,IACF64C,EACHypB,iBAAkBH,EAClBI,UAAU,EACVH,mBACAI,WAAY37D,QAAQkB,GAAY06D,iBAEpC,CAEA,MAAMH,GAAmBpuB,EAAAA,EAAAA,IAAgBt0C,EAAQG,EAAQC,GACzD,GAAIsiE,GAAkB16D,OAAQ,CAC5B,MAAM86D,EAAqBnuB,EAAa+tB,EAAiB,KACnD,SACJC,GACGG,IAAsB39D,EAAAA,EAAAA,IAA4BnF,EAAQ8iE,EAAoB1iE,IAAc,CAAC,EAElG,MAAO,IACF64C,EACHypB,mBACAC,WAEJ,CAEA,OAAO1pB,CAAK,GA/FImF,EA1X4B2kB,EAC9C5iE,SACAC,WACAqE,kBACAu+D,UACA3jB,WACAqjB,mBACA/tB,eACAguB,WACAH,mBACAh0B,eACAszB,qBACA5wD,oBACA2wD,qBACAd,eACAv+D,OACAkrB,gBACAk1C,aACAZ,iBACAjqC,eACAoqC,oBACApX,8BACAmX,uBACAhqC,kBACAkqC,2BACA3qC,gBAEA,MAAM,iBACJ4I,EAAgB,WAChB4iC,EAAU,aACV16D,EAAY,SACZjF,EAAQ,iBACR4/D,EAAgB,yBAChBC,EAAwB,mBACxBC,EAAkB,iBAClBC,EAAgB,sBAChBlhE,IACEk2B,EAAAA,EAAAA,MAEE3zB,GAAO+3C,EAAAA,GAAAA,KACP6mB,GAAqB5kB,EAAAA,EAAAA,KAAO,IAC3B6kB,EAAgCC,IAAmC9nB,EAAAA,EAAAA,KAAS,IAC7E,SAAE+nB,IAAankB,EAAAA,EAAAA,OAEdokB,EAAoBC,IAAyBjoB,EAAAA,EAAAA,IAAS,GACvD6mB,EAAkBt/B,MAAM2gC,QAAQlB,GAAoBA,EAAiBgB,GAAsBhB,EAC3FmB,EAAgBlvB,GAAgB4tB,EAAkB5tB,EAAa4tB,QAAmBhiE,EAClFujE,EAAsB7gC,MAAM2gC,QAAQlB,GACtCA,EAAiB16D,OAAU06D,EAAmB,OAAIniE,EAChDwjE,EAAkBvhE,IAAQ+V,EAAAA,EAAAA,GAAa7T,EAAMlC,GAAMwF,OACnDg8D,EAAkBxB,GAAmB18D,EAAAA,EAAAA,IAAepB,EAAM89D,QAAoBjiE,GAC9E,SAAE8U,GAAa7S,GAAQ,CAAC,EACxBE,EAAUF,GAAME,SAEtBu3C,EAAAA,EAAAA,KAAU,KACJliB,GAAgBirC,IAAY5iE,IAAamB,EAAAA,IAAkBmB,IAC7D0gE,EAAmB,CAAEjjE,SAAQC,YAC/B,GACC,CAACD,EAAQijE,EAAoBrrC,EAAc33B,EAAU4iE,EAAStgE,KAGjEu3C,EAAAA,EAAAA,KAAU,KACR0pB,EAAsB,GACtBH,GAAgC,EAAM,GACrC,CAACd,KAEJzoB,EAAAA,EAAAA,KAAU,KACR,GAAImoB,GAA4BmB,EAAgC,CAC9DJ,EAAyB,CAAEv5D,YAAY,IACvC45D,GAAgC,GAEhC,MAAM17D,GAAWm8D,EAAAA,GAAAA,GAAcH,GAAuB,EAAGJ,EAAqB,GAC9EC,EAAsB77D,EACxB,IACC,CACDs6D,EAA0BmB,EAAgCG,EAAoBI,EAC9EX,KAGFe,EAAAA,GAAAA,GAAiB/jE,EAAQoiE,EAAiBsB,GAE1C,MAAQ3uD,MAAOk0B,KAAgB+6B,EAAAA,GAAAA,KAEzBC,GAAuBh7B,IAAeI,EAAAA,IACtC66B,GAAwBZ,GAAYvyD,EAGpCozD,IAAe5lB,EAAAA,EAAAA,IAAuB,MACtC6lB,IAAqB7lB,EAAAA,EAAAA,KAAgB,GAErC8lB,IAAoB1kB,EAAAA,EAAAA,KAAY,KACpCzf,EAAiB,CAAE/+B,GAAInB,EAAQC,YAAW,GACzC,CAACigC,EAAkBlgC,EAAQC,IAExB+3D,IAAqBrY,EAAAA,EAAAA,KAAan5C,IACtCs8D,EAAW,CAAEt8D,YAAWmd,SAAS,GAAO,GACvC,CAACm/C,IAEEwB,IAA2B3kB,EAAAA,EAAAA,KAAY,KACvC+jB,IACFt7D,EAAa,CACXpI,OAAQ0jE,EAAc1jE,OAAQC,WAAUuG,UAAWk9D,EAAcviE,GAAII,mBAAmB,IAG1F8hE,GAAgC,GAClC,GACC,CAACK,EAAet7D,EAAcnI,IAE3BskE,IAAuB5kB,EAAAA,EAAAA,KAAY,KACvCx8C,EAAS,CAAEhC,GAAInB,EAAQC,WAAUoB,KAAM,UAAW,GACjD,CAAC8B,EAAUnD,EAAQC,IAEhBukE,IAAsB7kB,EAAAA,EAAAA,KAAY,KACtCz2C,YAAW,KACTi6D,EAAmB/xC,SAAU,CAAI,GApJL,IAqJD,GAC5B,IAEGqzC,IAAkB9kB,EAAAA,EAAAA,KAAatuC,IACnC,GAAK8xD,EAAmB/xC,QAAxB,CAIA,GADA+xC,EAAmB/xC,SAAU,EACzB8tB,EAAU,CACZ,MAAMwlB,EAAe70D,SAASmqC,cAA8B2qB,EAAAA,KAC5DD,GAAc3nC,MAChB,CAEA,GAAI4kC,EAGF,OAFA3/D,SACAwiE,KAIF,GAAwB,WAApBlgE,GAAyD,IAAzBy9D,EAUlC,OATKuB,GAAYY,IACf7yD,EAAEqxC,kBACFv/C,EAAS,CAAEhC,QAAIf,GAAa,CAAEskD,uBAAuB,KAErDwe,SAGFsB,KAKFzB,IACAyB,IA7BuC,CA6BlB,GACpB,CACDtlB,EAAUyiB,EAAoBr9D,EAAiBy9D,EAAsByC,GAAqBlB,EAC1FY,KAGIU,GACJ37B,IAAeI,EAAAA,KACZJ,GAAc47B,EAAAA,KAEjB57B,GAAc67B,EAAAA,KACX77B,GAAcI,EAAAA,OACZu6B,GAAmBA,EAAkB,IAEtCmB,GAA6BH,IACjC37B,GAAcE,EAAAA,KACXF,GAAc+7B,EAAAA,IAGbC,GAAkBn+D,QAAQoO,GAAU2qD,eAAiB3qD,GAAU4qD,iBAAmB5qD,GAAU0qD,gBAEhG5S,aAAckY,GACdhY,qBAAsBiY,KACpBhY,EAAAA,GAAAA,GAAkB8X,IAChBG,IAAwBC,EAAAA,GAAAA,GAAiBJ,GAAkB/vD,OAAW9U,GAAW,IAGrF4sD,aAAcsY,GACdpY,qBAAsBqY,KACpBpY,EAAAA,GAAAA,GAAkBrmD,QAAQ85D,IAExB4E,IAAwBH,EAAAA,GAAAA,GAAiBzE,GAAc,IAG3D5T,aAAcyY,GACdvY,qBAAsBwY,KACpBvY,EAAAA,GAAAA,GAAkBrmD,QAAQ48D,IAExBiC,IAAyBN,EAAAA,GAAAA,GAAiB3B,GAAe,GACzDkC,IAA+BP,EAAAA,GAAAA,GAAiB1B,GAAqB,GACrEkC,IAAoBR,EAAAA,GAAAA,GAAiB7C,GAAU,GAC/CsD,IAA8BT,EAAAA,GAAAA,GAAiBxB,GAE/CkC,IAAoBrc,EAAAA,GAAAA,GAAYqY,GAChC9R,QACkB7vD,IAAtB2lE,IAAmCA,GAAoBhE,EAAuBgE,QAAoB3lE,EAG9F4lE,GAAkBP,IAA6BE,IAC/CL,IAA2BE,IAGjC1rB,EAAAA,EAAAA,KAAU,KACR,MAAMmsB,EAAc9B,GAAa/yC,QACjC,GAAK60C,EAIL,OAAKlB,IAA+BiB,QAMhCtE,GAAsBkD,IACpBR,GAAmBhzC,UACrB60C,EAAYniB,UAAUjhB,IAAI,gBAAiB,YAC3CuhC,GAAmBhzC,SAAU,GAI/BloB,YAAW,KACT+8D,EAAYniB,UAAUgF,OAAO,WAAW,GA/PrB,OAkQrBmd,EAAYniB,UAAUgF,OAAO,iBAC7Bsb,GAAmBhzC,SAAU,KAjB7B60C,EAAYniB,UAAUgF,OAAO,gBAAiB,iBAC9Csb,GAAmBhzC,SAAU,GAiB/B,GACC,CAAC2zC,GAA4BiB,GAAgBpB,GAA6BlD,IAE7E,MAAM,qBAAEvlB,IAAyBjB,GAAoB32C,EAAMwzB,EAAiBT,GAAW,GAiEvF,SAAS4uC,GAAiBC,GAAU,EAAOC,GAAoB,GAC7D,OACE1rB,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,eACbwpB,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACL7kC,OAAK,EACL8H,KAAK,UACL48B,MAAM,cACNL,QAASooB,GACTthB,UAAW5+C,EAAK4hE,EAAU,QAAU,SAEpCzrB,EAAAA,GAAAA,cAAA,OAAKxpB,WAAWssB,EAAAA,GAAAA,GAAe,uBAAwB2oB,GAAW,iBAEnEC,GAAqB1rB,EAAAA,GAAAA,cAACC,GAAa,MAG1C,CAEA,MAAM0rB,GAAwBv/D,QAAQw+D,IAA2BE,IAC3Dc,GAA4BD,KAC3BnnB,GAAY8iB,GAAqB/4B,GAAcs9B,EAAAA,IAEtD,OACE7rB,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,eAAe2uB,IAAKskB,IACjCzpB,EAAAA,GAAAA,cAACiC,GAAAA,EAAU,CACTtP,KAAMud,EAA8B,OAAS,aAC7ChO,UAAWmlB,EACX/R,eAAa,EACbC,oBAAqBA,IAzFD,WAApB3rD,GACErE,IAAamB,EAAAA,KAAkBiB,GAAME,QAMzCm4C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACGwrB,KACDxrB,EAAAA,GAAAA,cAAA,eACqBt6C,IAAlBmtB,EACqB,WAApBjpB,EACEC,EAAKk+D,EAAa,gBAAkB,UAAWl1C,EAAe,KACxC,WAApBjpB,EAAgCC,EAAK,sBAAuBgpB,EAAe,KACrD,cAApBjpB,EACAu9D,EAAiBt9D,EAAK,aAAeA,EAAK,WAAYgpB,EAAe,UACnEntB,EACNmE,EAAK,aAQbm2C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,MACIupB,IAAwBlC,EAAuB,IAAMmE,GAAiBhC,IAAuB,GAC/FxpB,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,oBAAoBmrB,QAASgoB,KACzCvoC,EAAAA,EAAAA,IAAS97B,GACR06C,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAe,CACdnvB,IAAKr3C,EACLuP,OAAQvP,EACRquC,aAAcA,EACd/1B,OAAQ6jC,GACRsqB,SAAU3/D,QAAQq1C,IAClBuqB,cAAY,EACZC,iBAAe,EACfC,oBAAkB,EAClBC,gBAAiBhE,EACjBiE,gBA/SY,GAgTZC,OAAK,IAGPrsB,EAAAA,GAAAA,cAACssB,GAAAA,EAAa,CACZ3vB,IAAKr3C,EACLA,OAAQA,EACRC,SAAUA,EACVouC,aAAcA,EACd/1B,OAAQ6jC,GACRsqB,SAAU3/D,QAAQq1C,IAClBwqB,gBAAiB1mE,IAAamB,EAAAA,GAC9BslE,aAAczmE,IAAamB,EAAAA,GAC3BwlE,oBAAkB,EAClBC,gBAAiBhE,EACjBkE,OAAK,OAwCZ9mE,IAAamB,EAAAA,KAAmBiB,GAAME,SACrCm4C,EAAAA,GAAAA,cAACusB,GAAAA,EAAgB,CACfC,gBACGzB,IAA6B3+D,QAAQ6+D,KACpCL,IAA2Bx+D,QAAQ0+D,IAEvCxlE,OAAQA,IAIXylE,IAA6BE,IAC5BjrB,EAAAA,GAAAA,cAACwc,GAAmB,CAClB7f,IAAKr3C,EACL+E,QAAS4gE,GACTxgD,MAAOygD,IAAgC,EACvCnkD,MAAO8hD,EACPpM,YAAa2O,GACb50C,WAAWssB,EAAAA,GAAAA,GAAekoB,GAAyBY,IAA6B,cAChFlP,eAAgByO,GAAoB7N,QAAqB53D,EACzDi8C,QAASioB,GACTjN,iBAAkBkN,KAIrBW,IACCxqB,EAAAA,GAAAA,cAACgkB,GAAe,CACdrnB,IAAKr3C,EACLA,OAAQA,EACRkV,SAAUkwD,GACVl0C,UAAWi0C,KAIfzqB,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,gBACZm1C,IACC3rB,EAAAA,GAAAA,cAAC8e,GAAW,CACVniB,KAAK8vB,EAAAA,EAAAA,IAAc3B,IACnBzgE,QAASygE,GACTt0C,UAAWq0C,KAGf7qB,EAAAA,GAAAA,cAAC0sB,GAAAA,EAAa,CACZpnE,OAAQA,EACRC,SAAUA,EACVqE,gBAAiBA,EACjB46C,SAAUA,EACVmoB,kBAAmBhB,MAGnB,KCpdJiB,GAAyB,IAQxB,SAASC,GAAQC,GACtB,MAAO,YAAaA,CACtB,CAEO,SAASC,GAAc7iE,EAAwB0tC,GACpD,IAMIo1B,EANAC,EAAkC,GAClCC,EAAmB,CACrBC,aAAcjjE,EAAS,GAAGmI,KAC1B+6D,UAAUC,EAAAA,GAAAA,IAAiC,IAAnBnjE,EAAS,GAAGmI,MACpCi7D,aAAc,CAACL,IAIjB,MAAMM,EAAiC,CAACL,GAiExC,OA/DAhjE,EAAS0G,SAAQ,CAACvG,EAAS0c,KACrB1c,EAAQ8lC,UACL68B,GAOHA,EAAa9iE,SAASc,KAAKX,GACvBA,EAAQiC,QAAQ5D,OAClBskE,EAAaQ,YAAcnjE,IAR7B2iE,EAAe,CACbS,QAASpjE,EAAQ4E,UACjB/E,SAAU,CAACG,GACXmjE,YAAanjE,GASjB4iE,EAAmBjiE,KAAKX,GAG1B,MAAMqjE,EAAcxjE,EAAS6c,EAAQ,GASrC,IANEimD,GACKU,GAAgBA,EAAYz+D,WAAay+D,EAAYz+D,YAAc+9D,EAAaS,UAErFR,EAAmBjiE,KAAKgiE,GACxBA,OAAetnE,GAEbgoE,EAAa,CACf,MAAMC,GAAyBN,EAAAA,GAAAA,IAAiC,IAAnBK,EAAYr7D,MACrD66D,EAAiBE,WAAaO,GAChCT,EAAmB,CACjBC,aAAcO,EAAYr7D,KAC1B+6D,SAAUO,EACVL,aAAc,IAEhBC,EAAWviE,KAAKkiE,GAEhBD,EAAqB,GACrBC,EAAiBI,aAAatiE,KAAKiiE,KAEnCS,EAAYjnE,KAAOmxC,GAChBvtC,EAAQwP,WAAa6zD,EAAY7zD,UACjCxP,EAAQmI,aAAek7D,EAAYl7D,aACnCo7D,EAAAA,EAAAA,IAAgBvjE,KAChBujE,EAAAA,EAAAA,IAAgBF,IAEjBrjE,EAAQwjE,aAAeH,EAAYG,cAEjCxjE,EAAQwjE,YAAYC,eAAiBJ,EAAYG,YAAYC,cAC1DzjE,EAAQwjE,YAAY79D,aAAe09D,EAAYG,YAAY79D,YAC3D3F,EAAQwjE,YAAYE,iBAAmBL,EAAYG,YAAYE,iBAGnE1jE,EAAQ2jE,eACRN,EAAYM,eACXN,EAAYr7D,KAAOhI,EAAQgI,KAAQu6D,MAEvCK,EAAqB,GACrBC,EAAiBI,aAAatiE,KAAKiiE,GAEvC,KAGKM,CACT,C,oDCzFA,MAAMU,GAAW,IACXC,GAAa,GACbC,GAAwB,G,uDCK9B,MCFMC,GAAkCvsC,EAAAA,GAAa,IAAO,I,4BCCrD,MAAMwsC,GAAgB,CAC3BC,KAAM,EACNC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,GAiDR,SAASC,GAAWC,EAAgBC,GAClC,OAAOD,EAAKhkE,QAAO,CAACkkE,EAAaC,IAASD,EAAcC,GAAMF,EAChE,CAQA,SAASG,GAAuBC,GAC9B,MAAM/rB,EAAwB,CAAE7oC,MAAO,EAAGC,OAAQ,GAalD,OAZA20D,EAAOr+D,SAAQ,EACbs+D,aACAC,YAEIA,EAAQd,GAAcG,QACxBtrB,EAAO7oC,MAAQ60D,EAAW70D,MAAQ60D,EAAW5gC,GAE3C6gC,EAAQd,GAAcI,SACxBvrB,EAAO5oC,OAAS40D,EAAW50D,OAAS40D,EAAW9/B,EACjD,IAGK8T,CACT,CAEO,SAASksB,GACdC,EACAC,EACAC,EACAvP,EACAxb,GAEA,MACMgrB,EArDR,SAAmBtlE,EAAwBs6C,GACzC,OAAOt6C,EAASC,KACbE,IACC,MAAM6kE,GAAaO,EAAAA,GAAAA,GAAyBplE,OAAS3E,OAAWA,EAAW8+C,GAE3E,OAAO0qB,EAAW70D,MAAQ60D,EAAW50D,MAAM,GAGjD,CA6CiBo1D,CAAU1P,EAAM91D,SAAUs6C,GACnCmrB,EA5CR,SAAwBH,GACtB,OAAOA,EAAOrlE,KAAKw2D,GAAWA,EAAQ,IAAM,IAAOA,EAAQ,GAAM,IAAM,MAAOr1D,KAAK,GACrF,CA0CsBskE,CAAeJ,GAC7BK,EAzCR,SAAyBL,GACvB,OAAOA,EAAO5kE,QAAO,CAACD,EAAQg2D,IAAUA,EAAQh2D,GAAQ,GAAK6kE,EAAOriE,MACtE,CAuCuB2iE,CAAgBN,GAC/BO,EAAaP,EAAOriE,OACpB6iE,EAAYR,EAAOh/B,MAAMmwB,GAAUA,EAAQ,IAC3CsP,GAAWC,EAAAA,GAAAA,IAAkBb,EAAOC,GAAa,EAAOC,EAAW/qB,IAAa8qB,EAAc,IAAM,GAAKthC,GAAAA,GAG/G,IAAIihC,EAEJ,MAAMhpD,EAAS,CACbupD,SACAG,cACAE,eACAI,WACAE,SAAU,IACVC,UAVgBH,EAWhBI,QAlBc,GA+BhB,OATEpB,EADEc,GAAc,GAAKC,EAgBzB,UACER,OAAQc,EAAc,aACtBT,EAAY,SACZI,EAAQ,SACRE,EAAQ,QACRE,EAAO,UACPD,EAAa,EAAIH,EAAY,IAE7B,MAAMT,EA3ER,SAAoBA,EAAkBK,GACpC,OAAOL,EAAOrlE,KAAKw2D,GACTkP,EAAe,KAAMU,EAAAA,GAAAA,IAAM5P,EAAO,EAAG,OAAQ4P,EAAAA,GAAAA,IAAM5P,EAAO,MAAQ,IAE9E,CAuEiB6P,CAAWF,EAAgBT,GACpCplD,EAAQ6lD,EAAenjE,OACvBxC,EAAS,IAAIy9B,MAAM3d,GACnBgmD,EAAuB,GASvBC,EAAeC,IACnB,MAAMC,EAAoB,GAC1B,IAAIp8D,EAAS,EACbm8D,EAAW//D,SAASigE,IAClBD,EAAQ5lE,KAXQ8lE,EAACt8D,EAAgBu8D,KACnC,MACMC,EAAMrC,GADUa,EAAOv9D,MAAMuC,EAAQA,EAASu8D,GACd,GAEtC,OAAQd,GAAYc,EAAe,GAAKV,GAAWW,CAAG,EAOvCF,CAAYt8D,EAAQq8D,IACjCr8D,GAAUq8D,CAAY,IAGxBJ,EAASzlE,KAAK,CACZ2lE,aACAC,WACA,EAGJ,IAAK,IAAIK,EAAQ,EAAGA,IAAUxmD,IAASwmD,EAAO,CAC5C,MAAMC,EAASzmD,EAAQwmD,EACnBA,GAAS,GAAKC,GAAU,GAC1BR,EAAY,CAACO,EAAOC,GAExB,CAEA,IAAK,IAAID,EAAQ,EAAGA,IAAUxmD,EAAQ,IAAKwmD,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAWzmD,EAAQwmD,IAASC,EAAQ,CACvD,MAAMC,EAAQ1mD,EAAQwmD,EAAQC,EAC1BD,GAAS,GAAKC,IAAWrB,EAAe,IAAO,EAAI,IAAMsB,GAAS,GACpET,EAAY,CAACO,EAAOC,EAAQC,GAEhC,CAGF,IAAK,IAAIF,EAAQ,EAAGA,IAAUxmD,EAAQ,IAAKwmD,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAWzmD,EAAQwmD,IAASC,EAC/C,IAAK,IAAIC,EAAQ,EAAGA,IAAU1mD,EAAQwmD,EAAQC,IAAUC,EAAO,CAC7D,MAAMC,EAAS3mD,EAAQwmD,EAAQC,EAASC,EACpCF,GAAS,GAAKC,GAAU,GAAKC,GAAS,GAAKC,GAAU,GACvDV,EAAY,CAACO,EAAOC,EAAQC,EAAOC,GAEvC,CAIJ,IAAIC,EACAC,EAAc,EAClB,IAAK,IAAI5tD,EAAI,EAAGA,EAAI+sD,EAAStjE,OAAQuW,IAAK,CACxC,MAAM,QACJktD,EAAO,WACPD,GACEF,EAAS/sD,GACP6tD,EAAYZ,EAAWxjE,OACvBqkE,EAAc7C,GAAWiC,EAAS,GAAKP,GAAWkB,EAAY,GAE9DE,EADgB7+D,KAAK87B,OAAOkiC,GACLT,EAAW,IAAM,EACxCuB,EAAO,MACX,IAAK,IAAIC,EAAO,EAAGA,IAASJ,IAAaI,EACvC,GAAIhB,EAAWgB,EAAO,GAAKhB,EAAWgB,GACpC,OAAO,IAIX,OAAO,CACR,EARY,GASPC,EAAOh/D,KAAK+8C,IAAI6hB,EAAcpB,GAAaqB,EAAOC,IAEnDL,GAAkBO,EAAON,KAC5BD,EAAiBZ,EAAS/sD,GAC1B4tD,EAAcM,EAElB,CAEA,MAAMC,EAAgBR,EAAgBV,WAChCmB,EAAiBT,EAAgBT,QACjCmB,EAAWF,EAAc1kE,OAC/B,IAAI4Z,EAAQ,EACRqoB,EAAI,EACR,IAAK,IAAI4iC,EAAM,EAAGA,IAAQD,IAAYC,EAAK,CACzC,MAAMC,EAAWJ,EAAcG,GACzBE,EAAaJ,EAAeE,GAC5B13D,EAAS1H,KAAK0K,MAAM40D,GAC1B,IAAI5jC,EAAI,EAER,IAAK,IAAI6jC,EAAM,EAAGA,IAAQF,IAAYE,EAAK,CACzC,MAAMhD,EAAQd,GAAcC,MACf,IAAR0D,EAAY3D,GAAcE,IAAMF,GAAcC,OAC9C0D,IAAQD,EAAW,EAAI1D,GAAcI,OAASJ,GAAcC,OACpD,IAAR6D,EAAY9D,GAAcK,KAAOL,GAAcC,OAC/C6D,IAAQF,EAAW,EAAI5D,GAAcG,MAAQH,GAAcC,MAC1D3N,EAAQ6O,EAAOzoD,GACf1M,EAAQ83D,IAAQF,EAAW,EAAIhC,EAAW3hC,EAAI17B,KAAK0K,MAAMqjD,EAAQuR,GACvEvnE,EAAOoc,GAAS,CACdmoD,WAAY,CACV5gC,IACAc,IACA/0B,QACAC,UAEF60D,SAEF7gC,GAAKj0B,EAAQg2D,IACXtpD,CACJ,CACAqoB,GAAK90B,EAAS+1D,CAChB,CAEA,OAAO1lE,CACT,CA3IaynE,CAA0BnsD,GACX,IAAf8pD,EA4Ib,SAAmB9pD,GACjB,MAAM,OACJupD,EAAM,YACNG,EAAW,aACXE,GACE5pD,EACJ,MAAuB,OAAhB0pD,GAAwBE,EAAe,KAAOL,EAAO,GAAKA,EAAO,GAAK,GAO/E,SAA4BvpD,GAC1B,MAAM,OACJupD,EAAM,SACNS,EAAQ,QACRI,EAAO,UACPD,GACEnqD,EACE3L,EAAS1H,KAAK0K,MAAM1K,KAAK87B,IAAIuhC,EAAWT,EAAO,GAAI58D,KAAK87B,IAAIuhC,EAAWT,EAAO,IAAKY,EAAYC,GAAW,KAEhH,MAAO,CAAC,CACNnB,WAAY,CACV5gC,EAAG,EACHc,EAAG,EACH/0B,MAAO41D,EACP31D,UAEF60D,MAAOd,GAAcK,KAAOL,GAAcE,IAAMF,GAAcG,OAC7D,CACDU,WAAY,CACV5gC,EAAG,EACHc,EAAG90B,EAAS+1D,EACZh2D,MAAO41D,EACP31D,UAEF60D,MAAOd,GAAcK,KAAOL,GAAcI,OAASJ,GAAcG,OAErE,CAhCM6D,CAAmBpsD,GACH,OAAhB0pD,GAAwC,OAAhBA,EAiC9B,SAAiC1pD,GAC/B,MAAM,OACJupD,EAAM,SACNS,EAAQ,QACRI,EAAO,UACPD,GACEnqD,EACE5L,GAAS41D,EAAWI,GAAW,EAC/B/1D,EAAS1H,KAAK0K,MAAM1K,KAAK87B,IAAIr0B,EAAQm1D,EAAO,GAAI58D,KAAK87B,IAAIr0B,EAAQm1D,EAAO,GAAIY,KAClF,MAAO,CAAC,CACNlB,WAAY,CACV5gC,EAAG,EACHc,EAAG,EACH/0B,QACAC,UAEF60D,MAAOd,GAAcE,IAAMF,GAAcK,KAAOL,GAAcI,QAC7D,CACDS,WAAY,CACV5gC,EAAGj0B,EAAQg2D,EACXjhC,EAAG,EACH/0B,QACAC,UAEF60D,MAAOd,GAAcE,IAAMF,GAAcG,MAAQH,GAAcI,QAEnE,CA1DQ6D,CAAwBrsD,GA4DhC,SAA4BA,GAC1B,MAAM,OACJupD,EAAM,SACNW,EAAQ,SACRF,EAAQ,QACRI,EAAO,UACPD,GACEnqD,EACEssD,EAAe3/D,KAAK0K,MAAM,IAAM6yD,GAChCqC,EAAc5/D,KAAK87B,IACvB97B,KAAK0K,MACH1K,KAAKC,IACH,IAAOo9D,EAAWI,IACjBJ,EAAWI,GAAWb,EAAO,IAAM,EAAIA,EAAO,GAAK,EAAIA,EAAO,MAGnES,EAAWI,EAAUkC,GAEjBE,EAAaxC,EAAWuC,EAAcnC,EACtC/1D,EAAS1H,KAAK87B,IAAI0hC,EAAWx9D,KAAK0K,MAAM1K,KAAK87B,IAAI+jC,EAAajD,EAAO,GAAIgD,EAAchD,EAAO,MAEpG,MAAO,CAAC,CACNN,WAAY,CACV5gC,EAAG,EACHc,EAAG,EACH/0B,MAAOo4D,EACPn4D,UAEF60D,MAAOd,GAAcE,IAAMF,GAAcK,KAAOL,GAAcI,QAC7D,CACDS,WAAY,CACV5gC,EAAGmkC,EAAapC,EAChBjhC,EAAG,EACH/0B,MAAOm4D,EACPl4D,UAEF60D,MAAOd,GAAcE,IAAMF,GAAcG,MAAQH,GAAcI,QAEnE,CAjGQiE,CAAmBzsD,EAC3B,CAtJa0sD,CAAU1sD,GACK,IAAf8pD,EAuPb,SAAqB9pD,GACnB,MAAM,YAAE0pD,GAAgB1pD,EAExB,MAA0B,MAAnB0pD,EAAY,GAKrB,SAAiC1pD,GAC/B,MAAM,UACJmqD,EAAS,QACTC,EAAO,OACPb,EAAM,SACNS,EAAQ,SACRE,GACElqD,EACE2sD,EAAcxC,EACdyC,EAAcjgE,KAAK0K,MACvB1K,KAAK87B,KACF0hC,EAAYC,GAAW,EACvBb,EAAO,IAAMS,EAAWI,IAAab,EAAO,GAAKA,EAAO,MAGvDsD,EAAeF,EAAcC,EAAcxC,EAC3C0C,EAAangE,KAAKC,IACtBs9D,EACAv9D,KAAK0K,MACH1K,KAAK87B,KACFuhC,EAAWI,GAAW,EACvBz9D,KAAK87B,IACHmkC,EAAcrD,EAAO,GACrBsD,EAAetD,EAAO,OAKxBwD,EAAYpgE,KAAK87B,IAAI97B,KAAK0K,MAAMs1D,EAAcpD,EAAO,IAAKS,EAAWI,EAAU0C,GAErF,MAAO,CAAC,CACN7D,WAAY,CACV5gC,EAAG,EACHc,EAAG,EACH/0B,MAAO24D,EACP14D,OAAQs4D,GAEVzD,MAAOd,GAAcE,IAAMF,GAAcK,KAAOL,GAAcI,QAC7D,CACDS,WAAY,CACV5gC,EAAG0kC,EAAY3C,EACfjhC,EAAG,EACH/0B,MAAO04D,EACPz4D,OAAQw4D,GAEV3D,MAAOd,GAAcE,IAAMF,GAAcG,OACxC,CACDU,WAAY,CACV5gC,EAAG0kC,EAAY3C,EACfjhC,EAAG0jC,EAAezC,EAClBh2D,MAAO04D,EACPz4D,OAAQu4D,GAEV1D,MAAOd,GAAcI,OAASJ,GAAcG,OAEhD,CA3DMyE,CAAwBhtD,GA6D9B,SAAgCA,GAC9B,MAAM,SACJgqD,EAAQ,OACRT,EAAM,UACNY,EAAS,QACTC,GACEpqD,EACEwsD,EAAaxC,EACb2C,EAAchgE,KAAK0K,MAAM1K,KAAK87B,IAAI+jC,EAAajD,EAAO,GAAI,KAAQY,EAAYC,KAC9EmC,GAAevC,EAAWI,GAAW,EACrCyC,EAAelgE,KAAK87B,IACxB0hC,EAAYwC,EAAcvC,EAC1Bz9D,KAAK0K,MAAM1K,KAAK87B,IACd8jC,EAAchD,EAAO,GACrBgD,EAAchD,EAAO,MAGnB0D,EAAaT,EAAaD,EAAcnC,EAE9C,MAAO,CAAC,CACNnB,WAAY,CACV5gC,EAAG,EACHc,EAAG,EACH/0B,MAAOo4D,EACPn4D,OAAQs4D,GAEVzD,MAAOd,GAAcK,KAAOL,GAAcE,IAAMF,GAAcG,OAC7D,CACDU,WAAY,CACV5gC,EAAG,EACHc,EAAGwjC,EAAcvC,EACjBh2D,MAAOm4D,EACPl4D,OAAQw4D,GAEV3D,MAAOd,GAAcI,OAASJ,GAAcK,MAC3C,CACDQ,WAAY,CACV5gC,EAAGkkC,EAAcnC,EACjBjhC,EAAGwjC,EAAcvC,EACjBh2D,MAAO64D,EACP54D,OAAQw4D,GAEV3D,MAAOd,GAAcI,OAASJ,GAAcG,OAEhD,CAxGM2E,CAAuBltD,EAC7B,CA5PamtD,CAAYntD,GAqWzB,SAAoBA,GAClB,MAAM,YAAE0pD,GAAgB1pD,EAExB,MAA0B,MAAnB0pD,EAAY,GAKrB,UAA+B,SAC7BM,EAAQ,OACRT,EAAM,QACNa,EAAO,UACPD,EAAS,SACTD,IAEA,MAAMkD,EAAIpD,EACJqD,EAAK1gE,KAAK0K,MAAM1K,KAAK87B,IAAI2kC,EAAI7D,EAAO,GAAI,KAAQY,EAAYC,KAC5DkD,EAAI3gE,KAAK0K,OAAO2yD,EAAW,EAAII,IAAYb,EAAO,GAAKA,EAAO,GAAKA,EAAO,KAC1EgE,EAAK5gE,KAAKC,IAAIs9D,EAAUv9D,KAAK0K,MAAM1K,KAAK87B,IAAI,IAAOuhC,EAAW,EAAII,GAAUkD,EAAI/D,EAAO,MACvFiE,EAAK7gE,KAAK0K,MAAM1K,KAAKC,IAAID,KAAKC,IAAIs9D,EAAU,KAAQF,EAAW,EAAII,IAAWkD,EAAI/D,EAAO,KACzFkE,EAAKL,EAAIG,EAAKC,EAAK,EAAIpD,EACvBsD,EAAK/gE,KAAK87B,IAAI0hC,EAAYkD,EAAKjD,EAASkD,GAE9C,MAAO,CAAC,CACNrE,WAAY,CACV5gC,EAAG,EACHc,EAAG,EACH/0B,MAAOg5D,EACP/4D,OAAQg5D,GAEVnE,MAAOd,GAAcK,KAAOL,GAAcE,IAAMF,GAAcG,OAC7D,CACDU,WAAY,CACV5gC,EAAG,EACHc,EAAGkkC,EAAKjD,EACRh2D,MAAOm5D,EACPl5D,OAAQq5D,GAEVxE,MAAOd,GAAcI,OAASJ,GAAcK,MAC3C,CACDQ,WAAY,CACV5gC,EAAGklC,EAAKnD,EACRjhC,EAAGkkC,EAAKjD,EACRh2D,MAAOq5D,EACPp5D,OAAQq5D,GAEVxE,MAAOd,GAAcI,QACpB,CACDS,WAAY,CACV5gC,EAAGklC,EAAKnD,EAAUqD,EAAKrD,EACvBjhC,EAAGkkC,EAAKjD,EACRh2D,MAAOo5D,EACPn5D,OAAQq5D,GAEVxE,MAAOd,GAAcG,MAAQH,GAAcI,QAE/C,CApDMmF,CAAsB3tD,GAsD5B,UAAgC,UAC9BmqD,EAAS,OACTZ,EAAM,SACNS,EAAQ,QACRI,EAAO,SACPF,IAEA,MAAMoD,EAAInD,EACJoD,EAAK5gE,KAAK0K,MAAM1K,KAAK87B,IAAI6kC,EAAI/D,EAAO,GAAI,IAAOS,EAAWI,KAC1DgD,EAAIzgE,KAAK0K,OAAO8yD,EAAY,EAAIC,IAAY,EAAIb,EAAO,GAAK,EAAIA,EAAO,GAAK,EAAIA,EAAO,KACvF8D,EAAK1gE,KAAK0K,MAAM+1D,EAAI7D,EAAO,IAC3BmE,EAAK/gE,KAAK0K,MAAM+1D,EAAI7D,EAAO,IAC3BqE,EAAKN,EAAID,EAAKK,EAAK,EAAItD,EACvBqD,EAAK9gE,KAAKC,IAAIs9D,EAAUv9D,KAAK87B,IAAIuhC,EAAWuD,EAAKnD,EAASgD,IAEhE,MAAO,CAAC,CACNnE,WAAY,CACV5gC,EAAG,EACHc,EAAG,EACH/0B,MAAOm5D,EACPl5D,OAAQi5D,GAEVpE,MAAOd,GAAcE,IAAMF,GAAcK,KAAOL,GAAcI,QAC7D,CACDS,WAAY,CACV5gC,EAAGklC,EAAKnD,EACRjhC,EAAG,EACH/0B,MAAOq5D,EACPp5D,OAAQg5D,GAEVnE,MAAOd,GAAcE,IAAMF,GAAcG,OACxC,CACDU,WAAY,CACV5gC,EAAGklC,EAAKnD,EACRjhC,EAAGkkC,EAAKjD,EACRh2D,MAAOq5D,EACPp5D,OAAQq5D,GAEVxE,MAAOd,GAAcG,OACpB,CACDU,WAAY,CACV5gC,EAAGklC,EAAKnD,EACRjhC,EAAGkkC,EAAKK,EAAK,EAAItD,EACjBh2D,MAAOq5D,EACPp5D,OAAQu5D,GAEV1E,MAAOd,GAAcI,OAASJ,GAAcG,OAEhD,CArGMsF,CAAuB7tD,EAC7B,CAzWa8tD,CAAW9tD,GAGf,CACLgpD,SACA+E,eAAgBhF,GAAuBC,GAE3C,CCvIA,IAAIgF,GACAC,GACW,SAASC,GAAqBzrE,GAiB3C,OAhBKwrE,KACHA,GAAaE,iBAAiBj/D,SAASk/D,iBAAiBC,iBAAiB,kBAGtEL,KACHA,GAAU9+D,SAASo/D,cAAc,QACjCN,GAAQjxB,MAAMwxB,KAAQ,YAAWN,KACjCD,GAAQjxB,MAAMyxB,WAAa,SAC3BR,GAAQjxB,MAAM/5C,SAAW,WACzBgrE,GAAQjxB,MAAM5oC,KAAO,SACrB65D,GAAQjxB,MAAM0xB,QAAU,MACxBv/D,SAASu2B,KAAKipC,YAAYV,KAG5BA,GAAQW,YAAclsE,EAEfurE,GAAQ7kB,WACjB,C,4BCZA,MAAMylB,GAAyB,IACzBC,GAAe,GAEN,SAASC,GACtB/b,EACA1zD,EACA0vE,EACAC,EACAC,EACA9lE,GAEA,MAAM,yBAAEk5D,IAA6B9qC,EAAAA,EAAAA,OAErCq8B,EAAAA,EAAAA,KAAgB,KACd,GAAImb,GAAahc,EAAWtiC,QAAS,CACnC,MAAMy+C,EAAoBnc,EAAWtiC,QAAQ0+C,QAAwB,gBAErE9M,EAAyB,CACvBv5D,YAAY,KAGdsmE,EAAAA,GAAAA,GACEF,EACAnc,EAAWtiC,QAEXw+C,EAAmB,MAAQ,cAC3BJ,QACmBpvE,IAAnBuvE,EAA+BJ,QAAyBnvE,EACxDuvE,OACAvvE,EACA0J,EAEJ,IACC,CACD4pD,EAAY1zD,EAAQ0vE,EAAWC,EAAgBC,EAAkB9lE,EAAqBk5D,GAE1F,C,eC/BA,MAAMgN,GAAiC,IACjCC,GAA2B,IAC3BC,GAAkC,IAClCC,GAA4B,EAAIznC,GAAAA,GAChC0nC,GAA6BtoE,OAAO4gC,GAAAA,IACpC2nC,GAAgC,+BAEvB,SAASC,GACtBC,EACA9mB,EACAjjD,EACA+gE,EACAiJ,EACAC,EACAC,EACAhT,EACAnB,EACAv8D,EACA2wE,EACAC,EACA7G,EACA8G,GAEA,MAAM,gBAAE1oE,EAAe,oBAAE2oE,IAAwB54C,EAAAA,EAAAA,OAE1C64C,EAAwBC,EAA0BC,IAA8BtyB,EAAAA,GAAAA,MAChFuyB,EAAUC,EAAYC,IAAgBzyB,EAAAA,GAAAA,KACvC0yB,GAAsB9yB,EAAAA,EAAAA,MA8I5B,OA1CAzE,EAAAA,EAAAA,KAAU,KACR,IAAK3tC,EAAAA,IAAgBqkE,IAAmBC,GAAYE,EAClD,OAGF,IAAIW,EACJ,OAAOllB,EAAAA,GAAAA,IAAc3C,EAAar4B,QAAU,CAC1Ci7B,wBAAyB,eACzBklB,wBAAyB,gBACzBjlB,QAAUA,CAACj7C,EAAG7G,IACRA,IAAc+hD,GAAAA,GAAAA,OACX+kB,IACHA,EAAY/kE,KAAKC,OAGnB2kE,KAEO,GAKXK,UAAWA,KACJF,GAAcb,IAInBtoE,EAAgB,CAAE3B,cAElB0C,WAAWkoE,EAAc9jE,KAAKC,IAAI,EAAG0iE,IAA4B1jE,KAAKC,MAAQ8kE,KAC9EA,OAAYlxE,EAAS,GAEvB,GACD,CACDqpD,EAAc+mB,EAAgBhqE,EAAW2B,EAAiBgpE,EAAYC,EAAcX,EAAUE,IAQzF,CACLc,gBAAkBjB,OAAmCpwE,EA7IvD,SAAyBiR,IACvBqgE,EAAAA,GAAAA,GAAwBrgE,GACxBkrD,EAAwBlrD,EAC1B,EA2IEurD,YAxFF,SAAqBvrD,GACnB,GAAIm/D,EACFD,EAAcl/D,QAIhB,GAAKlF,EAAAA,GAEL,OAAIklE,EAAoBjgD,SACtB5Z,cAAc65D,EAAoBjgD,SAClCigD,EAAoBjgD,aAAUhxB,OAhBhC0wE,EAAoB,CAClB9wE,SACAwG,oBAmBF6qE,EAAoBjgD,QAAUloB,YAAW,KACvCmoE,EAAoBjgD,aAAUhxB,EAxClC,SAAmBiR,GACjB,GAAIkrB,EAAAA,GAAY,CACd,MAAMo1C,EAAStgE,EAAEsgE,OACjB,IAAKA,EAAO7tB,UAAUyE,SAAS,kBAAoBopB,EAAO7tB,UAAUyE,SAAS,WAC3E,OAGErf,GAAAA,EAAAA,uBACFhgC,YAAW,KACTw0D,EAAcrsD,EAAE,GACf2+D,IAEHtS,EAAcrsD,EAElB,CACF,CA0BIugE,CAAUvgE,EAAE,GACX6+D,IACL,EAsEE1T,kBAAoBgU,EAAsCE,EAAcmB,GAAAA,OAAYzxE,EApEtF,SAA2BiR,GACzB,GAAIkrB,EAAAA,GAAY,CACd,GAAKlrB,EAAEsgE,OAAuBG,QAAQ,YAAcnB,EAClD,OAGFt/D,EAAE+oC,iBACFm2B,GACF,MACE7S,EAAcrsD,EAElB,EA0DE0gE,kBAAoBvB,OAA8CpwE,EAxDpE,YACM+L,EAAAA,IAAiBskE,GAErBtoE,EAAgB,CAAE3B,aACpB,EAqDEwrE,yBAA2B7lE,EAAAA,QAAiC/L,EAnD9D,SAAyBiR,GACvBA,EAAEqxC,iBACJ,EAkDE8R,gBA7IF,SAAyBnjD,GACvB,MAAMu4C,EAAYgnB,EAAWx/C,QAC7B,IAAKw4B,EAAW,OAEhB,MAAM,QAAE+K,EAAO,QAAEsd,GAAY5gE,GACvB,EACJ23B,EAAC,MAAEj0B,EAAK,EAAE+0B,EAAC,OAAE90B,GACX40C,EAAUsoB,wBAERC,EAAa7kE,KAAK+8C,IAAK0f,EAASpV,EAAU3rB,EAAMA,EAAIj0B,EAAQ4/C,GAAawb,GACzEiC,EAAa9kE,KAAK+8C,IAAIvgB,EAAI90B,EAASi9D,GAAW7B,GAChD+B,GAAcC,EAChBpB,IAEAC,GAEJ,EA8HEoB,wBA5HF,WACEvB,EAAoB,CAClB9wE,SACAwG,aAEJ,EAwHE8oD,iBAbF,SAA0Bj+C,GACxB4/D,IACIJ,GAyBR,SAAuCx/D,GACrC,MAAMihE,EAAmBC,GAA8BlhE,EAAEmhE,eACrDF,GACFA,EAAiBG,gBAAgBpC,GAErC,CA9BgCqC,CAA8BrhE,EAC5D,EAWE6/D,WACAH,yBACA4B,iCAEJ,CAEA,SAASA,GAA8BthE,GACrC,MAAMihE,EAAmBC,GAA8BlhE,EAAEmhE,eACrDF,GACFA,EAAiBM,aAAavC,GAA+B,GAEjE,CASA,SAASkC,GAA8B5D,GACrC,IAAIv9C,EAA0Bu9C,EAE9B,GACEv9C,EAAUA,EAAQyhD,yBACXzhD,IAAYA,EAAQ0yB,UAAUyE,SAAS,2BAEhD,OAAOn3B,CACT,C,kcCrNA,MAEM0hD,GAAoB,GAG1B,IAAIC,GACJ,MAAMC,GAAyB,ICZhB,MAObv2C,cAAcw2C,GAAA,uBAAAA,GAAA,sBAAAA,GAAA,uBACZp2C,KAAKq2C,QAAU,IAAItkD,SAAQ,CAACusC,EAASgY,KACnCt2C,KAAKs2C,OAASA,EACdt2C,KAAKs+B,QAAUA,CAAO,GAE1B,GDEFjyD,YAEA,WACO6pE,KACHA,IAASK,EAAAA,GAAAA,GACP,IAAIC,OAAO,IAAIzzD,IAAI,qBAErBozD,GAAuB7X,UAE3B,GAjB0B,K,4BEC1B,MAQA,IAAe9gB,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,OAAE14C,GAAW04C,EACbg5B,GAAuB94B,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyB74C,GAGrF,OAAO0xE,EAAuB54B,EAAAA,GAAAA,cAAC44B,EAAyBh5B,QAAYl6C,CAAS,I,4BCY/E,MAoGA,IAAei6C,EAAAA,EAAAA,KApGoCk5B,EACjDxuE,UACAiC,cAEA,MAAM,gBACJwsE,EAAe,mBAAEC,EAAkB,iBAAEvnE,IACnCgsB,EAAAA,EAAAA,OAEE,WAAEhrB,GAAenI,EAEjBR,GAAO+3C,EAAAA,GAAAA,MACNo3B,EAAeC,IAAoBp4B,EAAAA,EAAAA,OACnCq4B,EAAkBC,EAAgBC,IAAmBn1B,EAAAA,GAAAA,IAAQ,GAC9Do1B,GAAoB52B,EAAAA,GAAAA,IAASua,EAAAA,EAAAA,IAAoB3yD,EAAS,SAC1Dy0C,EAAUz0C,EAAQiC,QAAQ2N,OAAQyjB,OAAOohB,QAEzCw6B,GAAyBr0B,EAAAA,EAAAA,KAAY,KACzCzzC,EAAiB,CACfkE,MAAO7L,EAAK,wBACZQ,QAASR,EAAK,mBACdoQ,OAAQ,CACNA,OAAQ,4BACRnU,QAAS,CACPoQ,OAAQ+xC,EAAAA,GAAAA,OAGZsxB,WAAY1vE,EAAK,SACjB,GACD,CAACA,EAAM2H,IAEJgoE,GAA2Bv0B,EAAAA,EAAAA,KAAa5oB,IAC5C48C,OAAiBvzE,GACjBqzE,EAAmB,CAAE18C,SACrBi9C,GAAwB,GACvB,CAACA,EAAwBP,IAEtBU,GAAuBx0B,EAAAA,EAAAA,KAAY,KACvCg0B,OAAiBvzE,EAAU,GAC1B,IAEGg0E,GAAiBz0B,EAAAA,EAAAA,KAAYvmC,UACjC06D,IACAE,IAGA,MAAM57C,EAAQrzB,EAAQiC,QAAQ2N,OAAQyjB,MAChC9Z,QAAgBorB,GAAAA,GAAmB,cAAatR,EAAMj3B,YAAawoC,EAAAA,GAAAA,SACnElqB,QAAalJ,MAAM+H,GAAS9H,MAAMs1B,GAAMA,EAAErsB,SAChDg0D,EAAmB,CACjB18C,KAAM,IAAIs9C,KAAK,CAAC50D,GAAO,cACvB+5B,SAAS,EACT86B,QAASl8C,EAAMm8C,YAAYhpE,MAAM+H,QAAyBlT,IAAnBkT,EAAEkhE,gBAA6BA,cACtE,GACD,CAACV,EAAiB/uE,EAAQiC,QAAQ2N,OAAQq/D,EAAwBP,IAmBrE,OACE/4B,EAAAA,GAAAA,cAAA,QAAMxpB,UAAU,kCAAkCujD,SAAU,EAAGC,KAAK,SAASr4B,QAlB7CjjC,WAC3BlM,GAAc6mE,EACbv6B,EACFq6B,IAEAF,QAAuBp9D,MAAMw9D,GAAmBv9D,MAAMs1B,GAAMA,EAAErsB,UAGhE+zD,EAAgB,CACdxzE,OAAQ+E,EAAQ/E,OAChB0Y,QAAS3T,EAAQ5D,GACjBlB,SAAUmB,EAAAA,GACViH,OAAQssE,EAAAA,GAAAA,iBAEZ,GAKEj6B,EAAAA,GAAAA,cAACk6B,GAAAA,EAAM,CACLx8C,MAAOrzB,EAAQiC,QAAQ2N,OAAQyjB,MAC/By8C,oBAAkB,EAClBC,kBAAgB,EAChBC,UAAWv7B,EACX15B,KAAK,UAEP46B,EAAAA,GAAAA,cAAA,YAAO1zC,GAEP0zC,EAAAA,GAAAA,cAAA,QAAMxpB,UAAU,yBAAyB3sB,EAAKi1C,EAAU,kBAAoB,oBAC5EkB,EAAAA,GAAAA,cAACs6B,GAAAA,EAAS,CACRj+C,KAAM28C,EACNtzB,QAAS+zB,EACT9sB,SAAU6sB,IAEZx5B,EAAAA,GAAAA,cAAC6d,GAAAA,EAAa,CACZ32D,OAAQgyE,EACRxjE,MAAO7L,EAAK,kBACZk0D,eAAgB2b,EAChBh0B,QAAS0zB,EACTmB,UAAWjuE,IAER,ICmHX,IAAeqzC,EAAAA,EAAAA,KAAK4D,EAAAA,EAAAA,KAClB,CAACp+C,GAAUkF,cACT,MAAQqf,KAAM8wD,GAAcr1E,EAAOud,MAC7B7N,EAASxK,EAAQwP,UACjB,cAAE4gE,EAAa,aAAEC,GAAiBrwE,EAAQiC,QAAQ2N,QAAU,CAAC,EAC7D0gE,EAAkBtwE,EAAQuY,iBAC1Bg4D,EAAgBD,GAClBjhE,EAAAA,EAAAA,IAAkBvU,EAAQkF,EAAQ/E,OAAQq1E,QAC1Cj1E,EAEEsvE,GAAY6F,EAAAA,EAAAA,IAAuB11E,EAAQkF,IAE/CyF,UAAWmlE,EACXvmE,YAAawmE,GACVF,IAAa7uE,EAAAA,EAAAA,IAAehB,GAAQ4hE,gBAAmB,CAAC,EAEvDp/D,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQkF,EAAQ/E,QAClCw1E,EAASnzE,KAASg/D,EAAAA,EAAAA,IAAch/D,IAASkN,IAAWxK,EAAQ/E,QAC5Dy1E,GAAcD,GAAUjmE,GAASyR,EAAAA,EAAAA,IAAWnhB,EAAQ0P,QAAUnP,EAC9Ds1E,EAAaF,EAASnzE,OAAOjC,EAC7Bu1E,EAAqB91E,EAAOkwB,cAAcve,WAAW,GAG3D,MAAO,CACL0jE,YACAO,aACAC,aACAN,eACAD,gBACAG,gBACA5F,YACAiG,qBACAtwD,OAXYqtB,EAAAA,EAAAA,IAAuB7yC,EAAQkF,MAYvC2qE,GAAa,CAAEC,iBAAgBC,oBACpC,GAlCe3xB,EA3K6B23B,EAC/C7wE,UACA8wE,aACAC,kBAAkB,EAClBC,eACAb,YACAO,aACAC,aACAP,gBACAG,gBACAF,eACA1F,YACAC,iBACAC,mBACA+F,qBACAK,gBACA3wD,QACA4wD,uBACAC,gCACAC,gCACAC,oCAEA,MAAM,iBAAE9/B,EAAgB,gBAAE+/B,IAAoBn+C,EAAAA,EAAAA,MAExC3zB,GAAO+3C,EAAAA,GAAAA,KAGPuD,GAAMtB,EAAAA,EAAAA,IAAuB,OAEnC+3B,EAAAA,GAAAA,IAAez2B,EAAKq2B,IACpBnS,EAAAA,GAAAA,GAAiBh/D,EAAQ/E,OAAQ+E,EAAQuY,iBAAkBg4D,GAC3D7F,GAAgB5vB,EAAK96C,EAAQ/E,OAAQ0vE,EAAWC,EAAgBC,GAEhE,MAAM2G,EAAwBT,GAAmB,GAC1C9nB,EAASwoB,IAAa73B,EAAAA,GAAAA,GAAQ43B,GAC/B3uC,EAAS9gC,QAAQ/B,EAAQiC,QAAQ2N,QAAQvR,KAAK0pD,WAAW,eACzD2pB,EAAqD,wBAAjC1xE,EAAQiC,QAAQ2N,QAAQtT,MAAkC0D,EAAQiC,QAAQ2N,OAAQyjB,OAE5G0hB,EAAAA,EAAAA,KAAU,KACJy8B,GAIJrtE,WAAWstE,EA7CU,GA6CCV,EAAmC,GACxD,CAACA,EAAiBU,EAAWD,IAEhC,MAAMzd,GAAY4d,EAAAA,GAAAA,IAAkB72B,EAAKu2B,GAEnCO,GAAwBp4B,EAAAA,EAAAA,IAAO,MACnC,MAAM3wC,EAAWqoE,GAAsB7kD,SAAWrsB,EAAQ5D,IAAM80E,EAAqB7kD,QACrF,OAAOwW,IAAW7iC,EAAQmI,YAAcU,CACzC,EAHoC,KAKrCksC,EAAAA,EAAAA,KAAU,KACJgf,GAAa6d,EAAsBvlD,UACrCulD,EAAsBvlD,SAAU,EAChCilD,IACF,GACC,CAACvd,EAAWud,IAEf,MAAM,qBAAEnpB,IAAyBC,EAAAA,GAAAA,GAAkBa,OAAS5tD,EAAWm2E,GAAuB,GAExFK,GAAcv5B,EAAAA,EAAAA,KAAQ,IACnB83B,EACHA,EAActwE,KAAK0K,GAAW2lE,IAAY3lE,KAASzK,OAAOgC,cAC1D1G,GACH,CAAC+0E,EAAeD,IAEbluE,GAAU6vE,EAAAA,GAAAA,GACdtyE,EACAQ,EACA0wE,EACAC,EACAkB,EACAtB,EACAF,EACA/vD,EACA,CAAEwwD,cACFM,EACAC,IAEI,kBACJ9Z,EAAiB,oBAAEwa,EAAmB,wBACtCva,EAAuB,kBAAEC,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuB9c,GACrB8wB,OAA6CvwE,IAAxB02E,EAkB3B,GADyBd,GAAkD,0BAAjCjxE,EAAQiC,QAAQ2N,QAAQvR,KAEhE,OAAOs3C,EAAAA,GAAAA,cAAA,QAAMmF,IAAKA,IAGpB,GAAIg2B,EACF,OAAOn7B,EAAAA,GAAAA,cAAA,QAAMmF,IAAKA,EAAK3uB,UAAU,2BAA2BlqB,GAqB9D,MAAMkqB,GAAYssB,EAAAA,GAAAA,GAChB,kCACAkyB,IAAcE,GAAoB,WACjChoC,GAAU6uC,IAAsB,kBACjC9F,GAAsB,gBACtBoF,GAAgB,gBACfnuC,IAAW6uC,GAAqB,aACjCvpB,GAGF,OACExS,EAAAA,GAAAA,cAAA,OACEmF,IAAKA,EACL1+C,IAAI41E,EAAAA,EAAAA,IAAiBhyE,EAAQ5D,IAC7B+vB,UAAWA,EACX,kBAAiBnsB,EAAQ5D,GACzBi0D,YA1DqB/jD,KACvBqgE,EAAAA,GAAAA,GAAwBrgE,GACxBkrD,EAAwBlrD,EAAE,EAyDxBqsD,cAAelB,IAEbia,GAAqB/7B,EAAAA,GAAAA,cAAA,QAAMxpB,UAAU,0BAA0BlqB,GAChE4gC,GApCD8S,EAAAA,GAAAA,cAAA,QAAMxpB,UAAU,sBAAsBujD,SAAU,EAAGC,KAAK,SAASr4B,QArBtC26B,KAC7B1gC,EAAiB,CACf1O,QAAQ,EACRD,WAAY8tC,GAAYt0E,GACxB2mC,SAAUqtC,IAAgB,GAC1BttC,aAAc9iC,EAAQiC,QAAQ2N,QAAQuzB,QAAU,GAChD,GAgBEwS,EAAAA,GAAAA,cAACu8B,GAAAA,EAAuB,CACtB5/B,IAAKtyC,EAAQ5D,GACbmQ,QAASqkE,EACTuB,MAAI,EACJC,QAAM,EACNC,gBAAc,IAEhB18B,EAAAA,GAAAA,cAAA,cAASn2C,EAAK,2BACdm2C,EAAAA,GAAAA,cAAA,YAAOn2C,EAAK,4BAA6BA,EAAK,SAAUQ,EAAQiC,QAAQ2N,QAAQuzB,OAAQ,OAExFwS,EAAAA,GAAAA,cAAA,QAAMxpB,UAAU,yBAAyB3sB,EAAK,2BA0B/CkyE,GACC/7B,EAAAA,GAAAA,cAAC64B,GAA4B,CAC3BxuE,QAASA,EACTiC,QAASA,IAGZ8vE,GACCp8B,EAAAA,GAAAA,cAAC44B,GAAoB,CACnB1xE,OAAQ06D,EACR+a,OAAQP,EACR/xE,QAASA,EACTT,gBAAgB,SAChB87C,QAASqc,EACTpM,oBAAqBqM,IAGrB,KC1FV,GA9FsC4a,EACpCpmD,YACAnsB,UACAS,SACA4K,QACAmnE,aACA7G,cACA8G,eACAC,iBACAtB,gCACAC,gCACA/5B,cAGA,MAAMwD,GAAMtB,EAAAA,EAAAA,IAAuB,MAC7Bm5B,GAAiBhB,EAAAA,GAAAA,IAAkB72B,EAAKs2B,GAExC1e,GAAeta,EAAAA,GAAAA,GAASp4C,IAAW2yD,EAAAA,EAAAA,IAAoB3yD,EAAS,cAAe2yE,GAC/EngB,GAAiBC,EAAAA,GAAAA,GAAazyD,GAC9B4yE,EAAe7wE,QAAQ/B,IAAW6yE,EAAAA,EAAAA,IAAqB7yE,IACvD4yD,EAAY7wD,QAAQ/B,IAAW6yD,EAAAA,EAAAA,IAAoB7yD,IAEnDR,GAAO+3C,EAAAA,GAAAA,KAEPu7B,EAAcryE,GAASG,EAAAA,EAAAA,IAAepB,EAAMiB,GAAUT,GAASwjE,aAAaE,eAElF,OACE/tB,EAAAA,GAAAA,cAAA,OACEmF,IAAKA,EACL3uB,WAAWssB,EAAAA,GAAAA,GACT,kBACAtsB,EACA1rB,IAAWgyE,GAAiB,UAAQM,EAAAA,EAAAA,IAAgBtyE,MAEtD62C,QAASt3C,EAAUs3C,OAAUj8C,GAE5Bm3D,GA6BP,SACEmB,EACAp6C,EACAq5D,EACAjH,EACA/Y,GAEA,MAAM,MAAE5iD,EAAK,OAAEC,IAAW2jD,EAAAA,GAAAA,MAEpBC,EAASt6C,GAAWo6C,EAE1B,OACEhe,EAAAA,GAAAA,cAAA,OAAKxpB,WAAWssB,EAAAA,GAAAA,GAAe,iBAAkBm6B,GAAgB,WAC7DhgB,GACAjd,EAAAA,GAAAA,cAAA,OACEoD,IAAK8a,EACL7jD,MAAOA,EACPC,OAAQA,EACR+oC,IAAI,GACJ7sB,UAAU,YACV6mD,WAAW,IAGfr9B,EAAAA,GAAAA,cAACme,GAAAA,EAAY,CAACH,aAAcE,EAAQE,UAAWhyD,QAAQ6wD,GAAY5iD,MAAOA,EAAOC,OAAQA,IACxF07D,GAAeh2B,EAAAA,GAAAA,cAAA,QAAMxpB,UAAU,cAGtC,CAxDyB6nC,CAAgBxB,EAAgBE,EAAckgB,EAAcjH,EAAa/Y,GAC5Fjd,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,gBACbwpB,EAAAA,GAAAA,cAAA,KAAG6B,IAAI,QACHx3C,GAEEujE,EAAAA,EAAAA,IAAgBvjE,GAClB21C,EAAAA,GAAAA,cAACk7B,GAAa,CACZ7wE,QAASA,EACT8wE,YAAU,EACVM,8BAA+BA,EAC/BC,8BAA+BA,IAGjC17B,EAAAA,GAAAA,cAACse,GAAAA,EAAc,CACbz0D,KAAMA,EACNQ,QAASA,EACTk0D,QAASnyD,QAAQywD,GACjB4e,8BAA+BA,EAC/BC,8BAA+BA,IAdjCmB,GA1CC,KA4DL78B,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,gBAAgBqrB,IAAI,SAAQ0M,EAAAA,GAAAA,GAAW4uB,GAAeznE,GA5DhE,OA8DNqnE,GAAkB/8B,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,4BAC5B,E,mDCzEV,MAsGA,IAAempB,EAAAA,EAAAA,KAtGmB29B,EAChCjzE,UACAkzE,iBACAC,YACAC,qBACA7qD,oBACA8qD,YACAC,eACAh8B,UACAi8B,qBACAC,mBAEA,MAAM,iBAAErsE,IAAqBgsB,EAAAA,EAAAA,MACvB3zB,GAAO+3C,EAAAA,GAAAA,MACNk8B,EAAaC,IAAiB95B,EAAAA,GAAAA,KAE/Bie,EAAevrD,IACnBA,EAAEqxC,kBAEFx2C,EAAiB,CACfnH,QAASR,EAAK,iBACd,EAQE6L,GAAQitC,EAAAA,EAAAA,KAAQ,KACpB,IAAKm7B,EAAa,OAClB,MAAME,GAAiBC,EAAAA,GAAAA,IAAsC,IAAf5zE,EAAQgI,KAAaxI,EAAKy/B,MAClE40C,EAAe7zE,EAAQ8zE,WAAYF,EAAAA,GAAAA,IAA2C,IAApB5zE,EAAQ+zE,SAAkBv0E,EAAKy/B,MACzF+0C,EAAoBh0E,EAAQwjE,cAAeoQ,EAAAA,GAAAA,IAAkD,IAA3B5zE,EAAQwjE,YAAYx7D,KAAaxI,EAAKy/B,MAE9G,IAAI5gC,EAAOs1E,EAUX,OATIE,IACFx1E,GAAQ,KACRA,GAAQmB,EAAK,mBAAmB0L,QAAQ,SAAU2oE,IAEhDG,IACF31E,GAAQ,KACRA,GAAQmB,EAAK,sBAAsB0L,QAAQ,SAAU8oE,IAGhD31E,CAAI,GACV,CAACo1E,EAAaj0E,EAAMQ,IAEjBi0E,GAAgBx7B,EAAAA,GAAAA,GACpB,cACA26B,GAAsB,mBACtBpzE,EAAQwjE,aAAa0Q,YAAc,eAGrC,OACEv+B,EAAAA,GAAAA,cAAA,QACExpB,UAAW8nD,EACXz8B,IAAKh4C,EAAKi4C,MAAQ,MAAQ,MAC1BH,QAASA,EACT,2BAECg8B,GACC39B,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,mCAAmCmrB,QAASi8B,IAE1DxxE,QAAQ/B,EAAQooB,QACfutB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,QAAMxpB,UAAU,kBACb8pB,EAAAA,GAAAA,IAAqBj2C,EAAQooB,QAEhCutB,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,wBAGfknD,GAAatxE,QAAQwmB,GAAmBC,gBACxCmtB,EAAAA,GAAAA,cAAA,QAAM2B,QAjDZ,SAA0BhrC,GACxBA,EAAEqxC,kBACF61B,GACF,GA+CQ79B,EAAAA,GAAAA,cAAA,QAAMxpB,UAAU,mBACdwpB,EAAAA,GAAAA,cAACw+B,GAAAA,EAAe,CAAC91E,MAAM43C,EAAAA,GAAAA,IAAqB1tB,EAAmBC,kBAEjEmtB,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,uBAGhBgnD,GACCx9B,EAAAA,GAAAA,cAAA,QAAMxpB,UAAU,sBAAqB+3B,EAAAA,GAAAA,GAAWivB,IAElDx9B,EAAAA,GAAAA,cAAA,QAAMxpB,UAAU,eAAe9gB,MAAOA,EAAO0/C,aAAc2oB,GACxD1zE,EAAQwjE,aAAa0Q,YACpBv+B,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,QAAMxpB,UAAU,mBAAmBmrB,QAASugB,IACzC+b,EAAAA,GAAAA,IAAkD,IAA3B5zE,EAAQwjE,YAAYx7D,KAAaxI,EAAKy/B,MAAM,IAEtE0W,EAAAA,GAAAA,cAAA,QAAMxpB,UAAU,mBAAmBmrB,QAASugB,GAAcr4D,EAAK,qBAGlEQ,EAAQ8zE,UAAa,GAAEt0E,EAAK,qBAC5B40E,EAAAA,GAAAA,IAAW50E,EAAqB,IAAfQ,EAAQgI,OAE3BkrE,GACCv9B,EAAAA,GAAAA,cAAC0+B,GAAAA,EAAqB,CAAC9gE,OAAQ2/D,IAE5B,I,4BC3GX,MAoIA,GAvH8BoB,EAC5Bt0E,UAASu0E,sBAAqBlD,gCAA+BmD,aAAY3hD,eACzE4hD,mBAAkBC,eAAcC,mBAEhC,MAAM,iBAAExtE,EAAgB,eAAEytE,IAAmBzhD,EAAAA,EAAAA,MAEvC3zB,GAAO+3C,EAAAA,GAAAA,MACP,SAAE4C,IAAaC,EAAAA,EAAAA,MAGfU,GAAMtB,EAAAA,EAAAA,IAAuB,MAE7BjtC,EAAUvM,EAAQiC,QAAQsK,SAC1B,eAAEuc,EAAc,QAAE2rB,EAAO,UAAEogC,GAActoE,EAEzCuoE,EAAYvoE,EAAQsgC,yBAAsBxxC,GAC9Cs3D,EAAAA,EAAAA,IAAoB3yD,EAASy0C,IAAYsgC,EAAAA,GAAoB,YAAc,UAGvEC,GAAUrD,EAAAA,GAAAA,IAAkB72B,EAAKy5B,GACjCU,GAAUtD,EAAAA,GAAAA,IAAkB72B,EAAKu2B,GACjC6D,EAAmB,UAAS3oE,EAAQnQ,YACpC+4E,GAAgB/8B,EAAAA,GAAAA,GACpB88B,GACCF,IAAYH,EACbjwC,EAAAA,GAAAA,QACA/R,IAEKuiD,EAAiBC,EAAoBC,IAAqB17B,EAAAA,GAAAA,KAE3D27B,GAAoB36B,EAAAA,EAAAA,KAAY,KACpC06B,IACAX,KAAgB,GACf,CAACA,EAAcW,IAEZE,GAA2B7wB,EAAAA,GAAAA,GAAY8vB,IAE7C1/B,EAAAA,EAAAA,KAAU,KACJ8/B,GAAaI,IAAYR,GAAoBe,KAC/CH,IACAX,MACF,GACC,CAACG,EAAWI,EAASP,EAAcD,EAAkBe,EAA0BH,IAElF,MAAMI,GAAY76B,EAAAA,EAAAA,KAAY,KAC5Bg6B,EAAe,CACb9rD,eAAgBvc,EAAQuc,gBACxB,GACD,CAAC8rD,EAAgBroE,IAEdsrD,GAAcjd,EAAAA,EAAAA,KAAY,KAC9B,GAAIi6B,EACF,OAAIO,OACFjuE,EAAiB,CACfnH,QAASR,EAAK,yBACdoQ,OAAQ,CACNA,OAAQ,iBACRnU,QAAS,CACPqtB,eAAgBvc,EAAQuc,iBAG5BomD,WAAY1vE,EAAK,iBAInB61E,SACAX,OAIJe,GAAW,GACV,CACDZ,EAAWO,EAAiB51E,EAAMk1E,EAAce,EAAWtuE,EAAkBkuE,EAC7E9oE,EAAQuc,iBAGJ4sD,EAAkB,cAAe5sD,GACjC,MAAE9Y,EAAK,OAAEC,IAAW0lE,EAAAA,GAAAA,IAAqBppE,EAAS4tC,GAClDhuB,GAAYssB,EAAAA,GAAAA,GAChB,sBACAi9B,GAAmB,WACnBb,IAAc70E,EAAQmI,YAAc,YAGtC,OACEwtC,EAAAA,GAAAA,cAAA,OACEmF,IAAKA,EACL3uB,UAAWA,EACXwsB,MAAQ,UAAS3oC,gBAAoBC,OACrCqnC,QAAUo+B,OAAgCr6E,EAAdw8D,GAE5BliB,EAAAA,GAAAA,cAACigC,GAAAA,EAAW,CACVlxB,aAAc5J,EACdvuC,QAASA,EACTspE,cAAef,EACfgB,mBAAmB,aACnB/6D,KAAM/K,EACNwkE,WAAYA,EACZuB,QAASf,EACTgB,QAASf,EACTn8B,qBAAmB,EACnBm9B,YAAapjD,IAEdgiD,GAAaG,GAAWI,GACvBz/B,EAAAA,GAAAA,cAACugC,GAAAA,EAAe,CACd5jC,IAAK4iC,EACL/oD,UAAU,iBACVgqD,OAAQhB,EACRp6D,KAzHqB,KAyHf/K,EACNmiE,MAAI,EACJiE,eAAa,EACbhE,QAAM,EACNiE,QAASd,IAGT,E,4BC7IV,MAAMe,GAAO,EAAI3yC,GAAAA,GACX4yC,GAAyB,IACzBC,GAAa,IACbC,GAAe,EAEN,SAASC,GACtBz7E,EACAwG,EACAk1E,EACAtxC,EACA2/B,EACAnkE,EACA+1E,GAEA,MAAM,0BACJC,EAAyB,qBAAEC,EAAoB,6BAAEC,IAC/C5jD,EAAAA,EAAAA,MAGE2nB,GAAMtB,EAAAA,EAAAA,IAAuB,MAG7Bw9B,GAAWx9B,EAAAA,EAAAA,IAAqC,MAEhDy9B,GAAiB7+B,EAAAA,GAAAA,GAASu+B,EAAW,WAAUA,SAAYt7E,GAAYs7E,GAEvE57D,EAAO67D,GAAiBN,GACxB39B,GAAQu+B,EAAAA,GAAAA,GAAY,UAASn8D,MAAW,WAAUA,MAAUla,GAAS,mBAErEykC,GAAekU,EAAAA,EAAAA,SAA6Bn+C,GAC5C87E,GAAsB39B,EAAAA,EAAAA,SAA2Bn+C,GACjD+7E,GAAuBx8B,EAAAA,EAAAA,KAAY,KACrBE,EAAIzuB,UAItByqD,EAAqB,CACnB77E,OAAQA,EACRwG,UAAWA,EACXZ,MAAOA,EACPykC,aAAcA,EAAajZ,UAE7B8qD,EAAoB9qD,aAAUhxB,EAC9BiqC,EAAajZ,aAAUhxB,EAAS,GAC/B,CAACy7E,EAAsB77E,EAAQwG,EAAWZ,IAEvCsxE,GAAOv3B,EAAAA,EAAAA,KAAY,KACvB,MAAMma,EAAQiiB,EAAS3qD,QACnB4qD,IACEliB,IACFA,EAAMvqC,QACNuqC,EAAMhR,UAERizB,EAAS3qD,QAAU,IAAIgrD,MACvBL,EAAS3qD,QAAQ0sB,IAAMk+B,GACvBK,EAAAA,GAAAA,GAASN,EAAS3qD,SAClB2qD,EAAS3qD,QAAQuqB,iBAAiB,SAAS,KACzCogC,EAAS3qD,aAAUhxB,CAAS,GAC3B,CAAEk8E,MAAM,IACb,GACC,CAACN,IAEEpf,GAAcjd,EAAAA,EAAAA,KAAY,KAC9Bu3B,IAEA,MAAMttB,EAAY/J,EAAIzuB,QAEtB,KAAKxrB,GAAUgkD,GAAcpjD,GAAcxG,GACzC,OAGF,MAAM,EAAEgpC,EAAC,EAAEc,GAAM8f,EAAUsoB,wBAE3B0J,EAA0B,CACxBh2E,MAAOA,EACPojC,IACAc,IACAC,UAAWjqB,EACXkqB,YAAa+/B,IAGV1/B,EAAajZ,UAChBiZ,EAAajZ,QAAU,GACvB8qD,EAAoB9qD,QAAUmrD,YAAY/vE,MAC1CtD,WAAWizE,EAAsBb,KAGnCjxC,EAAajZ,QAAQ1rB,KAAKw2E,EAAoB9qD,SACzCmrD,YAAY/vE,MAAQ0vE,EAAoB9qD,SAAWmqD,GACpDC,GAAa,GAChB,CAACx7E,EAAQ4F,EAAOg2E,EAA2B7R,EAAOvjE,EAAW0wE,EAAMiF,EAAsBr8D,IAgC5F,OA7BAg6B,EAAAA,EAAAA,KAAU,KACR,MAAM8P,EAAY/J,EAAIzuB,QAEjBw4B,GAAcxf,GAEnBA,EAAwB9+B,SAAQ,EAC9BnK,KACA4oC,YACAvjC,UAAWg2E,MAEX,GAAIzyC,GAAavjC,IAAcg2E,EAC7B,OAGF,MAAM,EAAExzC,EAAC,EAAEc,GAAM8f,EAAUsoB,wBAE3B4J,EAA6B,CAC3B36E,KACAnB,OAAQA,EACRsqC,SAAU1kC,EACVmkC,UAAWjqB,EACXkpB,IACAc,IACAE,YAAa+/B,IAEfmN,GAAM,GACN,GACD,CAAC9sC,EAAyBpqC,EAAQ4F,EAAOmkE,EAAOvjE,EAAW0wE,EAAM4E,EAA8Bh8D,IAE3F,CACL+/B,MACA//B,OACA49B,QACAkf,cAEJ,CCrGA,MAwCA,IAAeviB,EAAAA,EAAAA,KAAK4D,EAAAA,EAAAA,KAAqB,CAACp+C,GAAU+F,QAAO62E,kBAClD,CACLnrE,SAASorE,EAAAA,EAAAA,IAAoB78E,EAAQ+F,GACrC+2E,OAAQF,GAAcG,EAAAA,EAAAA,IAA0B/8E,EAAQ+F,QAASxF,EACjEs7E,SAASmB,EAAAA,EAAAA,IAAyBh9E,EAAQ+F,MAJ1Bq4C,EAtC6B6+B,EAC/C/S,QACAuP,sBACA1hD,eACAmlD,mBACAv2E,YACAxG,SACAoqC,0BACA94B,UACAqrE,SACAjB,cAEA,MAAM,IACJ77B,EAAG,KACH//B,EAAI,MACJ49B,EAAK,YACLkf,GACE6e,GAAiBz7E,EAAQwG,EAAWk1E,EAAStxC,EAAyB2/B,EAAO4S,GAAQ/2E,OACnF8xE,GAAiBhB,EAAAA,GAAAA,IAAkB72B,EAAKy5B,GAE9C,OACE5+B,EAAAA,GAAAA,cAACu8B,GAAAA,EAAuB,CACtB3lE,QAASA,EACTwO,KAAMA,EACNC,QA1BU,EA2BV+6D,QAASpD,EACTsF,aAAcD,EACdnlD,aAAcA,EACds/C,KAAMQ,EACNhzB,uBAAqB,EACrB7E,IAAKA,EACL3uB,WAAWssB,EAAAA,GAAAA,GAAe,4BAA6BlsC,GAASnQ,KAAO87E,GAAAA,IAAmB,sBAC1Fv/B,MAAOA,EACPrB,QAASugB,GACT,KCDN,IAAeviB,EAAAA,EAAAA,KAAK4D,EAAAA,EAAAA,KAAqB,CAACp+C,GAAUq9E,gBAAeT,kBACjE,MAAMnrE,EAAUzR,EAAOqS,aAAakS,KAAK84D,GACzC,MAAO,CACL5rE,UACAqrE,OAAQrrE,GAAS1L,OAAS62E,GAAcG,EAAAA,EAAAA,IAA0B/8E,EAAQyR,EAAQ1L,YAASxF,EAC3Fs7E,QAASpqE,GAAS1L,QAASi3E,EAAAA,EAAAA,IAAyBh9E,EAAQyR,EAAQ1L,OACrE,GANiBq4C,EApCmCk/B,EACrDpT,QACAmT,gBACA12E,YACAxG,SACAoqC,0BACA94B,UACAqrE,SACAjB,UACApC,0BAEA,MAAM,IACJz5B,EAAG,KACH//B,EAAI,MACJ49B,EAAK,YACLkf,GACE6e,GACFz7E,EAAQwG,EAAWk1E,EAAStxC,EAAyB2/B,EAAO4S,GAAQ/2E,OAAOw3E,EAAAA,GAAAA,IAAmB,IAGhG,OACE1iC,EAAAA,GAAAA,cAACiD,GAAAA,EAAW,CACVkC,IAAKA,EACLjuC,WAAYsrE,EACZhsD,WAAWssB,EAAAA,GAAAA,GAAe,4BAA6BlsC,GAASnQ,KAAO87E,GAAAA,IAAmB,sBAC1Fv/B,MAAOA,EACP59B,KAAMA,EACNu9D,OAAK,EACLx/B,qBAAmB,EACnB6G,uBAAqB,EACrByxB,8BAA+BmD,EAC/Bj9B,QAASugB,GACT,K,4EClBN,MAyMA,GAzM4B0gB,EAC1Bn8E,KACA4D,UACAoxE,gCACAC,gCACAnM,YACAsT,cACAC,cACAC,iBACA7lD,eACAgyC,aACAI,cACA0T,gBACAhN,cACAr0B,UACAshC,qBAGA,MAAM99B,GAAMtB,EAAAA,EAAAA,IAAuB,MAE7Bq/B,GAAWr/B,EAAAA,EAAAA,IAAyB,MAEpC9M,GAASosC,EAAAA,EAAAA,IAAgB94E,KAAY+4E,EAAAA,EAAAA,IAAuB/4E,GAC5Dg5E,EAAetsC,EAAMnzB,SAEpB0/D,EAAe,CAAGC,IAAet/B,EAAAA,GAAAA,GAAQlN,EAAMkmB,WAEhDumB,GAA2BxH,EAAAA,GAAAA,IAAkB72B,EAAKs2B,GAClDgI,GACJzH,EAAAA,GAAAA,IAAkB72B,EAAKu2B,IACpB8H,EAECE,GAAoB7/B,EAAAA,EAAAA,IAAO2/B,GAC7BC,IAA6BC,EAAkBhtD,UACjDgtD,EAAkBhtD,SAAU,GAG9B,MAAM,SAAE8tB,IAAaC,EAAAA,EAAAA,OACdk/B,EAAeC,IAAoB/iC,EAAAA,EAAAA,IAASgiC,GAC7CgB,EAAaz3E,QAAQu3E,GAAiBH,GAA4BtmD,IACjE4mD,EAAeC,IAAoBljC,EAAAA,EAAAA,IAASiiC,IAAgBQ,GAE7DpD,GAAgBljB,EAAAA,EAAAA,IAAoB3yD,EAAS,WAC5C25E,IAAwBnjC,EAAAA,EAAAA,IAASz0C,QAAQ8zE,GAAiBlxC,GAAAA,GAA0BkxC,MACrF,UAAExgB,EAAS,aAAEukB,IAAiBC,EAAAA,GAAAA,GAClChE,GAAgB2D,GAAYM,EAAAA,EAAAA,IAAsB95E,EAAS,UAAW6yB,GAElEknD,EAAgBf,GAAgB3jB,GAC/B2kB,EAAeC,IAAmBrgC,EAAAA,GAAAA,KAEnC+Z,GAAeumB,EAAAA,EAAAA,IAA4Bl6E,GAC3Cm6E,EAAWp4E,QAAQ4xD,GAEnBymB,GAAmBznB,EAAAA,EAAAA,IAAoB3yD,EAAS,YAC/Cq6E,IAAsB7jC,EAAAA,EAAAA,IAASz0C,QAAQq4E,GAAoBz1C,GAAAA,GAA0By1C,KACtFE,EAAiBnB,GAA4BtmD,EAC7Cia,GAAiBsL,EAAAA,GAAAA,GAASgiC,GAAmBE,OAAgBj/E,EAAWw3B,GACxE0nD,GAAoBC,EAAAA,GAAAA,IAAoBL,GAAYrtC,KAAoBktC,GAExES,GAAWN,GAAYrtC,GAAkBktC,EACzCU,GAAWC,EAAAA,GAAAA,GAAwB36E,EAASy6E,GAC5CG,GAAkBJ,EAAAA,GAAAA,IAAoBC,GAEtCI,EAAWd,GAAiBV,EAAkBhtD,SAE5CutD,aAAckB,IAAqBjB,EAAAA,GAAAA,IACzClnB,EAAAA,EAAAA,IAAoB3yD,EAAS,aAC5B24E,GACDmB,EAAAA,EAAAA,IAAsB95E,EAAS,YAC/B6yB,IAGI,YAAEkoD,EAAW,eAAEC,GAAc,iBAAEC,KAAqBC,EAAAA,EAAAA,IACxDl7E,EACA04E,IAAmBC,EAAgBmC,EAAmBlB,GACrDJ,IAAeQ,IAAkBL,GAAyBhB,GAGvDwC,IAAiD,KAA/Bx2B,EAAAA,GAAAA,GAAY20B,IAElCrxB,aAAcmzB,GACdjzB,qBAAsBkzB,KACpBjzB,EAAAA,GAAAA,GAAkB4yB,QAAgB3/E,EAAW8/E,KAE/ChzB,qBAAsBmzB,KACpBlzB,EAAAA,GAAAA,GAAkBrmD,SAASu3E,GAAiBS,KAAmBN,IAAkB2B,MAE9EG,GAAcC,KAAmBhlC,EAAAA,EAAAA,IAAiB,GACnDilC,IAAmB7gC,EAAAA,EAAAA,KAAatuC,IACpCkvE,GAAgBjzE,KAAKC,IAAI,EAAG8D,EAAEmhE,cAAciO,YAAc,GAAG,GAC5D,IAEGxmB,GAAW2jB,EAASxsD,SAAS6oC,UAAYxoB,EAAMwoB,UAAY,EAE3D8P,IAAQ2W,EAAAA,EAAAA,IAAa37E,GACrB47E,GAAiB75E,SAAQg3E,EAAAA,EAAAA,IAAuB/4E,KAChD,MACJgQ,GAAK,OAAEC,IACL40D,IAAcgX,EAAAA,GAAAA,IAAyBnvC,EAAOs4B,GAAOC,EAAa2W,GAAgB1W,EAAW/qB,GAE3F0d,IAAcjd,EAAAA,EAAAA,KAAY,KAC1BmgC,EACFnC,IAAiB54E,GAIf24E,GACFxlD,EAAAA,EAAAA,MAAa2oD,2BAA2B,CAAE97E,YAIvC+5E,GAKDA,IAAkBN,GACpBC,GAAiB,GAGfT,EACFC,IAIF5hC,IAAUt3C,EAAQ5D,KAbhBm9E,GAAkBwC,IAAeA,GAad,GACpB,CACDhB,EAAapC,EAAeoB,EAAeN,EAAeR,EAAgB3hC,EAASt3C,EAAS44E,EAC5FM,IAGI/sD,IAAYssB,EAAAA,GAAAA,GAAe,oBAAqBsiC,GAAe,eAG/DpiC,GAAS,WAAU1oC,QADD40D,EAAc,WAAU70D,eAAkB60D,EAAW5gC,aAAa4gC,EAAW9/B,OAAS,KAG9G,OACE4Q,EAAAA,GAAAA,cAAA,OACEmF,IAAKA,EACL1+C,GAAIA,EACJ+vB,UAAWA,GACXwsB,MAAOA,GACPrB,QAASyjC,OAAc1/E,EAAYw8D,IAElCgjB,GACCllC,EAAAA,GAAAA,cAACqmC,GAAAA,EAAc,CACblhC,IAAK+9B,EACL9/B,IAAKghC,EACL5tD,UAAU,aACV8oD,QAASwE,GAAiBL,EAC1B6C,OAAK,EACLC,MAAI,EACJC,aAAW,EACXnJ,WAAYrH,EACZyQ,aAAcX,GACdY,QAASpC,IAGbtkC,EAAAA,GAAAA,cAAA,OACEoD,IAAKjM,EACL3gB,WAAWssB,EAAAA,GAAAA,GAAe,YAAa8hC,GACvCvhC,IAAI,GACJg6B,WAAYrH,IAEbwO,IAAaE,GACZ1kC,EAAAA,GAAAA,cAAA,UACEmF,IAAK4/B,EACLvuD,WAAWssB,EAAAA,GAAAA,GAAe,YAAamiC,KAG1CjP,GAAeh2B,EAAAA,GAAAA,cAAA,QAAMxpB,UAAU,cAChCwpB,EAAAA,GAAAA,cAAA,KAAGxpB,WAAWssB,EAAAA,GAAAA,GAAe,kBAAmB6iC,MAChD3lC,EAAAA,GAAAA,cAACme,GAAAA,EAAY,CACXC,UAAWklB,EACXqD,eAAa,EACb3oB,aAAcA,EACd3jD,MAAOA,GACPC,OAAQA,GACRkc,UAAU,kBAEXivD,IACCzlC,EAAAA,GAAAA,cAAA,OAAKxpB,WAAWssB,EAAAA,GAAAA,GAAe,gBAAiB4iC,KAC9C1lC,EAAAA,GAAAA,cAAC4mC,GAAAA,EAAe,CAACl4D,SAAU42D,GAAkB3jC,QAASugB,OAGxDyhB,IAAkBS,GAClBpkC,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,kBAEd6uD,GACCrlC,EAAAA,GAAAA,cAAA,QAAMxpB,UAAU,6BACZ4uD,GAAepC,EAAkB,GAAEpwE,KAAK0K,MAAyB,IAAnBgoE,OAA6B,OAG/EtlC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,0BACZugB,EAAM8vC,MAAQ,OAAQC,EAAAA,GAAAA,IAAoBl0E,KAAKC,IAAI0sD,GAAWqmB,GAAc,KAG7E,E,eCjOV,MAiCA,IAAeriC,EAAAA,EAAAA,KACb,CAACp+C,GAAU4hF,cACT,MAAQC,aAAeC,WAAYC,IAAoB/hF,EACvD,MAAO,CACLqjB,MAAMlC,EAAAA,EAAAA,IAAWnhB,EAAQ4hF,EAAQlyE,QACjCqyE,gBACA3sE,eAAgBpV,EAAOqV,SAASC,MAAMF,eACvC,GAPL,EA/B2C4sE,EACzCJ,UAASv+D,OAAM0+D,gBAAe3sE,qBAE9B,MAAM,SAAE9R,IAAa+0B,EAAAA,EAAAA,OAEf,UACJvE,EAAS,SACTE,EAAQ,YACR6H,EAAW,OACXnsB,GACEkyE,EACEK,EAbwB,MAaTvyE,EAEfqtD,GAAcjd,EAAAA,EAAAA,KAAY,KAC9Bx8C,EAAS,CAAEhC,GAAIoO,GAAS,GACvB,CAACpM,EAAUoM,IAEd,OACEmrC,EAAAA,GAAAA,cAAA,OACExpB,WAAWssB,EAAAA,GAAAA,GAAe,UAAWskC,GAAgB,eACrDzlC,QAASylC,EAAellB,OAAcx8D,GAEtCs6C,EAAAA,GAAAA,cAACk6B,GAAAA,EAAM,CAAC90D,KAAK,QAAQoD,KAAMA,EAAM9f,KAAMuwB,GAAaE,EAAU5e,eAAgBA,EAAgB8/D,WAAS,IACvGr6B,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,gBACbwpB,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,gBAAgByC,EAAU,IAAEE,GAC3C6mB,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,kBAAiB6wD,EAAAA,GAAAA,IAA0BH,EAAelmD,KAEvE,I,oDC4CV,SAASsmD,GAAcz6C,EAAegb,GACpC,OAAOA,EAAQ,GAAMhb,EAAQgb,EAAS,KAAK0/B,UAAY,CACzD,CAEA,SAnFiCC,EAC/BC,SACAC,cACAhtC,cACAitC,iBACAC,iBACAC,oBAEA,MAAMl9E,EAAS+8E,GAAeA,EAAY72E,MAAMugC,GAAMA,EAAEjmB,SAAWs8D,EAAOt8D,SACpE28D,EAA0C,IAA1BF,EAAez6E,SAA2D,IAA3Cy6E,EAAe1+E,QAAQu+E,EAAOt8D,QAC7E48D,EAAYH,EAAez6E,OAAS,GAAK26E,GAAmBn9E,GAAQ4vC,SACpEytC,EAAgBr9E,EAAS28E,GAAc38E,EAAOqwC,YAAaN,GAAe,GAAK,GAC9EutC,EAAcC,IAAmBrnC,EAAAA,EAAAA,IAASgnC,EAAgB,EAAIG,GAE/DG,GAAUtkC,EAAAA,EAAAA,IAAuB,MACjCukC,EAAYz9E,EAAS28E,GAAc38E,EAAOqwC,YAAa2sC,GAAkB,GAAK,EAC9EU,EAA0BJ,IAAiBD,EA0BjD,IAxBA5oC,EAAAA,EAAAA,KAAU,KACJyoC,GACFK,EAAgBF,EAClB,GACC,CAACH,EAAeG,KAEnB5oC,EAAAA,EAAAA,KAAU,KACR,MAAMkpC,EAASH,EAAQzxD,QAEvB,GAAI4xD,GAAUT,EAAe,CAC3B,MAAMU,EAAQD,EAAOpsB,kBAEflZ,EAAQqlC,EAA0B,GAAK,sDACxCE,EAMHA,EAAMrQ,aAAa,QAASl1B,GAL5BslC,EAAO/rB,UAAa,gFACiDvZ,+EAMzE,IACC,CAACqlC,EAAyBR,KAExBH,IAAgB/8E,EACnB,OAGF,MAAM69E,EAAa,UAASJ,wBAAgCC,EAA0B,EAAI,KAE1F,OACEroC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,aAAaqrB,IAAI,OAC9B7B,EAAAA,GAAAA,cAAA,OAAKxpB,UAAY,sBAAsC,QAAlBwxD,EAA0B,cAAgB,KAC5EA,EAAc,IACdD,GACC/nC,EAAAA,GAAAA,cAAA,QAAMxpB,WAAWssB,EAAAA,GAAAA,GACf,sBACCglC,GAAiB,QAClBD,GAAiB,YAGjB7nC,EAAAA,GAAAA,cAAA,KAAGxpB,UAAWsxD,EAAgB,aAAe,iBAInD9nC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,qBACbwpB,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,mBAAmBqrB,IAAI,SACnC0M,EAAAA,GAAAA,GAAWk5B,EAAO/+E,OAErBs3C,EAAAA,GAAAA,cAAA,OAAKxpB,WAAWssB,EAAAA,GAAAA,GAAe,qBAAsBilC,IAAaD,GAAiB,UACjF9nC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,qBAAqB2uB,IAAKgjC,IACzCnoC,EAAAA,GAAAA,cAAA,OACExpB,UAAU,mBACVwsB,MAAOwlC,MAIT,ECsQV,SAASxgC,GAAgBrxC,GACvBA,EAAEqxC,iBACJ,CAEA,UAAerI,EAAAA,EAAAA,KAAK4D,EAAAA,EAAAA,KAClB,CAACp+C,GAAU+lB,WACT,MAAM,eAAEuvB,GAAmBvvB,EAAKzW,SACxBiO,OAASgH,KAAM8wD,IAAgBr1E,EACvC,OAAKs1C,GAA4C,IAA1BA,EAAettC,OAI/B,CACLstC,iBACA+/B,aALO,CAAC,CAMT,GAXej3B,EA1ToBklC,EACtCp+E,UACA6gB,OACAuvB,iBACA+/B,YACAkO,iBAEA,MAAM,YAAE7lE,EAAW,gBAAE8lE,EAAe,gBAAEhN,IAAoBn+C,EAAAA,EAAAA,OAElD/2B,GAAIqF,EAAS,OAAExG,GAAW+E,GAC5B,QAAEu+E,EAAO,QAAEn0E,GAAYyW,GACtB29D,EAAcC,IAAmBjoC,EAAAA,EAAAA,KAAkB,IACnDkoC,EAAeC,IAAoBnoC,EAAAA,EAAAA,IAAmB,KACtDooC,EAAiBC,IAAsBroC,EAAAA,EAAAA,KAAkB,IACzDsoC,EAAcC,IAAmBvoC,EAAAA,EAAAA,KAAkB,IACnDwoC,EAAaC,IAAkBzoC,EAAAA,EAAAA,KACnC+nC,EAAQW,QAAUX,EAAQY,WAAaZ,EAAQY,UAAY,EACxD52E,KAAK87B,IAAIk6C,EAAQY,UAAY52E,KAAKG,MAAMlB,KAAKC,MAAQ,MAAQ8yC,EAAAA,EAAAA,MAAuBgkC,EAAQS,aAC5F,GAGAI,GAAe5lC,EAAAA,EAAAA,IAAuB,OACpCpvC,QAASizE,EAAW,YAAEhtC,GAAgBjmC,EACxCi1E,EAAWhC,GAAeA,EAAYl3C,MAAMY,GAAMA,EAAEmJ,WACpDovC,GAAWf,EAAQW,SAAWG,EAC9BE,GAAiBD,GAAWf,EAAQiB,UAAYz8E,OAAOqH,EAAQimC,aAAe,EAC9EovC,EAAaH,GAAWf,EAAQmB,eAChCpC,EAAiBD,EAAc90E,KAAKC,OAAO60E,EAAYv9E,KAAKinC,GAAMA,EAAE4J,eAAgBN,EACpFktC,EAAiBF,EAAcA,EAAY98E,QAAO,CAACo/E,EAAmB54C,KACtEA,EAAE64C,WACJD,EAAQh/E,KAAKomC,EAAEjmB,QAGV6+D,IACN,IAAM,GACHA,EAAUpB,EAAQoB,QAAQ7/E,KAAKkZ,IAAC,CACpCmoC,MAAOnoC,EAAE3a,KACTmkC,MAAOxpB,EAAE8H,OACT++D,OAAQ99E,QAAQw8E,EAAQuB,MAAQvB,EAAQS,aAAeA,GAAe,QAGxEjqC,EAAAA,EAAAA,KAAU,KACR,MAAMgrC,EAASl/D,EAAKzW,QAAQA,SAAS5D,MAAMlG,GAAWA,EAAO4vC,WACzDsuC,GAAgBuB,IACdA,EAAOH,WACTtO,IAEFmN,GAAgB,GAClB,GACC,CAACD,EAAc39D,EAAKzW,QAAQA,QAASknE,KAExCv8B,EAAAA,EAAAA,KAAU,KACJiqC,EAAc,GAChB76E,YAAW,IAAM86E,EAAeD,EAAc,IAAI,KAGpD,MAAMgB,EAAcZ,EAAa/yD,QAEjC,GAAI2zD,EAAa,CACf,MAAMC,EAAgB,GAAQ13E,KAAK23E,GAC7BhC,EAAQ8B,EAAYG,iBACpBC,EAAUJ,EAAYnuB,kBAK5B,GAJImtB,GAAe,GACjBgB,EAAYjhC,UAAUjhB,IAAI,YAGvBogD,GAAUkC,EASR,CACL,MAAMC,GAAqB9B,EAAQS,YAAeA,GAAeT,EAAQS,YAAgBiB,EACzFG,EAAQ7V,aAAckS,EAAAA,GAAAA,IAAoBuC,GACzCd,EAAMrsB,kBAAiCgc,aAAa,oBAAsB,IAAGwS,IAChF,MAZEL,EAAY9tB,UAAa,oBACjBuqB,EAAAA,GAAAA,IAAoBuC,2LAGJiB,KAAiBA,qEAS7C,IACC,CAACjB,EAAaT,EAAQS,eAEzBjqC,EAAAA,EAAAA,KAAU,KACJwpC,EAAQuB,OAASd,GAAe,GAAMK,IAAad,EAAQW,SAC7D1mE,EAAY,CAAEvd,SAAQwG,aACxB,GACC,CAACxG,EAAQ+jF,EAAaK,EAAU7mE,EAAa/W,EAAW88E,EAAQW,OAAQX,EAAQuB,QAGnF/qC,EAAAA,EAAAA,KAAU,KACR,IAAIurC,EAQJ,OANI/B,EAAQuB,OAASvB,EAAQW,QAAUX,EAAQS,aAAeT,EAAQS,YAAc,IAClFsB,EAAQxiF,OAAOqG,YAAW,KACxBqU,EAAY,CAAEvd,SAAQwG,aAAY,GACX,IAAtB88E,EAAQS,cAGN,KACDsB,GACFxiF,OAAOsH,aAAak7E,EACtB,CACD,GACA,CAAChB,EAASrkF,EAAQud,EAAa/W,EAAW88E,EAAQS,YAAaT,EAAQW,OAAQX,EAAQuB,OAE1F,MAAMS,GAAejoC,EAAAA,EAAAA,KAAQ,IACpBlI,EAAiBA,EAAe7vC,QAAO,CAACD,EAAmBlE,KAChE,MAAM+hB,EAAOgyD,EAAU/zE,GAKvB,OAJI+hB,GACF7d,EAAOK,KAAKwd,GAGP7d,CAAM,GACZ,IAAM,IACR,CAAC6vE,EAAW//B,IAETowC,GAAoB5lC,EAAAA,EAAAA,KACvB95B,IACC69D,EAAiB,CAAC79D,IAClB29D,GAAgB,GAChBM,GAAgB,GAChBV,EAAW,CAACv9D,GAAQ,GACnB,CAACu9D,IAGAoC,GAAuB7lC,EAAAA,EAAAA,KAC1Bh6B,IACC+9D,EAAiB/9D,EAAQ,GACxB,IAGC8/D,GAAkB9lC,EAAAA,EAAAA,KACtB,KACE6jC,GAAgB,GAChBM,GAAgB,GAChBV,EAAWK,EAAc,GACxB,CAACL,EAAYK,IAGZiC,GAAyB/lC,EAAAA,EAAAA,KAC7B,KACE0jC,EAAgB,CAAErjF,SAAQwG,aAAY,GACrC,CAACxG,EAAQwG,EAAW68E,IAGnBsC,GAAqBhmC,EAAAA,EAAAA,KAAY,KACrCikC,GAAmB,EAAK,GACvB,IAEGgC,GAAqBjmC,EAAAA,EAAAA,KAAY,KACrCikC,GAAmB,GACnBE,GAAgB,EAAM,GACrB,KAGHhqC,EAAAA,EAAAA,KAAU,KACJ+pC,GAAgBO,GAAYd,EAAQuB,MAAQ11E,EAAQA,SAAWyW,EAAKzW,QAAQ02E,WACxD12E,EAAQA,QAAQ5D,MAAMugC,GAAMA,EAAEmJ,UAAYnJ,EAAE64C,aAEhEf,GAAmB,GAEvB,GACC,CAACQ,EAAUP,EAAc10E,EAAQA,QAASm0E,EAAQuB,KAAMj/D,EAAKzW,QAAQ02E,WAExE,MAAMthF,GAAO+3C,EAAAA,GAAAA,KA4Cb,OACE5B,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,OAAOqrB,IAAKh4C,EAAKi4C,MAAQ,OAAS,OAZ/CmnC,GAAmB/9D,EAAKzW,QAAQ02E,UAC9BnrC,EAAAA,GAAAA,cAACorC,GAAAA,EAAY,CACX/gF,SAASghF,EAAAA,GAAAA,GAAuBngE,EAAKzW,QAAQ02E,SAAUjgE,EAAKzW,QAAQ62E,kBACpE/rB,SA5MgB,IA6MhBgsB,UAAWL,EACXM,YA/MoB,2BAwNxBxrC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,kBAAiB+3B,EAAAA,GAAAA,GAAWq6B,EAAQ6C,SAAU,CAAC,QAAS,QACvEzrC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,aACZ3sB,EAuET,SAA2B++E,GAEzB,YAAgC,IAArBA,EAAQiB,SAjSR,IAqSPjB,EAAQW,OACH,eAGLX,EAAQuB,KACHvB,EAAQiB,SAAW,WAAa,oBAGlCjB,EAAQiB,SAAW,aAAe,eAC3C,CAtFc6B,CAAkB9C,IA/B1BgC,EAAaz9E,OAAS,GACpB6yC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,sBACZo0D,EAAazgF,KAAKqe,GACjBw3B,EAAAA,GAAAA,cAACk6B,GAAAA,EAAM,CACL90D,KAAK,QACLoD,KAAMA,OA4BX6gE,EAAc,GAAKM,GAAW3pC,EAAAA,GAAAA,cAAA,OAAKmF,IAAKskC,EAAcjzD,UAAU,mBAChEoyD,EAAQuB,MAAQj/D,EAAKzW,QAAQ02E,WAAaxB,GACzC3pC,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACL7kC,OAAK,EACL8H,KAAK,OACL48B,MAAM,cACNxrB,UAAU,iBACV6sC,SAAU4lB,EACVtnC,QAASspC,EACTxiC,UAAU,iBAEVzI,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,gBAIlBmzD,GACC3pC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,eAAemrB,QAASqG,IACpC8hC,EAEG9pC,EAAAA,GAAAA,cAAC2rC,GAAAA,EAAa,CACZ1gE,QAAS++D,EACTr9B,SAAUm+B,EACVznB,SAAUh5D,EAAQwsC,aAAegyC,EACjC+C,eAAgB/C,EAAeE,OAAgBrjF,EAC/C4X,OAAK,IAIP0iC,EAAAA,GAAAA,cAAC6rC,GAAAA,EAAU,CACTl5C,KAAO,QAAO7mC,IACdmf,QAAS++D,EACTr9B,SAAUk+B,EACVxnB,SAAUh5D,EAAQwsC,aAAegyC,EACjCiD,cAAejD,EAAeE,EAAc,QAAKrjF,MAKzDikF,GACA3pC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,gBACZoyD,EAAQoB,QAAQ7/E,KAzFzB,SAA4Bs9E,GAC1B,OACEznC,EAAAA,GAAAA,cAACwnC,GAAU,CACT7qC,IAAK8qC,EAAOt8D,OACZ08D,cAAesB,IAAiBQ,EAChClC,OAAQA,EACRC,YAAaA,EACbhtC,YAAaA,EACbitC,eAAgBA,EAChBC,eAAgBA,GAGtB,MAgFMgC,IAAkBE,GAClB9pC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,qBA0CvB,SAAgC3sB,EAAc6H,EAA0B+Y,GACtE,OAAKA,EAIE5gB,EAAK6H,EAAS,SAAW,OAAQ+Y,EAAO,KAHtC5gB,EAAK6H,EAAS,4BAA8B,kCAIvD,CAhD4Cq6E,CAAuBliF,EAAM++E,EAAQuB,KAAM11E,EAAQimC,cAExFovC,GACC9pC,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACLyjB,QAAM,EACNvC,SAAmC,IAAzB0lB,EAAc57E,OACxBiY,KAAK,OACLu8B,QAASopC,GAERlhF,EAAK,oBAGT+/E,GACC5pC,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACLyjB,QAAM,EACNxgD,KAAK,OACLu8B,QAASqpC,GAERnhF,EAAK,oBAGN,K,4BCnTV,MA2HA,IAAe81C,EAAAA,EAAAA,KAzGeqsC,EAC5B3hF,UACAu0E,sBACArP,YACAsT,cACAC,cACAmJ,YACA3c,cACApyC,eACA8lD,iBAAgB,EAChBhN,cACAvwC,QACAymD,eACAC,4BAEA,MAAMC,GAAUC,EAAAA,EAAAA,IAAkBhiF,IAC5B,SAAEm6C,IAAaC,EAAAA,EAAAA,MAEf6nC,GAAmBrnC,EAAAA,EAAAA,KAAY,KACnCinC,GAAe,GACd,CAACA,IAEJ,IAAKE,EACH,OAGF,MAAM,SACJG,EAAQ,IACRjzE,EAAG,WACHkzE,EAAU,MACV92E,EAAK,YACLsU,EAAW,MACX0T,EAAK,MACLqZ,GACEq1C,EACEK,GAAuBC,EAAAA,GAAAA,GAAS1iE,EArDhB,KAsDhB2iE,EAAYvgF,QAAQqgF,GAAwB/2E,GAAS62E,GAC3D,IAAIK,GAAgB,EACpB,GAAID,GAAaP,GAAS1uD,QAAU0uD,EAAQr1C,MAAO,CACjD,MAAM,MAAE18B,EAAK,OAAEC,IAAWm1D,EAAAA,GAAAA,GAAyBplE,OAAS3E,OAAWA,EAAW8+C,GAClFooC,EAAgBvyE,IAAUC,CAC5B,CACA,MAAMuyE,GAAsBnvD,GAASqZ,IAAUm1C,IAAiBU,EAE1Dp2D,GAAYssB,EAAAA,GAAAA,GAChB,UACAmpC,GAAa,aACbW,GAAiB,qBAChBlvD,IAAUqZ,IAAUk1C,GAAa,gBAClCl1C,GAAS,cACR41C,GAAa,cAGhB,OACE3sC,EAAAA,GAAAA,cAAA,OACExpB,UAAWA,EACX,gBAAe+1D,GAAYC,GAAY,GACvC3qC,IAAI,QAEHnkB,IAAUqZ,GACTiJ,EAAAA,GAAAA,cAAC8sC,GAAAA,EAAK,CACJziF,QAASA,EACTu0E,oBAAqBA,EACrBrP,UAAWA,EACXsT,YAAaA,EACbz9D,KAAMwnE,EAAgB,YAAc,SACpCtd,YAAaA,EACboN,gBAAiBmQ,EACjB7J,cAAeA,EACfhN,YAAaA,EACbvwC,MAAOA,EACPkc,QAASkrC,EAAqBP,OAAmB5mF,EACjDu9E,eAAgBkJ,IAGnBQ,GACC3sC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,gBACbwpB,EAAAA,GAAAA,cAAC+sC,GAAAA,EAAQ,CAACv2D,UAAU,YAAYld,IAAKA,EAAK5Q,KAAM6jF,GAAYC,KAC1DP,GAAav2E,GACbsqC,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,eAAc+3B,EAAAA,GAAAA,GAAW74C,IAEvC+2E,GACCzsC,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,qBAAoB+3B,EAAAA,GAAAA,GAAWk+B,EAAsB,CAAC,QAAS,UAIhFR,GAAal1C,GACbiJ,EAAAA,GAAAA,cAAC4iC,GAAK,CACJv4E,QAASA,EACToxE,8BAA+BmD,EAC/BrP,UAAWA,EACXsT,YAAaA,EACbC,YAAaA,EACb5lD,aAAcA,EACdoyC,YAAaA,EACb0T,cAAeA,EACfhN,YAAaA,EACbr0B,QAASkrC,EAAqBP,OAAmB5mF,EACjDu9E,eAAgBkJ,IAGhB,I,4BC/GV,MAyEA,IAAexsC,EAAAA,EAAAA,KAzEeqtC,EAC5B3iF,UACA4iF,uBACAnX,iBACAjS,aACAp+B,YAGA,MAAM0f,GAAMtB,EAAAA,EAAAA,IAAuB,MAE7Bh6C,GAAO+3C,EAAAA,GAAAA,KACPrd,GAAU2oD,EAAAA,EAAAA,IAAkB7iF,IAE5B,MACJqL,EAAK,KACLhN,EAAI,OACJmlC,EAAM,SACNF,EAAQ,OACRw/C,EAAM,MACNzvD,GACE6G,EAEE6oD,GAAW3qC,EAAAA,GAAAA,IAAS4qC,EAAAA,EAAAA,IAAmB3vD,IAmB7C,OAjBA4vD,EAAAA,GAAAA,IAA4B,EAAEC,MAC5B,GAAKN,GAOL,GAAIG,EAAU,CACZ,MAAMI,EAAYroC,EAAIzuB,QAAS0+C,QAAwBqY,EAAAA,MACvDC,EAAAA,GAAAA,GAAoBN,GAAU,EAAOtX,EAAgBjS,EAAYp+B,GAAO3pB,MAAM6xE,IAC5EH,EAAUxqC,MAAM4W,YAAY,gBAAiB+zB,GAC7CH,EAAUtV,aAAa0V,EAAAA,IAA2B,GAAG,GAEzD,OAZML,GACFpoC,EAAIzuB,QAAS0+C,QAAwBqY,EAAAA,KAA2B1V,gBAAgB6V,EAAAA,IAWpF,GACC,CAACX,EAAsBG,EAAUtX,EAAgBjS,EAAYp+B,IAG9Dua,EAAAA,GAAAA,cAAA,OACEmF,IAAKA,EACL3uB,UAAU,WAET9gB,GACCsqC,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,UAAS+3B,EAAAA,GAAAA,GAAW74C,IAElChN,GACCs3C,EAAAA,GAAAA,cAAA,YAAMuO,EAAAA,GAAAA,GAAW7lD,EAAM,CAAC,QAAS,QAEnCs3C,EAAAA,GAAAA,cAAA,OAAKxpB,UAAY,gBAAckH,EAAQ,YAAc,KAClD0vD,GACCptC,EAAAA,GAAAA,cAAA,OACExpB,UAAU,gBACV4sB,IAAKgqC,EACL/pC,IAAI,GACJwqC,YAAY,eAGdT,GAAY1vD,GACZsiB,EAAAA,GAAAA,cAAC8tC,GAAAA,EAAQ,CAACzzE,MAAOqjB,EAAMwxC,YAAY70D,MAAOC,OAAQojB,EAAMwxC,YAAY50D,OAAQyzE,kBAAgB,IAE9F/tC,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,qBACVwoB,EAAAA,GAAAA,GAAenR,EAAQF,EAAU9jC,EAAKy/B,MACtC6jD,GAAUntC,EAAAA,GAAAA,cAAA,YAAOn2C,EAAK,yBAGvB,IChGV,IAAgB,KAAO,uBAAuB,SAAW,uBAAuB,IAAM,uBAAuB,QAAU,wBC+EvH,IAAe81C,EAAAA,EAAAA,KAvD2BquC,EACxC3jF,UACA6yB,mBAEA,MAAM,YAAEmI,EAAW,kBAAE4oD,IAAsBzwD,EAAAA,EAAAA,MACrC3zB,GAAO+3C,EAAAA,GAAAA,KACPrd,GAAU2oD,EAAAA,EAAAA,IAAkB7iF,IAE5B,OAAE/E,EAAM,GAAEmB,GAAO4D,EAEjB6jF,GAAuBjpC,EAAAA,EAAAA,KAAY,KACvCgpC,EAAkB,CAAE3oF,SAAQ+J,IAAK,CAAC5I,IAAM,GACvC,CAACnB,EAAQmB,EAAIwnF,KAEhBE,EAAAA,GAAAA,GAAYD,EAAsBhxD,EAhBX,SAgB6Cx3B,GAEpE,MAAM,OACJmoC,EAAM,SACNF,EAAQ,cACRyN,GACE7W,GAEE,MACJlqB,EAAK,OAAEC,EAAM,UAAE28B,EAAS,SAAEsoB,GACxBnkB,EAEE8mB,GAAcjd,EAAAA,EAAAA,KAAY,KAC9B5f,EAAY,CACV//B,SACAwG,UAAWrF,EACXkjC,iBAAiB,GACjB,GACD,CAACrkC,EAAQmB,EAAI4+B,IAEhB,OACE2a,EAAAA,GAAAA,cAAA,OACExpB,WAAWssB,EAAAA,GAAAA,GAAeI,GAAAA,KAAa,eACvCvB,QAASugB,GAETliB,EAAAA,GAAAA,cAACme,GAAAA,EAAY,CACXH,aAAc/mB,GAAWm3C,QACzB/zE,MAAOA,EACPC,OAAQA,EACR8jD,WAAS,EACT5nC,UAAW0sB,GAAAA,UAEZ92C,QAAQmzD,IAAavf,EAAAA,GAAAA,cAAA,OAAKxpB,UAAW0sB,GAAAA,WAAkB4jC,EAAAA,GAAAA,IAAoBvnB,IAC5Evf,EAAAA,GAAAA,cAAA,OAAKxpB,UAAW0sB,GAAAA,KACdlD,EAAAA,GAAAA,cAAA,KAAGxpB,WAAWssB,EAAAA,GAAAA,GAAe,YAAaI,GAAAA,QACzCr5C,EAAK,qBAAqBm1C,EAAAA,GAAAA,GAAenR,EAAQF,KAEhD,ICzEJ0gD,GAAe,IAAIztE,IAAI7T,OAAOsf,QAAQ,CAC1C,mBAAoB,UACpB,eAAgB,UAChB,sBAAuB,UACvB,yBAA0B,UAC1B,eAAgB,UAChB,gBAAiB,UACjB,gBAAiB,UACjB,mBAAoB,UACpBiiE,mBAAoB,UACpBC,SAAU,UACVC,UAAW,UACXC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,UAAW,UACXC,eAAgB,UAChBC,MAAO,UACPC,OAAQ,UACRC,KAAM,aAGFC,GAAgB,CACpB,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,W,0CCapFC,GAAiB,KACjBC,GAAqB,CACzB90E,MAAO,IACPC,OAAQ,IACR80E,KAAM,GACNC,MAAO,GAIHC,GAAU,CAAEC,OAAQ,oyBAsP1B,IAAe5vC,EAAAA,EAAAA,KA3OgB6vC,EAC7BnlF,UACA4f,OACAiT,eACA44C,iBACAjS,aACAp+B,YAEA,MAAM,QAAEzB,IAAYxG,EAAAA,EAAAA,MAEd2nB,GAAMtB,EAAAA,EAAAA,IAAuB,MAE7B4lC,GAAe5lC,EAAAA,EAAAA,IAAuB,MACtCh6C,GAAO+3C,EAAAA,GAAAA,KACP6tC,GAAcC,EAAAA,GAAAA,KAEdptD,GAAWqtD,EAAAA,EAAAA,IAAmBtlF,IAC9B,KAAE1D,EAAI,IAAEipF,GAAQttD,EAEhButD,GAAav9E,EAAAA,EAAAA,MACbw9E,GAAYC,EAAAA,EAAAA,IAAiB1lF,EAASwlF,GACtCG,EAA6B,YAATrpF,GAAuBmpF,OAC7CpqF,EAD0D2E,EAAQgI,KAAOiwB,EAAS2tD,OAASJ,GAGxFK,EAAOC,IAAYtvC,EAAAA,EAAAA,IAAS+uC,GAE7BQ,EAA4B,UAATzpF,GAA8B,YAATA,IAAuBmpF,GAC/D,MACJz1E,EAAK,OAAEC,EAAM,KAAE80E,EAAI,MAAEC,GACnBF,GAEEhQ,EAAY/yE,QAAQ8wB,KAAiBmzD,EAAAA,EAAAA,IAAmBH,EAAO71E,EAAOC,EAAQ80E,EAAMC,GACpFtyB,GAAeta,EAAAA,GAAAA,GAAS08B,GACxBmR,GAAmBthC,EAAAA,GAAAA,GAAY+N,GAC/BwzB,EAAaxzB,GAAgBuzB,EAE7BE,EAAavmE,IAAQmX,EAAAA,EAAAA,IAASnX,EAAKxjB,IACnCgqF,EAAcxmE,GAAQumE,EAAcvmE,OAAkBvkB,EACtDgrF,EAAczmE,IAASumE,EAAcvmE,OAAkBvkB,EAEvD2pE,GAAQ2W,EAAAA,EAAAA,IAAa37E,GAErBsmF,GAAmBhuC,EAAAA,EAAAA,KAAQ,KAC/B,GAAa,YAATh8C,IAAuBupF,EAAMU,eAC/B,OAAO,EAGT,MAAM,IAAEC,EAAG,eAAED,GAAmBV,EAChC,OAAOU,ED1EJ,SAA2BC,EAAazB,GAE7C,OAAQ,aAAex8E,KAAKk+E,IAAID,GAAOj+E,KAAK23E,GAAK,MAAS,GAAK6E,CACjE,CCuE4B2B,CAAkBF,EAAKzB,EAAK,GACnD,CAACzoF,EAAMupF,EAAOd,IAOX4B,GAAkB/rC,EAAAA,EAAAA,KAAaolC,IACnC,GAAa,YAAT1jF,EAAoB,OACxB,MACM2jF,EAAgBxvB,GAAaloD,KAAK23E,GAClChC,EAAQ8B,EAAYG,iBACpBC,EAAUJ,EAAYnuB,kBAEtB+0B,EAAW5mF,EAAQgI,KAAOiwB,EAAS2tD,QAAS39E,EAAAA,EAAAA,MAC5Co4E,GAAoB,EAAIuG,EAAW3uD,EAAS2tD,QAAU3F,EACtD5hF,GAAOwoF,EAAAA,GAAAA,IAAqBrnF,EAAiB,IAAXonF,GAEnC1I,GAAUkC,GAUbA,EAAQ7V,YAAclsE,EACtB6/E,EAAMrsB,kBAAmBgc,aAAa,oBAAsB,IAAGwS,MAV/DL,EAAY9tB,UAAa,8CACY7zD,8LAGX4hF,KAAiBA,uCACfI,kCAM9B,GACC,CAAC/jF,EAAM0D,EAAQgI,KAAMiwB,EAAUz4B,IA4IlC,OA1IAgwD,EAAAA,EAAAA,KAAgB,KACV4vB,EAAa/yD,SACfs6D,EAAgBvH,EAAa/yD,QAC/B,GACC,CAACs6D,KAEJ1D,EAAAA,GAAAA,IAA4B,EAAE6D,MAC5B,GAAIf,EACGe,GACHhsC,EAAIzuB,QAAS0+C,QAAwBqY,EAAAA,KAA2B1V,gBAAgB6V,EAAAA,UAKpF,GAAI2C,EAAY,CACd,MAAM/C,EAAYroC,EAAIzuB,QAAS0+C,QAAwBqY,EAAAA,MACvDC,EAAAA,GAAAA,GAAoB6C,EAAYlhB,EAAOyG,EAAgBjS,EAAYp+B,GAAO3pB,MAAM6xE,IAC9EH,EAAUxqC,MAAM4W,YAAY,gBAAiB+zB,GAC7CH,EAAUpkC,UAAUjhB,IAAI,sBACxBqlD,EAAUtV,aAAa0V,EAAAA,IAA2B,GAAG,GAEzD,IACC,CAACwC,EAAkB/gB,EAAOyG,EAAgBjS,EAAYp+B,EAAO8qD,KAEhEnxC,EAAAA,EAAAA,KAAU,KAEJxsC,KAAK+8C,IAAIigC,EAAIiB,IAAMX,EAAMW,KAAO3B,IAAkBt8E,KAAK+8C,IAAIigC,EAAIwB,KAAOlB,EAAMkB,MAAQlC,GAClFgB,EAAMU,iBAAmBhB,EAAIgB,gBAC/BT,EAAS,IACJD,EACHU,eAAgBhB,EAAIgB,iBAK1BT,EAASP,EAAI,GACZ,CAACA,EAAKM,KAETrrC,EAAAA,GAAAA,IAAW,KACT4qC,GAAa,GACXK,OAA6CpqF,EAAP,KAAzBsqF,GAAoB,KAErC7B,EAAAA,GAAAA,IAAY,KACV,MAAM9D,EAAcZ,EAAa/yD,QAE7B2zD,GACF2G,EAAgB3G,EAClB,GACC2F,EAAmB,SAAOtqF,GA2F3Bs6C,EAAAA,GAAAA,cAAA,OACEmF,IAAKA,EACL3uB,UAAU,mCACVmrB,QA7KgBugB,KAClB,MAAM5oD,EDlFH,SAAuBu3E,EAAaO,EAAchC,GACvD,MAAQ,sCAAoByB,KAAOO,MAASP,KAAOO,KAAQhC,IAC7D,CCgFgBiC,CAAcnB,EAAMW,IAAKX,EAAMkB,KAAMhC,GACjDprD,EAAQ,CAAE1qB,OAAM,GA6Kd0mC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,eAjEZ+5D,EAEHvwC,EAAAA,GAAAA,cAAA,OACExpB,UAAU,iBACV4sB,IAAKmtC,EACLltC,IAAI,oBACJL,MAAQ,UAASmsC,GAAmB90E,oBAAoB80E,GAAmB70E,cANvD0lC,EAAAA,GAAAA,cAAC8tC,GAAAA,EAAQ,CAACzzE,MAAOA,EAAOC,OAAQA,IA2C1D,WACE,GAAKi2E,EAEL,OACEvwC,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACG5zC,QAAQukF,KAAsBb,GAC7B9vC,EAAAA,GAAAA,cAAA,OACExpB,UAAU,oBACVwsB,MAAQ,UAA4B,EAAnB2tC,gBAAsD,EAAnBA,QAxC9D,WACE,MAAMW,GAAexuC,EAAAA,GAAAA,GACnB,MACAn8C,EACAmpF,GAAa,WAEf,GAAa,YAATnpF,EACF,OACEq5C,EAAAA,GAAAA,cAAA,OAAKxpB,UAAW86D,EAAcC,wBAAyBjC,IACrDtvC,EAAAA,GAAAA,cAACk6B,GAAAA,EAAM,CAACvyE,KAAM+oF,EAAYloE,KAAMioE,EAAYj6D,UAAU,yBAChC9wB,IAArB48B,EAASkvD,SACRxxC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,YAAYwsB,MAAQ,gBAAe1gB,EAASkvD,gBAMnE,GAAa,UAAT7qF,EAAkB,CACpB,MAAMq7C,ED7ML,SAAuBr7C,GAC5B,OAAKA,EACE0nF,GAAahmE,IAAI1hB,IACnB0nF,GAAahmE,IAAI1hB,EAAK2gB,MAAM,KAAK,KACjC2nE,IAGiBwC,EAHY9qF,EAI3B8qF,EAAInqE,MAAM,IAAI1c,QAAO,CAAC8mF,EAAUC,KAElCD,GAAY,GAAKA,EAAYC,EAAQC,WAAW,GAAM,GAAI,GANrB3C,GAAc9hF,SAHtC,UAMpB,IAAwBskF,CAFxB,CCwMoBI,CAAcvvD,EAASwvD,WAC/BC,EDpNL,SAAyBprF,GAC9B,OAAKA,EACG,0CAAyCA,WAD/B,EAEpB,CCiNsBqrF,CAAgB1vD,EAASwvD,WACzC,OACE9xC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAW86D,EAAcC,wBAAyBjC,GAAStsC,MAAQ,gBAAehB,KACrFhC,EAAAA,GAAAA,cAAA,OAAKoD,IAAK2uC,EAASv7D,UAAU,aAAa6sB,IAAI,KAGpD,CAEA,OACErD,EAAAA,GAAAA,cAAA,OAAKxpB,UAAW86D,EAAcluC,IAAK6uC,GAAQ5uC,IAAI,IAEnD,CAaO6uC,GAGP,CAUOC,IAhGP,WACE,GAAK/B,EACL,MAAa,UAATzpF,EAEAq5C,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,iBACbwpB,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,uBACZ8L,EAAS5sB,OAEZsqC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,0BACZ8L,EAAS8vD,UAKL,YAATzrF,EAEAq5C,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,iBACbwpB,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,uBAAuB3sB,EAAK,uBAC3Cm2C,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,2BACZ67D,EAAAA,GAAAA,IAAkBxoF,EAAMgmF,EAAYxlF,EAAQ+zE,YAE7C0R,GAAa9vC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,gBAAgB2uB,IAAKskC,UAPzD,CAYF,CAwEK6I,GACG,IC/MV,IAAe3yC,EAAAA,EAAAA,KA1DY4yC,EACzBloF,UACAmoF,mBACAt1D,mBAEA,MAAM,qBAAE0/B,IAAyBp/B,EAAAA,EAAAA,MAC3Bi1D,EAAOpoF,EAAQiC,QAAQmmF,MACvB,MACJ/8E,EAAK,YAAEsU,GACLyoE,EAEEC,EAAYtmF,QAAQ8wB,KAAiBy1D,EAAAA,EAAAA,GAAwBF,GAC7DG,EAAYxmF,QAAQ8wB,KAAiB21D,EAAAA,EAAAA,IAAwBJ,GAC7DK,GAAerwC,EAAAA,GAAAA,GAASiwC,GAAYF,GACpCO,GAAetwC,EAAAA,GAAAA,GAASmwC,GAAYJ,GAS1C,OACExyC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,QACbwpB,EAAAA,GAAAA,cAAA,OACExpB,UAAU,UACVwsB,MAAQ,8BACRrB,QAZkBqxC,KACtBp2B,EAAqB,CACnB9wD,UAAWzB,EAAQ5D,GACnBw+B,OAAQ56B,EAAQ2jE,cAAe,GAAG,IAClC,IAUI8kB,IAAiBC,GACjB/yC,EAAAA,GAAAA,cAAC8tC,GAAAA,EAAQ,CAACt3D,UAAU,6BAErBs8D,GACC9yC,EAAAA,GAAAA,cAAA,OACExpB,UAAU,kBACV4sB,IAAK0vC,EACLzvC,IAAK3tC,IAGRq9E,GACC/yC,EAAAA,GAAAA,cAAA,SACExpB,UAAU,kBACVgwD,aAAW,EACXF,OAAK,EACL2M,yBAAuB,EACvBC,UAAQ,EACR3M,MAAI,EACJnjC,IAAK2vC,KAIX/yC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,SAAS9gB,KACtBojC,EAAAA,EAAAA,IAAezuC,IAAY21C,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,eAAexM,GACvD,ICpDK,SAASmpE,GAAkBC,GAiDxC,OAAOzzC,EAAAA,EAAAA,KAAK4D,EAAAA,EAAAA,KACV,CAACp+C,EAAQkuF,KACP,MAAM,QAAEhpF,GAAYgpF,EACpB,MAAO,CACLvd,gBAAgB5O,EAAAA,EAAAA,IAAqB/hE,GACrC0+D,YAAYyvB,EAAAA,EAAAA,IAAwBnuF,EAAQkF,EAAQ5D,IACrD,GANO88C,EAhDmD3D,IAC7D,MAAM,eACJk2B,EAAc,WACdjS,EAAU,QACVx5D,EAAO,WACP6kE,GACEtvB,GACE,uBAAEvuC,IAA2BmsB,EAAAA,EAAAA,MAE7B+1D,GAAsBtuC,EAAAA,EAAAA,KAAatuC,IACvCA,EAAEqxC,kBACF32C,EAAuB,CAAEvF,UAAWzB,EAAQ5D,GAAI2K,UAAWuF,GAAGw7C,UAAW,GACxE,CAAC9gD,EAAwBhH,IAEtBmpF,GAAW7wC,EAAAA,EAAAA,KAAQ,KACvB,MAAQusB,WAAYukB,EAAI,QAAE9xC,GAAY/B,EACtC,MAAO,IACFA,EACHk2B,iBACAjS,aACAqL,WAAY,IACPukB,EACHnlD,EAAG,EACHc,EAAG,GAELuS,QAASm0B,OAAiBpwE,EAAYi8C,EACvC,GACA,CAAC/B,EAAOk2B,EAAgBjS,IAE3B,OACE7jB,EAAAA,GAAAA,cAAA,OACExpB,WAAWssB,EAAAA,GAAAA,GAAe,4BAA6B+gB,GAAc,eACrE7gB,MAAOksB,EAAc,SAAQA,EAAW5gC,aAAa4gC,EAAW9/B,OAAS,GACzEuS,QAASm0B,EAAiByd,OAAsB7tF,GAE/CowE,GACC91B,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,0BACZqtC,GACC7jB,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,iBAKnBwpB,EAAAA,GAAAA,cAACozC,EAAqBI,GAClB,IAaZ,CC5DA,MAAME,GAAkBP,GAAkBrG,GAAAA,GACpC6G,GAAkBR,GAAkBvQ,IA2G1C,IAAer/B,EAAAA,EAAAA,KACb,CAACp+C,GAAU66D,YACT,MAAM,OAAE16D,GAAW06D,EAAMwN,YACnB/nC,GAAQwgB,EAAAA,EAAAA,IAAY9gD,GACpByuF,GAAoBC,EAAAA,EAAAA,IAAwB1uF,EAAQG,GAC1D,MAAO,CACLmgC,QACAquD,YAAa3uF,EAAO4pB,YAAYC,iBAChC4kE,oBACD,GATL,EAxFyCG,EACvC/zB,QACA4e,sBACAoV,oBACA92D,eACAmyC,QACA2G,cACAie,cACA/H,eACA4H,cACAF,oBACAnuD,YAEA,MAAM,qBAAEyuD,IAAyB12D,EAAAA,EAAAA,MAE3B22D,EAAan0B,EAAM91D,SAASiD,OAE5BinF,GAAqBnvC,EAAAA,EAAAA,KAAa56C,IACtC6pF,EAAqB,CAAE5uF,OAAQ+E,EAAQ/E,OAAQwG,UAAWzB,EAAQ5D,IAAK,GACtE,CAACytF,KAyDI75E,MAAOg6E,EAAgB/5E,OAAQg6E,GAAoBL,EAAYjgB,eAEvE,OACEh0B,EAAAA,GAAAA,cAAA,OACExpB,UAAU,QACVwsB,MAAQ,UAASqxC,gBAA6BC,QAE7Ct0B,EAAM91D,SAASC,KA9DpB,SAA4BE,EAAqB0c,GAC/C,MAAM,MAAE2W,EAAK,MAAEqZ,IAAUC,EAAAA,EAAAA,IAAkB3sC,GACrCkqF,EAAaT,GAAYxrE,EAAAA,EAAAA,IAAqBje,IAC9C04E,EAAiBwR,GAAY7lE,UAC7B,WAAEwgD,EAAU,MAAEC,GAAU8kB,EAAYhlB,OAAOloD,GAG3C87D,GAAc2R,EAAAA,EAAAA,KAAuB/lF,EAAAA,EAAAA,MAAapE,GAClDy4E,GAAc2R,EAAAA,EAAAA,KAAuBhmF,EAAAA,EAAAA,MAAapE,GAExD,GAAIqzB,EAAO,CACT,MAAMuvD,EAAuB+G,IAE1B3kB,EAAQtoD,IAAUotE,EAAa,EAAI/nF,QAAQ+iE,EAAQd,GAAcK,MAAQS,EAAQd,GAAcI,SAGlG,OACEzuB,EAAAA,GAAAA,cAAC0zC,GAAe,CACdjtF,GAAK,gBAAc41E,EAAAA,EAAAA,IAAiBhyE,EAAQ5D,MAC5C4D,QAASA,EACToxE,8BAA+BmD,EAC/BiE,YAAaA,EACboK,qBAAsBA,EACtBlK,eAAgBA,EAChB7T,WAAYA,EACZ8G,YAAaA,EACbr0B,QAASuqC,EACTjJ,eAAgBmR,EAChBpR,cAAe4Q,EAAkB/jF,SAASxF,EAAQ5D,IAClDg/B,MAAOA,GAGb,CAAO,GAAIsR,EACT,OACEiJ,EAAAA,GAAAA,cAAC2zC,GAAe,CACdltF,GAAK,gBAAc41E,EAAAA,EAAAA,IAAiBhyE,EAAQ5D,MAC5C4D,QAASA,EACToxE,8BAA+BmD,EAC/BiE,YAAaA,EACbC,YAAaA,EACbC,eAAgBA,EAChB7lD,aAAcA,EACdgyC,WAAYA,EACZ8G,YAAaA,EACbr0B,QAASuqC,EACTjJ,eAAgBmR,EAChBpR,cAAe4Q,EAAkB/jF,SAASxF,EAAQ5D,IAClDg/B,MAAOA,GAMf,IAUQ,ICxFV,IAAIivD,GAEJ,MA4LA,GA5LiCC,EAC/BtqF,UACAu0E,sBACAiE,cACA3lD,eACA8lD,oBAGA,MAAM79B,GAAMtB,EAAAA,EAAAA,IAAuB,MAE7B+wC,GAAqB/wC,EAAAA,EAAAA,IAAuB,MAE5CgxC,GAAYhxC,EAAAA,EAAAA,IAAyB,MAErC9M,EAAQ1sC,EAAQiC,QAAQyqC,MAExBimC,GAAiBhB,EAAAA,GAAAA,IAAkB72B,EAAKy5B,IAEvC+E,EAAeC,IAAoB/iC,EAAAA,EAAAA,IAASgiC,GAC7CgB,EAAaz3E,QAAQu3E,GAAiB3G,GAAkB9/C,IACxD,UAAEwiC,EAAS,aAAEukB,IAAiBC,EAAAA,GAAAA,IAClClnB,EAAAA,EAAAA,IAAoB3yD,EAAS,WAC5Bw5E,GACDM,EAAAA,EAAAA,IAAsB95E,EAAS,UAC/B6yB,IAGM+mD,aAAckB,IAAqBjB,EAAAA,GAAAA,IACzClnB,EAAAA,EAAAA,IAAoB3yD,EAAS,aAC5B24E,EACD/zC,EAAAA,GAAAA,QACA/R,IAGKmnD,EAAeC,IAAmBrgC,EAAAA,GAAAA,KAEnC6gC,GADW14E,SAAQm4E,EAAAA,EAAAA,IAA4Bl6E,KACxBg6E,EACvBU,GAAWC,EAAAA,GAAAA,GAAwB36E,EAASy6E,GAC5CG,GAAkBJ,EAAAA,GAAAA,IAAoBC,GAEtCO,EAAkB1B,IAAkBU,GAAkBrB,EACtDwC,GAAiD,KAA/Bx2B,EAAAA,GAAAA,GAAY20B,IAGlCrxB,aAAcwiC,EACdtiC,qBAAsBkzB,IACpBjzB,EAAAA,GAAAA,GAAkB4yB,OAAgB3/E,EAAW8/E,IAE1C1H,EAAaiX,IAAkBl0C,EAAAA,EAAAA,KAAkB,IACjDnyB,EAAUsmE,IAAen0C,EAAAA,EAAAA,IAAiB,IAEjDzB,EAAAA,EAAAA,KAAU,KACR,IAAK0+B,EACH,OAGF,MAAMmX,EAAYC,GAAAA,GAA4B,EAExC5K,EAA0C,GAAzB2K,EADL,GACkCriF,KAAK23E,GACnDG,EAAmBJ,EAAgB57D,EAAW47D,EAE9C6K,EAAWN,EAAUn+D,QACrB0+D,EAAoBR,EAAmBl+D,QACvC6xD,EAAQ6M,EAAkBl5B,kBAE3BqsB,EAUFA,EAAMrsB,kBAAiCgc,aAAa,oBAAqBwS,EAAiBx9E,YAT3FkoF,EAAkB74B,UAAa,yBACf24B,GAAAA,iBAAwCA,GAAAA,iCACtCD,UAAkBA,SAAiBA,EAXrC,kEAYeA,MAAcA,sCACnB3K,KAAiBA,sCAChBA,mCAO7B0K,EAAYG,EAASpP,YAAcoP,EAAS51B,SAAS,GACpD,CAACue,EAAapvD,IAEjB,MAAM2mE,EAAajpF,QAAQszD,GAAasd,GAElCsY,GAAcrwC,EAAAA,EAAAA,KAAY,KACzB4vC,EAAUn+D,UAIfq+D,GAAe,GACfC,EAAY,IACZrT,EAAAA,GAAAA,GAASkT,EAAUn+D,UAEnB6+D,EAAAA,EAAAA,KAAQ,KACNX,EAAmBl+D,QAAS6lC,UAAY,EAAE,IAC1C,GACD,IAEGi5B,GAAiBvwC,EAAAA,EAAAA,KAAY,KACjCyvC,OACAA,GAAeY,CAAW,GACzB,CAACA,IAEEpzB,GAAcjd,EAAAA,EAAAA,KAAY,KAC9B,IAAKya,EAGH,YAFAkkB,GAAkBwC,IAAeA,IAKnC,GAAIpD,EAEF,YADAxlD,EAAAA,EAAAA,MAAa2oD,2BAA2B,CAAE97E,YAI5C,MAAM8qF,EAAWN,EAAUn+D,QACvBonD,EACEqX,EAASM,SACX9T,EAAAA,GAAAA,GAASwT,IACTO,EAAAA,GAAAA,OAEAP,EAAStgE,SAGX2gE,IAEAL,EAAStgE,QACTsgE,EAASpP,YAAc,GACvBpE,EAAAA,GAAAA,GAASwT,IACTO,EAAAA,GAAAA,MAEAX,GAAe,GACjB,GACC,CAACS,EAAgB1X,EAAakF,EAAetjB,EAAWr1D,IAErDy7E,GAAmB7gC,EAAAA,EAAAA,KAAatuC,IACpC,MAAMw+E,EAAWx+E,EAAEmhE,cAEnBkd,EAAYG,EAASpP,YAAcoP,EAAS51B,SAAS,GACpD,IAEH,OACEvf,EAAAA,GAAAA,cAAA,OACEmF,IAAKA,EACL3uB,UAAU,yBACVmrB,QAASugB,GAERxC,GACC1f,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,iBACbwpB,EAAAA,GAAAA,cAACqmC,GAAAA,EAAc,CACb/G,QAAS+V,EACTlwC,IAAK0vC,EACLzxC,IAAKsc,EACLlpC,UAAU,aACVnc,MAAO66E,GAAAA,GACP56E,OAAQ46E,GAAAA,GACRhC,UAAQ,EACRD,yBAAuB,EACvB3M,OAAQxI,EACRyI,MAAOzI,EACP0I,aAAW,EACX9F,QAAS5C,EAAcwX,OAAc5vF,EACrC+gF,aAAc3I,EAAcgI,OAAmBpgF,EAC/CghF,QAASpC,KAIftkC,EAAAA,GAAAA,cAAA,UACEmF,IAAK4/B,EACLvuD,WAAWssB,EAAAA,GAAAA,GAAe,YAAamiC,GACvCjiC,MAAQ,UAASkyC,GAAAA,iBAAwCA,GAAAA,SAE3Dl1C,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,WAAW2uB,IAAKyvC,IAC9BE,GACC90C,EAAAA,GAAAA,cAAA,OAAKxpB,UAAY,iBAAgBkvD,KAC/B1lC,EAAAA,GAAAA,cAAC4mC,GAAAA,EAAe,CAACl4D,SAAUs0D,EAAgBmC,EAAmBlB,MAGhEvkB,IAAcikB,GACd3jC,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,kBAEfwpB,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,0BACZsnD,GAAcgJ,EAAAA,GAAAA,IAAoB+N,EAAUn+D,QAASqvD,cAAee,EAAAA,GAAAA,IAAoB/vC,EAAMwoB,YAC5Fue,GAAe+W,EAAUn+D,QAAS++D,SAAWz1C,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,gBAE3D,ECjKV,GAhDoCm/D,EAAGtrF,UAASs3C,cAC9C,MAAM93C,GAAO+3C,EAAAA,GAAAA,KAyBb,OACE5B,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,iBACZnsB,EAAQ2jE,cAAe7jE,KAAK6nE,GAC3BhyB,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,OACZw7C,EAAI7nE,KAAK86B,GACR+a,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACL/8B,KAAK,OACLggC,QAAM,EACNie,SAA0B,gBAAhBp+B,EAAOt+B,KAEjBg7C,QAASA,IAAMA,EAAQ,CAAE71C,UAAWzB,EAAQ5D,GAAIw+B,YAEhD+a,EAAAA,GAAAA,cAAA,QAAMxpB,UAAU,uBAAsB+3B,EAAAA,GAAAA,GAAW1kD,EAAKo7B,EAAOv8B,QAnCrDu8B,KAClB,MAAM,KAAEt+B,GAASs+B,EACjB,OAAQt+B,GACN,IAAK,MACH,IAAKkqB,EAAAA,IAAAA,KAAiBoU,EAAO3rB,KAC3B,OAAO0mC,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,qBAEtB,MAEF,IAAK,UACH,OAAOwpB,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,qBACtB,IAAK,MACL,IAAK,UACH,OAAOwpB,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,cACtB,IAAK,kBACH,OAAOwpB,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,sBACtB,IAAK,UACL,IAAK,gBACH,OAAOwpB,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,gBAER,EAgBLo/D,CAAW3wD,SAKhB,ECqCV,IAAe0a,EAAAA,EAAAA,KA5EqBk2C,EAClCvoF,aACA+1D,eAEA,MAAM,aAAEyyB,IAAiBt4D,EAAAA,EAAAA,MAEnB3zB,GAAO+3C,EAAAA,GAAAA,MACP,SACJr8C,EAAQ,OAAED,EAAM,cAAEutB,EAAa,cAAErlB,EAAa,uBAAEqd,EAAsB,iBAAEkrE,EAAgB,gBAAE/tB,GACxF16D,EAEE40D,GAAcjd,EAAAA,EAAAA,KAAY,KAC9B6wC,EAAa,CAAErvF,GAAInB,EAAQC,WAAUyiE,mBAAkB,GACtD,CAAC8tB,EAAcxwF,EAAQC,EAAUyiE,IAE9BguB,GAAiBrzC,EAAAA,EAAAA,KAAQ,KAC7B,IAAKozC,GAAkB5oF,OACrB,OAIF,MAAQuV,OAASgH,KAAM8wD,GAAazmE,OAAS2V,KAAMm8B,KAAgBp3C,EAAAA,EAAAA,MAEnE,OAAOsnF,EAAiB5rF,KAAK27B,IACpB1E,EAAAA,EAAAA,IAAS0E,GAAU00C,EAAU10C,GAAU+f,EAAU/f,KACvD17B,OAAOgC,QAAQ,GACjB,CAAC2pF,IAEJ,QAAsBrwF,IAAlBmtB,EACF,OAoBF,MAAMojE,EAAY7pF,QAAQye,GAA0Brd,GAAiBqd,EAAyBrd,GAExF0oF,EAAerjE,EAAiBhpB,EAAK,WAAY,wBAAoBnE,EAAWmtB,GACnFvL,MAAM,KACNnd,KAAK8M,GACU,mBAANA,EAAyB+oC,EAAAA,GAAAA,cAACw+B,GAAAA,EAAe,CAAC91E,MAAM43C,EAAAA,GAAAA,IAAqBztB,KAAqB5b,SAElGvR,EAEJ,OACEs6C,EAAAA,GAAAA,cAAA,OACE,YAAUM,EAAAA,GAAAA,IAAqBztB,GAC/B2D,WAAWssB,EAAAA,GAAAA,GAAe,gBAAiBmzC,GAAa,aAAc5yB,GAAY,YAClFxhB,IAAKh4C,EAAKi4C,MAAQ,MAAQ,MAC1BH,QAASugB,GAETliB,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,4BACVw/D,GAA4C,IAA1BA,EAAe7oF,SAAiB6yC,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,kBAhClEw/D,GAAkBA,EAAe7oF,OAAS,GACxC6yC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,kBAAkBqrB,IAAKh4C,EAAKi4C,MAAQ,MAAQ,OACxDk0C,EAAe7rF,KAAKqe,GACnBw3B,EAAAA,GAAAA,cAACk6B,GAAAA,EAAM,CACLv9B,IAAKn0B,EAAK/hB,GACV2e,KAAK,QACLoD,MAAM4Y,EAAAA,EAAAA,IAAS5Y,EAAK/hB,IAAM+hB,OAAkB9iB,EAC5CiC,MAAOy5B,EAAAA,EAAAA,IAAS5Y,EAAK/hB,SAAwBf,EAAlB8iB,OA2BnCw3B,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,QAAQqrB,IAAI,QACxBhvB,EAAgBqjE,EAAersF,EAAK,kBAEvCm2C,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,cACT,I,4BC9FV,UAAgB,KAAO,uBAAuB,kBAAkB,uBAAuB,cAAgB,uBAAuB,gBAAgB,uBAAuB,aAAe,uBAAuB,OAAS,uBAAuB,UAAY,wBCkCjP2/D,GAAmB,IAAMnoD,GAAAA,GACzBooD,GAAc,IAAMpoD,GAAAA,GA0H1B,IAAe2R,EAAAA,EAAAA,KAxH6B02C,EAC1CvmD,WACAwmD,iBACAjvF,kBACA8nC,qBACAyvC,0BAEA,MAAM,mBAAE2X,IAAuB/4D,EAAAA,EAAAA,MAGzB2nB,GAAMtB,EAAAA,EAAAA,IAAuB,MAE7BqJ,EAAW,eAAgBpd,EAE3BhB,GAAoB6T,EAAAA,EAAAA,KAAQ,IAChCxT,GAAoBt+B,MAAMugC,IAAMV,EAAAA,EAAAA,IAAeU,EAAEtB,SAAUA,MAC1D,CAACX,EAAoBW,IAClB0mD,EAAe1nD,GAAmBI,YAAYzoC,GAE9CmmB,GAAc6pE,EAAAA,GAAAA,GAAevpC,EAAWpd,EAAS54B,gBAAaxR,GAE9DgxF,GAAmB/zC,EAAAA,EAAAA,KAAQ,KAC/B,IAAKuK,EAAU,OAAOpe,GAAmBC,iBAAiBtoC,GAE1D,IAAKmmB,EAAa,OAClB,MAAM+pE,EAAaxnD,GAAoBt+B,MAAM+lF,GAAcA,EAAU9mD,SAASF,WAAahjB,EAAY1hB,SACnG6jC,iBAAiBtoC,GACrB,OAAOkwF,CAAU,GAChB,CAAC7nD,EAAmBK,EAAoBviB,EAAasgC,IAElD2pC,GAAWl0C,EAAAA,EAAAA,KAAQ,KACvB,GAAI+zC,EACF,OAAOA,EAGT,IAAKJ,GAAgBx/E,SACnB,OAGF,MAAM,SAAEA,GAAaw/E,EAGrB,OAAOx/E,EAFalE,KAAKG,MAAMH,KAAKwd,SAAWtZ,EAAS3J,SAE3B1G,EAAE,GAC9B,CAACiwF,EAAkBJ,IAEhBtZ,GAAiBhB,EAAAA,GAAAA,IAAkB72B,EAAKy5B,GAExCkY,EAAsBN,GAAiB,UAASA,IAChDjX,EAAkBsX,GAAa,UAASA,IAExCE,GAAsBt0C,EAAAA,GAAAA,GAASq0C,GAAsBN,GACrDQ,GAAkBv0C,EAAAA,GAAAA,GAAS88B,GAAkBsX,GAE7CI,GAAiBt0C,EAAAA,EAAAA,KAAQ,IAC7Bt7C,GAAiBwJ,MAAMgoB,IAAW6X,EAAAA,EAAAA,IAAe7X,EAAOiX,SAAUA,MACjE,CAACzoC,EAAiByoC,IAEfulD,EAAajpF,QAAQ6qF,IAAmB/pC,GAAY6pC,IAAwBC,IAEhF1kC,aAAc4kC,EACd1kC,qBAAsB2kC,IACpB1kC,EAAAA,GAAAA,GAAkB4iC,OAAY3vF,GAAW,EAAM,QAE7C0xF,GAAcnyC,EAAAA,EAAAA,KAAY,KACzBgyC,GAAgBnrF,WACrByqF,EAAmB,CAAEzqF,UAAWmrF,EAAenrF,UAAWgkC,YAAW,GACpE,CAACmnD,GAAgBnrF,UAAWgkC,EAAUymD,KAElCc,EAAmBC,EAAqBC,IAAyBtzC,EAAAA,GAAAA,KAClEuzC,IAAsBtqC,GAAcmoC,GAAegC,GAEnD7gE,GAAYssB,EAAAA,GAAAA,GAChBI,GAAAA,KACAg0C,GAAyBh0C,GAAAA,UACzBgK,GAAYhK,GAAAA,eAGd,OACElD,EAAAA,GAAAA,cAAA,OAAKxpB,UAAWA,EAAW2uB,IAAKA,GAC7BqyC,GAAsBx3C,EAAAA,GAAAA,cAACy3C,GAAAA,EAAmB,CAAC3nD,SAAUA,EAAUX,mBAAoBA,IACnF+d,GACClN,EAAAA,GAAAA,cAACiD,GAAAA,EAAW,CACV/rC,WAAY44B,EAAS54B,WACrBsf,UAAW0sB,GAAAA,YACXw4B,8BAA+BkD,IAGlCsY,GACCl3C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACugC,GAAAA,EAAe,CACd5jC,IAAKk6C,EACLrgE,WAAWssB,EAAAA,GAAAA,GAAeI,GAAAA,OAAei0C,GACzC/xE,KAAMgxE,GACN5V,OAAQwW,EACRxa,KAAMQ,EACNP,QAAM,EACNzyB,uBAAqB,EACrB02B,QAAS0W,IAEVlqC,GACEwpC,GAAoB1Z,GAAkBh9B,EAAAA,GAAAA,cAACoC,GAAiB,CAACtS,SAAUA,IAEpEkQ,EAAAA,GAAAA,cAACugC,GAAAA,EAAe,CACd5jC,IAAK65C,EACLhgE,WAAWssB,EAAAA,GAAAA,GAAeI,GAAAA,aAAqBi0C,GAC/C/xE,KAAM+wE,GACN3V,OAAQuW,EACRva,KAAMQ,EACNP,QAAM,EACNzyB,uBAAqB,EACrB0tC,OAAQJ,EACR5W,QAAS6W,KAKb,ICrEV,IAAe53C,EAAAA,EAAAA,KAxDVg4C,EACH7nD,WACAzlC,UACAhD,kBACA8nC,qBACAyoD,qBACAtB,iBACA1X,0BAEA,MAAM,eAAE3uC,IAAmBzS,EAAAA,EAAAA,OACrB,gBAAE6T,GAAoBhnC,EAAQwmC,UAE9BgnD,GAAiBl1C,EAAAA,EAAAA,KAAQ,KAC7B,IAAKi1C,IAAuBvmD,EAC1B,OAIF,MAAMmpC,GAAY/rE,EAAAA,EAAAA,MAAYiU,MAAMgH,KAEpC,OAAO2nB,EACJjnC,QAAQ0tF,IAAmBpnD,EAAAA,EAAAA,IAAeonD,EAAehoD,SAAUA,EAASA,YAC5E3lC,KAAK2tF,GAAmBtd,EAAUsd,EAAejjF,UACjDzK,OAAOgC,QAAQ,GACjB,CAAC0jC,EAASA,SAAUuB,EAAiBumD,IAElC11B,GAAcjd,EAAAA,EAAAA,KAAY,KAC9BhV,EAAe,CACbH,SAAUA,EAASA,SACnBxqC,OAAQ+E,EAAQ/E,OAChBwG,UAAWzB,EAAQ5D,IACnB,GACD,CAAC4D,EAASylC,EAAUG,IAEvB,OACE+P,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACL3rB,WAAWssB,EAAAA,GAAAA,IAAe7R,EAAAA,EAAAA,IAAiBnB,IAAa,UACxD1qB,KAAK,OACLu8B,QAASugB,GAETliB,EAAAA,GAAAA,cAACq2C,GAAqB,CACpBhvF,gBAAiBA,EACjByoC,SAAUA,EAASA,SACnBX,mBAAoBA,EACpBmnD,eAAgBA,EAChB1X,oBAAqBA,IAEtBiZ,GAAgB1qF,OACf6yC,EAAAA,GAAAA,cAAA,OAAKxpB,UAAU,WACZqhE,EAAe1tF,KAAKqe,GAASw3B,EAAAA,GAAAA,cAACk6B,GAAAA,EAAM,CAAC1xD,KAAMA,EAAMpD,KAAK,aAEvD46B,EAAAA,GAAAA,cAACw+B,GAAAA,EAAe,CAAC91E,MAAM43C,EAAAA,GAAAA,IAAqBxQ,EAASrlB,SAClD,ICrBb,IAAek1B,EAAAA,EAAAA,KAjCiBo4C,EAC9B1tF,UACA2tF,YACA3wF,kBACA8nC,qBACA8oD,eACA3B,iBACA1X,sBACAsZ,uBAEA,MAAM5/D,GAAaqqB,EAAAA,EAAAA,KAAQ,IACzBt4C,EAAQwmC,UAAWp8B,QAAQ7J,QAAO,CAACC,EAAKilC,IAAajlC,EAAMilC,EAASrlB,OAAO,IAC1E,CAACpgB,IAEJ,OACE21C,EAAAA,GAAAA,cAAA,OAAKxpB,WAAWssB,EAAAA,GAAAA,GAAe,YAAak1C,GAAa,eACtD3tF,EAAQwmC,UAAWp8B,QAAQtK,KAAK2lC,GAC/BkQ,EAAAA,GAAAA,cAAC23C,GAAc,CACbh7C,KAAKw7C,EAAAA,EAAAA,IAAqBroD,EAASA,UACnCA,SAAUA,EACVzlC,QAASA,EACThD,gBAAiBA,EACjB8nC,mBAAoBA,EACpByoD,mBAAoBt/D,GAzBH,IAyBwC4/D,EACzD5B,eAAgBA,EAChB1X,oBAAqBA,MAGxBqZ,EACG,IC+BV,IAAet4C,EAAAA,EAAAA,KAlEwBy4C,EACrCj6C,YACA9zC,UACA/E,aAEA,MAAM,4BAAE+yF,IAAgC76D,EAAAA,EAAAA,MAElC3zB,GAAO+3C,EAAAA,GAAAA,MACP,WAAEpvC,EAAU,QAAEssC,EAAO,OAAE/0B,GAAWo0B,EAClCm6C,EAAsB,WAAXvuE,EACXwuE,EAAyB,SAAXxuE,IAAsBvX,EAEpCgmF,GAAavzC,EAAAA,EAAAA,KAAY,KAC7BozC,EAA4B,CAAEv5C,UAASjqC,OAAQvP,GAAS,GACvD,CAACA,EAAQw5C,EAASu5C,IAEfI,GAAa91C,EAAAA,EAAAA,KAAQ,IACrB7D,EACEy5C,EAAoB,mCACpBD,EAAiB9lF,EAAa,iCAAmC,iCAE9DA,EAAa,2BAA6B,2BAE7C+lF,EAAoB,8BACpBD,EAAiB9lF,EAAa,4BAA8B,4BAEzDA,EAAa,sBAAwB,uBAE7C,CAAC+lF,EAAaD,EAAU9lF,EAAYssC,IAEjCygB,GAAW5c,EAAAA,EAAAA,KAAQ,IAChBxE,EAAUohB,UAAWm5B,EAAAA,GAAAA,IAAmB7uF,EAAMs0C,EAAUohB,eAAY75D,GAC1E,CAACmE,EAAMs0C,EAAUohB,WAEdo5B,GAAgBla,EAAAA,GAAAA,IAAW50E,EAAqB,IAAfQ,EAAQgI,MAC/C,OACE2tC,EAAAA,GAAAA,cAAA,OAAKxpB,UCxDc,wBDyDjBwpB,EAAAA,GAAAA,cAACmC,GAAAA,EAAM,CACL/8B,KAAK,UACL48B,MAAM,cACN1kC,OAAK,EACL8nC,QAAM,EACNzD,QAAS62C,EACThiE,UC/D+C,uBDgE/C6sC,UAAWnlB,EAAAA,GACXuK,UAAW5+C,EAAK2I,EAAa,YAAc,aAE3CwtC,EAAAA,GAAAA,cAAA,KAAGxpB,UAAWsoB,EAAU,sBAAwB,gBAElDkB,EAAAA,GAAAA,cAAA,OAAKxpB,UCrE0E,wBDsE7EwpB,EAAAA,GAAAA,cAAA,OAAKxpB,UCtEwG,wBDsE7E3sB,EAAK4uF,IACrCz4C,EAAAA,GAAAA,cAAA,OAAKxpB,UCvEuO,wBDwE1OwpB,EAAAA,GAAAA,cAAA,KACExpB,WAAWssB,EAAAA,GAAAA,GACT,mBC1EsI,uBD0EpGw1C,GC1EsK,wBD0E1I9lF,GC1E0G,0BD6E5KwtC,EAAAA,GAAAA,cAAA,QAAMxpB,UC7EsQ,wBD8EzQ+oC,EAAW11D,EAAK,0BAA2B,CAAC8uF,EAAep5B,IAAao5B,KAI3E,I,+EE5DV,MAAMC,GAAkB,MAAQ5qD,GAAAA,GAwBhC,IAAe2R,EAAAA,EAAAA,KAtBiBk5C,EAC9BluE,QACA6L,YACAmrB,cAEA,MAAM93C,GAAO+3C,EAAAA,GAAAA,KACb,OACE5B,EAAAA,GAAAA,cAAA,OACExpB,WAAWssB,EAAAA,GAAAA,GChCM,uBDgCsBtsB,GACvCwsB,MAAQ,qCAAmC81C,EAAAA,GAAAA,IAAyBnuE,GAAOouE,cAC3Ep3C,QAASA,GAERh3B,EACGq1B,EAAAA,GAAAA,cAACg5C,GAAAA,EAAS,CAACruE,MAAOA,EAAOvF,KAAMwzE,KAC/B54C,EAAAA,GAAAA,cAAA,OAAKoD,IAAK61C,GAAU51C,IAAI,KAC3B14B,GAAOjV,OAAQ64C,EAAAA,GAAAA,GAAW5jC,EAAMjV,OAAS7L,EAAK,WAC9C8gB,GAAOoiB,UAAYiT,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,cACjCwpB,EAAAA,GAAAA,cAAA,KAAGxpB,UAAU,cACT,I,gBEsNV,MAEM0iE,GAAe,CAAE3J,OAAQ,kvBAEzB4J,GAAmB,CAAE5J,OAAQ,qvBAG7B6J,GAAsB,KAAOprD,GAAAA,GAy+BnC,IAAe2R,EAAAA,EAAAA,KAAK4D,EAAAA,EAAAA,KAClB,CAACp+C,EAAQkuF,KACP,MAAM,eACJtsB,EAAc,gBAAEt/D,EAAe,gBAAEJ,EAAe,wBAAEqoC,IAChDvpC,EAAAA,EAAAA,IAAehB,IACb,aAAE+3B,GAAiB/3B,GACnB,QACJkF,EAAO,MAAE21D,EAAK,eAAEq5B,EAAc,WAAEC,EAAU,SAAE/zF,EAAQ,gBAAEqE,EAAe,sBAAE2vF,EAAqB,eAAEC,GAC5FnG,GACE,GACJ5sF,EAAE,OAAEnB,EAAM,SAAEsU,EAAQ,cAAE6/E,EAAa,iBAAE72E,EAAgB,WAAEpQ,EAAU,kBAAEogB,EAAiB,YAAEi7C,EAAW,gBACjGrhD,GACEniB,EAEE1C,GAAOC,EAAAA,EAAAA,IAAWzC,EAAQG,GAC1B6hE,GAAiBC,EAAAA,EAAAA,IAAqBjiE,EAAQG,GAC9Co0F,GAAgBC,EAAAA,EAAAA,IAAqBr0F,GACrCm1D,EAAY9yD,IAAQg/D,EAAAA,EAAAA,IAAch/D,GAClCsqC,EAAUtqC,IAAQiyF,EAAAA,EAAAA,IAAYjyF,GAC9BkyF,EAAgBlyF,GAAMw/B,UAEtB2yD,EAAeryF,EAAgBkC,YAAclC,EAAgBkC,WAAWkG,SAASpJ,GACjFszF,GAAmB5yB,IAAkB6yB,EAAAA,EAAAA,IAAsB3vF,GAC3D4vF,EAAgBZ,GAAkBC,GAAcS,EAChDjvF,GAASC,EAAAA,EAAAA,IAAa5F,EAAQkF,GAC9B6vF,GAAetyB,EAAAA,EAAAA,IAAsBziE,EAAQkF,GAC7C48B,EAAYrtB,GAAW0M,EAAAA,EAAAA,IAAWnhB,EAAQyU,QAAYlU,EACtDy0F,EAAoBrvF,GAAQrE,IAAMwrC,EACpCtqC,EAAKqoB,UAAU+lB,mBAAmBjrC,GAAQrE,SAC1Cf,EAEE00F,EAAqB70F,GAAWwgB,EAAAA,EAAAA,IAAyB5gB,EAAQG,EAAQC,QAAYG,EACrF20F,EAAchwF,EAAQ5D,KAAO2zF,EAE7BE,EAAkB13E,IAAqBw3E,EACvCz3E,EAAeC,IAAqB03E,GACtC5gF,EAAAA,EAAAA,IAAkBvU,EAAQu0F,GAAiBD,EAAgBA,EAAgBn0F,EAAQsd,QACnFld,EACE60F,EAAqB53E,IAAgB63E,EAAAA,EAAAA,IAAkBr1F,EAAQwd,EAAcvW,QAAQyhE,IACrF4sB,EAA6D,gBAAvC93E,GAAcrW,QAAQ2N,QAAQtT,KAEpDo8E,GAAiB2X,EAAAA,EAAAA,IAAqBv1F,EAAQkF,GAC9C2qE,EAAgC,WAApBprE,IAChBo2D,EACIA,EAAM91D,SAASsmC,MAAMzkB,IAAM8uD,EAAAA,EAAAA,IAAuB11E,EAAQ4mB,MAC1D8uD,EAAAA,EAAAA,IAAuB11E,EAAQkF,KAInCyF,UAAWmlE,EAAgBvmE,YAAawmE,EAAgB,oBAAE9lE,GACvD4lE,GAAajO,GAAmB,CAAC,GAE9BhhE,MAAO40F,IAAc9gE,EAAAA,EAAAA,IAAwB10B,IAAW,CAAC,EAE3Dy1F,GAAcC,EAAAA,EAAAA,IAA6BxwF,GAC3CywF,GAAgBF,IAAe5Y,EAAAA,EAAAA,IAAoB78E,EAAQy1F,GAAeA,OAAcl1F,EACxFq1F,IAAsBC,EAAAA,EAAAA,IAA4B3wF,GAExD,IAAIw5D,GAEFA,GADE7D,GAAO91D,SACI81D,EAAM91D,SAAS+wF,OAAM,EAAGx0F,GAAIqF,MAAgBwnF,EAAAA,EAAAA,IAAwBnuF,EAAQ2G,MAE5EwnF,EAAAA,EAAAA,IAAwBnuF,EAAQsB,GAG/C,MAAM,SAAEsvE,IAAkC,WAApBnsE,IAAgCU,EAAAA,EAAAA,IAA4BnF,EAAQkF,EAAS9E,IAAc,CAAC,EAC5Gy9E,IAAgBkY,EAAAA,EAAAA,IAAoB/1F,EAAQkF,GAC5C8wF,GAA0BvoE,GAC5BrlB,EAAAA,EAAAA,IAAiBpI,EAAQytB,EAAkBttB,OAAQstB,EAAkBrtB,WAAaqtB,OAClFltB,EAEEwqC,GAAoB9jC,QAAQ/B,EAAQ4E,aAAe5E,EAAQ8lC,UAC3DC,GAA8BF,IAChC//B,EAAAA,EAAAA,IAA0BhL,EAAQG,EAAQ+E,EAAQ4E,WAAa,QAC/DvJ,EACE01F,GAAkBlrD,GACtBqpD,GAAwB7/E,EAAAA,EAAAA,IAAkBvU,EAAQG,EAAQ8qC,SAAgC1qC,EACxF2E,EAEEgxF,GAAoB1zF,GAAMkqC,iBAAiBhiC,SAASxF,EAAQ5D,IAE5D60F,GAAe/1F,IAAamB,EAAAA,IAAkBiB,GAAME,SAAW2xF,EAC/D+B,GAAeD,IAAgBtjD,EAAAA,EAAAA,IAAuB7yC,EAAQkF,IAAY1C,GAAMgW,SAAS69E,EAAAA,UAC3F91F,EAEE+1F,GAAarvF,SAAQujF,EAAAA,EAAAA,IAAmBtlF,IACxCqxF,IAAmBC,EAAAA,EAAAA,IAAuBx2F,EAAQG,GAClDs2F,IAA+BroF,EAAAA,EAAAA,IAAmCpO,EAAQG,EAAQ+E,EAAQ5D,IAEhG,MAAO,CACLg/B,OAAOwgB,EAAAA,EAAAA,IAAY9gD,GACnB00F,gBACAE,kBACAE,gBACAC,eACAjzD,YACAqzD,gBAAiBA,GAAmBG,EACpCJ,cACA13E,eACA43E,qBACArqD,qBACA8lC,aAAa6lB,EAAAA,EAAAA,IAAyB12F,EAAQkF,GAC9CyxF,iBAAiBC,EAAAA,EAAAA,IAAsB52F,EAAQG,GAC/C0vE,YACA8kB,eACAsB,mBACAj0B,iBACAuyB,gBACAj/B,YACAxoB,UACA8jC,YACA74C,eACAy9D,YACAG,iBACAC,uBACAjlB,gBAAgB5O,EAAAA,EAAAA,IAAqB/hE,GACrC0+D,cACAm4B,gBACE5vF,QAAQ/B,EAAQ4E,aACZ5E,EAAQ8lC,YACT8rD,EAAAA,EAAAA,IAA8B92F,EAAQG,EAAQ+E,EAAQ4E,WAE3D1J,WACAy9E,iBACAkZ,aAAkC,WAApBtyF,EACd4oF,kBAAkBgC,EAAAA,EAAAA,IAAuBrvF,EAAQkF,GACjD8xF,kBAAkB1H,EAAAA,EAAAA,IAAuBtvF,EAAQkF,GACjD+xF,sBAAuBj3F,EAAOqV,SAASC,MAAM2hF,sBAC7CC,oBAAoBC,EAAAA,EAAAA,IAAyBn3F,GAC7CytB,kBAAmBuoE,GACnBhsD,mBAAoBhqC,EAAOgqC,mBAC3BqC,iBAAiBxB,EAAAA,EAAAA,IAAe3lC,QAAW3E,GAAYqqC,EAAAA,EAAAA,IAAsB5qC,EAAQG,GACrF+B,gBAAiB+zF,IAAmB/zF,EAAgB+zF,GAAgB30F,IACpEipC,0BACA2rD,qBACAkB,oBAAoC72F,IAApB8mB,GAAiCrnB,EAAOk2C,eAAe7uB,IAAkB+F,UACzFiqE,qBAAqC92F,IAApB8mB,EAAgCrnB,EAAOk2C,eAAe7uB,IAAkB9jB,UAAOhD,EAChG6wB,WAAW9K,EAAAA,EAAAA,IAA2BtmB,GACtCoV,eAAgBpV,EAAOqV,SAASC,MAAMF,eACtC4/E,oBACAoB,gBACAjF,eAAgBnxF,EAAO4wB,oBACvBulE,gBACAI,oBACAe,uBAAwBt3F,EAAOqV,SAASC,MAAMiiF,aAC9Cd,oCACK3B,GAAiBwB,KAAe,CAAE3wF,aACnC0H,GAAc,CAAE+qE,gBAAgBof,EAAAA,EAAAA,IAAqBx3F,EAAQkF,EAA6B,cAApBT,OAC5C,iBAAnBm5E,GAA+B,CAAEA,qBACxC/N,GAAa,CAAEC,iBAAgBC,mBAAkB9lE,uBACtD,GAtJem0C,EAr+BuBq5C,EACzCvyF,UACAwvF,gBACAgD,+BACAphB,gCACAC,gCACA1b,QACAuP,YACA+pB,aACAD,iBACAyD,aACApf,YACAtC,kBACAoe,iBACAjjE,YACAwmE,gBACAC,yBACAzD,wBACAgD,iBACAC,kBACAnhB,eACA51C,QACAs0D,kBACAjvF,SACAmvF,gBACAC,eACAjzD,YACAozD,cACAC,kBACA33E,eACA43E,qBACAhd,iBACAwF,iBACA7yC,oBACA8lC,cACA8lB,kBACA9mB,YACAC,iBACAC,mBACA9lE,sBACA0qF,eACA3yB,iBACAuyB,gBACAj/B,YACAxoB,UACA8jC,WACA74C,gBACAy9D,aACAG,iBACAC,uBACAzE,kBACAxgB,kBACAjS,cACAm4B,mBACAz2F,YACA61F,mBACAjsD,sBACAqC,mBACAnqC,mBACAqoC,2BACA9lC,mBACAsyF,gBACAlZ,iBACAwP,oBACA2J,oBACAE,sBACAD,yBACAxpE,qBACAyoE,qBACA9f,wBACAhhE,kBACA4/E,qBACAoB,gBACAD,gBACAI,oBACAe,0BACAb,oCAEA,MAAM,uBACJvqF,GAAsB,qBACtBurD,G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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/ui/Tab.tsx","webpack://telegram-t/./src/components/ui/TabList.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/Deferred.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/lib/cleanDocsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/ui/PasswordModal.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  window.open(createMessageHashUrl(chatId, 'thread', threadId), '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  TabState, GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage, updateFocusedMessageReached, toggleMessageSelectAll,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedTranslationLanguage,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n  const messages = selectChatMessages(global,chatId);\n  const {content} = messages[lastOwnEditableMessageId]\n  if(content.text && content.text){\n    actions.saveDraft({\n      chatId, threadId,\n      draft:{\n        text:content.text.text,\n        entities:content.text.entities\n      }\n      , shouldForce:true,\n    })\n    // return replaceThreadParam(global, chatId, threadId, 'editingId', {text:lastOwnEditableMessageId.toString()});\n  }\n\n  // return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('setReachedFocusedMessage', (global, actions, payload): ActionReturnType => {\n  const { hasReached = false, tabId = getCurrentTabId() } = payload;\n\n  return updateFocusedMessageReached(global, hasReached, tabId);\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const byChatId = tabState.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  const byChatId = selectTabState(global, tabId).activeDownloads.byChatId;\n  const newByChatId: TabState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return updateTabState(global, {\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: [...(tabState.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\n\naddActionHandler('toggleMessageSelectAll', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n  return toggleMessageSelectAll(global, chatId, tabId);\n});\n\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (selectTabState(global, tabId).shouldShowContextMenuHint) {\n    actions.disableContextMenuHint({ tabId });\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (!selectTabState(global, tabId).shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    shouldShowContextMenuHint: false,\n  }, tabId);\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, id, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = selectRequestedTranslationLanguage(global, chatId, id, tabId);\n\n  return updateTabState(global, {\n    messageLanguageModal: { chatId, messageId: id, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    messageLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: false, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectIsTrustedBot, selectChat,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (!isBlurred) {\n    actions.updateIsOnline(true);\n  }\n\n  const blurredTabTokens = unique(isBlurred\n    ? [...global.blurredTabTokens, tabId]\n    : global.blurredTabTokens.filter((t) => t !== tabId));\n\n  if (blurredTabTokens.length === getAllMultitabTokens().length) {\n    actions.updateIsOnline(false);\n  }\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  return {\n    ...global,\n    blurredTabTokens,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (messageList && canDisplayChatInTitle) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, undefined, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(PAGE_TITLE);\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { signalPasscodeHash } from '../../../util/establishMultitabRole';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  signalPasscodeHash();\n  global = getGlobal();\n  global = updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  });\n  setGlobal(global);\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport type {ActionReturnType, ApiDraft, GlobalState, TabArgs,} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {MAIN_THREAD_ID, MESSAGE_DELETED,} from '../../../api/types';\nimport {LoadMoreDirection} from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport {IS_IOS} from '../../../util/environment';\nimport {callApi, cancelApiProgress} from '../../../api/gramjs';\nimport {areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingIds,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage, selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState, selectTabThreadParam,\n  selectThreadIdFromMessage,\n  selectThreadTopMessageId,\n  selectUser,\n  selectViewportIds,\n} from '../../selectors';\nimport {debounce, onTickEnd, rafPromise,} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName,\n  isDeletedUser, isLocalMessageId,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {translate} from '../../../util/langProvider';\nimport {ensureProtocol} from '../../../util/ensureProtocol';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport MsgConn, {MsgClientState, MsgConnNotifyAction} from \"../../../lib/ptp/client/MsgConn\";\nimport {MsgDeleteReq, MsgListReq, MsgListRes, MsgUpdateReq, SendReq} from \"../../../lib/ptp/protobuf/PTPMsg\";\nimport {ERR} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport Account from \"../../../worker/share/Account\";\nimport {getPasswordFromEvent, replaceSubstring} from \"../../../worker/share/utils/utils\";\nimport {blobToBuffer, fetchBlob} from \"../../../util/files\";\nimport {popByteBuffer, toUint8Array, writeBytes, writeInt16} from \"../../../lib/ptp/protobuf/BaseMsg\";\nimport {resizeImage} from \"../../../util/imageResize\";\nimport {hashSha256} from \"../../../worker/share/utils/helpers\";\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n  let { chatId, threadId } = payload || {};\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!currentMessageList || MsgConn.getMsgClient()?.getState() !== MsgClientState.logged) {\n    return undefined;\n  }\n  const { chatId, threadId, type } = currentMessageList;\n  payload = omit(payload, ['tabId']);\n  const {currentUserId} = getGlobal();\n\n  if(currentUserId === chatId){\n    if(payload.attachments){\n      const hasMessageEntitySpoiler = payload.attachments.find((a:ApiAttachment)=>a.shouldSendAsSpoiler);\n      if(hasMessageEntitySpoiler){\n        const {password,hint} = await getPasswordFromEvent();\n        if(password){\n          let {attachments} = payload;\n          for (let i = 0; i < attachments.length; i++) {\n            const attachment = attachments[i];\n            const {blobUrl,mimeType} = attachment;\n            const buf = await blobToBuffer(await fetchBlob(blobUrl));\n            const cipher = await Account.getCurrentAccount()?.encryptByPubKey(buf, hashSha256(password))\n            const bb = popByteBuffer();\n            const hintLen = (hint ? hint.length:0)\n            const typeLen = mimeType.length;\n            writeInt16(bb, 2);\n            writeBytes(bb,Buffer.from(\"EN\"));\n            writeInt16(bb, typeLen);\n            writeBytes(bb,Buffer.from(mimeType));\n            writeInt16(bb, hintLen);\n            if(hintLen){\n              writeBytes(bb,Buffer.from(hint||\"\"));\n            }\n            const res = toUint8Array(bb);\n            const blob = new Blob([Buffer.from(res),Buffer.from(cipher!)], { type: attachment.mimeType });\n            payload.attachments[i].encryptUrl = URL.createObjectURL(blob)\n          }\n        }else{\n          return undefined\n        }\n      }\n    }\n    let {attachments} = payload;\n    if(attachments){\n      for (let i = 0; i < attachments.length; i++) {\n        const attachment = attachments[i];\n        const {mimeType,encryptUrl,blobUrl} = attachment;\n        if(mimeType.indexOf(\"image/\") === 0){\n          const size = encryptUrl ? 10 : 40;\n          const quality = 0.1;\n          attachment.thumbBlobUrl = await resizeImage(\n            blobUrl, size,size, 'image/jpeg',quality\n          );\n        }\n      }\n    }\n    if(payload.text && payload.entities && payload.entities!.length > 0){\n      let {entities,text} = payload;\n      const hasMessageEntitySpoiler = entities.find((entity:ApiMessageEntity)=>entity.type === \"MessageEntitySpoiler\");\n      if(hasMessageEntitySpoiler){\n        const {password,hint} = await getPasswordFromEvent();\n        if(password){\n          for (let i = 0; i < entities.length; i++) {\n            if(entities[i].type === \"MessageEntitySpoiler\"){\n              const entity = payload.entities[i];\n              const {offset,length} = entity;\n              const cipher = await Account.getCurrentAccount()?.encryptByPubKey(Buffer.from(text.substr(offset,length)), hashSha256(password))\n              payload.text = replaceSubstring(payload.text,offset,length,\"x\".repeat(length));\n              //@ts-ignore\n              payload.entities[i] = {...entity,cipher:cipher.toString(\"hex\"),hint}\n            }\n          }\n        }else{\n          return undefined\n        }\n      }\n    }\n  }\n  global = getGlobal();\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectUser(global, global.currentUserId!),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    }, tabId);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        }, tabId);\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          }, tabId);\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      }, tabId);\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      }, tabId);\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const { text, entities, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n  MsgConn.getMsgClient()?.send(new MsgUpdateReq({\n    msg_id:message.id,\n    chat_id:chat.id,\n    user_id:global.currentUserId!,\n    text\n  }).pack().getPbData())\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', async (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  try {\n    await MsgConn.getMsgClient()\n      ?.sendPduWithCallback(new MsgDeleteReq({\n        msg_ids:messageIds,\n        chat_id:chatId,\n        user_id:global.currentUserId!,\n        revoke:shouldDeleteForAll\n      }).pack());\n    void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n    const {lastMessage} = global.chats.byId[chatId];\n\n    if(lastMessage && lastMessage.id){\n      if(messageIds.includes(lastMessage.id)){\n        const t = getGlobal()\n        setGlobal({\n          ...t,\n          chats:{\n            ...t.chats,\n            byId:{\n              ...t.chats.byId,\n              [chatId]:{\n                ...t.chats.byId[chatId],\n                lastMessage:undefined\n              }\n            }\n          }\n        })\n      }\n    }\n\n    const editingId = selectEditingId(global, chatId, threadId);\n    if (editingId && messageIds.includes(editingId)) {\n      actions.setEditingId({ messageId: undefined, tabId });\n    }\n  }catch (e){\n    console.error(e)\n  }\n\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId, tabId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { message: text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const { isSilent, scheduledAt, tabId = getCurrentTabId() } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      }, tabId);\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nconst loadViewportMessagesCache:Record<string, boolean> = {};\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  global = getGlobal();\n  let flag = false;\n  if(!global.messages.byChatId[chatId]  || !global.messages.byChatId[chatId].threadsById || global.messages.byChatId[chatId].threadsById[\"-1\"].lastViewportIds == undefined){\n    global = safeReplaceViewportIds(global, chatId, threadId, [], tabId);\n    flag = true;\n  }\n  if(!global.messages.byChatId[chatId]  || !global.messages.byChatId[chatId].threadsById || global.messages.byChatId[chatId].threadsById[\"-1\"].listedIds == undefined){\n    global = updateListedIds(global, chatId, threadId, [])\n    flag = true;\n  }\n\n  if(flag){\n    setGlobal(global)\n  }\n  const lastMessageId = chat?.lastMessage ? chat?.lastMessage.id : 0;\n  const messages1 = selectChatMessages(global,chat!.id)\n\n  let isUp = true;\n  let listedIds1 = selectListedIds(global, chatId, threadId);\n  const ids1:number[]= []\n  listedIds1?.forEach((id:number)=>{\n    if(!isLocalMessageId(id)){\n      ids1.push(id)\n    }\n  })\n\n  if((ids1.length > 1 && ids1[ids1.length - 1] < lastMessageId) || Object.keys(messages1).length === 0){\n    isUp = false;\n  }\n  let result;\n  try{\n    if(loadViewportMessagesCache[chat.id]){\n      return\n    }\n    console.log(\"[MsgListReq]\",{chatId:chat.id,lastMessageId,isUp})\n    loadViewportMessagesCache[chat.id] = true;\n    const pdu = await MsgConn.getMsgClient()?.sendPduWithCallback(new MsgListReq({\n      lastMessageId,\n      chatId:chat.id,\n      limit: MESSAGE_LIST_SLICE,\n      isUp\n    }).pack());\n    if(!pdu){\n      return\n    }\n    const res = MsgListRes.parseMsg(pdu!)\n    if(res.err !== ERR.NO_ERROR){\n      return;\n    }\n    result = JSON.parse(res!.payload)\n  }catch (e){\n\n  }\n  setTimeout(()=>{delete loadViewportMessagesCache[chat.id]},2000)\n\n  // console.log(result)\n  // const result = await callApi('fetchMessages', {\n  //   chat: selectChat(global, chatId)!,\n  //   offsetId,\n  //   addOffset,\n  //   limit: MESSAGE_LIST_SLICE,\n  //   threadId,\n  // });\n\n  if (!result) {\n    return;\n  }\n\n  let {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  if(messages.length > 0 && lastMessageId < messages[messages.length - 1].id){\n    chat.lastMessage = messages[messages.length - 1];\n    if(!chats){\n      chats = []\n    }\n    chats.push(chat)\n  }\n\n  console.log(\"[MsgListRes]\",messages,users)\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids, tabId)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n},\n...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? async (progress: number, localMessage: ApiMessage) => {\n    const messageLocalId = localMessage.id;\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n    if(progress === 2){\n      try{\n        await MsgConn.getMsgClient()\n          ?.sendPduWithCallback(new SendReq({\n            payload:JSON.stringify({\n              msg:localMessage\n            })\n          }).pack());\n      }catch (error){\n        console.error(\"send Msg error\")\n        MsgConn.getMsgClient()?.notify([\n          {\n            action: MsgConnNotifyAction.onSendMsgError,\n            payload: {\n              chatId: localMessage.chatId,\n              localId: localMessage.id,\n              error: \"send MSG error\",\n            },\n          },\n        ]);\n      }\n    }\n\n  } : async (progress: number, localMessage: any)=>{\n    try{\n      await MsgConn.getMsgClient()\n        ?.sendPduWithCallback(new SendReq({\n          payload:JSON.stringify({\n            msg:localMessage\n          })\n        }).pack());\n    }catch (error){\n      console.error(\"send Msg error\")\n      MsgConn.getMsgClient()?.notify([\n        {\n          action: MsgConnNotifyAction.onSendMsgError,\n          payload: {\n            chatId: localMessage.chatId,\n            localId: localMessage.id,\n            error: \"send MSG error\",\n          },\n        },\n      ]);\n    }\n  }\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, threadId, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByUserIds: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectLanguageCode(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentGlobalSearchQuery,\n  selectTabState, selectUser\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      global = getGlobal();\n      const chatListIdsActive = global.chats.listIds.active;\n      if(!chatListIdsActive){\n        return;\n      }\n      const messagesList:ApiMessage[] = []\n      const chatIds:string[] = [];\n      const userIds:string[] = [];\n      const userIdList = Object.keys(global.users.byId);\n      for (let i = 0; i < userIdList.length; i++) {\n        const userId = userIdList[i]\n        const user = selectUser(global,userId)\n        if(\n          chatListIdsActive.includes(userId) && (\n            (user?.firstName && user?.firstName.toLowerCase().indexOf(query.toLowerCase()) > -1) ||\n            (user?.lastName && user?.lastName.toLowerCase().indexOf(query.toLowerCase()) > -1) ||\n            (user?.fullInfo && user?.fullInfo.bio && user?.fullInfo.bio.toLowerCase().indexOf(query.toLowerCase()) > -1)\n          )\n          ){\n          chatIds.push(userId)\n        }\n      }\n\n      for (let i = 0; i < chatListIdsActive.length; i++) {\n        const chatId = chatListIdsActive[i]\n        const chat = selectChat(global,chatId)\n        if(chat && chat?.title.indexOf(query) > -1 && !chatIds.includes(chat?.id)){\n          chatIds.push(chat?.id)\n        }\n        const messages = selectChatMessages(global,chatId)\n        if(messages){\n          const messageIds = Object.keys(messages);\n          for (let i = 0; i < messageIds.length; i++) {\n            const messageId = Number(messageIds[i])\n            const message = selectChatMessage(global,chatId,messageId)\n            if(message?.content && message?.content.text && message?.content.text.text){\n              if(message?.content.text.text.toLowerCase().indexOf(query.toLowerCase()) > -1){\n                messagesList.push(message)\n              }\n            }\n          }\n        }\n\n      }\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (messagesList.length === 0 || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n      global = updateGlobalSearchResults(global,messagesList,messagesList.length,\"text\",0,tabId)\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds,\n          userIds\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n\n  //\n  // const { query, tabId = getCurrentTabId() } = payload!;\n  // const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  // if (query && !chatId) {\n  //   void searchThrottled(async () => {\n  //     const result = await callApi('searchChats', { query });\n  //\n  //     global = getGlobal();\n  //     const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  //     if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n  //       global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n  //       setGlobal(global);\n  //       return;\n  //     }\n  //\n  //     const {\n  //       localChats, localUsers, globalChats, globalUsers,\n  //     } = result;\n  //\n  //     if (localChats.length || globalChats.length) {\n  //       global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  //     }\n  //\n  //     if (localUsers.length || globalUsers.length) {\n  //       global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  //     }\n  //\n  //     global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n  //     global = updateGlobalSearch(global, {\n  //       localResults: {\n  //         chatIds: localChats.map(({ id }) => id),\n  //         userIds: localUsers.map(({ id }) => id),\n  //       },\n  //       globalResults: {\n  //         ...selectTabState(global, tabId).globalSearch.globalResults,\n  //         chatIds: globalChats.map(({ id }) => id),\n  //         userIds: globalUsers.map(({ id }) => id),\n  //       },\n  //     }, tabId);\n  //\n  //     setGlobal(global);\n  //   });\n  // }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  return\n  console.log(\"searchMessagesGlobal\")\n  // let result: {\n  //   messages: ApiMessage[];\n  //   users: ApiUser[];\n  //   chats: ApiChat[];\n  //   topics?: ApiTopic[];\n  //   totalTopicsCount?: number;\n  //   totalCount: number;\n  //   nextRate: number | undefined;\n  // } | undefined;\n  //   console.log(\"searchMessagesGlobal\")\n  // if (chat) {\n  //   const localResultRequest = callApi('searchMessagesLocal', {\n  //     chat,\n  //     query,\n  //     type,\n  //     limit: GLOBAL_SEARCH_SLICE,\n  //     offsetId: offsetRate,\n  //     minDate,\n  //     maxDate,\n  //   });\n  //   const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n  //     chat,\n  //     query,\n  //     limit: GLOBAL_TOPIC_SEARCH_SLICE,\n  //   }) : undefined;\n  //\n  //   const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n  //\n  //   if (localResult) {\n  //     const {\n  //       messages, users, totalCount, nextOffsetId,\n  //     } = localResult;\n  //\n  //     const { topics: localTopics, count } = topics || {};\n  //\n  //     result = {\n  //       topics: localTopics,\n  //       totalTopicsCount: count,\n  //       messages,\n  //       users,\n  //       chats: [],\n  //       totalCount,\n  //       nextRate: nextOffsetId,\n  //     };\n  //   }\n  // } else {\n  //   result = await callApi('searchMessagesGlobal', {\n  //     query,\n  //     offsetRate,\n  //     limit: GLOBAL_SEARCH_SLICE,\n  //     type,\n  //     maxDate,\n  //     minDate,\n  //   });\n  // }\n  //\n  // global = getGlobal();\n  // const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  // if (!result || (query !== '' && query !== currentSearchQuery)) {\n  //   global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n  //   setGlobal(global);\n  //   return;\n  // }\n  //\n  // const {\n  //   messages, users, chats, totalCount, nextRate,\n  // } = result;\n  //\n  // if (chats.length) {\n  //   global = addChats(global, buildCollectionByKey(chats, 'id'));\n  // }\n  //\n  // if (users.length) {\n  //   global = addUsers(global, buildCollectionByKey(users, 'id'));\n  // }\n  //\n  // if (messages.length) {\n  //   global = addMessages(global, messages);\n  // }\n  //\n  // global = updateGlobalSearchResults(\n  //   global,\n  //   messages,\n  //   totalCount,\n  //   type,\n  //   nextRate,\n  //   tabId,\n  // );\n  //\n  // if (result.topics) {\n  //   global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  // }\n  //\n  // const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  // global = updateGlobalSearch(global, {\n  //   foundTopicIds: sortedTopics,\n  // }, tabId);\n  //\n  // setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getActions, getGlobal, setGlobal,} from '../../index';\nimport {addCallback} from '../../../lib/teact/teactn';\n\nimport type {ApiChat, ApiMessage} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport type {ActionReturnType, GlobalState, Thread} from '../../types';\n\nimport {DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID} from '../../../config';\nimport {callApi} from '../../../api/gramjs';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport {init as initFolderManager} from '../../../util/folderManager';\nimport {updateTabState} from '../../reducers/tabs';\nimport MsgConn, {MsgClientState} from \"../../../lib/ptp/client/MsgConn\";\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      // await loadAndReplaceMessages(global, actions);\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, currentChatId, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\nlet previousMsgClientState: MsgClientState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  const msgConn = MsgConn.getMsgClient();\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    if(msgConn && previousMsgClientState !== MsgClientState.logged && msgConn?.getState() === MsgClientState.logged ){\n        getActions().sync();\n    }\n    previousMsgClientState = msgConn?.getState();\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    if(msgConn?.getState() === MsgClientState.logged || msgConn?.getState() === MsgClientState.connected){\n      getActions().sync();\n    }\n  }\n  previousMsgClientState = msgConn?.getState();\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) return;\n\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = user.fullInfo?.profilePhoto?.id !== newUser.fullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = user.fullInfo?.fallbackPhoto?.id !== newUser.fullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = user.fullInfo?.personalPhoto?.id !== newUser.fullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  if (user && !user?.fullInfo) {\n    const { id, accessHash } = user;\n    user = await callApi('fetchFullUser', { id, accessHash });\n    if (!user) return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = user?.fullInfo?.fallbackPhoto;\n  const personalPhoto = user?.fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport MsgConn from \"../../../lib/ptp/client/MsgConn\";\nimport {SendReq} from \"../../../lib/ptp/protobuf/PTPMsg\";\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  global = getGlobal();\n  bot = selectUser(global, botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action](callbackPayload);\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n  },async (progress,localMessage)=>{\n    await MsgConn.getMsgClient()\n      ?.sendPduWithCallback(new SendReq({\n        payload:JSON.stringify({\n          msg:localMessage\n        })\n      }).pack());\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat, selectTabState,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload): ActionReturnType => {\n  const { chatId, reaction, tabId = getCurrentTabId() } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  const tabState = selectTabState(global, tabId);\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat, updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport type { ActionReturnType } from '../../types';\nimport {isLocalMessageId} from \"../../helpers\";\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n      if(!isLocalMessageId(message.id!)){\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n        });\n      }\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID, tabId);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/environment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default memo(StatusPickerMenuAsync);\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect] as const);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState, GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION, ASSET_CACHE_NAME,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL, GLOBAL_STATE_CACHE_KEY,\n  IS_BETA,\n  IS_TEST, LANG_CACHE_NAME,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport {\n  selectCurrentMessageList, selectIsCurrentUserPremium, selectTabState, selectTheme,\n} from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\nimport * as cacheApi from '../../../util/cacheApi';\nimport {clear} from \"../../../util/cacheApi\";\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'archiveSettings'> & Pick<TabState, 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n  archiveSettings,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n    signOut,\n    updateGlobal\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleClearCache = useCallback(async () => {\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    setTimeout(async ()=>{\n      const {chats,messages} = getGlobal();\n      Object.values(chats.byId).forEach(chat=>{\n        chat.lastMessage = undefined\n        messages.byChatId[chat.id].byId = {}\n        messages.byChatId[chat.id].threadsById['-1'].lastViewportIds = []\n        messages.byChatId[chat.id].threadsById['-1'].listedIds = []\n        messages.byChatId[chat.id].threadsById['-1'].lastScrollOffset = undefined\n      })\n      updateGlobal({\n        messages,\n        chats\n      })\n\n      await cacheApi.clear(LANG_CACHE_NAME);\n      await cacheApi.clear(ASSET_CACHE_NAME);\n      setTimeout(()=>{\n        location.reload();\n      },500)\n    },500)\n  }, [openUrl]);\n  const handleSignOutClick = useCallback(() => {\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    setTimeout(()=>{\n      signOut({ forceInitApi: true });\n      updateGlobal({\n        authState:\"authorizationStateWaitSignPassword\"\n      })\n      },300)\n  }, [openChat,signOut]);\n\n  const handleLoginClick = useCallback(() => {\n    updateGlobal({\n      authState:\"authorizationStateWaitSignPassword\"\n    })\n  }, [updateGlobal]);\n\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      {\n        currentUserId &&\n        <MenuItem\n          icon=\"settings\"\n          onClick={onSelectSettings}\n        >\n          {lang('Settings')}\n        </MenuItem>\n      }\n      {\n        currentUserId &&\n        <MenuItem\n          icon=\"saved-messages\"\n          onClick={handleSelectSaved}\n        >\n          {lang('SavedMessages')}\n        </MenuItem>\n      }\n      {/* {archiveSettings.isHidden && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"archive\" */}\n      {/*     onClick={onSelectArchived} */}\n      {/*   > */}\n      {/*     <span className=\"menu-item-name\">{lang('ArchivedChats')}</span> */}\n      {/*     {archivedUnreadChatsCount > 0 && ( */}\n      {/*       <div className=\"right-badge\">{archivedUnreadChatsCount}</div> */}\n      {/*     )} */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {/* <MenuItem */}\n      {/*   icon=\"user\" */}\n      {/*   onClick={onSelectContacts} */}\n      {/* > */}\n      {/*   {lang('Contacts')} */}\n      {/* </MenuItem> */}\n\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('NightMode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Animations')}</span>\n        <Switcher\n          id=\"animations\"\n          label=\"Toggle Animations\"\n          checked={animationLevel > 0}\n        />\n      </MenuItem>\n      {/* <MenuItem */}\n      {/*   icon=\"help\" */}\n      {/*   onClick={handleOpenTipsChat} */}\n      {/* > */}\n      {/*   {lang('TelegramFeatures')} */}\n      {/* </MenuItem> */}\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('ReportBug')}\n      </MenuItem>\n      <MenuItem\n        icon=\"stop\"\n        onClick={handleClearCache}\n      >\n        清除缓存\n      </MenuItem>\n      {/* {IS_BETA && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"permissions\" */}\n      {/*     onClick={handleChangelogClick} */}\n      {/*   > */}\n      {/*     Beta Changelog */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {/* {withOtherVersions && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"char-K\" */}\n      {/*     href={WEBK_VERSION_URL} */}\n      {/*     onClick={handleSwitchToWebK} */}\n      {/*   > */}\n      {/*     Switch to K Version */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n      {\n        currentUserId ?\n\n        <MenuItem\n          icon=\"logout\"\n          onClick={handleSignOutClick}\n        >\n          {lang('SignOut')}\n        </MenuItem>:\n          <MenuItem\n            icon=\"user\"\n            onClick={handleLoginClick}\n          >\n            {lang('Login')}\n          </MenuItem>\n      }\n    </>\n  ), [\n    animationLevel, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings,\n    } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, memo, useEffect } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport forceReflow from '../../util/forceReflow';\nimport renderText from '../common/helpers/renderText';\n\nimport './Tab.scss';\n\ntype OwnProps = {\n  className?: string;\n  title: string;\n  isActive?: boolean;\n  isBlocked?: boolean;\n  badgeCount?: number;\n  isBadgeActive?: boolean;\n  previousActiveTab?: number;\n  onClick: (arg: number) => void;\n  clickArg: number;\n};\n\nconst classNames = {\n  active: 'Tab--active',\n  badgeActive: 'Tab__badge--active',\n};\n\nconst Tab: FC<OwnProps> = ({\n  className,\n  title,\n  isActive,\n  isBlocked,\n  badgeCount,\n  isBadgeActive,\n  previousActiveTab,\n  onClick,\n  clickArg,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const tabRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Set initial active state\n    if (isActive && previousActiveTab === undefined && tabRef.current) {\n      tabRef.current.classList.add(classNames.active);\n    }\n\n    if (!isActive || previousActiveTab === undefined) {\n      return;\n    }\n\n    const tabEl = tabRef.current!;\n    const prevTabEl = tabEl.parentElement!.children[previousActiveTab];\n    if (!prevTabEl) {\n      // The number of tabs in the parent component has decreased. It is necessary to add the active tab class name.\n      if (isActive && !tabEl.classList.contains(classNames.active)) {\n        tabEl.classList.add(classNames.active);\n      }\n      return;\n    }\n\n    const platformEl = tabEl.querySelector<HTMLElement>('.platform')!;\n    const prevPlatformEl = prevTabEl.querySelector<HTMLElement>('.platform')!;\n\n    // We move and resize the platform, so it repeats the position and size of the previous one\n    const shiftLeft = prevPlatformEl.parentElement!.offsetLeft - platformEl.parentElement!.offsetLeft;\n    const scaleFactor = prevPlatformEl.clientWidth / platformEl.clientWidth;\n\n    prevPlatformEl.classList.remove('animate');\n    platformEl.classList.remove('animate');\n    platformEl.style.transform = `translate3d(${shiftLeft}px, 0, 0) scale3d(${scaleFactor}, 1, 1)`;\n    forceReflow(platformEl);\n    platformEl.classList.add('animate');\n    platformEl.style.transform = 'none';\n\n    prevTabEl.classList.remove(classNames.active);\n    tabEl.classList.add(classNames.active);\n  }, [isActive, previousActiveTab]);\n\n  return (\n    <div\n      className={buildClassName('Tab', className)}\n      onClick={() => onClick(clickArg)}\n      ref={tabRef}\n    >\n      <span>\n        {renderText(title)}\n        {Boolean(badgeCount) && (\n          <span className={buildClassName('badge', isBadgeActive && classNames.badgeActive)}>{badgeCount}</span>\n        )}\n        {isBlocked && <i className=\"icon-lock-badge blocked\" />}\n        <i className=\"platform\" />\n      </span>\n    </div>\n  );\n};\n\nexport default memo(Tab);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useEffect } from '../../lib/teact/teact';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport { IS_ANDROID, IS_IOS } from '../../util/environment';\nimport fastSmoothScrollHorizontal from '../../util/fastSmoothScrollHorizontal';\n\nimport usePrevious from '../../hooks/usePrevious';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Tab from './Tab';\n\nimport './TabList.scss';\n\nexport type TabWithProperties = {\n  id?: number;\n  title: string;\n  badgeCount?: number;\n  isBlocked?: boolean;\n  isBadgeActive?: boolean;\n};\n\ntype OwnProps = {\n  tabs: readonly TabWithProperties[];\n  areFolders?: boolean;\n  activeTab: number;\n  big?: boolean;\n  onSwitchTab: (index: number) => void;\n};\n\nconst TAB_SCROLL_THRESHOLD_PX = 16;\n// Should match duration from `--slide-transition` CSS variable\nconst SCROLL_DURATION = IS_IOS ? 450 : IS_ANDROID ? 400 : 300;\n\nconst TabList: FC<OwnProps> = ({\n  tabs, areFolders, activeTab, big, onSwitchTab,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const previousActiveTab = usePrevious(activeTab);\n\n  useHorizontalScroll(containerRef, undefined, true);\n\n  // Scroll container to place active tab in the center\n  useEffect(() => {\n    const container = containerRef.current!;\n    const { scrollWidth, offsetWidth, scrollLeft } = container;\n    if (scrollWidth <= offsetWidth) {\n      return;\n    }\n\n    const activeTabElement = container.childNodes[activeTab] as HTMLElement | null;\n    if (!activeTabElement) {\n      return;\n    }\n\n    const { offsetLeft: activeTabOffsetLeft, offsetWidth: activeTabOffsetWidth } = activeTabElement;\n    const newLeft = activeTabOffsetLeft - (offsetWidth / 2) + (activeTabOffsetWidth / 2);\n\n    // Prevent scrolling by only a couple of pixels, which doesn't look smooth\n    if (Math.abs(newLeft - scrollLeft) < TAB_SCROLL_THRESHOLD_PX) {\n      return;\n    }\n\n    fastSmoothScrollHorizontal(container, newLeft, SCROLL_DURATION);\n  }, [activeTab]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      className={`TabList no-selection no-scrollbar ${big ? 'big' : ''}`}\n      ref={containerRef}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {tabs.map((tab, i) => (\n        <Tab\n          key={tab.id ?? tab.title}\n          // TODO Remove dependency on usage context\n          title={(!areFolders || tab.id === ALL_FOLDER_ID) ? lang(tab.title) : tab.title}\n          isActive={i === activeTab}\n          isBlocked={tab.isBlocked}\n          badgeCount={tab.badgeCount}\n          isBadgeActive={tab.isBadgeActive}\n          previousActiveTab={previousActiveTab}\n          onClick={onSwitchTab}\n          clickArg={i}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(TabList);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectTabState, selectIsForumPanelOpen } from '../../../global/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  isForumPanelOpen?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      lastSyncTime,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      isForumPanelOpen: selectIsForumPanelOpen(global),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\nimport {getActions} from \"../../global\";\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const {updateGlobal} = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n\n  const handleTest = useCallback(() => {\n    updateGlobal({\n      users:globalData.users,\n      chats:globalData.chats,\n      messages:globalData.messages,\n      contactList:globalData.contactList,\n      recentlyFoundChatIds:globalData.recentlyFoundChatIds,\n      availableReactions:globalData.availableReactions,\n      trustedBotIds:globalData.trustedBotIds,\n      serviceNotifications:globalData.serviceNotifications,\n      chatFolders:globalData.chatFolders\n    })\n  }, []);\n\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n  return null;\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\nimport * as cacheApi from '../../../util/cacheApi';\n\nimport './LeftMain.scss';\nimport { getActions } from '../../../global';\nimport {LANG_CACHE_NAME} from \"../../../config\";\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && content === LeftColumnContent.ChatList;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  }, [closeForumPanel, onContentChange]);\n\n  const handleUpdateClick = useCallback(async () => {\n    await cacheApi.clear(LANG_CACHE_NAME);\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelVisible}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectTabState, selectCurrentChat, selectIsForumPanelOpen } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  chatCreationProgress?:ChatCreationProgress;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\nconst leftColumnContent = window.sessionStorage.getItem(\"LeftColumnContent\") || LeftColumnContent.ChatList;\nconst LeftColumn: FC<StateProps> = ({\n  chatCreationProgress,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n\n  const [content, setContent] = useState<LeftColumnContent>(Number(leftColumnContent));\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n  const setContent_ = (v:LeftColumnContent)=>{\n    setContent(v);\n    window.sessionStorage.setItem(\"LeftColumnContent\",v.toString())\n  }\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent_(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent_(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent_(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent_(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent_(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent_(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen && !isForumPanelOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent_(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleArchivedChats = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  }, []);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent_(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_PWA && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent_(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onTopicSearch={handleTopicSearch}\n                  foldersDispatch={foldersDispatch}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onLeftColumnContentChange={setContent_}\n                  isForumPanelOpen={isForumPanelOpen}\n                  archiveSettings={archiveSettings}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  isClosingSearch={isClosingSearch}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent_}\n                  onSearchQuery={handleSearchQuery}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                  isForumPanelOpen={isForumPanelOpen}\n                  onTopicSearch={handleTopicSearch}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      chatCreation,\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n    } = tabState;\n    const {\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      chatCreationProgress:chatCreation?.progress,\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isSpoiler)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle ? renderText(customTitle) : `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string, isSpoiler?: boolean) {\n  const { width, height } = getPictogramDimensions();\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className=\"pinned-thumb\">\n      {!isSpoiler && <img className=\"pinned-thumb-image\" src={srcUrl} width={width} height={height} alt=\"\" />}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n    </div>\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  }, [handleContextMenuClose, isPlaybackRateActive, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  }, [\n    handleBeforeContextMenu, handleContextMenu, handleContextMenuClose, handlePlaybackClick, isContextMenuOpen,\n    isMobile, isPlaybackRateActive, playbackRate,\n  ]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  hasReachedFocusedMessage?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  hasReachedFocusedMessage,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    setReachedFocusedMessage,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const [isWaitingForPinnedMessageFocus, setWaitingForPinnedMessageFocus] = useState(false);\n  const { isTablet } = useAppLayout();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n    setWaitingForPinnedMessageFocus(false);\n  }, [pinnedMessageIds]);\n\n  useEffect(() => {\n    if (hasReachedFocusedMessage && isWaitingForPinnedMessageFocus) {\n      setReachedFocusedMessage({ hasReached: false });\n      setWaitingForPinnedMessageFocus(false);\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [\n    hasReachedFocusedMessage, isWaitingForPinnedMessageFocus, pinnedMessageIndex, pinnedMessagesCount,\n    setReachedFocusedMessage,\n  ]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  }, [pinMessage]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({\n        chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id, noForumTopicPanel: true,\n      });\n\n      setWaitingForPinnedMessageFocus(true);\n    }\n  }, [pinnedMessage, focusMessage, threadId]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    isMobile, isSelectModeActive, messageListType, currentTransitionKey, setBackButtonActive, isTablet,\n    shouldShowCloseButton,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n\n    // console.log(chatId,{isChatWithBot,canRestartBot},Boolean(selectIsChatBotNotStarted(global, chatId)),canStartBot)\n\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n    const focusedMessage = selectTabState(global).focusedMessage;\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      hasReachedFocusedMessage: !focusedMessage || focusedMessage.hasReachedMessage,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  const toggleScrollToolsRef = useRef<typeof toggleScrollTools>();\n  toggleScrollToolsRef.current = toggleScrollTools;\n  useSyncEffect(() => {\n    if (isReady) {\n      toggleScrollToolsRef.current!();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [freezeForFab, freezeForNotch, messageIds, unfreezeForFab, unfreezeForNotch]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import { getActions } from '../../../../global';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  const { setReachedFocusedMessage } = getActions();\n\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      setReachedFocusedMessage({\n        hasReached: true,\n      });\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, setReachedFocusedMessage,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nsetTimeout(initWorker, WORKER_INIT_DELAY);\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","export default class Deferred<T = void> {\n  promise: Promise<T>;\n\n  reject!: (reason?: any) => void;\n\n  resolve!: (value: T | PromiseLike<T>) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  content?: TextPart;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  content,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  }, [lang, showNotification]);\n\n  const handleSetSuggestedAvatar = useCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  }, [showAvatarNotification, uploadProfilePhoto]);\n\n  const handleCloseCropModal = useCallback(() => {\n    setCropModalBlob(undefined);\n  }, []);\n\n  const handleSetVideo = useCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  }, [closeVideoModal, message.content.action, showAvatarNotification, uploadProfilePhoto]);\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        showVideoOverwrite\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{content}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={content}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    topic,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{content}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          content={content}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  noReplies,\n  isTranslated,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread}>\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon-reply-filled\" />\n        </span>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [\n    hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect,\n    sticker.stickerSetInfo,\n  ]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [chatId, emoji, interactWithAnimatedEmoji, isOwn, messageId, play, sendInteractionBunch, size]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay && !isSpoilerShown);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  }, [openComments, chatId, threadId, originChannelId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestMasterAndRequestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon-lock\" />}\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ActiveEmojiInteraction, ActiveReaction, ChatTranslatedMessages, MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n  selectChatTranslations,\n  selectRequestedTranslationLanguage,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/fastSmoothScroll';\n\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\nimport {TEXT_AI_THINKING} from \"../../../worker/setting\";\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  requestedTranslationLanguage?: string;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  requestedTranslationLanguage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { result: detectedLanguage } = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, messageId, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, true);\n\n  const currentText = isTranslationPending ? (previousTranslatedText || text) : translatedText;\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  const shouldFocusOnResize = isLastInGroup;\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.target.clientHeight;\n    messageHeightRef.current = newHeight;\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(shouldFocusOnResize ? ref : undefined, throttledResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(currentText), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(Boolean(currentText), withCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if(message.content.text?.text === TEXT_AI_THINKING){\n      return <DotAnimation className=\"status\" content={TEXT_AI_THINKING.replace(\"...\",\"\")} />\n    }\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n    const requestedTranslationLanguage = selectRequestedTranslationLanguage(global, chatId, message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled: global.settings.byKey.canTranslate,\n      requestedTranslationLanguage,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTranslationClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openMessageLanguageModal({ chatId, id: messageId });\n  }, [chatId, messageId, openMessageLanguageModal]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  }, [message.chatId, message.id, openChat]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { detectLanguage } from '../util/languageDetection';\nimport useAsync from './useAsync';\n\nexport default function useTextLanguage(text?: string) {\n  const language = useAsync(() => (text ? detectLanguage(text) : Promise.resolve(undefined)), [text], undefined);\n  return language;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId: string,\n  messageId: number,\n  requestedLanguageCode?: string,\n) {\n  const { translateMessages } = getActions();\n  const messageTranslation = requestedLanguageCode\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!text && !isPending && requestedLanguageCode) {\n      translateMessages({ chatId, messageIds: [messageId], toLanguageCode: requestedLanguageCode });\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode, translateMessages]);\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      {/*<span>{lang('UnreadMessages')}</span>*/}\n      <span></span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon topic={topic} size={ICON_SIZE} className=\"icon topic-icon\" />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('ChatYourSelfTitle')}</h3>\n        <ul className=\"description\">\n          <li>{lang('ChatYourSelfDescription1')}</li>\n          <li>{lang('ChatYourSelfDescription2')}</li>\n          <li>{lang('ChatYourSelfDescription3')}</li>\n          <li>{lang('ChatYourSelfDescription1')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium, selectLastScrollOffset, selectThreadInfo,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,focusMessage\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread'\n    && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0);\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useSyncEffect(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useSyncEffect` above\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    // debugger\n    if (!isShown) {\n      return;\n    }\n    if (messageListType !== 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport {resizeImage, scaleImage} from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let thumbBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n    if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n      const resizedUrl = await scaleImage(\n        blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n      );\n\n      URL.revokeObjectURL(blobUrl);\n      return buildAttachment(filename, blob, {\n        compressedBlobUrl: resizedUrl,\n      });\n    }\n\n    if (mimeType === 'image/jpeg') {\n      filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n    }\n\n    quick = { width, height };\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n\n  }\n\n  return {\n    blobUrl,\n    thumbBlobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [username, resetInlineBot] as const);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [chatId, offset, query, queryInlineBot, usernameLowered]);\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    }, [\n      attachments, canSendAudios, canSendDocuments, canSendPhotos, canSendVideos, chatId, fileSizeLimit,\n      handleClearAttachments, openLimitReachedModal, setAttachments, showAllowedMessageTypesNotification,\n    ],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n  requestAnimationFrame(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  }, [chatId, threadId, isEditing, lastSyncTime, getHtml, saveDraft, clearDraft]);\n\n  const forceUpdateDraft = useCallback(() => {\n    updateDraft(undefined, true);\n  }, [updateDraft]);\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [\n    chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis,\n  ] as const);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport type { OwnProps as ButtonProps } from './Button';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate(e);\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate(e);\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    isMouseInside.current = true;\n    onActivate(e);\n  }, [onActivate]);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      // onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      // onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={!IS_TOUCH_ENV ? onActivate : handleClick}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n  canSendVideos = false;\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n      true\n    );\n  }, [canSendPhotos, canSendVideoAndPhoto, handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false),true);\n  }, [canSendAudios, canSendDocuments, handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n          </>\n        )}\n        {/*{canAttachPolls && (*/}\n        {/*  <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>*/}\n        {/*)}*/}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [\n    replyingToId, shouldForceShowEditing, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId,\n    exitForwardMode,\n  ]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { Signal } from '../../../util/signals';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    return linkEntity?.url || text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId, clearWebPagePreview, loadWebPagePreview, toggleMessageWebPage]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {ApiDraft, GlobalState, MessageListType, TabState,} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiAttachMenuPeerType,\n  ApiBotCommand,\n  ApiBotInlineMediaResult,\n  ApiBotInlineResult,\n  ApiBotMenuButton,\n  ApiChat,\n  ApiChatMember,\n  ApiFormattedText,\n  ApiMessage,\n  ApiNewPoll,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type {InlineBotSettings, ISettings} from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  EDITABLE_INPUT_MODAL_ID,\n  MAX_UPLOAD_FILEPART_SIZE,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n} from '../../../config';\nimport {IS_IOS, IS_VOICE_RECORDING_SUPPORTED} from '../../../util/environment';\nimport {MEMO_EMPTY_ARRAY} from '../../../util/memo';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatBot,\n  selectChatMessage,\n  selectChatType,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingMessage,\n  selectEditingScheduledDraft,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectReplyingToId,\n  selectRequestedDraftFiles,\n  selectRequestedDraftText,\n  selectScheduledIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../../global/helpers';\nimport {formatMediaDuration, formatVoiceRecordDuration} from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, {prepareAttachmentsToSend} from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport {insertHtmlInSelection} from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport {isSelectionInsideInput} from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport {getServerTime} from '../../../util/serverTime';\nimport {selectCurrentLimit} from '../../../global/selectors/limits';\nimport {buildCustomEmojiHtml} from './helpers/customEmoji';\nimport {processMessageInputForCustomEmoji} from '../../../util/customEmojiManager';\nimport {getTextWithEntitiesAsHtml} from '../../common/helpers/renderTextWithEntities';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {useStateRef} from '../../../hooks/useStateRef';\nimport useDraft from './hooks/useDraft';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, {DropAreaState} from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\nimport PasswordModal from \"../../ui/PasswordModal\";\n// import WebkitSpeechRecognition from \"../../../worker/share/WebkitSpeechRecognition\";\n\n// const recognition = new WebkitSpeechRecognition();\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n  const [speechRecognizing, setSpeechRecognizing] = useState(false);\n\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && canSendStickers && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [isComposerBlocked, getHtml, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [\n    setHtml, isMobile, closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip,\n    closeSymbolMenu,\n  ]);\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, showNotification]);\n\n  const mainButtonState = useDerivedState(() => {\n    // if(speechRecognizing){\n    //   return MainButtonState.Send;\n    // }\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, speechRecognizing,editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetsOrder: true,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    attachmentSettings.shouldCompress, attachmentSettings.shouldSendGrouped, connectionState, getHtml,\n    validateTextLength, checkSlowMode, sendMessage, clearDraft, chatId, resetComposer,\n  ]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n    // if(speechRecognizing){\n    //   recognition.stop();\n    //   setSpeechRecognizing(false);\n    //   return\n    // }\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, getHtml, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleCustomEmojiSelectAttachmentModal = useCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  }, [handleCustomEmojiSelect]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu, isMobile]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  }, [insertTextAndUpdateCursor]);\n\n  const removeSymbol = useCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  }, [getHtml, setHtml]);\n\n  const removeSymbolAttachmentModal = useCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  }, [removeSymbol]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          // recognition.start().then((res:string)=>{\n          //   setHtml(res);\n          // }).catch((e)=>{\n          //   console.error(e)\n          //   // setSpeechRecognizing(false);\n          // });\n          // setSpeechRecognizing(true);\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule, chatId, showAllowedMessageTypesNotification, canSendVoices,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n  const [passwordOpen,setPasswordOpen] = useState(true);\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              (activeVoiceRecording )&& windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {(activeVoiceRecording ) && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {(activeVoiceRecording) && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={ ()=>{\n            // recognition.stop();\n            // setSpeechRecognizing(false)\n            stopRecordingVoice()\n          } }\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', ( activeVoiceRecording) && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState<boolean>();\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [editedMessage, replyingToId, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, getHtml, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './MessageLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MessageLanguageModal = useModuleLoader(Bundles.Extra, 'MessageLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageLanguageModal ? <MessageLanguageModal {...props} /> : undefined;\n};\n\nexport default memo(MessageLanguageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { MASK_IMAGE_DISABLED } from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTheme,\n  selectThreadInfo,\n  selectChatMessage,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport MessageLanguageModal from './MessageLanguageModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\nimport Account from \"../../worker/share/Account\";\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isMessageLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isMessageLanguageModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? 450 + ANIMATION_END_DELAY : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n      && hasAudioPlayer\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    if(!Account.getCurrentAccount()?.getSession()){\n      getActions().updateGlobal({\n        authState:\"authorizationStateWaitSignPassword\"\n      })\n    }else{\n      if(Account.getCurrentAccount()?.getUid()){\n        sendBotCommand({ command: '/start' });\n      }else{\n        getActions().showNotification({\n          message:\"正在登录请稍后再试\"\n        })\n      }\n    }\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n              isMobile={isMobile}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {isMobile\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                <MessageLanguageModal isOpen={isMessageLanguageModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      messageLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds }, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isMessageLanguageModalOpen: Boolean(messageLanguageModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n      ),\n      hasAudioPlayer: Boolean(audioMessage),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch, selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const handleToggleManagement = useCallback(() => {\n    toggleManagement();\n  }, [toggleManagement]);\n\n  const handleToggleStatistics = useCallback(() => {\n    toggleStatistics();\n  }, [toggleStatistics]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {/* {currentInviteInfo && !currentInviteInfo.isRevoked && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('Edit')} */}\n              {/*     onClick={handleEditInviteClick} */}\n              {/*   > */}\n              {/*     <i className=\"icon-edit\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {/* {canAddContact && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('AddContact')} */}\n              {/*     onClick={handleAddContact} */}\n              {/*   > */}\n              {/*     <i className=\"icon-add-user\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n              {/* {canManage && !isInsideTopic && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('Edit')} */}\n              {/*     onClick={handleToggleManagement} */}\n              {/*   > */}\n              {/*     <i className=\"icon-edit\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          {/* <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} /> */}\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport Modal from './Modal';\nimport PasswordMonkey from \"../common/PasswordMonkey\";\nimport PasswordForm from \"../common/PasswordForm\";\nimport {passwordCheck} from \"../../worker/share/utils/helpers\";\nimport InputText from \"./InputText\";\n\ntype OwnProps = {};\n\nlet onConfirm: Function | null = null\n\n\nconst PasswordModal: FC<OwnProps> = ({}: OwnProps) => {\n\n  const [open, setOpen] = useState<boolean>(false);\n  const [showHitInput, setShowHitInput] = useState<boolean>(false);\n  const [validationError, setValidationError] = useState<string>('');\n  const [hint, setHint] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const lang = useLang();\n\n  const handleSubmit = useCallback((password) => {\n    if (!passwordCheck(password)) {\n      setValidationError(lang(\"PasswordTipsCheck\"))\n      return\n    }\n    if (onConfirm) {\n      onConfirm({password, hint});\n      setOpen(false)\n    }\n  }, [hint]);\n\n  useEffect(() => {\n    const evt = (e: Event) => {\n      if (!open) {\n        setOpen(true);\n        // @ts-ignore\n        onConfirm = e.detail.callback;\n        // @ts-ignore\n        setHint(e.detail.hint)\n        // @ts-ignore\n        setShowHitInput(!e.detail.hideHitInput);\n      }\n    }\n    document.addEventListener('password', evt);\n    return () => {\n      document.removeEventListener('password', evt);\n    }\n  }, [setHint, setShowHitInput, open])\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  return (\n    <Modal\n      hasCloseButton\n      isOpen={open}\n      onClose={() => {\n        if (onConfirm) {\n          onConfirm({password: \"\", hint: \"\"});\n        }\n        setOpen(false)\n      }}\n      title=\"Password\"\n      className=\"\"\n    >\n      <div className=\"settings-content password-form custom-scroll\">\n        <div className=\"settings-content-header no-border\">\n          <PasswordMonkey isBig isPasswordVisible={shouldShowPassword}/>\n        </div>\n        <div className=\"settings-item pt-0\">\n          {\n            showHitInput &&\n            <InputText\n              id=\"pwd-hint\"\n              type={\"text\"}\n              label={lang(\"PasswordTipsLocalHint\")}\n              onChange={(e) => {\n                setHint(e.target.value)\n              }}\n              value={hint}\n              autoComplete=\"given-name\"\n            />\n          }\n          <PasswordForm\n            error={validationError}\n            hint={(!showHitInput && hint) ? hint : lang(\"PasswordTipsLocalPlaceholder\")}\n            shouldDisablePasswordManager={true}\n            submitLabel={lang('Next')}\n            clearError={handleClearError}\n            isLoading={false}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={true}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n        {\n          showHitInput &&\n          <div className=\"help_text pt-2 pb-4 pr-2\">\n            <ul>\n              <li>{lang(\"PasswordTipsLocalStorage\")}</li>\n              <li>{lang(\"PasswordTipsLocalStorage1\")}</li>\n            </ul>\n          </div>\n        }\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PasswordModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { fastRaf } from '../../util/schedulers';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\nimport PasswordModal from \"../ui/PasswordModal\";\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isCurrentUserPremium,\n  deleteFolderDialogId,\n  isMasterTab,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      loadDefaultStatusIcons();\n      checkAppVersion();\n      if (isCurrentUserPremium) {\n        loadRecentEmojiStatuses();\n      }\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons,\n    loadDefaultStatusIcons, loadRecentEmojiStatuses, isCurrentUserPremium, isMasterTab,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [animationLevel, forceUpdate, isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useSyncEffect(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [animationLevel, forceUpdate, isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  }, [onTabFocusChange]);\n\n  const handleFocus = useCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  }, [onTabFocusChange, updatePageTitle]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n      <PasswordModal/>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialogId: deleteFolderDialogModal,\n      isMasterTab,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/environment';\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","activeReactions","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","chat","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","window","open","createMessageHashUrl","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","content","saveDraft","draft","entities","shouldForce","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","hasReached","updateFocusedMessageReached","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","toggleMessageSelectAll","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","activeLanguage","selectRequestedTranslationLanguage","messageLanguageModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","document","querySelectorAll","link","href","replace","setPageTitleInstant","nextTitle","title","setPageTitle","debounce","notificationInterval","force","leftColumnWidth","management","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","updateIsOnline","blurredTabTokens","t","getAllMultitabTokens","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","currentUserId","INACTIVE_MARKER","PAGE_TITLE","round","newUnread","messageList","currentChat","getChatTitle","topics","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","byTabId","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","values","session","parse","storeSession","previousGlobal","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","isScreenLocked","invalidAttemptsCount","isMasterTab","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","uploadProgressCallbacks","Map","runDebouncedForMarkRead","cb","LoadMoreDirection","isBudgetPreload","isRestricted","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","offsetId","isOutlying","historyIds","newViewportIds","areSomeLocal","areAllLocal","getViewportSlice","safeReplaceViewportIds","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","MESSAGE_LIST_SLICE","replyOriginForId","threadUpdate","callApi","MESSAGE_DELETED","updateChatMessage","addUsers","buildCollectionByKey","users","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","MsgConn","getState","MsgClientState","omit","attachments","a","shouldSendAsSpoiler","password","hint","getPasswordFromEvent","i","attachment","blobUrl","mimeType","buf","blobToBuffer","fetchBlob","cipher","Account","encryptByPubKey","hashSha256","bb","popByteBuffer","hintLen","typeLen","writeInt16","writeBytes","Buffer","from","res","toUint8Array","blob","Blob","encryptUrl","URL","createObjectURL","size","quality","thumbBlobUrl","resizeImage","entity","substr","replaceSubstring","repeat","scheduledAt","replyingToMessage","replyingToTopId","selectThreadTopMessageId","replyToTopMessageId","params","replyingTo","noWebPage","selectNoWebPage","sendAs","selectUser","clearWebPagePreview","isSingle","isGrouped","shouldGroupMessages","restParams","sendMessage","commonParams","byType","index","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","send","MsgUpdateReq","msg_id","chat_id","user_id","pack","getPbData","setEditingId","progressCallback","get","getMessageOriginalId","cancelApiProgress","user","isDeletedUser","isLocal","updateChat","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","topId","shouldDeleteForAll","sendPduWithCallback","MsgDeleteReq","msg_ids","revoke","byId","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","to","count","countSortedIds","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","b","selectSendAs","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","loadViewportMessagesCache","addOffset","flag","threadsById","lastViewportIds","updateListedIds","messages1","isUp","listedIds1","ids1","isLocalMessageId","log","pdu","MsgListReq","MsgListRes","ERR","repliesThreadInfos","localMessages","isDeleted","allMessages","concat","addChatMessagesById","updateOutlyingIds","addChats","updateThreadInfos","areSortedArraysIntersecting","sourceIds","findClosestIndex","indexForDirection","progress","localMessage","messageLocalId","has","set","fileUploads","byMessageLocalId","SendReq","msg","notify","MsgConnNotifyAction","IS_IOS","rafPromise","delete","shouldSendAsFile","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","seenByUserIds","sendAsId","sendAsChat","fullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","autologinDomains","hostname","searchParams","autologinToken","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","selectForwardsCanBeSentToChat","closeMediaViewer","showAllowedMessageTypesNotification","toLanguageCode","selectLanguageCode","updateRequestedMessageTranslation","removeRequestedMessageTranslation","updateMessageTranslation","isPending","update","views","forwards","repliesChatId","repliesThreadInfo","messagesCount","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","config","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","totalCount","nextOffsetId","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","chatListIdsActive","listIds","active","messagesList","chatIds","userIdList","firstName","toLowerCase","lastName","bio","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","updateGlobalSearchResults","userIds","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousMsgClientState","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","lastSyncTime","initFolderManager","addCallback","connectionState","authState","msgConn","getActions","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","hasChangedAvatarHash","avatarHash","hasChangedProfilePhoto","profilePhoto","hasChangedFallbackPhoto","fallbackPhoto","hasChangedPersonalPhoto","personalPhoto","photos","userStatusesById","updateUsers","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","localUsers","globalUsers","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","currentChatId","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","currentPassword","onSuccess","isSuccess","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","stats","recentTopMessages","msgId","updateStatistics","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","loadTopicById","loadTopics","ANIMATION_DELAY","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","clearMessageTranslation","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","thread","currentThreadId","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","pinnedIds","selectPinnedIds","newPinnedIds","currentThreadInfo","newThreadInfo","lastReadInboxMessageIdInThread","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","transcriptions","sendingState","translations","updateMessageTranslations","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","loadFullUser","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","React","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","CustomEmojiEffect","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","currentUser","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","ANIMATION_LEVEL_OPTIONS","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","LeftMainHeader","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","signOut","updateGlobal","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","total","isChatArchived","handleLockScreenHotkey","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleClearCache","forceOnHeavyAnimation","lastScrollOffset","cacheApi","clear","LANG_CACHE_NAME","ASSET_CACHE_NAME","reload","handleSignOutClick","forceInitApi","handleLoginClick","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","getPromptInstall","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","classNames","Tab","badgeCount","isBadgeActive","previousActiveTab","tabRef","tabEl","prevTabEl","parentElement","children","contains","platformEl","prevPlatformEl","shiftLeft","offsetLeft","scaleFactor","clientWidth","remove","transform","forceReflow","renderText","SCROLL_DURATION","TabList","tabs","areFolders","activeTab","big","onSwitchTab","containerRef","usePrevious","useHorizontalScroll","container","scrollWidth","offsetWidth","scrollLeft","activeTabElement","childNodes","activeTabOffsetLeft","activeTabOffsetWidth","newLeft","abs","fastSmoothScrollHorizontal","tab","_tab$id","ALL_FOLDER_ID","orderedFolderIds","archived","shouldSkipHistoryAnimations","activeChatFolder","isForumPanelOpen","selectIsForumPanelOpen","hasArchivedChats","maxFolders","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","transitionRef","allChatsFolder","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","chatsCount","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","renderCount","LeftSearch","Loading","ContactList","NewChatButton","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","globalData","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","ForumPanel","onCloseAnimationEnd","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","leftColumnContent","sessionStorage","getItem","nextSettingsScreen","isChatOpen","chatCreationProgress","isFirstChatFolderActive","LeftColumn","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","setContent_","v","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_MAC_OS","useSyncEffect","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","onScreenSelect","isChannel","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","svg","div","defs","innerHTML","HeaderPinnedMessage","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","closeAudioPlayer","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","handleClose","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","positionY","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ChatReportPanel","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioChatId","audioMessageId","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","focusedMessage","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","hasReachedFocusedMessage","hasReachedMessage","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","isComments","originChannelId","firstPinnedMessage","MiddleHeader","isReady","pinMessage","openPreviousChat","setReachedFocusedMessage","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isWaitingForPinnedMessageFocus","setWaitingForPinnedMessageFocus","isTablet","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","cycleRestrict","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","getMessageKey","HeaderActions","canExpandActions","GROUP_INTERVAL_SECONDS","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","DEBOUNCE","STICKY_TOP","STICKY_TOP_WITH_TOOLS","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Right","Bottom","Left","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","isOwn","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","createElement","font","whiteSpace","opacity","appendChild","textContent","RELOCATED_FOCUS_OFFSET","FOCUS_MARGIN","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ANDROID_KEYBOARD_HIDE_DELAY_MS","SWIPE_ANIMATION_DURATION","QUICK_REACTION_DOUBLE_TAP_DELAY","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","target","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","clientY","getBoundingClientRect","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","DEFAULT_THRESHOLD","worker","initializationDeferred","_defineProperty","promise","reject","createConnector","Worker","ContextMenuContainer","ActionMessageSuggestedAvatar","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","tabIndex","role","MediaViewerOrigin","Avatar","showVideoOverwrite","loopIndefinitely","withVideo","CropModal","textParts","usersById","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","isChat","senderUser","senderChat","premiumGiftSticker","ActionMessage","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","play","noLoop","nonInteractive","anchor","EmbeddedMessage","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","MessageMeta","outgoingStatus","signature","withReactionOffset","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","AnimatedCounter","formatTime","MessageOutgoingStatus","Sticker","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","INTERACTION_BUNCH_TIME","MS_DIVIDER","TIME_DEFAULT","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","AnimatedEmoji","forceLoadPreview","forcePreview","LIKE_STICKER_ID","customEmojiId","AnimatedCustomEmoji","getCustomEmojiSize","isBig","Video","canAutoLoad","canAutoPlay","uploadProgress","isDownloading","onCancelUpload","videoRef","getMessageVideo","getMessageWebPageVideo","localBlobUrl","isSpoilerShown","hideSpoiler","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","fullMediaData","isPlayerReady","markPlayerReady","getMessageMediaThumbDataUri","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","useMediaTransition","noThumb","thumbRef","useBlurredMediaThumbRef","thumbClassNames","isInline","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","isOwnMessage","isWebPageVideo","calculateVideoDimensions","cancelMessageMediaDownload","isAllowed","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","withAnimation","ProgressSpinner","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","Contact","isRegistered","formatPhoneNumberWithCode","getPercentage","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","Poll","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","WebPage","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","Photo","SafeLink","Invoice","shouldAffectAppendix","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","Skeleton","forceAspectRatio","InvoiceMediaPreview","loadExtendedMedia","refreshExtendedMedia","useInterval","dataUri","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","scale","SVG_PIN","__html","Location","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","Game","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","activeDownloadIds","selectActiveDownloadIds","uploadsById","Album","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","RoundVideo","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","shouldPlay","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","InlineButtons","renderIcon","CommentButton","openComments","recentReplierIds","recentRepliers","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","ReactionAnimatedEmoji","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","ReactionButton","withRecentReactors","recentReactors","recentReaction","Reactions","isOutside","metaChildren","noRecentReactors","getReactionUniqueKey","MessagePhoneCall","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","areTranslationsEnabled","canTranslate","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","openMessageLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","detectedLanguage","threshold","args","detectLanguage","useTextLanguage","isTranslationPending","translatedText","requestedLanguageCode","translateMessages","messageTranslation","byLangCode","useMessageTranslation","previousTranslatedText","currentText","currentTranslatedText","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","clientHeight","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useThrottledCallback","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","getMinMediaWidth","postAuthorTitle","metaSafeAuthorWidth","isForAnimation","TEXT_AI_THINKING","DotAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","SponsoredMessage","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","MessageListContent","messageGroups","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","toggleScrollToolsRef","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","ContactGreeting","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","linkedChatId","MessageList","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadMessageViews","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","areMessagesLoaded","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","contentRect","windowHeight","normalHeight","String","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","patchChromiumScroll","resetScroll","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","backgroundColor","ScrollDownButton","ariaLabelLang","onReadAll","Menu","autoClose","shouldShowCount","reactionsCount","mentionsCount","FloatingActionButtons","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","fabClassName","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","quick","img","preloadImage","shouldShrink","GIF_MIME_TYPE","compressedBlobUrl","resizedUrl","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","encoderPath","MIN_RECORDING_TIME","POLYFILL_OPTIONS","reuseWorker","BLOB_PARAMS","FFT_SIZE","MIN_VOLUME","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","GDOCS_STYLES","BOLD","ITALIC","UNDERLINE","STRIKETHROUGH","SUPERSCRIPT","SUBSCRIPT","ELEMENTS","ANCHOR","parseHtml","html","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","ApiMessageEntityTypes","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","THROTTLE","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","openTimeout","isFirstTimeActivation","ResponsiveHoverButton","onActivate","buttonProps","_extends","COLOR_REPLACE_PATTERN","AttachBotIcon","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","AttachBotItem","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","bottom","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","AttachMenu","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","BotKeyboardMenu","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","ComposerEmbeddedMessage","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","WebPagePreview","getHtml","loadWebPagePreview","toggleMessageWebPage","detectLinkDebounced","useDebouncedResolver","linkEntity","getLink","useDerivedSignal","useDerivedState","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","BotMenuButton","textRef","textEl","composerEl","removeProperty","MainButtonState","_ref","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","editingDraft","selectEditingScheduledDraft","selectEditingDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","Composer","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","useSignal","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","canSendGifs","canAttachEmbedLinks","isComposerBlocked","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","speechRecognizing","setSpeechRecognizing","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","useStateRef","isChatAdmin","slowMode","getChatSlowModeOptions","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","selection","getSelection","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","useDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","forceUpdateDraft","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","scopedShatId","scopedThreadId","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","shouldUpdateStickerSetsOrder","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","passwordOpen","setPasswordOpen","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","CustomEmojiTooltip","EmojiTooltip","allowDisabledClick","CustomSendMenu","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","MessageLanguageModal","isImage","kind","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isMessageLanguageModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","MiddleColumn","unpinAllMessages","loadUser","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","getSession","getUid","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","CUSTOM_BG_CACHE_NAME","Type","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","RightHeader","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","_useCurrentOrPrev","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleDeleteInviteClick","ManagementScreens","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewerAsync","MediaViewer","LIMIT_PER_BATCH","BATCH_INTERVAL","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","DownloadManager","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","downloadWindow","GameModal","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","NotificationsAsync","Notifications","DialogsAsync","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","MessageListHistoryHandler","closeChat","MessageHistoryRecord","createLocationHash","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","fill","prevConfettiTime","hideTimeout","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","PasswordModal","setOpen","showHitInput","setShowHitInput","validationError","setValidationError","setHint","shouldShowPassword","setShouldShowPassword","handleSubmit","passwordCheck","evt","detail","hideHitInput","handleClearError","PasswordMonkey","isPasswordVisible","InputText","PasswordForm","shouldDisablePasswordManager","submitLabel","clearError","shouldResetValue","onChangePasswordVisibility","onSubmit","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadBundle","isDesktop","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","UnreadCount","passcodeSettings","LockScreen","isLocked","resetInvalidUnlockAttempts","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleSignOutMessage","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","shouldShowSubmit","noRipple","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}