{"version":3,"file":"3943.f466d109c49c7be9edae.js","mappings":"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","sources":["webpack://wai/./node_modules/async-mutex/lib/Mutex.js","webpack://wai/./node_modules/async-mutex/lib/Semaphore.js","webpack://wai/./node_modules/async-mutex/lib/errors.js","webpack://wai/./node_modules/async-mutex/lib/index.js","webpack://wai/./node_modules/async-mutex/lib/tryAcquire.js","webpack://wai/./node_modules/async-mutex/lib/withTimeout.js","webpack://wai/./src/api/gramjs/apiBuilders/helpers.ts","webpack://wai/./src/api/gramjs/apiBuilders/messages.ts","webpack://wai/./src/api/gramjs/localDb.ts","webpack://wai/./src/api/gramjs/methods/media.ts","webpack://wai/./src/api/gramjs/methods/client.ts","webpack://wai/./src/api/gramjs/updater.ts","webpack://wai/./src/global/actions/api/chats.ts","webpack://wai/./src/global/actions/ui/calls.ts","webpack://wai/./src/global/reducers/calls.ts","webpack://wai/./src/lib/gramjs/client/uploadFile.ts","webpack://wai/./src/lib/ptp/protobuf/PTPAuth/AuthNativeReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPCommon/PbMsg.ts","webpack://wai/./src/lib/ptp/protobuf/PTPCommon/PbQrCode.ts","webpack://wai/./src/lib/ptp/protobuf/PTPCommon/PbUser.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/DownloadMsgReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/DownloadMsgRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/GenMsgIdReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/GenMsgIdRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/SendReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/SendRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/UploadMsgReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPOther/StopChatStreamReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPUser/DownloadUserReq.ts","webpack://wai/./src/worker/msg/MsgCommand.ts","webpack://wai/./src/worker/msg/MsgCommandChatGpt.ts","webpack://wai/./src/worker/msg/MsgCommandChatLab.ts","webpack://wai/./src/lib/ptp/protobuf/PTPSync/SyncReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPSync/SyncRes.ts","webpack://wai/./src/worker/msg/MsgCommandSetting.ts","webpack://wai/./src/worker/msg/MsgDispatcher.ts","webpack://wai/./src/worker/msg/bot/BotWebSocket.ts","webpack://wai/./src/worker/msg/utils.ts","webpack://wai/./src/worker/share/utils/modal.ts","webpack://wai/./src/worker/share/utils/utils.ts","webpack://wai/./node_modules/os-browserify/browser.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Semaphore_1 = require(\"./Semaphore\");\nvar Mutex = /** @class */ (function () {\n    function Mutex(cancelError) {\n        this._semaphore = new Semaphore_1.default(1, cancelError);\n    }\n    Mutex.prototype.acquire = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a, releaser;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this._semaphore.acquire()];\n                    case 1:\n                        _a = _b.sent(), releaser = _a[1];\n                        return [2 /*return*/, releaser];\n                }\n            });\n        });\n    };\n    Mutex.prototype.runExclusive = function (callback) {\n        return this._semaphore.runExclusive(function () { return callback(); });\n    };\n    Mutex.prototype.isLocked = function () {\n        return this._semaphore.isLocked();\n    };\n    Mutex.prototype.waitForUnlock = function () {\n        return this._semaphore.waitForUnlock();\n    };\n    Mutex.prototype.release = function () {\n        if (this._semaphore.isLocked())\n            this._semaphore.release();\n    };\n    Mutex.prototype.cancel = function () {\n        return this._semaphore.cancel();\n    };\n    return Mutex;\n}());\nexports.default = Mutex;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar errors_1 = require(\"./errors\");\nvar Semaphore = /** @class */ (function () {\n    function Semaphore(_value, _cancelError) {\n        if (_cancelError === void 0) { _cancelError = errors_1.E_CANCELED; }\n        this._value = _value;\n        this._cancelError = _cancelError;\n        this._weightedQueues = [];\n        this._weightedWaiters = [];\n    }\n    Semaphore.prototype.acquire = function (weight) {\n        var _this = this;\n        if (weight === void 0) { weight = 1; }\n        if (weight <= 0)\n            throw new Error(\"invalid weight \".concat(weight, \": must be positive\"));\n        return new Promise(function (resolve, reject) {\n            if (!_this._weightedQueues[weight - 1])\n                _this._weightedQueues[weight - 1] = [];\n            _this._weightedQueues[weight - 1].push({ resolve: resolve, reject: reject });\n            _this._dispatch();\n        });\n    };\n    Semaphore.prototype.runExclusive = function (callback, weight) {\n        if (weight === void 0) { weight = 1; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a, value, release;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.acquire(weight)];\n                    case 1:\n                        _a = _b.sent(), value = _a[0], release = _a[1];\n                        _b.label = 2;\n                    case 2:\n                        _b.trys.push([2, , 4, 5]);\n                        return [4 /*yield*/, callback(value)];\n                    case 3: return [2 /*return*/, _b.sent()];\n                    case 4:\n                        release();\n                        return [7 /*endfinally*/];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Semaphore.prototype.waitForUnlock = function (weight) {\n        var _this = this;\n        if (weight === void 0) { weight = 1; }\n        if (weight <= 0)\n            throw new Error(\"invalid weight \".concat(weight, \": must be positive\"));\n        return new Promise(function (resolve) {\n            if (!_this._weightedWaiters[weight - 1])\n                _this._weightedWaiters[weight - 1] = [];\n            _this._weightedWaiters[weight - 1].push(resolve);\n            _this._dispatch();\n        });\n    };\n    Semaphore.prototype.isLocked = function () {\n        return this._value <= 0;\n    };\n    Semaphore.prototype.getValue = function () {\n        return this._value;\n    };\n    Semaphore.prototype.setValue = function (value) {\n        this._value = value;\n        this._dispatch();\n    };\n    Semaphore.prototype.release = function (weight) {\n        if (weight === void 0) { weight = 1; }\n        if (weight <= 0)\n            throw new Error(\"invalid weight \".concat(weight, \": must be positive\"));\n        this._value += weight;\n        this._dispatch();\n    };\n    Semaphore.prototype.cancel = function () {\n        var _this = this;\n        this._weightedQueues.forEach(function (queue) { return queue.forEach(function (entry) { return entry.reject(_this._cancelError); }); });\n        this._weightedQueues = [];\n    };\n    Semaphore.prototype._dispatch = function () {\n        var _a;\n        for (var weight = this._value; weight > 0; weight--) {\n            var queueEntry = (_a = this._weightedQueues[weight - 1]) === null || _a === void 0 ? void 0 : _a.shift();\n            if (!queueEntry)\n                continue;\n            var previousValue = this._value;\n            var previousWeight = weight;\n            this._value -= weight;\n            weight = this._value + 1;\n            queueEntry.resolve([previousValue, this._newReleaser(previousWeight)]);\n        }\n        this._drainUnlockWaiters();\n    };\n    Semaphore.prototype._newReleaser = function (weight) {\n        var _this = this;\n        var called = false;\n        return function () {\n            if (called)\n                return;\n            called = true;\n            _this.release(weight);\n        };\n    };\n    Semaphore.prototype._drainUnlockWaiters = function () {\n        for (var weight = this._value; weight > 0; weight--) {\n            if (!this._weightedWaiters[weight - 1])\n                continue;\n            this._weightedWaiters[weight - 1].forEach(function (waiter) { return waiter(); });\n            this._weightedWaiters[weight - 1] = [];\n        }\n    };\n    return Semaphore;\n}());\nexports.default = Semaphore;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.E_CANCELED = exports.E_ALREADY_LOCKED = exports.E_TIMEOUT = void 0;\nexports.E_TIMEOUT = new Error('timeout while waiting for mutex to become available');\nexports.E_ALREADY_LOCKED = new Error('mutex already locked');\nexports.E_CANCELED = new Error('request for lock canceled');\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tryAcquire = exports.withTimeout = exports.Semaphore = exports.Mutex = void 0;\nvar tslib_1 = require(\"tslib\");\nvar Mutex_1 = require(\"./Mutex\");\nObject.defineProperty(exports, \"Mutex\", { enumerable: true, get: function () { return Mutex_1.default; } });\nvar Semaphore_1 = require(\"./Semaphore\");\nObject.defineProperty(exports, \"Semaphore\", { enumerable: true, get: function () { return Semaphore_1.default; } });\nvar withTimeout_1 = require(\"./withTimeout\");\nObject.defineProperty(exports, \"withTimeout\", { enumerable: true, get: function () { return withTimeout_1.withTimeout; } });\nvar tryAcquire_1 = require(\"./tryAcquire\");\nObject.defineProperty(exports, \"tryAcquire\", { enumerable: true, get: function () { return tryAcquire_1.tryAcquire; } });\ntslib_1.__exportStar(require(\"./errors\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tryAcquire = void 0;\nvar errors_1 = require(\"./errors\");\nvar withTimeout_1 = require(\"./withTimeout\");\n// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types\nfunction tryAcquire(sync, alreadyAcquiredError) {\n    if (alreadyAcquiredError === void 0) { alreadyAcquiredError = errors_1.E_ALREADY_LOCKED; }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (0, withTimeout_1.withTimeout)(sync, 0, alreadyAcquiredError);\n}\nexports.tryAcquire = tryAcquire;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.withTimeout = void 0;\nvar tslib_1 = require(\"tslib\");\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar errors_1 = require(\"./errors\");\nfunction withTimeout(sync, timeout, timeoutError) {\n    var _this = this;\n    if (timeoutError === void 0) { timeoutError = errors_1.E_TIMEOUT; }\n    return {\n        acquire: function (weight) {\n            if (weight !== undefined && weight <= 0) {\n                throw new Error(\"invalid weight \".concat(weight, \": must be positive\"));\n            }\n            return new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                var isTimeout, handle, ticket, release, e_1;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            isTimeout = false;\n                            handle = setTimeout(function () {\n                                isTimeout = true;\n                                reject(timeoutError);\n                            }, timeout);\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 3, , 4]);\n                            return [4 /*yield*/, sync.acquire(weight)];\n                        case 2:\n                            ticket = _a.sent();\n                            if (isTimeout) {\n                                release = Array.isArray(ticket) ? ticket[1] : ticket;\n                                release();\n                            }\n                            else {\n                                clearTimeout(handle);\n                                resolve(ticket);\n                            }\n                            return [3 /*break*/, 4];\n                        case 3:\n                            e_1 = _a.sent();\n                            if (!isTimeout) {\n                                clearTimeout(handle);\n                                reject(e_1);\n                            }\n                            return [3 /*break*/, 4];\n                        case 4: return [2 /*return*/];\n                    }\n                });\n            }); });\n        },\n        runExclusive: function (callback, weight) {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var release, ticket;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            release = function () { return undefined; };\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, , 7, 8]);\n                            return [4 /*yield*/, this.acquire(weight)];\n                        case 2:\n                            ticket = _a.sent();\n                            if (!Array.isArray(ticket)) return [3 /*break*/, 4];\n                            release = ticket[1];\n                            return [4 /*yield*/, callback(ticket[0])];\n                        case 3: return [2 /*return*/, _a.sent()];\n                        case 4:\n                            release = ticket;\n                            return [4 /*yield*/, callback()];\n                        case 5: return [2 /*return*/, _a.sent()];\n                        case 6: return [3 /*break*/, 8];\n                        case 7:\n                            release();\n                            return [7 /*endfinally*/];\n                        case 8: return [2 /*return*/];\n                    }\n                });\n            });\n        },\n        release: function (weight) {\n            sync.release(weight);\n        },\n        cancel: function () {\n            return sync.cancel();\n        },\n        waitForUnlock: function (weight) {\n            if (weight !== undefined && weight <= 0) {\n                throw new Error(\"invalid weight \".concat(weight, \": must be positive\"));\n            }\n            return new Promise(function (resolve, reject) {\n                sync.waitForUnlock(weight).then(resolve);\n                setTimeout(function () { return reject(timeoutError); }, timeout);\n            });\n        },\n        isLocked: function () { return sync.isLocked(); },\n        getValue: function () { return sync.getValue(); },\n        setValue: function (value) { return sync.setValue(value); },\n    };\n}\nexports.withTimeout = withTimeout;\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\ntype VirtualFields =\n  'flags'\n  | 'CONSTRUCTOR_ID'\n  | 'SUBCLASS_OF_ID'\n  | 'className'\n  | 'classType'\n  | 'getBytes';\n\nexport function bytesToDataUri(bytes: Buffer, shouldOmitPrefix = false, mimeType: string = 'image/jpeg') {\n  const prefix = shouldOmitPrefix ? '' : `data:${mimeType};base64,`;\n\n  return `${prefix}${btoa(String.fromCharCode(...bytes))}`;\n}\n\nexport function omitVirtualClassFields<T extends GramJs.VirtualClass<T> & { flags?: any }>(\n  instance: T,\n): Omit<T, VirtualFields> {\n  const {\n    flags,\n    CONSTRUCTOR_ID,\n    SUBCLASS_OF_ID,\n    className,\n    classType,\n    getBytes,\n    ...rest\n  } = instance;\n\n  return rest;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiMessage,\n  ApiMessageForwardInfo,\n  ApiPhoto,\n  ApiSticker,\n  ApiVideo,\n  ApiVoice,\n  ApiAudio,\n  ApiDocument,\n  ApiAction,\n  ApiContact,\n  ApiAttachment,\n  ApiPoll,\n  ApiNewPoll,\n  ApiWebPage,\n  ApiMessageEntity,\n  ApiFormattedText,\n  ApiReplyKeyboard,\n  ApiKeyboardButton,\n  ApiChat,\n  ApiThreadInfo,\n  ApiInvoice,\n  ApiGroupCall,\n  ApiReactions,\n  ApiReactionCount,\n  ApiUserReaction,\n  ApiAvailableReaction,\n  ApiSponsoredMessage,\n  ApiUser,\n  ApiLocation,\n  ApiGame,\n  PhoneCallAction,\n  ApiWebDocument,\n  ApiMessageEntityDefault,\n  ApiMessageExtendedMediaPreview,\n  ApiReaction,\n  ApiReactionEmoji,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes,\n} from '../../types';\n\nimport {\n  DELETED_COMMENTS_CHANNEL_ID,\n  LOCAL_MESSAGE_MIN_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SPONSORED_MESSAGE_CACHE_MS,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  VIDEO_MOV_TYPE,\n  VIDEO_WEBM_TYPE,\n} from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { buildStickerFromDocument } from './symbols';\nimport { buildApiPhoto, buildApiPhotoSize, buildApiThumbnailFromStripped } from './common';\nimport { interpolateArray } from '../../../util/waveform';\nimport { buildPeer } from '../gramjsBuilders';\nimport { addPhotoToLocalDb, resolveMessageApiChatId, serializeBytes } from '../helpers';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer, isPeerUser } from './peers';\nimport { buildApiCallDiscardReason } from './calls';\nimport { getEmojiOnlyCountForMessage } from '../../../global/helpers/getEmojiOnlyCountForMessage';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nconst TIMESTAMP_BASE = 1676e9; // 2023-02-10\nconst TIMESTAMP_PRECISION = 1e2; // 0.1s\nconst LOCAL_MESSAGES_LIMIT = 1e6; // 1M\n\nconst LOCAL_MEDIA_UPLOADING_TEMP_ID = 'temp';\nconst INPUT_WAVEFORM_LENGTH = 63;\n\nlet localMessageCounter = LOCAL_MESSAGE_MIN_ID;\n\n// Local IDs need to be fractional to allow service notifications to be placed between real messages.\n// It also allows to avoid collisions when sending messages from multiple tabs due to timestamp-based whole part.\n// To support up to 1M local messages, the whole part must be below 8.5B (https://stackoverflow.com/a/57225494/903919).\n// The overflow will happen when `datePart` is >3.59B which will be in June 2034.\nexport function getNextLocalMessageId() {\n  const datePart = Math.round((Date.now() - TIMESTAMP_BASE) / TIMESTAMP_PRECISION);\n  return LOCAL_MESSAGE_MIN_ID + datePart + (++localMessageCounter / LOCAL_MESSAGES_LIMIT);\n}\n\nlet currentUserId!: string;\n\nexport function setMessageBuilderCurrentUserId(_currentUserId: string) {\n  currentUserId = _currentUserId;\n}\n\nexport function buildApiSponsoredMessage(mtpMessage: GramJs.SponsoredMessage): ApiSponsoredMessage | undefined {\n  const {\n    fromId, message, entities, startParam, channelPost, chatInvite, chatInviteHash, randomId, recommended,\n  } = mtpMessage;\n  const chatId = fromId ? getApiChatIdFromMtpPeer(fromId) : undefined;\n  const chatInviteTitle = chatInvite\n    ? (chatInvite instanceof GramJs.ChatInvite\n      ? chatInvite.title\n      : !(chatInvite.chat instanceof GramJs.ChatEmpty) ? chatInvite.chat.title : undefined)\n    : undefined;\n\n  return {\n    randomId: serializeBytes(randomId),\n    isBot: fromId ? isPeerUser(fromId) : false,\n    text: buildMessageTextContent(message, entities),\n    expiresAt: Math.round(Date.now() / 1000) + SPONSORED_MESSAGE_CACHE_MS,\n    isRecommended: Boolean(recommended),\n    ...(chatId && { chatId }),\n    ...(chatInviteHash && { chatInviteHash }),\n    ...(chatInvite && { chatInviteTitle }),\n    ...(startParam && { startParam }),\n    ...(channelPost && { channelPostId: channelPost }),\n  };\n}\n\nexport function buildApiMessage(mtpMessage: GramJs.TypeMessage): ApiMessage | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return buildApiMessageWithChatId(chatId, mtpMessage);\n}\n\nexport function buildApiMessageFromShort(mtpMessage: GramJs.UpdateShortMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.userId, 'user');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(mtpMessage.out ? currentUserId : buildApiPeerId(mtpMessage.userId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromShortChat(mtpMessage: GramJs.UpdateShortChatMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.chatId, 'chat');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(buildApiPeerId(mtpMessage.fromId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromNotification(\n  notification: GramJs.UpdateServiceNotification,\n  currentDate: number,\n): ApiMessage {\n  const localId = getNextLocalMessageId();\n  const content = buildMessageContent(notification);\n\n  return {\n    id: localId,\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: notification.inboxDate || currentDate,\n    content,\n    isOutgoing: false,\n  };\n}\n\ntype UniversalMessage = (\n  Pick<GramJs.Message & GramJs.MessageService, ('id' | 'date')>\n  & Pick<Partial<GramJs.Message & GramJs.MessageService>, (\n    'out' | 'message' | 'entities' | 'fromId' | 'peerId' | 'fwdFrom' | 'replyTo' | 'replyMarkup' | 'post' |\n    'media' | 'action' | 'views' | 'editDate' | 'editHide' | 'mediaUnread' | 'groupedId' | 'mentioned' | 'viaBotId' |\n    'replies' | 'fromScheduled' | 'postAuthor' | 'noforwards' | 'reactions' | 'forwards' | 'silent'\n  )>\n);\n\nexport function buildApiMessageWithChatId(\n  chatId: string,\n  mtpMessage: UniversalMessage,\n): ApiMessage {\n  const fromId = mtpMessage.fromId ? getApiChatIdFromMtpPeer(mtpMessage.fromId) : undefined;\n  const peerId = mtpMessage.peerId ? getApiChatIdFromMtpPeer(mtpMessage.peerId) : undefined;\n  const isChatWithSelf = !fromId && chatId === currentUserId;\n  const isOutgoing = (mtpMessage.out && !mtpMessage.post) || (isChatWithSelf && !mtpMessage.fwdFrom);\n  const content = buildMessageContent(mtpMessage);\n  const action = mtpMessage.action\n    && buildAction(mtpMessage.action, fromId, peerId, Boolean(mtpMessage.post), isOutgoing);\n  if (action) {\n    content.action = action;\n  }\n\n  const isInvoiceMedia = mtpMessage.media instanceof GramJs.MessageMediaInvoice\n    && Boolean(mtpMessage.media.extendedMedia);\n\n  const {\n    replyToMsgId, replyToTopId, forumTopic, replyToPeerId,\n  } = mtpMessage.replyTo || {};\n  const isEdited = mtpMessage.editDate && !mtpMessage.editHide;\n  const {\n    inlineButtons, keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n  } = buildReplyButtons(mtpMessage, isInvoiceMedia) || {};\n  const forwardInfo = mtpMessage.fwdFrom && buildApiMessageForwardInfo(mtpMessage.fwdFrom, isChatWithSelf);\n  const { replies, mediaUnread: isMediaUnread, postAuthor } = mtpMessage;\n  const groupedId = mtpMessage.groupedId && String(mtpMessage.groupedId);\n  const isInAlbum = Boolean(groupedId) && !(content.document || content.audio || content.sticker);\n  const shouldHideKeyboardButtons = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide;\n  const isHideKeyboardSelective = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide\n    && mtpMessage.replyMarkup.selective;\n  const isProtected = mtpMessage.noforwards || isInvoiceMedia;\n  const isForwardingAllowed = !mtpMessage.noforwards;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n\n  return {\n    id: mtpMessage.id,\n    chatId,\n    isOutgoing,\n    content,\n    date: mtpMessage.date,\n    senderId: fromId || (mtpMessage.out && mtpMessage.post && currentUserId) || chatId,\n    views: mtpMessage.views,\n    forwards: mtpMessage.forwards,\n    isFromScheduled: mtpMessage.fromScheduled,\n    isSilent: mtpMessage.silent,\n    reactions: mtpMessage.reactions && buildMessageReactions(mtpMessage.reactions),\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n    ...(replyToMsgId && { replyToMessageId: replyToMsgId }),\n    ...(forumTopic && { isTopicReply: true }),\n    ...(replyToPeerId && { replyToChatId: getApiChatIdFromMtpPeer(replyToPeerId) }),\n    ...(replyToTopId && { replyToTopMessageId: replyToTopId }),\n    ...(forwardInfo && { forwardInfo }),\n    ...(isEdited && { isEdited }),\n    ...(mtpMessage.editDate && { editDate: mtpMessage.editDate }),\n    ...(isMediaUnread && { isMediaUnread }),\n    ...(mtpMessage.mentioned && isMediaUnread && { hasUnreadMention: true }),\n    ...(mtpMessage.mentioned && { isMentioned: true }),\n    ...(groupedId && {\n      groupedId,\n      isInAlbum,\n    }),\n    inlineButtons,\n    ...(keyboardButtons && {\n      keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n    }),\n    ...(shouldHideKeyboardButtons && { shouldHideKeyboardButtons, isHideKeyboardSelective }),\n    ...(mtpMessage.viaBotId && { viaBotId: buildApiPeerId(mtpMessage.viaBotId, 'user') }),\n    ...(replies && { repliesThreadInfo: buildThreadInfo(replies, mtpMessage.id, chatId) }),\n    ...(postAuthor && { postAuthorTitle: postAuthor }),\n    isProtected,\n    isForwardingAllowed,\n  };\n}\n\nexport function buildMessageReactions(reactions: GramJs.MessageReactions): ApiReactions {\n  const {\n    recentReactions, results, canSeeList,\n  } = reactions;\n\n  return {\n    canSeeList,\n    results: results.map(buildReactionCount).filter(Boolean).sort(reactionCountComparator),\n    recentReactions: recentReactions?.map(buildMessagePeerReaction).filter(Boolean),\n  };\n}\n\nfunction reactionCountComparator(a: ApiReactionCount, b: ApiReactionCount) {\n  const diff = b.count - a.count;\n  if (diff) return diff;\n  if (a.chosenOrder !== undefined && b.chosenOrder !== undefined) {\n    return a.chosenOrder - b.chosenOrder;\n  }\n  if (a.chosenOrder !== undefined) return 1;\n  if (b.chosenOrder !== undefined) return -1;\n  return 0;\n}\n\nfunction buildReactionCount(reactionCount: GramJs.ReactionCount): ApiReactionCount | undefined {\n  const { chosenOrder, count, reaction } = reactionCount;\n\n  const apiReaction = buildApiReaction(reaction);\n  if (!apiReaction) return undefined;\n\n  return {\n    chosenOrder,\n    count,\n    reaction: apiReaction,\n  };\n}\n\nexport function buildMessagePeerReaction(userReaction: GramJs.MessagePeerReaction): ApiUserReaction | undefined {\n  const {\n    peerId, reaction, big, unread,\n  } = userReaction;\n\n  const apiReaction = buildApiReaction(reaction);\n  if (!apiReaction) return undefined;\n\n  return {\n    userId: getApiChatIdFromMtpPeer(peerId),\n    reaction: apiReaction,\n    isUnread: unread,\n    isBig: big,\n  };\n}\n\nexport function buildApiReaction(reaction: GramJs.TypeReaction): ApiReaction | undefined {\n  if (reaction instanceof GramJs.ReactionEmoji) {\n    return {\n      emoticon: reaction.emoticon,\n    };\n  }\n\n  if (reaction instanceof GramJs.ReactionCustomEmoji) {\n    return {\n      documentId: reaction.documentId.toString(),\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiAvailableReaction(availableReaction: GramJs.AvailableReaction): ApiAvailableReaction {\n  const {\n    selectAnimation, staticIcon, reaction, title,\n    inactive, aroundAnimation, centerIcon, effectAnimation, activateAnimation,\n    premium,\n  } = availableReaction;\n\n  return {\n    selectAnimation: buildApiDocument(selectAnimation),\n    activateAnimation: buildApiDocument(activateAnimation),\n    effectAnimation: buildApiDocument(effectAnimation),\n    staticIcon: buildApiDocument(staticIcon),\n    aroundAnimation: aroundAnimation ? buildApiDocument(aroundAnimation) : undefined,\n    centerIcon: centerIcon ? buildApiDocument(centerIcon) : undefined,\n    reaction: { emoticon: reaction } as ApiReactionEmoji,\n    title,\n    isInactive: inactive,\n    isPremium: premium,\n  };\n}\n\nexport function buildMessageContent(\n  mtpMessage: UniversalMessage | GramJs.UpdateServiceNotification,\n) {\n  let content: ApiMessage['content'] = {};\n\n  if (mtpMessage.media) {\n    content = {\n      ...buildMessageMediaContent(mtpMessage.media),\n    };\n  }\n\n  const hasUnsupportedMedia = mtpMessage.media instanceof GramJs.MessageMediaUnsupported;\n\n  if (mtpMessage.message && !hasUnsupportedMedia\n    && !content.sticker && !content.poll && !content.contact && !(content.video?.isRound)) {\n    content = {\n      ...content,\n      text: buildMessageTextContent(mtpMessage.message, mtpMessage.entities),\n    };\n  }\n\n  return content;\n}\n\nexport function buildMessageTextContent(\n  message: string,\n  entities?: GramJs.TypeMessageEntity[],\n): ApiFormattedText {\n  return {\n    text: message,\n    ...(entities && { entities: entities.map(buildApiMessageEntity) }),\n  };\n}\n\nexport function buildMessageDraft(draft: GramJs.TypeDraftMessage) {\n  if (draft instanceof GramJs.DraftMessageEmpty) {\n    return undefined;\n  }\n\n  const {\n    message, entities, replyToMsgId, date,\n  } = draft;\n\n  return {\n    formattedText: message ? buildMessageTextContent(message, entities) : undefined,\n    replyingToId: replyToMsgId,\n    date,\n  };\n}\n\nexport function buildMessageMediaContent(media: GramJs.TypeMessageMedia): ApiMessage['content'] | undefined {\n  if ('ttlSeconds' in media && media.ttlSeconds) {\n    return undefined;\n  }\n\n  if ('extendedMedia' in media && media.extendedMedia instanceof GramJs.MessageExtendedMedia) {\n    return buildMessageMediaContent(media.extendedMedia.media);\n  }\n\n  const sticker = buildSticker(media);\n  if (sticker) return { sticker };\n\n  const photo = buildPhoto(media);\n  if (photo) return { photo };\n\n  const video = buildVideo(media);\n  if (video) return { video };\n\n  const audio = buildAudio(media);\n  if (audio) return { audio };\n\n  const voice = buildVoice(media);\n  if (voice) return { voice };\n\n  const document = buildDocumentFromMedia(media);\n  if (document) return { document };\n\n  const contact = buildContact(media);\n  if (contact) return { contact };\n\n  const poll = buildPollFromMedia(media);\n  if (poll) return { poll };\n\n  const webPage = buildWebPage(media);\n  if (webPage) return { webPage };\n\n  const invoice = buildInvoiceFromMedia(media);\n  if (invoice) return { invoice };\n\n  const location = buildLocationFromMedia(media);\n  if (location) return { location };\n\n  const game = buildGameFromMedia(media);\n  if (game) return { game };\n\n  return undefined;\n}\n\nfunction buildApiMessageForwardInfo(fwdFrom: GramJs.MessageFwdHeader, isChatWithSelf = false): ApiMessageForwardInfo {\n  const savedFromPeerId = fwdFrom.savedFromPeer && getApiChatIdFromMtpPeer(fwdFrom.savedFromPeer);\n  const fromId = fwdFrom.fromId && getApiChatIdFromMtpPeer(fwdFrom.fromId);\n\n  return {\n    date: fwdFrom.date,\n    isImported: fwdFrom.imported,\n    isChannelPost: Boolean(fwdFrom.channelPost),\n    channelPostId: fwdFrom.channelPost,\n    isLinkedChannelPost: Boolean(fwdFrom.channelPost && savedFromPeerId && !isChatWithSelf),\n    fromChatId: savedFromPeerId || fromId,\n    fromMessageId: fwdFrom.savedFromMsgId || fwdFrom.channelPost,\n    senderUserId: fromId,\n    hiddenUserName: fwdFrom.fromName,\n    postAuthorTitle: fwdFrom.postAuthor,\n  };\n}\n\nfunction buildSticker(media: GramJs.TypeMessageMedia): ApiSticker | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  return buildStickerFromDocument(media.document, media.nopremium);\n}\n\nfunction buildPhoto(media: GramJs.TypeMessageMedia): ApiPhoto | undefined {\n  if (!(media instanceof GramJs.MessageMediaPhoto) || !media.photo || !(media.photo instanceof GramJs.Photo)) {\n    return undefined;\n  }\n\n  return buildApiPhoto(media.photo, media.spoiler);\n}\n\nexport function buildVideoFromDocument(document: GramJs.Document, isSpoiler?: boolean): ApiVideo | undefined {\n  if (document instanceof GramJs.DocumentEmpty) {\n    return undefined;\n  }\n\n  const {\n    id, mimeType, thumbs, size, attributes,\n  } = document;\n\n  // eslint-disable-next-line no-restricted-globals\n  if (mimeType === VIDEO_WEBM_TYPE && !(self as any).isWebmSupported) {\n    return undefined;\n  }\n\n  // eslint-disable-next-line no-restricted-globals\n  if (mimeType === VIDEO_MOV_TYPE && !(self as any).isMovSupported) {\n    return undefined;\n  }\n\n  const videoAttr = attributes\n    .find((a: any): a is GramJs.DocumentAttributeVideo => a instanceof GramJs.DocumentAttributeVideo);\n\n  if (!videoAttr) {\n    return undefined;\n  }\n\n  const gifAttr = attributes\n    .find((a: any): a is GramJs.DocumentAttributeAnimated => a instanceof GramJs.DocumentAttributeAnimated);\n\n  const {\n    duration,\n    w: width,\n    h: height,\n    supportsStreaming = false,\n    roundMessage: isRound = false,\n  } = videoAttr;\n\n  return {\n    id: String(id),\n    mimeType,\n    duration,\n    fileName: getFilenameFromDocument(document, 'video'),\n    width,\n    height,\n    supportsStreaming,\n    isRound,\n    isGif: Boolean(gifAttr),\n    thumbnail: buildApiThumbnailFromStripped(thumbs),\n    size: size.toJSNumber(),\n    isSpoiler,\n  };\n}\n\nfunction buildVideo(media: GramJs.TypeMessageMedia): ApiVideo | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !(media.document instanceof GramJs.Document)\n    || !media.document.mimeType.startsWith('video')\n  ) {\n    return undefined;\n  }\n\n  return buildVideoFromDocument(media.document, media.spoiler);\n}\n\nfunction buildAudio(media: GramJs.TypeMessageMedia): ApiAudio | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  const audioAttribute = media.document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeAudio => (\n      attr instanceof GramJs.DocumentAttributeAudio\n    ));\n\n  if (!audioAttribute || audioAttribute.voice) {\n    return undefined;\n  }\n\n  const thumbnailSizes = media.document.thumbs && media.document.thumbs\n    .filter((thumb): thumb is GramJs.PhotoSize => thumb instanceof GramJs.PhotoSize)\n    .map((thumb) => buildApiPhotoSize(thumb));\n\n  return {\n    id: String(media.document.id),\n    fileName: getFilenameFromDocument(media.document, 'audio'),\n    thumbnailSizes,\n    size: media.document.size.toJSNumber(),\n    ...pick(media.document, ['mimeType']),\n    ...pick(audioAttribute, ['duration', 'performer', 'title']),\n  };\n}\n\nfunction buildVoice(media: GramJs.TypeMessageMedia): ApiVoice | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  const audioAttribute = media.document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeAudio => (\n      attr instanceof GramJs.DocumentAttributeAudio\n    ));\n\n  if (!audioAttribute || !audioAttribute.voice) {\n    return undefined;\n  }\n\n  const { duration, waveform } = audioAttribute;\n\n  return {\n    id: String(media.document.id),\n    duration,\n    waveform: waveform ? Array.from(waveform) : undefined,\n  };\n}\n\nfunction buildDocumentFromMedia(media: GramJs.TypeMessageMedia) {\n  if (!(media instanceof GramJs.MessageMediaDocument) || !media.document) {\n    return undefined;\n  }\n\n  return buildApiDocument(media.document);\n}\n\nexport function buildApiDocument(document: GramJs.TypeDocument): ApiDocument | undefined {\n  if (!(document instanceof GramJs.Document)) {\n    return undefined;\n  }\n\n  const {\n    id, size, mimeType, date, thumbs, attributes,\n  } = document;\n\n  const thumbnail = thumbs && buildApiThumbnailFromStripped(thumbs);\n\n  let mediaType: ApiDocument['mediaType'] | undefined;\n  let mediaSize: ApiDocument['mediaSize'] | undefined;\n  const photoSize = thumbs && thumbs.find((s: any): s is GramJs.PhotoSize => s instanceof GramJs.PhotoSize);\n  if (photoSize) {\n    mediaSize = {\n      width: photoSize.w,\n      height: photoSize.h,\n    };\n\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n      mediaType = 'photo';\n\n      const imageAttribute = attributes\n        .find((a: any): a is GramJs.DocumentAttributeImageSize => a instanceof GramJs.DocumentAttributeImageSize);\n\n      if (imageAttribute) {\n        const { w: width, h: height } = imageAttribute;\n        mediaSize = {\n          width,\n          height,\n        };\n      }\n    } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n      mediaType = 'video';\n      const videoAttribute = attributes\n        .find((a: any): a is GramJs.DocumentAttributeVideo => a instanceof GramJs.DocumentAttributeVideo);\n\n      if (videoAttribute) {\n        const { w: width, h: height } = videoAttribute;\n        mediaSize = {\n          width,\n          height,\n        };\n      }\n    }\n  }\n\n  return {\n    id: String(id),\n    size: size.toJSNumber(),\n    mimeType,\n    timestamp: date,\n    fileName: getFilenameFromDocument(document),\n    thumbnail,\n    mediaType,\n    mediaSize,\n  };\n}\n\nfunction buildContact(media: GramJs.TypeMessageMedia): ApiContact | undefined {\n  if (!(media instanceof GramJs.MessageMediaContact)) {\n    return undefined;\n  }\n\n  const {\n    firstName, lastName, phoneNumber, userId,\n  } = media;\n\n  return {\n    firstName, lastName, phoneNumber, userId: buildApiPeerId(userId, 'user'),\n  };\n}\n\nfunction buildPollFromMedia(media: GramJs.TypeMessageMedia): ApiPoll | undefined {\n  if (!(media instanceof GramJs.MessageMediaPoll)) {\n    return undefined;\n  }\n\n  return buildPoll(media.poll, media.results);\n}\n\nfunction buildInvoiceFromMedia(media: GramJs.TypeMessageMedia): ApiInvoice | undefined {\n  if (!(media instanceof GramJs.MessageMediaInvoice)) {\n    return undefined;\n  }\n\n  return buildInvoice(media);\n}\n\nfunction buildLocationFromMedia(media: GramJs.TypeMessageMedia): ApiLocation | undefined {\n  if (media instanceof GramJs.MessageMediaGeo) {\n    return buildGeo(media);\n  }\n\n  if (media instanceof GramJs.MessageMediaVenue) {\n    return buildVenue(media);\n  }\n\n  if (media instanceof GramJs.MessageMediaGeoLive) {\n    return buildGeoLive(media);\n  }\n\n  return undefined;\n}\n\nfunction buildGeo(media: GramJs.MessageMediaGeo): ApiLocation | undefined {\n  const point = buildGeoPoint(media.geo);\n  return point && { type: 'geo', geo: point };\n}\n\nfunction buildVenue(media: GramJs.MessageMediaVenue): ApiLocation | undefined {\n  const {\n    geo, title, provider, address, venueId, venueType,\n  } = media;\n  const point = buildGeoPoint(geo);\n  return point && {\n    type: 'venue',\n    geo: point,\n    title,\n    provider,\n    address,\n    venueId,\n    venueType,\n  };\n}\n\nfunction buildGeoLive(media: GramJs.MessageMediaGeoLive): ApiLocation | undefined {\n  const { geo, period, heading } = media;\n  const point = buildGeoPoint(geo);\n  return point && {\n    type: 'geoLive',\n    geo: point,\n    period,\n    heading,\n  };\n}\n\nfunction buildGeoPoint(geo: GramJs.TypeGeoPoint): ApiLocation['geo'] | undefined {\n  if (geo instanceof GramJs.GeoPointEmpty) return undefined;\n  const {\n    long, lat, accuracyRadius, accessHash,\n  } = geo;\n  return {\n    long,\n    lat,\n    accessHash: accessHash.toString(),\n    accuracyRadius,\n  };\n}\n\nfunction buildGameFromMedia(media: GramJs.TypeMessageMedia): ApiGame | undefined {\n  if (!(media instanceof GramJs.MessageMediaGame)) {\n    return undefined;\n  }\n\n  return buildGame(media);\n}\n\nfunction buildGame(media: GramJs.MessageMediaGame): ApiGame | undefined {\n  const {\n    id, accessHash, shortName, title, description, photo: apiPhoto, document: apiDocument,\n  } = media.game;\n\n  const photo = apiPhoto instanceof GramJs.Photo ? buildApiPhoto(apiPhoto) : undefined;\n  const document = apiDocument instanceof GramJs.Document ? buildApiDocument(apiDocument) : undefined;\n\n  return {\n    id: id.toString(),\n    accessHash: accessHash.toString(),\n    shortName,\n    title,\n    description,\n    photo,\n    document,\n  };\n}\n\nexport function buildPoll(poll: GramJs.Poll, pollResults: GramJs.PollResults): ApiPoll {\n  const { id, answers: rawAnswers } = poll;\n  const answers = rawAnswers.map((answer) => ({\n    text: answer.text,\n    option: serializeBytes(answer.option),\n  }));\n\n  return {\n    id: String(id),\n    summary: {\n      isPublic: poll.publicVoters,\n      ...pick(poll, [\n        'closed',\n        'multipleChoice',\n        'quiz',\n        'question',\n        'closePeriod',\n        'closeDate',\n      ]),\n      answers,\n    },\n    results: buildPollResults(pollResults),\n  };\n}\n\nexport function buildInvoice(media: GramJs.MessageMediaInvoice): ApiInvoice {\n  const {\n    description: text, title, photo, test, totalAmount, currency, receiptMsgId, extendedMedia,\n  } = media;\n\n  const preview = extendedMedia instanceof GramJs.MessageExtendedMediaPreview\n    ? buildApiMessageExtendedMediaPreview(extendedMedia) : undefined;\n\n  return {\n    title,\n    text,\n    photo: buildApiWebDocument(photo),\n    receiptMsgId,\n    amount: Number(totalAmount),\n    currency,\n    isTest: test,\n    extendedMedia: preview,\n  };\n}\n\nexport function buildPollResults(pollResults: GramJs.PollResults): ApiPoll['results'] {\n  const {\n    results: rawResults, totalVoters, recentVoters, solution, solutionEntities: entities, min,\n  } = pollResults;\n  const results = rawResults && rawResults.map(({\n    option, chosen, correct, voters,\n  }) => ({\n    isChosen: chosen,\n    isCorrect: correct,\n    option: serializeBytes(option),\n    votersCount: voters,\n  }));\n\n  return {\n    isMin: min,\n    totalVoters,\n    recentVoterIds: recentVoters?.map((id) => buildApiPeerId(id, 'user')),\n    results,\n    solution,\n    ...(entities && { solutionEntities: entities.map(buildApiMessageEntity) }),\n  };\n}\n\nexport function buildWebPage(media: GramJs.TypeMessageMedia): ApiWebPage | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaWebPage)\n    || !(media.webpage instanceof GramJs.WebPage)\n  ) {\n    return undefined;\n  }\n\n  const { id, photo, document } = media.webpage;\n\n  let video;\n  if (document instanceof GramJs.Document && document.mimeType.startsWith('video/')) {\n    video = buildVideoFromDocument(document);\n  }\n\n  return {\n    id: Number(id),\n    ...pick(media.webpage, [\n      'url',\n      'displayUrl',\n      'type',\n      'siteName',\n      'title',\n      'description',\n      'duration',\n    ]),\n    photo: photo instanceof GramJs.Photo ? buildApiPhoto(photo) : undefined,\n    document: !video && document ? buildApiDocument(document) : undefined,\n    video,\n  };\n}\n\nfunction buildAction(\n  action: GramJs.TypeMessageAction,\n  senderId: string | undefined,\n  targetPeerId: string | undefined,\n  isChannelPost: boolean,\n  isOutgoing: boolean,\n): ApiAction | undefined {\n  if (action instanceof GramJs.MessageActionEmpty) {\n    return undefined;\n  }\n\n  let phoneCall: PhoneCallAction | undefined;\n  let call: Partial<ApiGroupCall> | undefined;\n  let amount: number | undefined;\n  let currency: string | undefined;\n  let text: string;\n  const translationValues = [];\n  let type: ApiAction['type'] = 'other';\n  let photo: ApiPhoto | undefined;\n  let score: number | undefined;\n  let months: number | undefined;\n  let topicEmojiIconId: string | undefined;\n  let isTopicAction: boolean | undefined;\n\n  const targetUserIds = 'users' in action\n    ? action.users && action.users.map((id) => buildApiPeerId(id, 'user'))\n    : ('userId' in action && [buildApiPeerId(action.userId, 'user')]) || [];\n  let targetChatId: string | undefined;\n\n  if (action instanceof GramJs.MessageActionChatCreate) {\n    text = 'Notification.CreatedChatWithTitle';\n    translationValues.push('%action_origin%', action.title);\n    type = 'chatCreate';\n  } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n    if (isChannelPost) {\n      text = 'Channel.MessageTitleUpdated';\n      translationValues.push(action.title);\n    } else {\n      text = 'Notification.ChangedGroupName';\n      translationValues.push('%action_origin%', action.title);\n    }\n  } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoUpdated';\n    } else {\n      text = 'Notification.ChangedGroupPhoto';\n      translationValues.push('%action_origin%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoRemoved';\n    } else {\n      text = 'Group.MessagePhotoRemoved';\n    }\n  } else if (action instanceof GramJs.MessageActionChatAddUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.JoinedChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Invited';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.LeftChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Kicked';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatJoinedByLink) {\n    text = 'Notification.JoinedGroupByLink';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionChannelCreate) {\n    text = 'Notification.CreatedChannel';\n  } else if (action instanceof GramJs.MessageActionChatMigrateTo) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated to %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionChannelMigrateFrom) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated from %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionPinMessage) {\n    text = 'Chat.Service.Group.UpdatedPinnedMessage1';\n    translationValues.push('%action_origin%', '%message%');\n  } else if (action instanceof GramJs.MessageActionHistoryClear) {\n    text = 'HistoryCleared';\n    type = 'historyClear';\n  } else if (action instanceof GramJs.MessageActionPhoneCall) {\n    const withDuration = Boolean(action.duration);\n    text = [\n      withDuration ? 'ChatList.Service' : 'Chat',\n      action.video ? 'VideoCall' : 'Call',\n      isOutgoing ? (withDuration ? 'outgoing' : 'Outgoing') : (withDuration ? 'incoming' : 'Incoming'),\n    ].join('.');\n\n    if (withDuration) {\n      const mins = Math.max(Math.round(action.duration! / 60), 1);\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    }\n\n    phoneCall = {\n      isOutgoing,\n      isVideo: action.video,\n      duration: action.duration,\n      reason: buildApiCallDiscardReason(action.reason),\n    };\n  } else if (action instanceof GramJs.MessageActionInviteToGroupCall) {\n    text = 'Notification.VoiceChatInvitation';\n    call = {\n      id: action.call.id.toString(),\n      accessHash: action.call.accessHash.toString(),\n    };\n    translationValues.push('%action_origin%', '%target_user%');\n  } else if (action instanceof GramJs.MessageActionContactSignUp) {\n    text = 'Notification.Joined';\n    translationValues.push('%action_origin%');\n    type = 'contactSignUp';\n  } else if (action instanceof GramJs.MessageActionPaymentSent) {\n    amount = Number(action.totalAmount);\n    currency = action.currency;\n    text = 'PaymentSuccessfullyPaid';\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    translationValues.push('%payment_amount%', '%target_user%', '%product%');\n  } else if (action instanceof GramJs.MessageActionGroupCall) {\n    if (action.duration) {\n      const mins = Math.max(Math.round(action.duration / 60), 1);\n      text = 'Notification.VoiceChatEnded';\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    } else {\n      text = 'Notification.VoiceChatStartedChannel';\n      call = {\n        id: action.call.id.toString(),\n        accessHash: action.call.accessHash.toString(),\n      };\n    }\n  } else if (action instanceof GramJs.MessageActionBotAllowed) {\n    text = 'Chat.Service.BotPermissionAllowed';\n    translationValues.push(action.domain);\n  } else if (action instanceof GramJs.MessageActionCustomAction) {\n    text = action.message;\n  } else if (action instanceof GramJs.MessageActionChatJoinedByRequest) {\n    text = 'ChatService.UserJoinedGroupByRequest';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGameScore) {\n    text = senderId === currentUserId ? 'ActionYouScoredInGame' : 'ActionUserScoredInGame';\n    translationValues.push('%score%');\n    score = action.score;\n  } else if (action instanceof GramJs.MessageActionWebViewDataSent) {\n    text = 'Notification.WebAppSentData';\n    translationValues.push(action.text);\n  } else if (action instanceof GramJs.MessageActionGiftPremium) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'ActionGiftInbound';\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    } else {\n      translationValues.push('%action_origin%', '%gift_payment_amount%');\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    currency = action.currency;\n    amount = action.amount.toJSNumber();\n    months = action.months;\n  } else if (action instanceof GramJs.MessageActionTopicCreate) {\n    text = 'TopicWasCreatedAction';\n    type = 'topicCreate';\n    translationValues.push(action.title);\n  } else if (action instanceof GramJs.MessageActionTopicEdit) {\n    if (action.closed !== undefined) {\n      text = action.closed ? 'TopicWasClosedAction' : 'TopicWasReopenedAction';\n      translationValues.push('%action_origin%', '%action_topic%');\n    } else if (action.hidden !== undefined) {\n      text = action.hidden ? 'TopicHidden2' : 'TopicShown';\n    } else if (action.title) {\n      text = 'TopicRenamedTo';\n      translationValues.push('%action_origin%', action.title);\n    } else if (action.iconEmojiId) {\n      text = 'TopicWasIconChangedToAction';\n      translationValues.push('%action_origin%', '%action_topic_icon%');\n      topicEmojiIconId = action.iconEmojiId.toString();\n    } else {\n      text = 'ChatList.UnsupportedMessage';\n    }\n    isTopicAction = true;\n  } else if (action instanceof GramJs.MessageActionAttachMenuBotAllowed) {\n    text = 'ActionAttachMenuBotAllowed';\n  } else if (action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n    const isVideo = action.photo instanceof GramJs.Photo && action.photo.videoSizes?.length;\n    text = senderId === currentUserId\n      ? (isVideo ? 'ActionSuggestVideoFromYouDescription' : 'ActionSuggestPhotoFromYouDescription')\n      : (isVideo ? 'ActionSuggestVideoToYouDescription' : 'ActionSuggestPhotoToYouDescription');\n    type = 'suggestProfilePhoto';\n    translationValues.push('%target_user%');\n\n    if (targetPeerId) targetUserIds.push(targetPeerId);\n  } else {\n    text = 'ChatList.UnsupportedMessage';\n  }\n\n  if ('photo' in action && action.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(action.photo);\n    photo = buildApiPhoto(action.photo);\n  }\n\n  return {\n    text,\n    type,\n    targetUserIds,\n    targetChatId,\n    photo, // TODO Only used internally now, will be used for the UI in future\n    amount,\n    currency,\n    translationValues,\n    call,\n    phoneCall,\n    score,\n    months,\n    topicEmojiIconId,\n    isTopicAction,\n  };\n}\n\nfunction buildReplyButtons(message: UniversalMessage, shouldSkipBuyButton?: boolean): ApiReplyKeyboard | undefined {\n  const { replyMarkup, media } = message;\n\n  // TODO Move to the proper button inside preview\n  if (!replyMarkup) {\n    if (media instanceof GramJs.MessageMediaWebPage && media.webpage instanceof GramJs.WebPage) {\n      if (media.webpage.type === 'telegram_message') {\n        return {\n          inlineButtons: [[{\n            type: 'url',\n            text: 'Show Message',\n            url: media.webpage.url,\n          }]],\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  // TODO\n  if (!(replyMarkup instanceof GramJs.ReplyKeyboardMarkup || replyMarkup instanceof GramJs.ReplyInlineMarkup)) {\n    return undefined;\n  }\n\n  const markup = replyMarkup.rows.map(({ buttons }) => {\n    return buttons.map((button): ApiKeyboardButton | undefined => {\n      const { text } = button;\n\n      if (button instanceof GramJs.KeyboardButton) {\n        return {\n          type: 'command',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrl) {\n        if (button.url.includes('?startgroup=')) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'url',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonCallback) {\n        if (button.requiresPassword) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'callback',\n          text,\n          data: serializeBytes(button.data),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPoll) {\n        return {\n          type: 'requestPoll',\n          text,\n          isQuiz: button.quiz,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPhone) {\n        return {\n          type: 'requestPhone',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonBuy) {\n        if (media instanceof GramJs.MessageMediaInvoice && media.receiptMsgId) {\n          return {\n            type: 'receipt',\n            text: 'PaymentReceipt',\n            receiptMessageId: media.receiptMsgId,\n          };\n        }\n        if (shouldSkipBuyButton) return undefined;\n        return {\n          type: 'buy',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonGame) {\n        return {\n          type: 'game',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSwitchInline) {\n        return {\n          type: 'switchBotInline',\n          text,\n          query: button.query,\n          isSamePeer: button.samePeer,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUserProfile) {\n        return {\n          type: 'userProfile',\n          text,\n          userId: button.userId.toString(),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSimpleWebView) {\n        return {\n          type: 'simpleWebView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonWebView) {\n        return {\n          type: 'webView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrlAuth) {\n        return {\n          type: 'urlAuth',\n          text,\n          url: button.url,\n          buttonId: button.buttonId,\n        };\n      }\n\n      return {\n        type: 'unsupported',\n        text,\n      };\n    }).filter(Boolean);\n  });\n\n  if (markup.every((row) => !row.length)) return undefined;\n\n  return {\n    [replyMarkup instanceof GramJs.ReplyKeyboardMarkup ? 'keyboardButtons' : 'inlineButtons']: markup,\n    ...(replyMarkup instanceof GramJs.ReplyKeyboardMarkup && {\n      keyboardPlaceholder: replyMarkup.placeholder,\n      isKeyboardSingleUse: replyMarkup.singleUse,\n      isKeyboardSelective: replyMarkup.selective,\n    }),\n  };\n}\n\nfunction getFilenameFromDocument(document: GramJs.Document, defaultBase = 'file') {\n  const { mimeType, attributes } = document;\n  const filenameAttribute = attributes\n    .find((a: any): a is GramJs.DocumentAttributeFilename => a instanceof GramJs.DocumentAttributeFilename);\n\n  if (filenameAttribute) {\n    return filenameAttribute.fileName;\n  }\n\n  const extension = mimeType.split('/')[1];\n\n  return `${defaultBase}${String(document.id)}.${extension}`;\n}\n\nexport function buildLocalMessage(\n  chat: ApiChat,\n  text?: string,\n  entities?: ApiMessageEntity[],\n  replyingTo?: number,\n  replyingToTopId?: number,\n  attachment?: ApiAttachment,\n  sticker?: ApiSticker,\n  gif?: ApiVideo,\n  poll?: ApiNewPoll,\n  contact?: ApiContact,\n  groupedId?: string,\n  scheduledAt?: number,\n  sendAs?: ApiChat | ApiUser,\n): ApiMessage {\n  const localId = getNextLocalMessageId();\n  const media = attachment && buildUploadingMedia(attachment);\n  const isChannel = chat.type === 'chatTypeChannel';\n  const isForum = chat.isForum;\n\n  const message = {\n    id: localId,\n    chatId: chat.id,\n    content: {\n      ...(text && {\n        text: {\n          text,\n          entities,\n        },\n      }),\n      ...media,\n      ...(sticker && { sticker }),\n      ...(gif && { video: gif }),\n      ...(poll && buildNewPoll(poll, localId)),\n      ...(contact && { contact }),\n    },\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !isChannel,\n    senderId: sendAs?.id || currentUserId,\n    ...(replyingTo && { replyToMessageId: replyingTo }),\n    ...(replyingToTopId && { replyToTopMessageId: replyingToTopId }),\n    ...((replyingTo || replyingToTopId) && isForum && { isTopicReply: true }),\n    ...(groupedId && {\n      groupedId,\n      ...(media && (media.photo || media.video) && { isInAlbum: true }),\n    }),\n    ...(scheduledAt && { isScheduled: true }),\n    isForwardingAllowed: true,\n  } satisfies ApiMessage;\n\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(message.content, message.groupedId);\n\n  return {\n    ...message,\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n  };\n}\n\nexport function buildLocalForwardedMessage({\n  toChat,\n  toThreadId,\n  message,\n  scheduledAt,\n  noAuthors,\n  noCaptions,\n  isCurrentUserPremium,\n}: {\n  toChat: ApiChat;\n  toThreadId?: number;\n  message: ApiMessage;\n  scheduledAt?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n}): ApiMessage {\n  const localId = getNextLocalMessageId();\n  const {\n    content,\n    chatId: fromChatId,\n    id: fromMessageId,\n    senderId,\n    groupedId,\n    isInAlbum,\n  } = message;\n\n  const isAudio = content.audio;\n  const asIncomingInChatWithSelf = (\n    toChat.id === currentUserId && (fromChatId !== toChat.id || message.forwardInfo) && !isAudio\n  );\n  const shouldHideText = Object.keys(content).length > 1 && content.text && noCaptions;\n  const shouldDropCustomEmoji = !isCurrentUserPremium;\n  const strippedText = content.text?.entities && shouldDropCustomEmoji ? {\n    text: content.text.text,\n    entities: content.text.entities.filter((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji),\n  } : content.text;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n\n  const updatedContent = {\n    ...content,\n    text: !shouldHideText ? strippedText : undefined,\n  };\n\n  return {\n    id: localId,\n    chatId: toChat.id,\n    content: updatedContent,\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !asIncomingInChatWithSelf && toChat.type !== 'chatTypeChannel',\n    senderId: currentUserId,\n    sendingState: 'messageSendingStatePending',\n    groupedId,\n    isInAlbum,\n    isForwardingAllowed: true,\n    replyToTopMessageId: toThreadId,\n    ...(toThreadId && toChat?.isForum && { isTopicReply: true }),\n\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n    // Forward info doesn't get added when users forwards his own messages, also when forwarding audio\n    ...(message.chatId !== currentUserId && !isAudio && !noAuthors && {\n      forwardInfo: {\n        date: message.date,\n        isChannelPost: false,\n        fromChatId,\n        fromMessageId,\n        senderUserId: senderId,\n      },\n    }),\n    ...(message.chatId === currentUserId && !noAuthors && { forwardInfo: message.forwardInfo }),\n    ...(scheduledAt && { isScheduled: true }),\n  };\n}\n\nfunction buildUploadingMedia(\n  attachment: ApiAttachment,\n): ApiMessage['content'] {\n  const {\n    filename: fileName,\n    blobUrl,\n    previewBlobUrl,\n    mimeType,\n    size,\n    audio,\n    shouldSendAsFile,\n    shouldSendAsSpoiler,\n  } = attachment;\n\n  if (!shouldSendAsFile) {\n    if (attachment.quick) {\n      // TODO Handle GIF as video, but support playback in <video>\n      if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n        const { width, height } = attachment.quick;\n        return {\n          photo: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            sizes: [],\n            thumbnail: { width, height, dataUri: blobUrl },\n            blobUrl,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n      if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n        const { width, height, duration } = attachment.quick;\n        return {\n          video: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            mimeType,\n            duration: duration || 0,\n            fileName,\n            width,\n            height,\n            blobUrl,\n            ...(previewBlobUrl && { thumbnail: { width, height, dataUri: previewBlobUrl } }),\n            size,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n    }\n    if (attachment.voice) {\n      const { duration, waveform } = attachment.voice;\n      const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n      return {\n        voice: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          duration,\n          waveform: inputWaveform,\n        },\n      };\n    }\n    if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n      const { duration, performer, title } = audio || {};\n      return {\n        audio: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          mimeType,\n          fileName,\n          size,\n          duration: duration || 0,\n          title,\n          performer,\n        },\n      };\n    }\n  }\n  return {\n    document: {\n      mimeType,\n      fileName,\n      size,\n      ...(previewBlobUrl && { previewBlobUrl }),\n    },\n  };\n}\n\nexport function buildApiMessageExtendedMediaPreview(\n  preview: GramJs.MessageExtendedMediaPreview,\n): ApiMessageExtendedMediaPreview {\n  const {\n    w, h, thumb, videoDuration,\n  } = preview;\n\n  return {\n    width: w,\n    height: h,\n    duration: videoDuration,\n    thumbnail: thumb ? buildApiThumbnailFromStripped([thumb]) : undefined,\n  };\n}\n\nexport function buildApiWebDocument(document?: GramJs.TypeWebDocument): ApiWebDocument | undefined {\n  if (!document) return undefined;\n\n  const {\n    url, size, mimeType,\n  } = document;\n  const accessHash = document instanceof GramJs.WebDocument ? document.accessHash.toString() : undefined;\n  const sizeAttr = document.attributes.find((attr): attr is GramJs.DocumentAttributeImageSize => (\n    attr instanceof GramJs.DocumentAttributeImageSize\n  ));\n  const dimensions = sizeAttr && { width: sizeAttr.w, height: sizeAttr.h };\n\n  return {\n    url,\n    accessHash,\n    size,\n    mimeType,\n    dimensions,\n  };\n}\n\nfunction buildNewPoll(poll: ApiNewPoll, localId: number) {\n  return {\n    poll: {\n      id: String(localId),\n      summary: pick(poll.summary, ['question', 'answers']),\n      results: {},\n    },\n  };\n}\n\nexport function buildApiMessageEntity(entity: GramJs.TypeMessageEntity): ApiMessageEntity {\n  const {\n    className: type, offset, length,\n  } = entity;\n\n  if (entity instanceof GramJs.MessageEntityMentionName) {\n    return {\n      type: ApiMessageEntityTypes.MentionName,\n      offset,\n      length,\n      userId: buildApiPeerId(entity.userId, 'user'),\n    };\n  }\n\n  if (entity instanceof GramJs.MessageEntityTextUrl) {\n    return {\n      type: ApiMessageEntityTypes.TextUrl,\n      offset,\n      length,\n      url: entity.url,\n    };\n  }\n\n  if (entity instanceof GramJs.MessageEntityPre) {\n    return {\n      type: ApiMessageEntityTypes.Pre,\n      offset,\n      length,\n      language: entity.language,\n    };\n  }\n\n  if (entity instanceof GramJs.MessageEntityCustomEmoji) {\n    return {\n      type: ApiMessageEntityTypes.CustomEmoji,\n      offset,\n      length,\n      documentId: entity.documentId.toString(),\n    };\n  }\n\n  return {\n    type: type as `${ApiMessageEntityDefault['type']}`,\n    offset,\n    length,\n  };\n}\n\nfunction buildThreadInfo(\n  messageReplies: GramJs.TypeMessageReplies, messageId: number, chatId: string,\n): ApiThreadInfo | undefined {\n  const {\n    channelId, replies, maxId, readMaxId, recentRepliers, comments,\n  } = messageReplies;\n\n  const apiChannelId = channelId ? buildApiPeerId(channelId, 'channel') : undefined;\n  if (apiChannelId === DELETED_COMMENTS_CHANNEL_ID) {\n    return undefined;\n  }\n\n  const isPostThread = apiChannelId && chatId !== apiChannelId;\n\n  return {\n    isComments: comments,\n    threadId: messageId,\n    ...(isPostThread ? {\n      chatId: apiChannelId,\n      originChannelId: chatId,\n    } : {\n      chatId,\n    }),\n    messagesCount: replies,\n    lastMessageId: maxId,\n    lastReadInboxMessageId: readMaxId,\n    ...(recentRepliers && { recentReplierIds: recentRepliers.map(getApiChatIdFromMtpPeer) }),\n  };\n}\n\nexport function buildApiFormattedText(textWithEntities: GramJs.TextWithEntities): ApiFormattedText {\n  const { text, entities } = textWithEntities;\n\n  return {\n    text,\n    entities: entities.map(buildApiMessageEntity),\n  };\n}\n","import BigInt from 'big-integer';\nimport type { Api as GramJs } from '../../lib/gramjs';\nimport type { ApiMessage } from '../types';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\nimport { DATA_BROADCAST_CHANNEL_NAME } from '../../config';\nimport { constructors } from '../../lib/gramjs/tl';\nimport { throttle } from '../../util/schedulers';\n\n// eslint-disable-next-line no-restricted-globals\nconst IS_MULTITAB_SUPPORTED = 'BroadcastChannel' in self;\n\nexport interface LocalDb {\n  localMessages: Record<string, ApiMessage>;\n  // Used for loading avatars and media through in-memory Gram JS instances.\n  chats: Record<string, GramJs.Chat | GramJs.Channel>;\n  users: Record<string, GramJs.User>;\n  messages: Record<string, GramJs.Message | GramJs.MessageService>;\n  documents: Record<string, GramJs.Document>;\n  stickerSets: Record<string, GramJs.StickerSet>;\n  photos: Record<string, GramJs.Photo>;\n  webDocuments: Record<string, GramJs.TypeWebDocument>;\n  cache: Record<string,any>;\n  botWaitReply: Record<string, undefined | {\n    command:string,\n    payload?:Record<string,any>\n  }>;\n}\n\nconst channel = IS_MULTITAB_SUPPORTED ? new BroadcastChannel(DATA_BROADCAST_CHANNEL_NAME) : undefined;\n\nlet batchedUpdates: {\n  name: string;\n  prop: string;\n  value: any;\n}[] = [];\nconst throttledLocalDbUpdate = throttle(() => {\n  channel!.postMessage({\n    type: 'localDbUpdate',\n    batchedUpdates,\n  });\n  batchedUpdates = [];\n}, 100);\n\nfunction createProxy(name: string, object: any) {\n  return new Proxy(object, {\n    get(target, prop: string, value: any) {\n      return Reflect.get(target, prop, value);\n    },\n    set(target, prop: string, value: any) {\n      batchedUpdates.push({ name, prop, value });\n      throttledLocalDbUpdate();\n      return Reflect.set(target, prop, value);\n    },\n  });\n}\n\nfunction convertToVirtualClass(value: any): any {\n  if (value instanceof Uint8Array) return Buffer.from(value);\n  if (typeof value === 'object' && Object.keys(value).length === 1 && Object.keys(value)[0] === 'value') {\n    return BigInt(value.value);\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(convertToVirtualClass);\n  }\n\n  if (typeof value !== 'object' || !('CONSTRUCTOR_ID' in value)) {\n    return value;\n  }\n  const path = value.className.split('.');\n  const VirtualClass = path.reduce((acc: any, field: string) => {\n    return acc[field];\n  }, constructors);\n\n  const valueOmited = omitVirtualClassFields(value);\n  const valueConverted = Object.keys(valueOmited).reduce((acc, key) => {\n    acc[key] = convertToVirtualClass(valueOmited[key]);\n    return acc;\n  }, {} as Record<string, any>);\n\n  return new VirtualClass(valueConverted);\n}\n\nfunction createLocalDbInitial(initial?: LocalDb): LocalDb {\n  return [\n    'localMessages', 'chats', 'users', 'messages', 'documents', 'stickerSets', 'photos', 'webDocuments','cache','botWaitReply',\n  ]\n    .reduce((acc: Record<string, any>, key) => {\n      const value = initial?.[key as keyof LocalDb] ?? {};\n      const valueVirtualClass = Object.keys(value).reduce((acc2, key2) => {\n        acc2[key2] = convertToVirtualClass(value[key2]);\n        return acc2;\n      }, {} as Record<string, any>);\n\n      acc[key] = IS_MULTITAB_SUPPORTED\n        ? createProxy(key, valueVirtualClass)\n        : valueVirtualClass;\n      return acc;\n    }, {} as LocalDb) as LocalDb;\n}\n\nconst localDb: LocalDb = createLocalDbInitial();\n\nexport default localDb;\n\nexport function broadcastLocalDbUpdateFull() {\n  if (!channel) return;\n\n  channel.postMessage({\n    type: 'localDbUpdateFull',\n    localDb: Object.keys(localDb).reduce((acc: Record<string, any>, key) => {\n      acc[key] = { ...localDb[key as keyof LocalDb] };\n      return acc;\n    }, {} as Record<string, any>),\n  });\n}\n\nexport function updateFullLocalDb(initial: LocalDb) {\n  Object.assign(localDb, createLocalDbInitial(initial));\n}\n\nexport function clearLocalDb() {\n  Object.assign(localDb, createLocalDbInitial());\n}\n","import type {TelegramClient} from '../../../lib/gramjs';\nimport {Api as GramJs} from '../../../lib/gramjs';\nimport type {ApiOnProgress, ApiParsedMedia} from '../../types';\nimport {ApiMediaFormat,} from '../../types';\n\nimport {\n  CLOUD_MESSAGE_API,\n  DOWNLOAD_WORKERS,\n  MEDIA_CACHE_DISABLED,\n  MEDIA_CACHE_NAME,\n  MEDIA_CACHE_NAME_AVATARS,\n  MEDIA_CACHE_NAME_WAI,\n} from '../../../config';\nimport localDb from '../localDb';\nimport * as cacheApi from '../../../util/cacheApi';\nimport {Type} from '../../../util/cacheApi';\nimport {getEntityTypeById} from '../gramjsBuilders';\nimport {DownloadReq, DownloadRes} from \"../../../lib/ptp/protobuf/PTPFile\";\nimport {ERR} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport {Pdu} from \"../../../lib/ptp/protobuf/BaseMsg\";\nimport Account from \"../../../worker/share/Account\";\nimport {blobToBuffer} from \"../../../worker/share/utils/utils\";\n\nconst MEDIA_ENTITY_TYPES = new Set([\n  'msg', 'sticker', 'gif', 'wallpaper', 'photo', 'webDocument', 'document', 'videoAvatar',\n]);\n\n\nasync function fileToArrayBuffer(file: File): Promise<ArrayBuffer> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      resolve(reader.result as ArrayBuffer);\n    };\n\n    reader.onerror = () => {\n      reject(reader.error);\n    };\n\n    reader.readAsArrayBuffer(file);\n  });\n}\n\nexport default async function downloadMedia(\n  {\n    url, mediaFormat, start, end, isHtmlAllowed,\n  }: {\n    url: string; mediaFormat: ApiMediaFormat; start?: number; end?: number; isHtmlAllowed?: boolean;\n  },\n  client: TelegramClient,\n  isConnected: boolean,\n  onProgress?: ApiOnProgress,\n) {\n  let data:Buffer,fullSize:number,mimeType:string;\n  let flag = false;\n  let id;\n  const t = url.split(\"?\")\n  const t1 = t[0].split(\":\");\n  if(url.indexOf(\"progressive\") > 0 || t1[0].indexOf(\"-\") > 1){\n    id = t1[t1.length - 1];\n  }else{\n    // \"profile623415?7116860199581299000\"\n    if(url.indexOf(\"profile\") === 0){\n      if(url.indexOf(\"?\") > -1){\n        id = url.split(\"?\")[1]\n      }else {\n        id = url.replace(\"profile\",\"\")\n      }\n    }else if(url.indexOf(\"avatar\") === 0){\n      id = url.split(\"?\")[1]\n    }else if(url.indexOf(\"photo\") === 0){\n      id = url.split(\"?\")[0].replace(\"photo\",\"\")\n    }else{\n      console.error(\"[error id] \",url)\n      return undefined\n    }\n  }\n\n  if(localDb.cache[id]){\n    const ab = await fileToArrayBuffer(localDb.cache[id]);\n    mimeType = localDb.cache[id].type;\n    //blob = new Blob([ab], { type: mimeType });\n    fullSize = localDb.cache[id].size\n    data = Buffer.from(ab)\n    flag = true;\n  }\n\n  if(!flag){\n    // const  res = await download(url, client, isConnected, onProgress, start, end, mediaFormat, isHtmlAllowed) || {};\n    // if(!res){\n    //   return undefined\n    // }\n    // data = res.data;\n    // mimeType = res.mimeType;\n    // fullSize = res.fullSize;\n    // if (!data) {\n    //   return undefined;\n    // }\n\n    let downloadReq = new DownloadReq({\n      id,\n    })\n    try {\n      console.log(\"[DOWNLOAD media]\",{url,id})\n      let blob = await cacheApi.fetch(MEDIA_CACHE_NAME_WAI, id, Type.Blob);\n      let downloadRes;\n      let arrayBuffer;\n      if(!blob){\n        let finalBuf = Buffer.alloc(0);\n        while (true){\n          const res = await fetch(`${CLOUD_MESSAGE_API}/proto`,{\n            method: 'POST',\n            body: Buffer.from(downloadReq.pack().getPbData())\n          })\n          arrayBuffer = await res.arrayBuffer();\n          downloadRes = DownloadRes.parseMsg(new Pdu(Buffer.from(arrayBuffer)));\n          if(!downloadRes || downloadRes.err !== ERR.NO_ERROR || !downloadRes.file){\n            return undefined\n          }\n          finalBuf = Buffer.concat([finalBuf,Buffer.from(downloadRes.file.buf)])\n          if(downloadRes.file.part_total && downloadRes.file.part < downloadRes.file.part_total){\n            downloadReq = new DownloadReq({\n              id,\n              part:downloadRes.file.part+1\n            })\n          }else{\n            downloadRes.file!.buf = finalBuf\n            try {\n              const body = new DownloadRes(downloadRes).pack().getPbData()\n              await cacheApi.save(MEDIA_CACHE_NAME_WAI, id, new Blob([Buffer.from(body)]));\n              downloadRes.file.buf = Account.localDecrypt(finalBuf)\n            }catch (e){\n              console.error(e)\n              return undefined\n            }\n            break\n          }\n        }\n      }else{\n        // @ts-ignore\n        const buf = await blobToBuffer(blob)\n        downloadRes = DownloadRes.parseMsg(new Pdu(buf));\n        if(!downloadRes || downloadRes.err !== ERR.NO_ERROR){\n          return undefined\n        }\n        try {\n          downloadRes.file!.buf = Account.localDecrypt(Buffer.from(downloadRes.file!.buf))\n        }catch (e){}\n      }\n      data = Buffer.from(downloadRes.file!.buf);\n      mimeType= downloadRes.file!.type\n      fullSize = downloadRes.file!.size\n    }catch (e){\n      console.error('[DOWNLOAD FAILED]',e,{url,id})\n      return undefined\n    }\n  }\n  const parsed = await parseMedia(data, mediaFormat, mimeType);\n  if (!parsed) {\n    return undefined;\n  }\n  //\n  // const canCache = mediaFormat !== ApiMediaFormat.Progressive && (\n  //   mediaFormat !== ApiMediaFormat.BlobUrl || (parsed as Blob).size <= MEDIA_CACHE_MAX_BYTES\n  // );\n\n  const canCache = mediaFormat !== ApiMediaFormat.Progressive\n  if (!MEDIA_CACHE_DISABLED && cacheApi && canCache) {\n    const cacheName = url.startsWith('avatar') ? MEDIA_CACHE_NAME_AVATARS : MEDIA_CACHE_NAME;\n    void cacheApi.save(cacheName, url, parsed);\n  }\n\n  const dataBlob = mediaFormat === ApiMediaFormat.Progressive ? '' : parsed as string | Blob;\n  const arrayBuffer = mediaFormat === ApiMediaFormat.Progressive ? parsed as ArrayBuffer : undefined;\n\n  return {\n    dataBlob,\n    arrayBuffer,\n    mimeType,\n    fullSize,\n  };\n}\n\nexport type EntityType = (\n  'msg' | 'sticker' | 'wallpaper' | 'gif' | 'channel' | 'chat' | 'user' | 'photo' | 'stickerSet' | 'webDocument' |\n  'document' | 'staticMap' | 'videoAvatar'\n);\n\nasync function download(\n  url: string,\n  client: TelegramClient,\n  isConnected: boolean,\n  onProgress?: ApiOnProgress,\n  start?: number,\n  end?: number,\n  mediaFormat?: ApiMediaFormat,\n  isHtmlAllowed?: boolean,\n) {\n  const parsed = parseMediaUrl(url);\n\n  if (!parsed) return undefined;\n\n  const {\n    entityType, entityId, sizeType, params, mediaMatchType,\n  } = parsed;\n\n  // if (!isConnected) {\n  //   return Promise.reject(new Error('ERROR: Client is not connected'));\n  // }\n\n  if (entityType === 'staticMap') {\n    const accessHash = entityId;\n    const parsedParams = new URLSearchParams(params);\n    const long = parsedParams.get('long');\n    const lat = parsedParams.get('lat');\n    const w = parsedParams.get('w');\n    const h = parsedParams.get('h');\n    const zoom = parsedParams.get('zoom');\n    const scale = parsedParams.get('scale');\n    const accuracyRadius = parsedParams.get('accuracy_radius');\n\n    const data = await client.downloadStaticMap(accessHash, long, lat, w, h, zoom, scale, accuracyRadius);\n    return {\n      mimeType: 'image/png',\n      data,\n    };\n  }\n\n  let entity: (\n    GramJs.User | GramJs.Chat | GramJs.Channel | GramJs.Photo |\n    GramJs.Message | GramJs.MessageService |\n    GramJs.Document | GramJs.StickerSet | GramJs.TypeWebDocument | undefined\n  );\n\n  switch (entityType) {\n    case 'channel':\n    case 'chat':\n      entity = localDb.chats[entityId];\n      break;\n    case 'user':\n      entity = localDb.users[entityId];\n      break;\n    case 'msg':\n      entity = localDb.messages[entityId];\n      break;\n    case 'sticker':\n    case 'gif':\n    case 'wallpaper':\n      entity = localDb.documents[entityId];\n      break;\n    case 'videoAvatar':\n    case 'photo':\n      entity = localDb.photos[entityId];\n      break;\n    case 'stickerSet':\n      entity = localDb.stickerSets[entityId];\n      break;\n    case 'webDocument':\n      entity = localDb.webDocuments[entityId];\n      break;\n    case 'document':\n      entity = localDb.documents[entityId];\n      break;\n  }\n\n  if (!entity) {\n    return undefined;\n  }\n\n  if (MEDIA_ENTITY_TYPES.has(entityType)) {\n    if (mediaFormat === ApiMediaFormat.Stream) {\n      onProgress!.acceptsBuffer = true;\n    }\n\n    const data = await client.downloadMedia(entity, {\n      sizeType, start, end, progressCallback: onProgress, workers: DOWNLOAD_WORKERS,\n    });\n    let mimeType;\n    let fullSize;\n\n    if (entity instanceof GramJs.MessageService && entity.action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n      mimeType = 'image/jpeg';\n    } else if (entity instanceof GramJs.Message) {\n      mimeType = getMessageMediaMimeType(entity, sizeType);\n      if (entity.media instanceof GramJs.MessageMediaDocument && entity.media.document instanceof GramJs.Document) {\n        fullSize = entity.media.document.size.toJSNumber();\n      }\n      if (entity.media instanceof GramJs.MessageMediaWebPage\n        && entity.media.webpage instanceof GramJs.WebPage\n        && entity.media.webpage.document instanceof GramJs.Document) {\n        fullSize = entity.media.webpage.document.size.toJSNumber();\n      }\n    } else if (entity instanceof GramJs.Photo) {\n      if (entityType === 'videoAvatar') {\n        mimeType = 'video/mp4';\n      } else {\n        mimeType = 'image/jpeg';\n      }\n    } else if (entityType === 'sticker' && sizeType) {\n      mimeType = 'image/webp';\n    } else if (entityType === 'webDocument') {\n      mimeType = (entity as GramJs.TypeWebDocument).mimeType;\n      fullSize = (entity as GramJs.TypeWebDocument).size;\n    } else {\n      mimeType = (entity as GramJs.Document).mimeType;\n      fullSize = (entity as GramJs.Document).size.toJSNumber();\n    }\n\n    // Prevent HTML-in-video attacks\n    if (!isHtmlAllowed && mimeType) {\n      mimeType = mimeType.replace(/html/gi, '');\n    }\n\n    return { mimeType, data, fullSize };\n  } else if (entityType === 'stickerSet') {\n    const data = await client.downloadStickerSetThumb(entity);\n    const mimeType = getMimeType(data);\n\n    return { mimeType, data };\n  } else {\n    const data = await client.downloadProfilePhoto(entity, mediaMatchType === 'profile');\n    const mimeType = getMimeType(data);\n\n    return { mimeType, data };\n  }\n}\n\nfunction getMessageMediaMimeType(message: GramJs.Message, sizeType?: string) {\n  if (!message || !message.media) {\n    return undefined;\n  }\n\n  if (message.media instanceof GramJs.MessageMediaPhoto) {\n    return 'image/jpeg';\n  }\n\n  if (message.media instanceof GramJs.MessageMediaGeo\n    || message.media instanceof GramJs.MessageMediaVenue\n    || message.media instanceof GramJs.MessageMediaGeoLive) {\n    return 'image/png';\n  }\n\n  if (message.media instanceof GramJs.MessageMediaDocument && message.media.document instanceof GramJs.Document) {\n    if (sizeType) {\n      return message.media.document!.attributes.some((a) => a instanceof GramJs.DocumentAttributeSticker)\n        ? 'image/webp'\n        : 'image/jpeg';\n    }\n\n    return message.media.document!.mimeType;\n  }\n\n  if (message.media instanceof GramJs.MessageMediaWebPage\n    && message.media.webpage instanceof GramJs.WebPage\n    && message.media.webpage.document instanceof GramJs.Document) {\n    if (sizeType) {\n      return 'image/jpeg';\n    }\n\n    return message.media.webpage.document.mimeType;\n  }\n\n  return undefined;\n}\n\n// eslint-disable-next-line no-async-without-await/no-async-without-await\nasync function parseMedia(\n  data: Buffer, mediaFormat: ApiMediaFormat, mimeType?: string,\n): Promise<ApiParsedMedia | undefined> {\n  switch (mediaFormat) {\n    case ApiMediaFormat.BlobUrl:\n      return new Blob([data], { type: mimeType });\n    case ApiMediaFormat.Text:\n      return data.toString();\n    case ApiMediaFormat.Progressive:\n    case ApiMediaFormat.DownloadUrl:\n      return data.buffer;\n  }\n\n  return undefined;\n}\n\nfunction getMimeType(data: Uint8Array, fallbackMimeType = 'image/jpeg') {\n  if (data.length < 4) {\n    return fallbackMimeType;\n  }\n\n  let type = fallbackMimeType;\n  const signature = data.subarray(0, 4).reduce((result, byte) => result + byte.toString(16), '');\n\n  // https://en.wikipedia.org/wiki/List_of_file_signatures\n  switch (signature) {\n    case '89504e47':\n      type = 'image/png';\n      break;\n    case '47494638':\n      type = 'image/gif';\n      break;\n    case 'ffd8ffe0':\n    case 'ffd8ffe1':\n    case 'ffd8ffe2':\n    case 'ffd8ffe3':\n    case 'ffd8ffe8':\n      type = 'image/jpeg';\n      break;\n    case '52494646':\n      // In our case only webp is expected\n      type = 'image/webp';\n      break;\n  }\n\n  return type;\n}\n\nexport function parseMediaUrl(url: string) {\n  const mediaMatch = url.startsWith('staticMap')\n    ? url.match(/(staticMap):([0-9-]+)(\\?.+)/)\n    : url.startsWith('webDocument')\n      ? url.match(/(webDocument):(.+)/)\n      : url.match(\n        // eslint-disable-next-line max-len\n        /(avatar|profile|photo|msg|stickerSet|sticker|wallpaper|gif|document|videoAvatar)([-\\d\\w./]+)(?::\\d+)?(\\?size=\\w+)?/,\n      );\n  if (!mediaMatch) {\n    return undefined;\n  }\n\n  const mediaMatchType = mediaMatch[1];\n  const entityId: string | number = mediaMatch[2];\n\n  let entityType: EntityType;\n  const params = mediaMatch[3];\n  const sizeType = params?.replace('?size=', '') || undefined;\n\n  if (mediaMatch[1] === 'avatar' || mediaMatch[1] === 'profile') {\n    entityType = getEntityTypeById(entityId);\n  } else {\n    entityType = mediaMatch[1] as EntityType;\n  }\n\n  return {\n    mediaMatchType,\n    entityType,\n    entityId,\n    sizeType,\n    params,\n  };\n}\n","import {Api as GramJs, connection, TelegramClient,} from '../../../lib/gramjs';\n\nimport {Logger as GramJsLogger} from '../../../lib/gramjs/extensions/index';\nimport type {TwoFaParams} from '../../../lib/gramjs/client/2fa';\n\nimport type {\n  AccountSession,\n  ApiInitialArgs,\n  ApiMediaFormat,\n  ApiOnProgress,\n  ApiSessionData,\n  OnApiUpdate,\n} from '../../types';\n\nimport {APP_VERSION, CLOUD_MESSAGE_API, DEBUG, DEBUG_GRAMJS, UPLOAD_WORKERS,} from '../../../config';\nimport {onCurrentUserUpdate,} from './auth';\nimport {updater} from '../updater';\nimport {setMessageBuilderCurrentUserId} from '../apiBuilders/messages';\nimport downloadMediaWithClient, {parseMediaUrl} from './media';\nimport {buildApiUserFromFull} from '../apiBuilders/users';\nimport localDb, {clearLocalDb} from '../localDb';\nimport {buildApiPeerId} from '../apiBuilders/peers';\nimport {addMessageToLocalDb, log} from '../helpers';\nimport {Pdu} from \"../../../lib/ptp/protobuf/BaseMsg\";\nimport Account from \"../../../worker/share/Account\";\nimport LocalDatabase from \"../../../worker/share/db/LocalDatabase\";\nimport {ActionCommands, getActionCommandsName} from \"../../../lib/ptp/protobuf/ActionCommands\";\nimport {CurrentUserInfo} from \"../../../worker/setting\";\nimport MsgWorker from \"../../../worker/msg/MsgWorker\";\nimport {AuthNativeReq} from \"../../../lib/ptp/protobuf/PTPAuth\";\nimport {ControllerPool} from \"../../../lib/ptp/functions/requests\";\nimport {StopChatStreamReq} from \"../../../lib/ptp/protobuf/PTPOther\";\n\nconst DEFAULT_USER_AGENT = 'Unknown UserAgent';\nconst DEFAULT_PLATFORM = 'Unknown platform';\nconst APP_CODE_NAME = 'Z';\n\nGramJsLogger.setLevel(DEBUG_GRAMJS ? 'debug' : 'warn');\n\nlet onUpdate: OnApiUpdate;\nlet client: TelegramClient;\nexport let account: Account;\nlet isConnected = false;\nlet currentUserId: string | undefined;\n\nexport async function init(_onUpdate: OnApiUpdate, initialArgs: ApiInitialArgs) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START INIT API');\n  }\n  onUpdate = _onUpdate;\n  const {\n    userAgent, platform, sessionData, isTest, isMovSupported, isWebmSupported, maxBufferSize, webAuthToken, dcId,\n    mockScenario,accountId,entropy,session\n  } = initialArgs;\n  await handleAuthNative(accountId,entropy,session);\n  if(DEBUG){\n    console.log(\"[initialArgs]\",{\n      deviceModel: navigator.userAgent || userAgent || DEFAULT_USER_AGENT,\n      systemVersion: platform || DEFAULT_PLATFORM,\n      appVersion: `${APP_VERSION} ${APP_CODE_NAME}`,\n      useWSS: true,\n    })\n  }\n  try {\n    if (DEBUG) {\n      log('CONNECTING');\n      // eslint-disable-next-line no-restricted-globals\n      (self as any).invoke = invokeRequest;\n    }\n\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.log('>>> FINISH INIT API');\n      log('CONNECTED');\n    }\n\n    onUpdate({ '@type': 'updateApiReady' });\n\n    onUpdate({\n      '@type': 'updateAuthorizationState',\n      authorizationState: \"authorizationStateReady\",\n    });\n    // @ts-ignore\n    onUpdate({'@type': 'updateCurrentUser',currentUser: CurrentUserInfo});\n\n    onUpdate({\n      '@type': 'updateMsgClientState',\n      msgClientState:\"connectionStateLogged\",\n    });\n    onUpdate({\n      '@type': 'updateConnectionState',\n      connectionState:\"connectionStateReady\",\n    });\n    // void fetchCurrentUser();\n  } catch (err) {\n    if (DEBUG) {\n      log('CONNECTING ERROR', err);\n    }\n    throw err;\n  }\n}\n\nexport function setIsPremium({ isPremium }: { isPremium: boolean }) {\n  // client.setIsPremium(isPremium);\n}\n\nexport async function destroy(noLogOut = false, noClearLocalDb = false) {\n  // if (!noLogOut) {\n  //   await invokeRequest(new GramJs.auth.LogOut());\n  // }\n  if (!noClearLocalDb) clearLocalDb();\n\n  await client.destroy();\n}\n\nexport async function disconnect() {\n  await client.disconnect();\n}\n\nexport function getClient() {\n  return client;\n\n}\n\nfunction onSessionUpdate(sessionData: ApiSessionData) {\n  onUpdate({\n    '@type': 'updateSession',\n    sessionData,\n  });\n}\n\nfunction handleGramJsUpdate(update: any) {\n  if (update instanceof connection.UpdateConnectionState) {\n    isConnected = update.state === connection.UpdateConnectionState.connected;\n  } else if (update instanceof GramJs.UpdatesTooLong) {\n    void handleTerminatedSession();\n  } else if (update instanceof GramJs.UpdateConfig) {\n    // eslint-disable-next-line no-underscore-dangle\n    const currentUser = (update as GramJs.UpdateConfig & { _entities?: (GramJs.TypeUser | GramJs.TypeChat)[] })\n      ._entities\n      ?.find((entity) => entity instanceof GramJs.User && buildApiPeerId(entity.id, 'user') === currentUserId);\n    if (!(currentUser instanceof GramJs.User)) return;\n\n    setIsPremium({ isPremium: Boolean(currentUser.premium) });\n  }\n}\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  shouldReturnTrue: true,\n  shouldThrow?: boolean,\n  shouldIgnoreUpdates?: undefined,\n  dcId?: number,\n  shouldIgnoreErrors?: boolean,\n): Promise<true | undefined>;\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  shouldReturnTrue?: boolean,\n  shouldThrow?: boolean,\n  shouldIgnoreUpdates?: boolean,\n  dcId?: number,\n  shouldIgnoreErrors?: boolean,\n): Promise<T['__response'] | undefined>;\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  shouldReturnTrue = false,\n  shouldThrow = false,\n  shouldIgnoreUpdates = false,\n  dcId?: number,\n  shouldIgnoreErrors = false,\n) {\n  if (!isConnected) {\n    if (DEBUG) {\n      log('INVOKE ERROR', request.className, 'Client is not connected');\n    }\n\n    return undefined;\n  }\n\n  try {\n    if (DEBUG) {\n      log('INVOKE', request.className);\n    }\n\n    const result = await client.invoke(request, dcId);\n\n    if (DEBUG) {\n      log('RESPONSE', request.className, result);\n    }\n\n    if (!shouldIgnoreUpdates) {\n      handleUpdatesFromRequest(request, result);\n    }\n\n    return shouldReturnTrue ? result && true : result;\n  } catch (err: any) {\n    if (shouldIgnoreErrors) return undefined;\n    if (DEBUG) {\n      log('INVOKE ERROR', request.className);\n      // eslint-disable-next-line no-console\n      console.debug('invokeRequest failed with payload', request);\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n\n    if (shouldThrow) {\n      throw err;\n    }\n\n    dispatchErrorUpdate(err, request);\n\n    return undefined;\n  }\n}\n\nfunction handleUpdatesFromRequest<T extends GramJs.AnyRequest>(request: T, result: T['__response']) {\n  let manyUpdates;\n  let singleUpdate;\n\n  if (result instanceof GramJs.UpdatesCombined || result instanceof GramJs.Updates) {\n    manyUpdates = result;\n  } else if (typeof result === 'object' && 'updates' in result && (\n    result.updates instanceof GramJs.Updates || result.updates instanceof GramJs.UpdatesCombined\n  )) {\n    manyUpdates = result.updates;\n  } else if (\n    result instanceof GramJs.UpdateShortMessage\n    || result instanceof GramJs.UpdateShortChatMessage\n    || result instanceof GramJs.UpdateShort\n    || result instanceof GramJs.UpdateShortSentMessage\n  ) {\n    singleUpdate = result;\n  }\n\n  if (manyUpdates) {\n    injectUpdateEntities(manyUpdates);\n\n    manyUpdates.updates.forEach((update) => {\n      updater(update, request);\n    });\n  } else if (singleUpdate) {\n    updater(singleUpdate, request);\n  }\n}\n\nexport async function downloadMedia(\n  args: { url: string; mediaFormat: ApiMediaFormat; start?: number; end?: number; isHtmlAllowed?: boolean },\n  onProgress?: ApiOnProgress,\n) {\n  try {\n    return (await downloadMediaWithClient(args, client, isConnected, onProgress));\n  } catch (err: any) {\n    if (err.message.startsWith('FILE_REFERENCE')) {\n      const isFileReferenceRepaired = await repairFileReference({ url: args.url });\n      if (isFileReferenceRepaired) {\n        return downloadMediaWithClient(args, client, isConnected, onProgress);\n      }\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('Failed to repair file reference', args.url);\n      }\n    }\n\n    throw err;\n  }\n}\n\nexport function uploadFile(file: File, onProgress?: ApiOnProgress) {\n  return client.uploadFile({ file, onProgress, workers: UPLOAD_WORKERS });\n}\n\nexport function updateTwoFaSettings(params: TwoFaParams) {\n  return client.updateTwoFaSettings(params);\n}\n\nexport function getTmpPassword(currentPassword: string, ttl?: number) {\n  return client.getTmpPassword(currentPassword, ttl);\n}\n\nexport async function fetchCurrentUser() {\n  const userFull = await invokeRequest(new GramJs.users.GetFullUser({\n    id: new GramJs.InputUserSelf(),\n  }));\n\n  if (!userFull || !(userFull.users[0] instanceof GramJs.User)) {\n    return;\n  }\n\n  const user = userFull.users[0];\n\n  if (user.photo instanceof GramJs.Photo) {\n    localDb.photos[user.photo.id.toString()] = user.photo;\n  }\n  localDb.users[buildApiPeerId(user.id, 'user')] = user;\n  const currentUser = buildApiUserFromFull(userFull);\n\n  setMessageBuilderCurrentUserId(currentUser.id);\n  onCurrentUserUpdate(currentUser);\n\n  currentUserId = currentUser.id;\n  setIsPremium({ isPremium: Boolean(currentUser.isPremium) });\n}\n\nexport function dispatchErrorUpdate<T extends GramJs.AnyRequest>(err: Error, request: T) {\n  const isSlowMode = err.message.startsWith('A wait of') && (\n    request instanceof GramJs.messages.SendMessage\n    || request instanceof GramJs.messages.SendMedia\n    || request instanceof GramJs.messages.SendMultiMedia\n  );\n\n  const { message } = err;\n\n  onUpdate({\n    '@type': 'error',\n    error: {\n      message,\n      isSlowMode,\n      hasErrorKey: true,\n    },\n  });\n}\n\nfunction injectUpdateEntities(result: GramJs.Updates | GramJs.UpdatesCombined) {\n  const entities = [...result.users, ...result.chats];\n\n  result.updates.forEach((update) => {\n    if (entities) {\n      // eslint-disable-next-line no-underscore-dangle\n      (update as any)._entities = entities;\n    }\n  });\n}\n\nasync function handleTerminatedSession() {\n  try {\n    await invokeRequest(new GramJs.users.GetFullUser({\n      id: new GramJs.InputUserSelf(),\n    }), undefined, true);\n  } catch (err: any) {\n    if (err.message === 'AUTH_KEY_UNREGISTERED') {\n      onUpdate({\n        '@type': 'updateConnectionState',\n        connectionState: 'connectionStateBroken',\n      });\n    }\n  }\n}\n\nexport async function repairFileReference({\n  url,\n}: {\n  url: string;\n}) {\n  const parsed = parseMediaUrl(url);\n\n  if (!parsed) return undefined;\n\n  const {\n    entityType, entityId, mediaMatchType,\n  } = parsed;\n\n  if (mediaMatchType === 'file') {\n    return false;\n  }\n\n  if (entityType === 'msg') {\n    const entity = localDb.messages[entityId]!;\n    const messageId = entity.id;\n\n    const peer = 'channelId' in entity.peerId ? new GramJs.InputChannel({\n      channelId: entity.peerId.channelId,\n      accessHash: (localDb.chats[buildApiPeerId(entity.peerId.channelId, 'channel')] as GramJs.Channel).accessHash!,\n    }) : undefined;\n    const result = await invokeRequest(\n      peer\n        ? new GramJs.channels.GetMessages({\n          channel: peer,\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        })\n        : new GramJs.messages.GetMessages({\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        }),\n    );\n\n    if (!result || result instanceof GramJs.messages.MessagesNotModified) return false;\n\n    const message = result.messages[0];\n    if (message instanceof GramJs.MessageEmpty) return false;\n    addMessageToLocalDb(message);\n    return true;\n  }\n  return false;\n}\n\nconst handleAuthNative = async (accountId:number,entropy:string,session?:string)=>{\n  const kv = new LocalDatabase();\n  kv.init(localDb);\n  Account.setClientKv(kv)\n  account = Account.getInstance(accountId);\n  await account.setEntropy(entropy)\n  Account.setCurrentAccountId(accountId)\n  if(session){\n    account.saveSession(session)\n  }else{\n    account.delSession()\n  }\n}\n\nconst handleStopChatStreamReq = async (pdu:Pdu)=>{\n  const {msgId,chatId} = StopChatStreamReq.parseMsg(pdu)\n  ControllerPool.stop(chatId,msgId)\n}\nconst handleAuthNativeReq = async (pdu:Pdu)=>{\n  const {accountId,entropy,session} = AuthNativeReq.parseMsg(pdu)\n  await handleAuthNative(accountId,entropy,session);\n}\n\nexport async function sendWithCallback(buff:Uint8Array){\n\n  let pdu = new Pdu(Buffer.from(buff))\n  if(DEBUG){\n    console.log(pdu.getCommandId(),getActionCommandsName(pdu.getCommandId()))\n  }\n  switch (pdu.getCommandId()) {\n    case ActionCommands.CID_StopChatStreamReq:\n      return await handleStopChatStreamReq(pdu);\n    case ActionCommands.CID_AuthNativeReq:\n      return await handleAuthNativeReq(pdu);\n    case ActionCommands.CID_GenMsgIdReq:\n      return await MsgWorker.genMsgId(pdu);\n    case ActionCommands.CID_UploadMsgReq:\n      pdu = await MsgWorker.beforeUploadMsgReq(pdu);\n      break\n    case ActionCommands.CID_UploadUserReq:\n      pdu = await MsgWorker.beforeUploadUserReq(pdu);\n      break\n  }\n  if(!account.getSession()){\n    return\n  }\n\n  const res = await fetch(`${CLOUD_MESSAGE_API}/proto`, {\n    method: \"POST\",\n    body: Buffer.from(pdu.getPbData()),\n    headers:{\n      Authorization: `Bearer ${account.getSession()}`,\n    }\n  });\n  if(!res || res.status !== 200){\n    return;\n  }\n  const arrayBuffer = await res.arrayBuffer();\n  let buf = Buffer.from(arrayBuffer);\n  const pduRes = new Pdu(buf)\n  switch (pduRes.getCommandId()) {\n    case ActionCommands.CID_DownloadMsgRes:\n      buf = await MsgWorker.afterDownloadMsgReq(pduRes)\n      break\n    case ActionCommands.CID_DownloadUserRes:\n      buf = await MsgWorker.afterDownloadUserReq(pduRes)\n      break\n  }\n  return buf;\n}\n\n","import type { GroupCallConnectionData } from '../../lib/secret-sauce';\nimport { Api as GramJs, connection } from '../../lib/gramjs';\nimport type {\n  ApiMessage, ApiMessageExtendedMediaPreview, ApiUpdateConnectionStateType, OnApiUpdate,\n} from '../types';\n\nimport { DEBUG, GENERAL_TOPIC_ID } from '../../config';\nimport { omit, pick } from '../../util/iteratees';\nimport { getServerTimeOffset, setServerTimeOffset } from '../../util/serverTime';\nimport {\n  buildApiMessage,\n  buildApiMessageFromShort,\n  buildApiMessageFromShortChat,\n  buildMessageMediaContent,\n  buildMessageTextContent,\n  buildPoll,\n  buildPollResults,\n  buildApiMessageFromNotification,\n  buildMessageDraft,\n  buildMessageReactions,\n  buildApiMessageExtendedMediaPreview,\n} from './apiBuilders/messages';\nimport {\n  buildChatMember,\n  buildChatMembers,\n  buildChatTypingStatus,\n  buildAvatarHash,\n  buildApiChatFromPreview,\n  buildApiChatFolder,\n  buildApiChatSettings,\n} from './apiBuilders/chats';\nimport {\n  buildApiUser,\n  buildApiUserEmojiStatus,\n  buildApiUserStatus,\n} from './apiBuilders/users';\nimport {\n  buildMessageFromUpdate,\n  isMessageWithMedia,\n  buildChatPhotoForLocalDb,\n} from './gramjsBuilders';\nimport localDb from './localDb';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\nimport {\n  addMessageToLocalDb,\n  addEntitiesWithPhotosToLocalDb,\n  addPhotoToLocalDb,\n  resolveMessageApiChatId,\n  serializeBytes,\n  log,\n  swapLocalInvoiceMedia,\n} from './helpers';\nimport {\n  buildApiNotifyException,\n  buildApiNotifyExceptionTopic,\n  buildPrivacyKey,\n  buildPrivacyRules,\n} from './apiBuilders/misc';\nimport { buildApiPhoto, buildApiUsernames } from './apiBuilders/common';\nimport {\n  buildApiGroupCall,\n  buildApiGroupCallParticipant,\n  buildPhoneCall,\n  getGroupCallId,\n} from './apiBuilders/calls';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './apiBuilders/peers';\nimport { buildApiEmojiInteraction, buildStickerSet } from './apiBuilders/symbols';\nimport { buildApiBotMenuButton } from './apiBuilders/bots';\n\ntype Update = (\n  (GramJs.TypeUpdate | GramJs.TypeUpdates) & { _entities?: (GramJs.TypeUser | GramJs.TypeChat)[] }\n) | typeof connection.UpdateConnectionState;\n\nconst DELETE_MISSING_CHANNEL_MESSAGE_DELAY = 1000;\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nconst sentMessageIds = new Set();\n\nfunction dispatchUserAndChatUpdates(entities: (GramJs.TypeUser | GramJs.TypeChat)[]) {\n  entities\n    .filter((e) => e instanceof GramJs.User)\n    .map(buildApiUser)\n    .forEach((user) => {\n      if (!user) {\n        return;\n      }\n\n      onUpdate({\n        '@type': 'updateUser',\n        id: user.id,\n        user,\n      });\n    });\n\n  entities\n    .filter((e) => (\n      e instanceof GramJs.Chat || e instanceof GramJs.ChatForbidden\n      || e instanceof GramJs.Channel || e instanceof GramJs.ChannelForbidden\n    ))\n    .map((e) => buildApiChatFromPreview(e))\n    .forEach((chat) => {\n      if (!chat) {\n        return;\n      }\n\n      onUpdate({\n        '@type': 'updateChat',\n        id: chat.id,\n        chat,\n      });\n    });\n}\n\nexport function updater(update: Update, originRequest?: GramJs.AnyRequest) {\n  if (update instanceof connection.UpdateServerTimeOffset) {\n    setServerTimeOffset(update.timeOffset);\n\n    onUpdate({\n      '@type': 'updateServerTimeOffset',\n      serverTimeOffset: update.timeOffset,\n    });\n  } else if (update instanceof connection.UpdateConnectionState) {\n    let connectionState: ApiUpdateConnectionStateType;\n\n    switch (update.state) {\n      case connection.UpdateConnectionState.disconnected:\n        connectionState = 'connectionStateConnecting';\n        break;\n      case connection.UpdateConnectionState.broken:\n        connectionState = 'connectionStateBroken';\n        break;\n      case connection.UpdateConnectionState.connected:\n      default:\n        connectionState = 'connectionStateReady';\n        break;\n    }\n\n    onUpdate({\n      '@type': 'updateConnectionState',\n      connectionState,\n    });\n\n    // Messages\n  } else if (\n    update instanceof GramJs.UpdateNewMessage\n    || update instanceof GramJs.UpdateNewScheduledMessage\n    || update instanceof GramJs.UpdateNewChannelMessage\n    || update instanceof GramJs.UpdateShortChatMessage\n    || update instanceof GramJs.UpdateShortMessage\n  ) {\n    let message: ApiMessage | undefined;\n    let shouldForceReply: boolean | undefined;\n\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    if (update instanceof GramJs.UpdateShortChatMessage) {\n      message = buildApiMessageFromShortChat(update);\n    } else if (update instanceof GramJs.UpdateShortMessage) {\n      message = buildApiMessageFromShort(update);\n    } else {\n      // TODO Remove if proven not reproducing\n      if (update.message instanceof GramJs.MessageEmpty) {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error('Unexpected update:', update.className, update);\n        }\n\n        return;\n      }\n\n      if ((update.message instanceof GramJs.Message && isMessageWithMedia(update.message))\n      || (update.message instanceof GramJs.MessageService\n          && update.message.action instanceof GramJs.MessageActionSuggestProfilePhoto)\n      ) {\n        addMessageToLocalDb(update.message);\n      }\n\n      message = buildApiMessage(update.message)!;\n      shouldForceReply = 'replyMarkup' in update.message\n        && update.message?.replyMarkup instanceof GramJs.ReplyKeyboardForceReply\n        && (!update.message.replyMarkup.selective || message.isMentioned);\n    }\n\n    if (update instanceof GramJs.UpdateNewScheduledMessage) {\n      onUpdate({\n        '@type': sentMessageIds.has(message.id) ? 'updateScheduledMessage' : 'newScheduledMessage',\n        id: message.id,\n        chatId: message.chatId,\n        message,\n      });\n    } else {\n      onUpdate({\n        '@type': sentMessageIds.has(message.id) ? 'updateMessage' : 'newMessage',\n        id: message.id,\n        chatId: message.chatId,\n        message,\n        shouldForceReply,\n      });\n    }\n\n    // Some updates to a Chat/Channel don't have a dedicated update class.\n    // We can get info on some updates from Service Messages.\n    if (update.message instanceof GramJs.MessageService) {\n      const { action } = update.message;\n\n      if (action instanceof GramJs.MessageActionPaymentSent) {\n        onUpdate({\n          '@type': 'updatePaymentStateCompleted',\n          slug: action.invoiceSlug,\n        });\n      } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n        onUpdate({\n          '@type': 'updateChat',\n          id: message.chatId,\n          chat: {\n            title: action.title,\n          },\n        });\n      } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n        const photo = buildChatPhotoForLocalDb(action.photo);\n        const avatarHash = buildAvatarHash(photo);\n\n        const localDbChatId = resolveMessageApiChatId(update.message)!;\n        if (localDb.chats[localDbChatId]) {\n          localDb.chats[localDbChatId].photo = photo;\n        }\n        addPhotoToLocalDb(action.photo);\n\n        if (avatarHash) {\n          onUpdate({\n            '@type': 'updateChat',\n            id: message.chatId,\n            chat: {\n              avatarHash,\n            },\n            ...(action.photo instanceof GramJs.Photo && { newProfilePhoto: buildApiPhoto(action.photo) }),\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n        const localDbChatId = resolveMessageApiChatId(update.message)!;\n        if (localDb.chats[localDbChatId]) {\n          localDb.chats[localDbChatId].photo = new GramJs.ChatPhotoEmpty();\n        }\n\n        onUpdate({\n          '@type': 'updateChat',\n          id: message.chatId,\n          chat: { avatarHash: undefined },\n        });\n      } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n        // eslint-disable-next-line no-underscore-dangle\n        if (update._entities && update._entities.some((e): e is GramJs.User => (\n          e instanceof GramJs.User && Boolean(e.self) && e.id === action.userId\n        ))) {\n          onUpdate({\n            '@type': 'updateChat',\n            id: message.chatId,\n            chat: {\n              isForbidden: true,\n              isNotJoined: true,\n            },\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionChatAddUser) {\n        // eslint-disable-next-line no-underscore-dangle\n        if (update._entities && update._entities.some((e): e is GramJs.User => (\n          e instanceof GramJs.User && Boolean(e.self) && action.users.includes(e.id)\n        ))) {\n          onUpdate({\n            '@type': 'updateChatJoin',\n            id: message.chatId,\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionGroupCall) {\n        if (!action.duration && action.call) {\n          onUpdate({\n            '@type': 'updateGroupCallChatId',\n            chatId: message.chatId,\n            call: {\n              id: action.call.id.toString(),\n              accessHash: action.call.accessHash.toString(),\n            },\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionTopicEdit) {\n        const { replyTo } = update.message;\n        const {\n          replyToMsgId, replyToTopId, forumTopic: isTopicReply,\n        } = replyTo || {};\n        const topicId = !isTopicReply ? GENERAL_TOPIC_ID : replyToTopId || replyToMsgId || GENERAL_TOPIC_ID;\n\n        onUpdate({\n          '@type': 'updateTopic',\n          chatId: getApiChatIdFromMtpPeer(update.message.peerId!),\n          topicId,\n        });\n      } else if (action instanceof GramJs.MessageActionTopicCreate) {\n        onUpdate({\n          '@type': 'updateTopics',\n          chatId: getApiChatIdFromMtpPeer(update.message.peerId!),\n        });\n      }\n    }\n  } else if (\n    update instanceof GramJs.UpdateEditMessage\n    || update instanceof GramJs.UpdateEditChannelMessage\n  ) {\n    // TODO Remove if proven not reproducing\n    if (update.message instanceof GramJs.MessageEmpty) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('Unexpected update:', update.className, update);\n      }\n\n      return;\n    }\n\n    if (update.message instanceof GramJs.Message && isMessageWithMedia(update.message)) {\n      addMessageToLocalDb(update.message);\n    }\n\n    // Workaround for a weird server behavior when own message is marked as incoming\n    const message = omit(buildApiMessage(update.message)!, ['isOutgoing']);\n\n    onUpdate({\n      '@type': 'updateMessage',\n      id: message.id,\n      chatId: message.chatId,\n      message,\n    });\n  } else if (update instanceof GramJs.UpdateMessageReactions) {\n    onUpdate({\n      '@type': 'updateMessageReactions',\n      id: update.msgId,\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      reactions: buildMessageReactions(update.reactions),\n    });\n  } else if (update instanceof GramJs.UpdateMessageExtendedMedia) {\n    let media: ApiMessage['content'] | undefined;\n    if (update.extendedMedia instanceof GramJs.MessageExtendedMedia) {\n      media = buildMessageMediaContent(update.extendedMedia.media);\n    }\n\n    let preview: ApiMessageExtendedMediaPreview | undefined;\n    if (update.extendedMedia instanceof GramJs.MessageExtendedMediaPreview) {\n      preview = buildApiMessageExtendedMediaPreview(update.extendedMedia);\n    }\n\n    if (!media && !preview) return;\n\n    const chatId = getApiChatIdFromMtpPeer(update.peer);\n\n    swapLocalInvoiceMedia(chatId, update.msgId, update.extendedMedia);\n\n    onUpdate({\n      '@type': 'updateMessageExtendedMedia',\n      id: update.msgId,\n      chatId,\n      media,\n      preview,\n    });\n  } else if (update instanceof GramJs.UpdateDeleteMessages) {\n    onUpdate({\n      '@type': 'deleteMessages',\n      ids: update.messages,\n    });\n  } else if (update instanceof GramJs.UpdateDeleteScheduledMessages) {\n    onUpdate({\n      '@type': 'deleteScheduledMessages',\n      ids: update.messages,\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n    });\n  } else if (update instanceof GramJs.UpdateDeleteChannelMessages) {\n    const chatId = buildApiPeerId(update.channelId, 'channel');\n    const ids = update.messages;\n    const existingIds = ids.filter((id) => localDb.messages[`${chatId}-${id}`]);\n    const missingIds = ids.filter((id) => !localDb.messages[`${chatId}-${id}`]);\n    const profilePhotoIds = ids.map((id) => {\n      const message = localDb.messages[`${chatId}-${id}`];\n\n      return message && message instanceof GramJs.MessageService && 'photo' in message.action\n        ? String(message.action.photo.id)\n        : undefined;\n    }).filter(Boolean);\n\n    if (existingIds.length) {\n      onUpdate({\n        '@type': 'deleteMessages',\n        ids: existingIds,\n        chatId,\n      });\n    }\n\n    if (profilePhotoIds.length) {\n      onUpdate({\n        '@type': 'deleteProfilePhotos',\n        ids: profilePhotoIds,\n        chatId,\n      });\n    }\n\n    // For some reason delete message update sometimes comes before new message update\n    if (missingIds.length) {\n      setTimeout(() => {\n        onUpdate({\n          '@type': 'deleteMessages',\n          ids: missingIds,\n          chatId,\n        });\n      }, DELETE_MISSING_CHANNEL_MESSAGE_DELAY);\n    }\n  } else if (update instanceof GramJs.UpdateServiceNotification) {\n    if (update.popup) {\n      onUpdate({\n        '@type': 'error',\n        error: {\n          message: update.message,\n        },\n      });\n    } else {\n      const currentDate = Date.now() / 1000 + getServerTimeOffset();\n      const message = buildApiMessageFromNotification(update, currentDate);\n\n      if (isMessageWithMedia(update)) {\n        addMessageToLocalDb(buildMessageFromUpdate(message.id, message.chatId, update));\n      }\n\n      onUpdate({\n        '@type': 'updateServiceNotification',\n        message,\n      });\n    }\n  } else if ((\n    originRequest instanceof GramJs.messages.SendMessage\n    || originRequest instanceof GramJs.messages.SendMedia\n    || originRequest instanceof GramJs.messages.SendMultiMedia\n    || originRequest instanceof GramJs.messages.ForwardMessages\n  ) && (\n    update instanceof GramJs.UpdateMessageID || update instanceof GramJs.UpdateShortSentMessage\n  )) {\n    let randomId;\n    if ('randomId' in update) {\n      randomId = update.randomId;\n    } else if ('randomId' in originRequest) {\n      randomId = originRequest.randomId;\n    }\n\n    const localMessage = randomId && localDb.localMessages[String(randomId)];\n    if (!localMessage) {\n      throw new Error('Local message not found');\n    }\n\n    let newContent: ApiMessage['content'] | undefined;\n    if (update instanceof GramJs.UpdateShortSentMessage) {\n      if (localMessage.content.text && update.entities) {\n        newContent = {\n          text: buildMessageTextContent(localMessage.content.text.text, update.entities),\n        };\n      }\n      if (update.media) {\n        newContent = {\n          ...newContent,\n          ...buildMessageMediaContent(update.media),\n        };\n      }\n\n      const mtpMessage = buildMessageFromUpdate(update.id, localMessage.chatId, update);\n      if (isMessageWithMedia(mtpMessage)) {\n        addMessageToLocalDb(mtpMessage);\n      }\n    }\n\n    sentMessageIds.add(update.id);\n\n    // Edge case for \"Send When Online\"\n    const isAlreadySent = 'date' in update && update.date * 1000 < Date.now() + getServerTimeOffset() * 1000;\n\n    onUpdate({\n      '@type': localMessage.isScheduled && !isAlreadySent\n        ? 'updateScheduledMessageSendSucceeded'\n        : 'updateMessageSendSucceeded',\n      chatId: localMessage.chatId,\n      localId: localMessage.id,\n      message: {\n        ...localMessage,\n        ...(newContent && {\n          content: {\n            ...localMessage.content,\n            ...newContent,\n          },\n        }),\n        id: update.id,\n        sendingState: undefined,\n        ...('date' in update && { date: update.date }),\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadMessagesContents) {\n    onUpdate({\n      '@type': 'updateCommonBoxMessages',\n      ids: update.messages,\n      messageUpdate: {\n        hasUnreadMention: false,\n        isMediaUnread: false,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateChannelReadMessagesContents) {\n    onUpdate({\n      '@type': 'updateChannelMessages',\n      channelId: buildApiPeerId(update.channelId, 'channel'),\n      ids: update.messages,\n      messageUpdate: {\n        hasUnreadMention: false,\n        isMediaUnread: false,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateMessagePoll) {\n    const { pollId, poll, results } = update;\n    if (poll) {\n      const apiPoll = buildPoll(poll, results);\n\n      onUpdate({\n        '@type': 'updateMessagePoll',\n        pollId: String(pollId),\n        pollUpdate: apiPoll,\n      });\n    } else {\n      const pollResults = buildPollResults(results);\n      onUpdate({\n        '@type': 'updateMessagePoll',\n        pollId: String(pollId),\n        pollUpdate: { results: pollResults },\n      });\n    }\n  } else if (update instanceof GramJs.UpdateMessagePollVote) {\n    onUpdate({\n      '@type': 'updateMessagePollVote',\n      pollId: String(update.pollId),\n      userId: buildApiPeerId(update.userId, 'user'),\n      options: update.options.map(serializeBytes),\n    });\n  } else if (update instanceof GramJs.UpdateChannelMessageViews) {\n    onUpdate({\n      '@type': 'updateMessage',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      id: update.id,\n      message: { views: update.views },\n    });\n\n    // Chats\n  } else if (update instanceof GramJs.UpdateReadHistoryInbox) {\n    onUpdate({\n      '@type': 'updateChatInbox',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        lastReadInboxMessageId: update.maxId,\n        unreadCount: update.stillUnreadCount,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadHistoryOutbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        lastReadOutboxMessageId: update.maxId,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelInbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadInboxMessageId: update.maxId,\n        unreadCount: update.stillUnreadCount,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelOutbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadOutboxMessageId: update.maxId,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelDiscussionInbox) {\n    onUpdate({\n      '@type': 'updateThreadInfo',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      threadId: update.topMsgId,\n      threadInfo: {\n        lastReadInboxMessageId: update.readMaxId,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelDiscussionOutbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadOutboxMessageId: update.readMaxId,\n      },\n    });\n  } else if (\n    update instanceof GramJs.UpdateDialogPinned\n    && update.peer instanceof GramJs.DialogPeer\n  ) {\n    onUpdate({\n      '@type': 'updateChatPinned',\n      id: getApiChatIdFromMtpPeer(update.peer.peer),\n      isPinned: update.pinned || false,\n    });\n  } else if (update instanceof GramJs.UpdatePinnedDialogs) {\n    const ids = update.order\n      ? update.order\n        .filter((dp): dp is GramJs.DialogPeer => dp instanceof GramJs.DialogPeer)\n        .map((dp) => getApiChatIdFromMtpPeer(dp.peer))\n      : [];\n\n    onUpdate({\n      '@type': 'updatePinnedChatIds',\n      ids,\n      folderId: update.folderId || undefined,\n    });\n  } else if (update instanceof GramJs.UpdateFolderPeers) {\n    update.folderPeers.forEach((folderPeer) => {\n      const { folderId, peer } = folderPeer;\n\n      onUpdate({\n        '@type': 'updateChatListType',\n        id: getApiChatIdFromMtpPeer(peer),\n        folderId,\n      });\n    });\n  } else if (update instanceof GramJs.UpdateDialogFilter) {\n    const { id, filter } = update;\n    const folder = filter instanceof GramJs.DialogFilter ? buildApiChatFolder(filter) : undefined;\n\n    onUpdate({\n      '@type': 'updateChatFolder',\n      id,\n      folder,\n    });\n  } else if (update instanceof GramJs.UpdateDialogFilterOrder) {\n    onUpdate({\n      '@type': 'updateChatFoldersOrder',\n      orderedIds: update.order,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipants) {\n    const replacedMembers = buildChatMembers(update.participants);\n\n    onUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.participants.chatId, 'chat'),\n      replacedMembers,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipantAdd) {\n    const addedMember = buildChatMember(\n      pick(update, ['userId', 'inviterId', 'date']) as GramJs.ChatParticipant,\n    );\n\n    onUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.chatId, 'chat'),\n      addedMember,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipantDelete) {\n    onUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.chatId, 'chat'),\n      deletedMemberId: buildApiPeerId(update.userId, 'user'),\n    });\n  } else if (\n    update instanceof GramJs.UpdatePinnedMessages\n    || update instanceof GramJs.UpdatePinnedChannelMessages\n  ) {\n    const chatId = update instanceof GramJs.UpdatePinnedMessages\n      ? getApiChatIdFromMtpPeer(update.peer)\n      : buildApiPeerId(update.channelId, 'channel');\n\n    onUpdate({\n      '@type': 'updatePinnedIds',\n      chatId,\n      messageIds: update.messages,\n      isPinned: update.pinned,\n    });\n  } else if (\n    update instanceof GramJs.UpdateNotifySettings\n    && update.peer instanceof GramJs.NotifyPeer\n  ) {\n    onUpdate({\n      '@type': 'updateNotifyExceptions',\n      ...buildApiNotifyException(update.notifySettings, update.peer.peer),\n    });\n  } else if (\n    update instanceof GramJs.UpdateNotifySettings\n    && update.peer instanceof GramJs.NotifyForumTopic\n  ) {\n    onUpdate({\n      '@type': 'updateTopicNotifyExceptions',\n      ...buildApiNotifyExceptionTopic(\n        update.notifySettings, update.peer.peer, update.peer.topMsgId,\n      ),\n    });\n  } else if (\n    update instanceof GramJs.UpdateUserTyping\n    || update instanceof GramJs.UpdateChatUserTyping\n  ) {\n    const id = update instanceof GramJs.UpdateUserTyping\n      ? buildApiPeerId(update.userId, 'user')\n      : buildApiPeerId(update.chatId, 'chat');\n\n    if (update.action instanceof GramJs.SendMessageEmojiInteraction) {\n      onUpdate({\n        '@type': 'updateStartEmojiInteraction',\n        id,\n        emoji: update.action.emoticon,\n        messageId: update.action.msgId,\n        interaction: buildApiEmojiInteraction(JSON.parse(update.action.interaction.data)),\n      });\n    } else {\n      onUpdate({\n        '@type': 'updateChatTypingStatus',\n        id,\n        typingStatus: buildChatTypingStatus(update),\n      });\n    }\n  } else if (update instanceof GramJs.UpdateChannelUserTyping) {\n    const id = buildApiPeerId(update.channelId, 'channel');\n\n    onUpdate({\n      '@type': 'updateChatTypingStatus',\n      id,\n      threadId: update.topMsgId,\n      typingStatus: buildChatTypingStatus(update),\n    });\n  } else if (update instanceof GramJs.UpdateChannel) {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const { _entities } = update;\n    if (!_entities) {\n      return;\n    }\n\n    const channel = _entities.find((e): e is GramJs.Channel | GramJs.ChannelForbidden => (\n      e instanceof GramJs.Channel || e instanceof GramJs.ChannelForbidden\n    ));\n\n    if (channel instanceof GramJs.Channel) {\n      const chat = buildApiChatFromPreview(channel);\n      if (chat) {\n        onUpdate({\n          '@type': 'updateChat',\n          id: chat.id,\n          chat,\n        });\n\n        onUpdate({\n          '@type': chat.isNotJoined ? 'updateChatLeave' : 'updateChatJoin',\n          id: buildApiPeerId(update.channelId, 'channel'),\n        });\n      }\n    } else if (channel instanceof GramJs.ChannelForbidden) {\n      const chatId = buildApiPeerId(update.channelId, 'channel');\n\n      onUpdate({\n        '@type': 'updateChat',\n        id: chatId,\n        chat: {\n          isRestricted: true,\n        },\n      });\n\n      onUpdate({\n        '@type': 'updateChatLeave',\n        id: chatId,\n      });\n    } else if (_entities.length === 0) {\n      // The link to the discussion group may have been changed.\n      // No corresponding update available at this moment https://core.telegram.org/type/Updates\n      onUpdate({\n        '@type': 'resetMessages',\n        id: buildApiPeerId(update.channelId, 'channel'),\n      });\n    }\n  } else if (\n    update instanceof GramJs.UpdateDialogUnreadMark\n    && update.peer instanceof GramJs.DialogPeer\n  ) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer.peer),\n      chat: {\n        hasUnreadMark: update.unread,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateChatDefaultBannedRights) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        defaultBannedRights: omitVirtualClassFields(update.defaultBannedRights),\n      },\n    });\n\n    // Users\n  } else if (update instanceof GramJs.UpdateUserStatus) {\n    onUpdate({\n      '@type': 'updateUserStatus',\n      userId: buildApiPeerId(update.userId, 'user'),\n      status: buildApiUserStatus(update.status),\n    });\n  } else if (update instanceof GramJs.UpdateUser) {\n    onUpdate({\n      '@type': 'updateRequestUserUpdate',\n      id: buildApiPeerId(update.userId, 'user'),\n    });\n  } else if (update instanceof GramJs.UpdateUserEmojiStatus) {\n    const emojiStatus = buildApiUserEmojiStatus(update.emojiStatus);\n    onUpdate({\n      '@type': 'updateUserEmojiStatus',\n      userId: buildApiPeerId(update.userId, 'user'),\n      emojiStatus,\n    });\n  } else if (update instanceof GramJs.UpdateUserName) {\n    const apiUserId = buildApiPeerId(update.userId, 'user');\n    const updatedUser = localDb.users[apiUserId];\n\n    const user = updatedUser?.mutualContact && !updatedUser.self\n      ? pick(update, [])\n      : pick(update, ['firstName', 'lastName']);\n\n    const usernames = buildApiUsernames(update);\n\n    onUpdate({\n      '@type': 'updateUser',\n      id: apiUserId,\n      user: {\n        ...user,\n        usernames,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateUserPhone) {\n    const { userId, phone } = update;\n\n    onUpdate({\n      '@type': 'updateUser',\n      id: buildApiPeerId(userId, 'user'),\n      user: { phoneNumber: phone },\n    });\n  } else if (update instanceof GramJs.UpdatePeerSettings) {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const { _entities, settings } = update;\n    if (!_entities) {\n      return;\n    }\n\n    if (_entities?.length) {\n      _entities\n        .filter((e) => e instanceof GramJs.User && !e.contact)\n        .forEach((user) => {\n          onUpdate({\n            '@type': 'deleteContact',\n            id: buildApiPeerId(user.id, 'user'),\n          });\n        });\n\n      _entities\n        .filter((e) => e instanceof GramJs.User && e.contact)\n        .map(buildApiUser)\n        .forEach((user) => {\n          if (!user) {\n            return;\n          }\n\n          onUpdate({\n            '@type': 'updateUser',\n            id: user.id,\n            user: {\n              ...user,\n              ...(settings && { settings: buildApiChatSettings(settings) }),\n            },\n          });\n        });\n    }\n\n    // Settings\n  } else if (update instanceof GramJs.UpdateNotifySettings) {\n    const {\n      notifySettings: {\n        showPreviews, silent, muteUntil,\n      },\n      peer: { className },\n    } = update;\n\n    const peerType = className === 'NotifyUsers'\n      ? 'contact'\n      : (className === 'NotifyChats'\n        ? 'group'\n        : (className === 'NotifyBroadcasts'\n          ? 'broadcast'\n          : undefined\n        )\n      );\n\n    if (!peerType) {\n      return;\n    }\n\n    onUpdate({\n      '@type': 'updateNotifySettings',\n      peerType,\n      isSilent: Boolean(silent\n        || (typeof muteUntil === 'number' && Date.now() + getServerTimeOffset() * 1000 < muteUntil * 1000)),\n      shouldShowPreviews: Boolean(showPreviews),\n    });\n  } else if (update instanceof GramJs.UpdatePeerBlocked) {\n    onUpdate({\n      '@type': 'updatePeerBlocked',\n      id: getApiChatIdFromMtpPeer(update.peerId),\n      isBlocked: update.blocked,\n    });\n  } else if (update instanceof GramJs.UpdatePrivacy) {\n    const key = buildPrivacyKey(update.key);\n    if (key) {\n      onUpdate({\n        '@type': 'updatePrivacy',\n        key,\n        rules: buildPrivacyRules(update.rules),\n      });\n    }\n\n    // Misc\n  } else if (update instanceof GramJs.UpdateDraftMessage) {\n    onUpdate({\n      '@type': 'draftMessage',\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      threadId: update.topMsgId,\n      ...buildMessageDraft(update.draft),\n    });\n  } else if (update instanceof GramJs.UpdateContactsReset) {\n    onUpdate({ '@type': 'updateResetContactList' });\n  } else if (update instanceof GramJs.UpdateFavedStickers) {\n    onUpdate({ '@type': 'updateFavoriteStickers' });\n  } else if (update instanceof GramJs.UpdateRecentStickers) {\n    onUpdate({ '@type': 'updateRecentStickers' });\n  } else if (update instanceof GramJs.UpdateMoveStickerSetToTop) {\n    if (!update.masks) {\n      onUpdate({\n        '@type': 'updateMoveStickerSetToTop',\n        isCustomEmoji: update.emojis,\n        id: update.stickerset.toString(),\n      });\n    }\n  } else if (update instanceof GramJs.UpdateStickerSets) {\n    onUpdate({ '@type': 'updateStickerSets' });\n  } else if (update instanceof GramJs.UpdateStickerSetsOrder) {\n    if (!update.masks) {\n      onUpdate({\n        '@type': 'updateStickerSetsOrder',\n        order: update.order.map((n) => n.toString()),\n        isCustomEmoji: update.emojis,\n      });\n    }\n  } else if (update instanceof GramJs.UpdateNewStickerSet) {\n    if (update.stickerset instanceof GramJs.messages.StickerSet) {\n      const stickerSet = buildStickerSet(update.stickerset.set);\n      onUpdate({\n        '@type': 'updateStickerSet',\n        id: stickerSet.id,\n        stickerSet,\n      });\n    }\n  } else if (update instanceof GramJs.UpdateSavedGifs) {\n    onUpdate({ '@type': 'updateSavedGifs' });\n  } else if (update instanceof GramJs.UpdateGroupCall) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updateGroupCall',\n      call: buildApiGroupCall(update.call),\n    });\n  } else if (update instanceof GramJs.UpdateGroupCallConnection) {\n    onUpdate({\n      '@type': 'updateGroupCallConnection',\n      data: JSON.parse(update.params.data) as GroupCallConnectionData,\n      presentation: Boolean(update.presentation),\n    });\n  } else if (update instanceof GramJs.UpdateGroupCallParticipants) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updateGroupCallParticipants',\n      groupCallId: getGroupCallId(update.call),\n      participants: update.participants.map(buildApiGroupCallParticipant),\n    });\n  } else if (update instanceof GramJs.UpdatePendingJoinRequests) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updatePendingJoinRequests',\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      recentRequesterIds: update.recentRequesters.map((id) => buildApiPeerId(id, 'user')),\n      requestsPending: update.requestsPending,\n    });\n  } else if (update instanceof GramJs.UpdatePhoneCall) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updatePhoneCall',\n      call: buildPhoneCall(update.phoneCall),\n    });\n  } else if (update instanceof GramJs.UpdatePhoneCallSignalingData) {\n    onUpdate({\n      '@type': 'updatePhoneCallSignalingData',\n      callId: update.phoneCallId.toString(),\n      data: Array.from(update.data),\n    });\n  } else if (update instanceof GramJs.UpdateWebViewResultSent) {\n    const { queryId } = update;\n\n    onUpdate({\n      '@type': 'updateWebViewResultSent',\n      queryId: queryId.toString(),\n    });\n  } else if (update instanceof GramJs.UpdateBotMenuButton) {\n    const {\n      botId,\n      button,\n    } = update;\n\n    const id = buildApiPeerId(botId, 'user');\n\n    onUpdate({\n      '@type': 'updateBotMenuButton',\n      botId: id,\n      button: buildApiBotMenuButton(button),\n    });\n  } else if (update instanceof GramJs.UpdateTranscribedAudio) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updateTranscribedAudio',\n      transcriptionId: update.transcriptionId.toString(),\n      text: update.text,\n      isPending: update.pending,\n    });\n  } else if (update instanceof GramJs.UpdateConfig) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n    onUpdate({ '@type': 'updateConfig' });\n  } else if (update instanceof GramJs.UpdateChannelPinnedTopic) {\n    onUpdate({\n      '@type': 'updatePinnedTopic',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      topicId: update.topicId,\n      isPinned: Boolean(update.pinned),\n    });\n  } else if (update instanceof GramJs.UpdateChannelPinnedTopics) {\n    onUpdate({\n      '@type': 'updatePinnedTopicsOrder',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      order: update.order || [],\n    });\n  } else if (update instanceof GramJs.UpdateRecentEmojiStatuses) {\n    onUpdate({ '@type': 'updateRecentEmojiStatuses' });\n  } else if (DEBUG) {\n    const params = typeof update === 'object' && 'className' in update ? update.className : update;\n    log('UNEXPECTED UPDATE', params);\n  }\n}\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getGlobal, setGlobal,} from '../../index';\n\nimport type {ApiChat, ApiChatFolder, ApiChatMember, ApiError, ApiUser, ApiUserStatus,} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport {ChatCreationProgress, ManagementProgress, NewChatMembersProgress} from '../../../types';\nimport type {ActionReturnType, GlobalState, TabArgs,} from '../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  DEBUG,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport {callApi} from '../../../api/gramjs';\nimport {\n  addChatMembers,\n  addChats,\n  addMessages,\n  addUsers,\n  addUserStatuses,\n  deleteTopic,\n  leaveChat,\n  replaceChatListIds,\n  replaceChats,\n  replaceThreadParam,\n  replaceUsers,\n  replaceUserStatuses,\n  updateChat,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatListType,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectLastServiceNotification,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserByPhoneNumber,\n  selectVisibleUsers,\n} from '../../selectors';\nimport {buildCollectionByKey, omit} from '../../../util/iteratees';\nimport {debounce, pause, throttle} from '../../../util/schedulers';\nimport {\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSummaryOnly,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport {formatShareText, parseChooseParameter, processDeepLink} from '../../../util/deeplink';\nimport {updateGroupCall} from '../../reducers/calls';\nimport {selectGroupCall} from '../../selectors/calls';\nimport {getOrderedIds} from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport {selectCurrentLimit} from '../../selectors/limits';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport {\n  ChatModelConfig, DEFAULT_AI_CONFIG_COMMANDS,\n  DEFAULT_BOT_COMMANDS,\n  DEFAULT_CREATE_USER_BIO, DEFAULT_PROMPT,\n  LoadAllChats,\n  UserIdFirstBot\n} from \"../../../worker/setting\";\nimport {Api} from \"../../../lib/gramjs\";\nimport MsgCommandSetting from \"../../../worker/msg/MsgCommandSetting\";\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, threadId = MAIN_THREAD_ID,\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    //todo\n    // actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    actions.requestThreadInfoUpdate({ chatId: id, threadId });\n  }\n});\n\naddActionHandler('openComments', async (global, actions, payload): Promise<void> => {\n  const {\n    id, threadId, originChannelId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      const chat = selectThreadOriginChat(global, id, threadId);\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n      const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n      if (!result) {\n        actions.openPreviousChat({ tabId });\n        return;\n      }\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      actions.openChat({ id, threadId: result.topMessageId, tabId });\n    } else {\n      actions.openChat({ id, threadId: topMessageId, tabId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, messageId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  actions.focusMessage({\n    chatId, threadId, messageId, tabId,\n  });\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType as 'active' | 'archived';\n  if(listType === \"archived\"){\n    return;\n  }\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n      return;\n    }\n\n    global = getGlobal();\n\n    if (\n      !(\n        global.msgClientState === 'connectionStateLogged' ||\n        global.msgClientState === 'connectionStateWaitingLogin'||\n        global.msgClientState === 'connectionStateConnected'\n      ) ) {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n    await loadChats(global,\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true,\n    );\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, force, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(global, actions, chat, tabId);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(global, actions, chat, tabId));\n  }\n});\n\naddActionHandler('loadTopChats', (global): ActionReturnType => {\n  runThrottledForLoadTopChats(() => loadChats(global, 'active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createChat', (global, actions, payload)=> {\n  const {\n    title, id,promptInit,about, tabId = getCurrentTabId(),\n  } = payload;\n\n  const userIds = Object.keys(global.users.byId)\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n  try{\n    let userId: string;\n    let userIdInt = parseInt(UserIdFirstBot)\n    if(!id){\n      if(userIds.length > 0){\n        userIds.sort((a,b)=>parseInt(b) - parseInt(a))\n        userIdInt = parseInt(userIds[0]) + 1\n      }\n      if(userIdInt < 100000){\n        userIdInt = 100000\n      }\n      userId = userIdInt.toString()\n    }else{\n      userId = id\n    }\n\n    const chatGptApiKey = localStorage.getItem(\"cg-key\") ? localStorage.getItem(\"cg-key\") : \"\"\n    const init_system_content = promptInit || DEFAULT_PROMPT\n\n    const user = {\n      \"canBeInvitedToGroup\": false,\n      \"hasVideoAvatar\": false,\n      \"type\": \"userTypeBot\",\n      id:userId,\n      \"phoneNumber\": \"\",\n      isMin:false,\n      \"noStatus\": true,\n      isSelf:false,\n      avatarHash:\"\",\n      accessHash:\"\",\n      isPremium: false,\n      firstName: title,\n      photos:[],\n      usernames: [\n        {\n          \"username\": \"Bot_\"+userId,\n          \"isActive\": true,\n          \"isEditable\": true\n        }\n      ],\n      fullInfo: {\n        \"isBlocked\": false,\n        \"noVoiceMessages\": false,\n        bio: about || DEFAULT_CREATE_USER_BIO,\n        botInfo: {\n          aiBot:{\n            enableAi:true,\n            chatGptConfig:{\n              init_system_content,\n              api_key:chatGptApiKey,\n              max_history_length:10,\n              config:ChatModelConfig\n            }\n          },\n          botId: userId,\n          \"description\": about || DEFAULT_CREATE_USER_BIO,\n          \"menuButton\": {\n            \"type\": \"commands\"\n          },\n          commands:DEFAULT_AI_CONFIG_COMMANDS.map(cmd=>{\n            // @ts-ignore\n            cmd.botId = userId;\n            return cmd\n          })\n        }\n      }\n    }\n    global = getGlobal()\n    const {chatFolders} = global;\n    // @ts-ignore\n    const users:ApiUser[] = [user]\n\n    // @ts-ignore\n    const chats:ApiChat[] = [MsgCommandSetting.buildDefaultChat(user)]\n\n    let activeChatFolder = window.sessionStorage.getItem(\"activeChatFolder\")\n    let activeChatFolderRow;\n    const chatFolderById:Record<string, ApiChatFolder> = {};\n    if(activeChatFolder){\n      // @ts-ignore\n      Object.values(chatFolders.byId).forEach((row:ApiChatFolder)=>{\n        if(row.id === parseInt(activeChatFolder!)){\n          activeChatFolderRow = row;\n          if(!row.includedChatIds){\n            row.includedChatIds = []\n          }\n          row.includedChatIds.push(userId)\n          chatFolderById[row.id] = row;\n        }\n      })\n    }\n\n    const userStatusesById:Record<string,ApiUserStatus> = {\n      [user.id] : {\n        \"type\": \"userStatusEmpty\"\n      }\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n    global = updateChatListIds(global, \"active\", chats.map(chat=>chat.id));\n    global = addUserStatuses(global, userStatusesById);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: ChatCreationProgress.Complete,\n      },\n    }, tabId);\n\n    setGlobal({\n      ...global,\n      chatFolders:{\n        ...global.chatFolders,\n        byId:{\n          ...global.chatFolders.byId,\n          ...chatFolderById\n        }\n\n      }\n    })\n\n    if(activeChatFolderRow){\n      actions.editChatFolder({ id: activeChatFolderRow.id, folderUpdate: activeChatFolderRow });\n    }\n    if(promptInit){\n      actions.sendBotCommand({chatId:userId,command:\"/initPrompt\",tabId})\n    }\n    // @ts-ignore\n    actions.openChat({id: userId,shouldReplaceHistory: true,});\n\n\n  }catch (e){\n    console.error(e)\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: ChatCreationProgress.Error,\n        error: '创建失败',\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n})\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n  // @ts-ignore\n  actions.setActiveChatFolder({activeChatFolder:0},getCurrentTabId())\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    openChatByUsername: openChatByUsernameAction,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n  } else if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!commentId) {\n    if (!startAttach && messageId && !startParam && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    await openChatByUsername(global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global, tabId) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && messageId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chatByUsername.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat: chatByUsername, threadId: messageId });\n    if (!result) return;\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    setGlobal(global);\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n    tabId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chat.id, {\n    fullInfo: {\n      ...chat.fullInfo,\n      isPreHistoryHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(newAdminMembersById && { adminMembersById: newAdminMembersById }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, {\n    avatarHash: undefined,\n    fullInfo: {\n      ...chat.fullInfo,\n      profilePhoto: undefined,\n    },\n  });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, {\n      avatarHash: undefined,\n      fullInfo: {\n        ...chat.fullInfo,\n        profilePhoto: undefined,\n      },\n    });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        isPreHistoryHidden: false,\n      },\n    });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n  window.sessionStorage.setItem(\"activeChatFolder\",activeChatFolder.toString())\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft?.formattedText);\n    global = replaceThreadParam(global, chatId, Number(threadId), 'replyingToId', draft?.replyingToId);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const prevIsForum = chat.isForum;\n  global = updateChat(global, chatId, { isForum: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleForum', { chat, isEnabled });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, { isForum: prevIsForum });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = chat.fullInfo?.areParticipantsHidden;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      areParticipantsHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      fullInfo: {\n        ...chat.fullInfo,\n        areParticipantsHidden: prevIsEnabled,\n      },\n    });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openChat({\n      id: chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\nexport async function loadChats<T extends GlobalState>(\n  global: T,\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  global = getGlobal();\n  let lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  try {\n    let result: { folderIds?: number[],chatFolders?: any[]; users?: any; userStatusesById?: any; chats?: any; chatIds?: any; draftsById?: any; replyingToById?: any; orderedPinnedIds?: string[] | never[] | undefined; totalChatCount?: number; };\n    if(!global.users.byId[UserIdFirstBot]) {\n      result = LoadAllChats;\n      for (let i = 0; i < result.chats.length; i++) {\n        const chat = result.chats[i];\n        if (global.messages.byChatId[chat.id]) {\n          const {threadsById, byId} = global.messages.byChatId[chat.id]\n          if (threadsById[-1] && threadsById[-1].lastViewportIds && threadsById[-1].lastViewportIds!.length > 0) {\n            // @ts-ignore\n            result.chats[i].lastMessage = byId[threadsById[-1].lastViewportIds[threadsById[-1].lastViewportIds.length - 1]]\n          }\n        }\n      }\n    }else {\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          isFullyLoaded: {\n            ...global.chats.isFullyLoaded,\n            [listType]: true,\n          },\n        },\n      };\n      setGlobal(global);\n      return\n    }\n    // result = await callApi('fetchChats', {\n    //   limit: CHAT_LIST_LOAD_SLICE,\n    //   offsetDate,\n    //   archived: listType === 'archived',\n    //   withPinned: shouldReplace,\n    //   lastLocalServiceMessage,\n    // });\n    const userStatusesById = {};\n    result.users.forEach((user: ApiUser)=>{\n\n      // @ts-ignore\n      userStatusesById[user.id] = {\n        \"type\": \"userStatusEmpty\"\n      }\n    })\n    result.userStatusesById = userStatusesById;\n\n    global = getGlobal();\n    result.chatIds = result.chats.map((chat: { id: any; }) => chat.id);\n    const { chatIds } = result;\n    if (chatIds.length > 0 && chatIds[0] === offsetId) {\n      chatIds.shift();\n    }\n    result.totalChatCount = result.chats.length;\n    lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n    const chatFoldersById:any = {};\n    result.chatFolders?.forEach(row=>{\n      chatFoldersById[row.id] = row\n    })\n    const orderedIds = result.chatFolders && result.chatFolders.length > 0 ? result.folderIds: [0];\n\n    global = {\n      ...global,\n      chatFolders:{\n        byId:{\n          ...chatFoldersById\n        },\n        orderedIds\n      }\n    }\n    if (shouldReplace && listType === 'active' && global.msgClientState === 'connectionStateLogged') {\n      // Always include service notifications chat\n      // if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      //   const result2 = await callApi('fetchChat', {\n      //     type: 'user',\n      //     user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      //   });\n      //\n      //   global = getGlobal();\n      //\n      //   const notificationsChat = result2 && selectChat(global, result2.chatId);\n      //   if (notificationsChat) {\n      //     chatIds.unshift(notificationsChat.id);\n      //     result.chats.unshift(notificationsChat);\n      //     if (lastLocalServiceMessage) {\n      //       notificationsChat.lastMessage = lastLocalServiceMessage;\n      //     }\n      //   }\n      // }\n      const tabStates = Object.values(global.byTabId);\n      const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n        const currentChat = selectCurrentChat(global, tabId);\n        return currentChat ? [currentChat] : [];\n      });\n\n      const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n        return selectVisibleUsers(global, tabId) || [];\n      });\n      if (global.currentUserId && global.users.byId[global.currentUserId]) {\n        visibleUsers.push(global.users.byId[global.currentUserId]);\n      }\n\n      global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n      global = replaceUserStatuses(global, result.userStatusesById);\n      global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n      global = updateChatListIds(global, listType, chatIds);\n    } else if (shouldReplace && listType === 'archived'   && global.msgClientState === 'connectionStateLogged') {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    } else {\n      const newChats = buildCollectionByKey(result.chats, 'id');\n      if (chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n        const notificationsChat = newChats[SERVICE_NOTIFICATIONS_USER_ID];\n        if (notificationsChat && lastLocalServiceMessage) {\n          newChats[SERVICE_NOTIFICATIONS_USER_ID] = {\n            ...notificationsChat,\n            lastMessage: lastLocalServiceMessage,\n          };\n        }\n      }\n\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, newChats);\n      global = updateChatListIds(global, listType, chatIds);\n\n    }\n\n    global = updateChatListSecondaryInfo(global, listType, result);\n\n    const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n    idsToUpdateDraft.forEach((chatId) => {\n      const draft = result.draftsById[chatId];\n      const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n      if (!draft && !thread) return;\n\n      if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n        global = replaceThreadParam(\n          global, chatId, MAIN_THREAD_ID, 'draft', draft,\n        );\n      }\n    });\n\n    const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n    idsToUpdateReplyingToId.forEach((chatId) => {\n      const replyingToById = result.replyingToById[chatId];\n      const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n      if (!replyingToById && !thread) return;\n\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToById,\n      );\n    });\n\n    // if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    //   global = {\n    //     ...global,\n    //     chats: {\n    //       ...global.chats,\n    //       isFullyLoaded: {\n    //         ...global.chats.isFullyLoaded,\n    //         [listType]: true,\n    //       },\n    //     },\n    //   };\n    // }\n\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n\n    setGlobal(global);\n\n  }catch (e){\n    console.error(e)\n  }\n\n  return;\n  // const result = await callApi('fetchChats', {\n  //   limit: CHAT_LIST_LOAD_SLICE,\n  //   offsetDate,\n  //   archived: listType === 'archived',\n  //   withPinned: shouldReplace,\n  //   lastLocalServiceMessage,\n  // });\n  //\n\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  setGlobal(global);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n    setGlobal(global);\n  }\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id, threadId, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectTabState, selectUser,\n} from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type {\n  CallSound, ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { getMainUsername } from '../../helpers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestAnimationFrame(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let { inviteLink } = chat.fullInfo!;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload!;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', async (global, actions, payload): Promise<void> => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n","// eslint-disable-next-line import/no-named-default\nimport {default as Api} from '../tl/api';\n\nimport type TelegramClient from './TelegramClient';\nimport {generateRandomBytes, readBigIntFromBuffer, sleep} from '../Helpers';\nimport {getUploadPartSize} from '../Utils';\nimport errors from '../errors';\nimport {Foreman} from '../../../util/foreman';\nimport {DownloadRes, UploadReq} from \"../../ptp/protobuf/PTPFile\";\nimport {CLOUD_MESSAGE_API, DEBUG, MEDIA_CACHE_NAME_WAI} from \"../../../config\";\nimport localDb from \"../../../api/gramjs/localDb\";\nimport Account from \"../../../worker/share/Account\";\nimport * as cacheApi from '../../../util/cacheApi';\nimport {Type} from '../../../util/cacheApi';\nimport {fileToBuffer} from \"../../../worker/share/utils/utils\";\nimport {ERR, FileInfo_Type} from \"../../ptp/protobuf/PTPCommon/types\";\nimport {Pdu} from \"../../ptp/protobuf/BaseMsg\";\nimport {blobToBuffer} from \"../../../util/files\";\n\ninterface OnProgress {\n    isCanceled?: boolean;\n\n    // Float between 0 and 1.\n    (progress: number): void;\n}\n\nexport interface UploadFileParams {\n    file: File;\n    workers?: number;\n    onProgress?: OnProgress;\n}\n\nconst KB_TO_BYTES = 1024;\nconst LARGE_FILE_THRESHOLD = 10 * 1024 * 1024;\nconst DISCONNECT_SLEEP = 1000;\nconst MAX_CONCURRENT_CONNECTIONS = 3;\nconst MAX_CONCURRENT_CONNECTIONS_PREMIUM = 6;\nconst MAX_WORKERS_PER_CONNECTION = 10;\n\nconst foremans = Array(MAX_CONCURRENT_CONNECTIONS_PREMIUM).fill(undefined)\n    .map(() => new Foreman(MAX_WORKERS_PER_CONNECTION));\n\nexport async function uploadFileV1(\n    fileParams: UploadFileParams,\n): Promise<Api.InputFile | Api.InputFileBig> {\n    const { file, onProgress } = fileParams;\n    const { name, size } = file;\n    let fileId1 = readBigIntFromBuffer(generateRandomBytes(8), true, true);\n    let fileIdStr = fileId1.toString().replace(\"-\",\"\").replace(\"n\",\"\")\n    const fileId = Number(fileIdStr)\n    fileIdStr = String(fileId)\n    localDb.cache[fileIdStr] = file;\n    const isLarge = size > LARGE_FILE_THRESHOLD;\n\n    const partSize = getUploadPartSize(size) * KB_TO_BYTES;\n    const partCount = Math.floor((size + partSize - 1) / partSize);\n\n    let progress = 0;\n    if (onProgress) {\n        onProgress(progress);\n    }\n    const buf = await fileToBuffer(file)\n    const cipher = Account.localEncrypt(Buffer.from(buf));\n    const body = new DownloadRes({\n        file:{\n            id:fileIdStr,\n            part:0,\n            part_total:1,\n            buf:cipher,\n            size,\n            type:file.type\n        },\n        err:ERR.NO_ERROR\n    }).pack().getPbData()\n\n    const blob = new Blob([Buffer.from(body)]);\n    await cacheApi.save(MEDIA_CACHE_NAME_WAI, fileIdStr, blob);\n\n    return isLarge\n        ? new Api.InputFileBig({\n            id: fileId,\n            parts: partCount,\n            name,\n        })\n        : new Api.InputFile({\n            id: fileId,\n            parts: partCount,\n            name,\n            md5Checksum: '', // This is not a \"flag\", so not sure if we can make it optional.\n        });\n}\n\n\nexport async function uploadFileCache(\n    file: FileInfo_Type,\n) {\n    const { buf, id } = file;\n    const size = buf.length\n    const fileIdStr = id;\n\n    const partSize = getUploadPartSize(size) * KB_TO_BYTES;\n    const partCount = Math.floor((size + partSize - 1) / partSize);\n    const activeCounts = foremans.map(({ activeWorkers }) => activeWorkers);\n    let currentForemanIndex = activeCounts.indexOf(Math.min(...activeCounts));\n\n    const promises: Promise<any>[] = [];\n\n    for (let i = 0; i < partCount; i++) {\n        const senderIndex = currentForemanIndex % MAX_CONCURRENT_CONNECTIONS_PREMIUM;\n        await foremans[senderIndex].requestWorker();\n        const blobSlice = buf.subarray(i * partSize, (i + 1) * partSize);\n        promises.push((async (jMemo: number, blobSliceMemo: Buffer) => {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                try {\n                    if(CLOUD_MESSAGE_API && Account.getCurrentAccount()?.getSession()){\n                        if(DEBUG){\n                            console.log(\"uploadProfilePhoto\",fileIdStr,jMemo,partCount)\n                        }\n                        const fileInfo = {\n                            id:fileIdStr,\n                            size:file.size,\n                            type:file.type,\n                            part:jMemo+1,\n                            part_total:partCount,\n                            buf:blobSliceMemo\n                        }\n                        const uploadReq = new UploadReq({file:fileInfo})\n                        const body = Buffer.from(uploadReq.pack().getPbData());\n                        await fetch(`${CLOUD_MESSAGE_API}/proto`,{\n                            method: 'POST',\n                            body,\n                            headers:{\n                                Authorization: `Bearer ${Account.getCurrentAccount()?.getSession()}`,\n                            }\n                        })\n                    }\n                } catch (err) {\n                    foremans[senderIndex].releaseWorker();\n                    throw err;\n                }\n\n                foremans[senderIndex].releaseWorker();\n                break;\n            }\n        })(i, blobSlice));\n\n        currentForemanIndex++;\n    }\n    await Promise.all(promises);\n}\n\n\nexport async function uploadFile(\n    client: TelegramClient,\n    fileParams: UploadFileParams,\n): Promise<Api.InputFile | Api.InputFileBig> {\n    const { file, onProgress } = fileParams;\n\n    const isPremium = Boolean(client.isPremium);\n\n    const { name, size } = file;\n    const fileId = readBigIntFromBuffer(generateRandomBytes(8), true, true);\n    const isLarge = size > LARGE_FILE_THRESHOLD;\n\n    const partSize = getUploadPartSize(size) * KB_TO_BYTES;\n    const partCount = Math.floor((size + partSize - 1) / partSize);\n\n    // Pick the least busy foreman\n    // For some reason, fresh connections give out a higher speed for the first couple of seconds\n    // I have no idea why, but this may speed up the download of small files\n    const activeCounts = foremans.map(({ activeWorkers }) => activeWorkers);\n    let currentForemanIndex = activeCounts.indexOf(Math.min(...activeCounts));\n\n    let progress = 0;\n    if (onProgress) {\n        onProgress(progress);\n    }\n\n    const promises: Promise<any>[] = [];\n\n    for (let i = 0; i < partCount; i++) {\n        const senderIndex = currentForemanIndex % (\n            isPremium ? MAX_CONCURRENT_CONNECTIONS_PREMIUM : MAX_CONCURRENT_CONNECTIONS\n        );\n\n        await foremans[senderIndex].requestWorker();\n\n        if (onProgress?.isCanceled) {\n            foremans[senderIndex].releaseWorker();\n            break;\n        }\n\n        const blobSlice = file.slice(i * partSize, (i + 1) * partSize);\n        // eslint-disable-next-line no-loop-func, @typescript-eslint/no-loop-func\n        promises.push((async (jMemo: number, blobSliceMemo: Blob) => {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                let sender;\n                try {\n                    // We always upload from the DC we are in\n                    sender = await client.getSender(client.session.dcId, senderIndex, isPremium);\n                    const partBytes = await blobSliceMemo.arrayBuffer();\n                    await sender.send(\n                        isLarge\n                            ? new Api.upload.SaveBigFilePart({\n                                fileId,\n                                filePart: jMemo,\n                                fileTotalParts: partCount,\n                                bytes: Buffer.from(partBytes),\n                            })\n                            : new Api.upload.SaveFilePart({\n                                fileId,\n                                filePart: jMemo,\n                                bytes: Buffer.from(partBytes),\n                            }),\n                    );\n                } catch (err) {\n                    if (sender && !sender.isConnected()) {\n                        await sleep(DISCONNECT_SLEEP);\n                        continue;\n                    } else if (err instanceof errors.FloodWaitError) {\n                        await sleep(err.seconds * 1000);\n                        continue;\n                    }\n                    foremans[senderIndex].releaseWorker();\n\n                    throw err;\n                }\n\n                foremans[senderIndex].releaseWorker();\n\n                if (onProgress) {\n                    if (onProgress.isCanceled) {\n                        throw new Error('USER_CANCELED');\n                    }\n\n                    progress += (1 / partCount);\n                    onProgress(progress);\n                }\n                break;\n            }\n        })(i, blobSlice));\n\n        currentForemanIndex++;\n    }\n\n    await Promise.all(promises);\n\n    return isLarge\n        ? new Api.InputFileBig({\n            id: fileId,\n            parts: partCount,\n            name,\n        })\n        : new Api.InputFile({\n            id: fileId,\n            parts: partCount,\n            name,\n            md5Checksum: '', // This is not a \"flag\", so not sure if we can make it optional.\n        });\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { AuthNativeReq_Type } from './types';\n\nexport default class AuthNativeReq extends BaseMsg {\n  public msg?: AuthNativeReq_Type\n  constructor(msg?: AuthNativeReq_Type) {\n    super('PTP.Auth.AuthNativeReq', msg);\n    this.setCommandId(ActionCommands.CID_AuthNativeReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): AuthNativeReq_Type {\n    return new AuthNativeReq().decode(pdu.body());\n  }\n}\n","// DO NOT EDIT\nimport BaseMsg from '../BaseMsg';\nimport type { Pdu } from '../BaseMsg';\nimport type { PbMsg_Type } from './types';\n\nexport default class PbMsg extends BaseMsg {\n  public msg?: PbMsg_Type\n  constructor(msg?: PbMsg_Type) {\n    super('PTP.Common.PbMsg', msg);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): PbMsg_Type {\n    return new PbMsg().decode(pdu.body());\n  }\n}\n","// DO NOT EDIT\nimport BaseMsg from '../BaseMsg';\nimport type { Pdu } from '../BaseMsg';\nimport type { PbQrCode_Type } from './types';\n\nexport default class PbQrCode extends BaseMsg {\n  public msg?: PbQrCode_Type\n  constructor(msg?: PbQrCode_Type) {\n    super('PTP.Common.PbQrCode', msg);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): PbQrCode_Type {\n    return new PbQrCode().decode(pdu.body());\n  }\n}\n","// DO NOT EDIT\nimport BaseMsg from '../BaseMsg';\nimport type { Pdu } from '../BaseMsg';\nimport type { PbUser_Type } from './types';\n\nexport default class PbUser extends BaseMsg {\n  public msg?: PbUser_Type\n  constructor(msg?: PbUser_Type) {\n    super('PTP.Common.PbUser', msg);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): PbUser_Type {\n    return new PbUser().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { DownloadMsgReq_Type } from './types';\n\nexport default class DownloadMsgReq extends BaseMsg {\n  public msg?: DownloadMsgReq_Type\n  constructor(msg?: DownloadMsgReq_Type) {\n    super('PTP.Msg.DownloadMsgReq', msg);\n    this.setCommandId(ActionCommands.CID_DownloadMsgReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): DownloadMsgReq_Type {\n    return new DownloadMsgReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { DownloadMsgRes_Type } from './types';\n\nexport default class DownloadMsgRes extends BaseMsg {\n  public msg?: DownloadMsgRes_Type\n  constructor(msg?: DownloadMsgRes_Type) {\n    super('PTP.Msg.DownloadMsgRes', msg);\n    this.setCommandId(ActionCommands.CID_DownloadMsgRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): DownloadMsgRes_Type {\n    return new DownloadMsgRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { GenMsgIdReq_Type } from './types';\n\nexport default class GenMsgIdReq extends BaseMsg {\n  public msg?: GenMsgIdReq_Type\n  constructor(msg?: GenMsgIdReq_Type) {\n    super('PTP.Msg.GenMsgIdReq', msg);\n    this.setCommandId(ActionCommands.CID_GenMsgIdReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): GenMsgIdReq_Type {\n    return new GenMsgIdReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { GenMsgIdRes_Type } from './types';\n\nexport default class GenMsgIdRes extends BaseMsg {\n  public msg?: GenMsgIdRes_Type\n  constructor(msg?: GenMsgIdRes_Type) {\n    super('PTP.Msg.GenMsgIdRes', msg);\n    this.setCommandId(ActionCommands.CID_GenMsgIdRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): GenMsgIdRes_Type {\n    return new GenMsgIdRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { SendReq_Type } from './types';\n\nexport default class SendReq extends BaseMsg {\n  public msg?: SendReq_Type\n  constructor(msg?: SendReq_Type) {\n    super('PTP.Msg.SendReq', msg);\n    this.setCommandId(ActionCommands.CID_SendReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): SendReq_Type {\n    return new SendReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { SendRes_Type } from './types';\n\nexport default class SendRes extends BaseMsg {\n  public msg?: SendRes_Type\n  constructor(msg?: SendRes_Type) {\n    super('PTP.Msg.SendRes', msg);\n    this.setCommandId(ActionCommands.CID_SendRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): SendRes_Type {\n    return new SendRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UploadMsgReq_Type } from './types';\n\nexport default class UploadMsgReq extends BaseMsg {\n  public msg?: UploadMsgReq_Type\n  constructor(msg?: UploadMsgReq_Type) {\n    super('PTP.Msg.UploadMsgReq', msg);\n    this.setCommandId(ActionCommands.CID_UploadMsgReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UploadMsgReq_Type {\n    return new UploadMsgReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { StopChatStreamReq_Type } from './types';\n\nexport default class StopChatStreamReq extends BaseMsg {\n  public msg?: StopChatStreamReq_Type\n  constructor(msg?: StopChatStreamReq_Type) {\n    super('PTP.Other.StopChatStreamReq', msg);\n    this.setCommandId(ActionCommands.CID_StopChatStreamReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): StopChatStreamReq_Type {\n    return new StopChatStreamReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { DownloadUserReq_Type } from './types';\n\nexport default class DownloadUserReq extends BaseMsg {\n  public msg?: DownloadUserReq_Type\n  constructor(msg?: DownloadUserReq_Type) {\n    super('PTP.User.DownloadUserReq', msg);\n    this.setCommandId(ActionCommands.CID_DownloadUserReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): DownloadUserReq_Type {\n    return new DownloadUserReq().decode(pdu.body());\n  }\n}\n","import MsgDispatcher from \"./MsgDispatcher\";\nimport {selectUser} from \"../../global/selectors\";\nimport {updateUser} from \"../../global/reducers\";\nimport {getActions, getGlobal, setGlobal} from \"../../global\";\nimport {ApiBotCommand} from \"../../api/types\";\nimport {currentTs} from \"../share/utils/utils\";\nimport {GlobalState} from \"../../global/types\";\nimport MsgCommandSetting from \"./MsgCommandSetting\";\nimport {ControllerPool} from \"../../lib/ptp/functions/requests\";\nimport MsgCommandChatGpt from \"./MsgCommandChatGpt\";\nimport MsgCommandChatLab from \"./MsgCommandChatLab\";\nimport {UserStoreRow_Type} from \"../../lib/ptp/protobuf/PTPCommon/types\";\nimport {callApiWithPdu} from \"./utils\";\nimport {DownloadUserReq, DownloadUserRes, UploadUserReq} from \"../../lib/ptp/protobuf/PTPUser\";\nimport BotWebSocket, {BotWebSocketNotifyAction, BotWebSocketState} from \"./bot/BotWebSocket\";\nimport Account from \"../share/Account\";\nimport {Pdu} from \"../../lib/ptp/protobuf/BaseMsg\";\nimport {ActionCommands} from \"../../lib/ptp/protobuf/ActionCommands\";\nimport {SendRes} from \"../../lib/ptp/protobuf/PTPMsg\";\n\nexport default class MsgCommand {\n  private msgDispatcher: MsgDispatcher;\n  constructor(msgDispatcher:MsgDispatcher) {\n    this.msgDispatcher = msgDispatcher;\n  }\n  static async sendText(chatId:string,text:string){\n    const messageId = await MsgDispatcher.genMsgId();\n    MsgDispatcher.newMessage(chatId,messageId,{\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      content:{\n        text:{\n          text:text\n        }\n      },\n    })\n  }\n  static buildInlineButton(chatId:string,path:string,text:string,type:'callback'){\n    return [\n      {\n        type,\n        text,\n        data:`${chatId}/${path}`\n      }\n    ]\n  }\n  static async clearHistory(chatId:string){\n    await MsgDispatcher.newTextMessage(chatId,undefined,'确定要清除么？',[\n      [\n        ...MsgCommand.buildInlineButton(chatId,\"clearHistory/confirm\",\"确定\",\"callback\"),\n        ...MsgCommand.buildInlineButton(chatId,\"clearHistory/cancel\",\"返回\",\"callback\")\n      ]\n    ])\n\n    return true;\n  }\n\n  async showMnemonic(){\n    await this.msgDispatcher.sendOutgoingMsg();\n    await this.msgDispatcher.replyText(\"显示成功\")\n    getActions().updateGlobal({\n      showMnemonicModal:true\n    })\n  }\n\n  static async reloadCommands(chatId:string,cmds:ApiBotCommand[]){\n    let global = getGlobal();\n    let user = selectUser(global,chatId)\n    const botInfo = user?.fullInfo?.botInfo;\n    if(botInfo){\n      //@ts-ignore\n      const commands:ApiBotCommand[] = cmds.map(cmd => {\n        return {\n          ...cmd,\n          botId: user?.id\n        };\n      });\n      global = updateUser(global,user?.id!,{\n        ...user,\n        fullInfo:{\n          ...user?.fullInfo,\n          botInfo:{\n            ...user?.fullInfo!.botInfo!,\n            commands\n          }\n        }\n      })\n      setGlobal(global)\n      global = getGlobal()\n      user = selectUser(global,chatId)\n      await MsgDispatcher.newTextMessage(chatId,await MsgDispatcher.genMsgId(),\"重载成功\")\n      return true;\n    }\n  }\n  static async uploadUser(global:GlobalState,chatId:string){\n    const users:UserStoreRow_Type[] = [];\n    const ids = [chatId]\n    for (let i = 0; i < ids.length; i++) {\n      if(i > 0){\n        break\n      }\n      const id = ids[i];\n      users.push({\n        time:currentTs(),\n        userId:id!,\n        user:selectUser(global,chatId)\n      })\n    }\n    await callApiWithPdu(new UploadUserReq({\n      users,\n      time:currentTs()\n    }).pack())\n    MsgDispatcher.showNotification(\"上传成功\")\n  }\n  static async downloadUser(global:GlobalState,chatId:string){\n    const DownloadUserReqRes = await callApiWithPdu(new DownloadUserReq({\n      userIds:[chatId],\n    }).pack())\n    const downloadUserRes = DownloadUserRes.parseMsg(DownloadUserReqRes?.pdu!)\n    if(downloadUserRes.users){\n      const {user} = downloadUserRes.users[0]\n      global = getGlobal();\n      // @ts-ignore\n      global = updateUser(global,user!.id, user)\n      setGlobal(global)\n    }\n    MsgDispatcher.showNotification(\"更新成功\")\n  }\n  async setting(){\n    const chatId = this.msgDispatcher.getChatId()\n    await this.msgDispatcher.sendOutgoingMsg();\n    return await MsgCommandSetting.setting(chatId);\n  }\n  static async requestUploadImage(global:GlobalState,chatId:string,messageId:number,files:FileList | null){\n    await MsgCommandSetting.requestUploadImage(global,chatId,messageId,files)\n  }\n  static async answerCallbackButton(global:GlobalState,chatId:string,messageId:number,data:string){\n    await MsgCommandSetting.answerCallbackButton(global,chatId,messageId,data)\n    await MsgCommandChatGpt.answerCallbackButton(global,chatId,messageId,data)\n    await MsgCommandChatLab.answerCallbackButton(global,chatId,messageId,data)\n\n    if(data.endsWith(\"clearHistory/confirm\")){\n      let global = getGlobal();\n      const chatMessages = global.messages.byChatId[chatId];\n      const ids = Object.keys(chatMessages.byId).map(Number);\n      getActions().sendBotCommand({chatId,command:\"/start\"})\n      MsgDispatcher.apiUpdate({\n        \"@type\":\"deleteMessages\",\n        chatId,\n        ids\n      })\n    }\n\n    if(data.endsWith(\"clearHistory/cancel\")){\n      return MsgDispatcher.updateMessage(chatId,messageId, {\n          inlineButtons: []\n        }\n      )\n    }\n\n    if(data.startsWith(\"requestChatStream/stop/\")){\n      const [chatId,messageId] = data.replace(\"requestChatStream/stop/\",\"\").split(\"/\").map(Number)\n      ControllerPool.stop(chatId,messageId);\n    }\n    if(data.startsWith(\"requestChatStream/stop/\")){\n      const [chatId,messageId] = data.replace(\"requestChatStream/stop/\",\"\").split(\"/\").map(Number)\n      ControllerPool.stop(chatId,messageId);\n    }\n  }\n  static async createWsBot(chatId:string){\n    const global = getGlobal();\n    const user = selectUser(global,chatId)\n    const botWs = BotWebSocket.getInstance(chatId)\n    if(!botWs.isConnect() && user?.fullInfo?.botInfo?.aiBot && user?.fullInfo?.botInfo?.aiBot!.botApi){\n      botWs.setMsgHandler(async (chatId, notifies)=>{\n        for (let i = 0; i < notifies.length; i++) {\n          const {action,payload} = notifies[i]\n          switch (action){\n            case BotWebSocketNotifyAction.onConnectionStateChanged:\n              switch (payload.BotWebSocketState){\n                case BotWebSocketState.connected:\n                  await MsgDispatcher.newTextMessage(chatId,undefined,\"已连接\")\n                  break;\n                case BotWebSocketState.closed:\n                  // await MsgDispatcher.newTextMessage(chatId,undefined,\"已断开\")\n                  break;\n              }\n              break\n            case BotWebSocketNotifyAction.onData:\n              await MsgCommand.handleWsBotOnData(chatId,payload)\n              break\n          }\n        }\n      })\n      botWs.setWsUrl(user?.fullInfo?.botInfo?.aiBot.botApi)\n      botWs.setSession(Account.getCurrentAccount()?.getSession()!)\n      botWs.connect();\n      await botWs.waitForMsgServerState(BotWebSocketState.connected)\n    }\n  }\n  static async handleWsBotOnData(chatId:string,pdu:Pdu){\n    switch (pdu.getCommandId()){\n      case ActionCommands.CID_SendRes:\n        const {action,payload} = SendRes.parseMsg(pdu)\n        await MsgDispatcher.newTextMessage(\n          chatId,undefined,\n          `${payload}`)\n        break\n    }\n  }\n}\n","import MsgDispatcher from \"./MsgDispatcher\";\nimport {currentTs} from \"../share/utils/utils\";\nimport {ApiBotInfo, ApiKeyboardButtons, ApiMessage} from \"../../api/types\";\nimport {GlobalState} from \"../../global/types\";\nimport {getGlobal, setGlobal} from \"../../global\";\nimport {selectUser} from \"../../global/selectors\";\nimport {updateUser} from \"../../global/reducers\";\nimport {DEFAULT_AI_CONFIG_COMMANDS} from \"../setting\";\nimport {callApiWithPdu} from \"./utils\";\nimport {StopChatStreamReq} from \"../../lib/ptp/protobuf/PTPOther\";\nimport Account from \"../share/Account\";\nimport MsgCommand from \"./MsgCommand\";\nimport {showModalFromEvent} from \"../share/utils/modal\";\nimport {PbAiBot_Type, PbChatGpBotConfig_Type} from \"../../lib/ptp/protobuf/PTPCommon/types\";\n\nexport default class MsgCommandChatGpt{\n  private chatId: string;\n  private botInfo: ApiBotInfo;\n  constructor(chatId:string,botInfo:ApiBotInfo) {\n    this.chatId = chatId\n    this.botInfo = botInfo;\n  }\n  static getInlineButtons(chatId:string,isEnableSync:boolean):ApiKeyboardButtons{\n\n    return isEnableSync ? [\n      [\n        {\n          data:`${chatId}/setting/uploadUser`,\n          text:\"上传机器人\",\n          type:\"callback\"\n        },\n        {\n          data:`${chatId}/setting/downloadUser`,\n          text:\"更新机器人\",\n          type:\"callback\"\n        },\n      ],\n      [\n        {\n          data:`${chatId}/setting/createBotWs`,\n          text:\"使用BotApi\",\n          type:\"callback\"\n        },\n      ],\n      [\n        {\n          data:`${chatId}/setting/reloadCommands`,\n          text:\"重载命令\",\n          type:\"callback\"\n        },\n      ],\n    ]:[\n      [\n        {\n          data:`${chatId}/setting/reloadCommands`,\n          text:\"重载命令\",\n          type:\"callback\"\n        },\n      ],\n    ]\n  }\n\n  async setting(){\n    const {chatId} = this;\n    const account = Account.getCurrentAccount();\n    const isEnableSync = account?.getSession();\n    const messageId = await MsgDispatcher.genMsgId();\n    const text = `设置面板`\n    return MsgDispatcher.newMessage(chatId,messageId,{\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      content:{\n        text:{\n          text\n        }\n      },\n      inlineButtons:MsgCommandChatGpt.getInlineButtons(chatId,!!isEnableSync),\n    })\n  }\n  async start(){\n    const messageId = await MsgDispatcher.genMsgId();\n    const {chatId} = this\n    const message = {\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      content:{\n        text:{\n          text:`你可以通过发送以下命令来控制我：\n\n/setting - 设置面板\n/aiModel - 当前模型\n/apiKey - 设置ApiKey\n/initPrompt - 设置初始化上下文Prompt, 每次请求都会带入\n/enableAi - 开启或者关闭AI\n/clearHistory - 清除历史记录\n`\n        }\n      },\n    }\n    MsgDispatcher.newMessage(chatId,messageId,message)\n    return message\n  }\n  async initPrompt(){\n    const messageId = await MsgDispatcher.genMsgId();\n    const {chatId} = this\n    const init_system_content = MsgCommandChatGpt.getChatGptConfig(getGlobal(),chatId,\"init_system_content\")\n\n    const message:ApiMessage = {\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      content:{\n        text:{\n          text:`${init_system_content?init_system_content:\"未设置\"}`\n        }\n      },\n      inlineButtons:[\n        [\n          {\n            text:\"点击修改 Prompt\",\n            type:\"callback\",\n            data:`${chatId}/init_system_content`\n          }\n        ]\n      ]\n    }\n    MsgDispatcher.newMessage(chatId,messageId,message)\n    return message\n  }\n\n  static getAiBotConfig(global:GlobalState,chatId:string,key:'enableAi'|'botApi'|'chatGptConfig'){\n    const user = selectUser(global,chatId);\n    if(\n      user?.fullInfo &&\n      user?.fullInfo.botInfo &&\n      user?.fullInfo.botInfo.aiBot\n    ){\n      return user?.fullInfo.botInfo.aiBot[key]\n    }else{\n      return undefined\n    }\n  }\n  static getChatGptConfig(global:GlobalState,chatId:string,key:'api_key'|'init_system_content'){\n    const user = selectUser(global,chatId);\n    // @ts-ignore\n    const aiBotConfig:PbChatGpBotConfig_Type = MsgCommandChatGpt.getAiBotConfig(global,chatId,\"chatGptConfig\")\n    if(aiBotConfig && aiBotConfig[key]){\n      return aiBotConfig[key]\n    }else{\n      return \"\"\n    }\n  }\n  static changeAiBotConfig(global:GlobalState,botId:string,aiConfig:Partial<PbAiBot_Type>){\n    global = getGlobal();\n    const user = selectUser(global,botId);\n    global = updateUser(global,botId,{\n      ...user,\n      fullInfo:{\n        ...user?.fullInfo,\n        botInfo:{\n          ...user?.fullInfo?.botInfo!,\n          aiBot:{\n            ...user?.fullInfo?.botInfo?.aiBot,\n            ...aiConfig\n          }\n        }\n      }\n    })\n    setGlobal(global)\n  }\n  static changeChatGptConfig(botId:string,chatGptConfig:Partial<PbChatGpBotConfig_Type>){\n    let global = getGlobal();\n    const user = selectUser(global,botId);\n\n    MsgCommandChatGpt.changeAiBotConfig(global,botId,{\n      ...user?.fullInfo?.botInfo?.aiBot,\n      chatGptConfig:{\n        ...user?.fullInfo?.botInfo?.aiBot?.chatGptConfig,\n        ...chatGptConfig\n      }\n    })\n  }\n  async apiKey(){\n    const {chatId} = this\n    const api_key = MsgCommandChatGpt.getChatGptConfig(getGlobal(),chatId,\"api_key\")\n    const {value} = await showModalFromEvent({\n      initVal:api_key,\n      title:\"请输入apiKey\"\n    })\n    if(value && value!== api_key){\n      localStorage.setItem(\"cg-key\",value)\n      MsgCommandChatGpt.changeChatGptConfig(chatId,{api_key:value})\n      return await MsgDispatcher.newTextMessage(chatId,undefined,'修改成功')\n    }\n    return true\n  }\n  async aiModel(){\n    const messageId = await MsgDispatcher.genMsgId();\n    const {chatId} = this\n    const model = this.botInfo.aiBot?.chatGptConfig?.config?.model\n    const message:ApiMessage = {\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      content:{\n        text:{\n          text:`当前模型:【${model}】`\n        }\n      },\n    }\n    MsgDispatcher.newMessage(chatId,messageId,message)\n    return message\n  }\n  async enableAi(){\n    const messageId = await MsgDispatcher.genMsgId();\n    const {chatId} = this\n    const isEnable = !!this.botInfo.aiBot?.enableAi\n    const message:ApiMessage = {\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      content:{\n        text:{\n          text:`当前状态:【${isEnable ? \"开启\" : \"关闭\"}】，修改请点击下面按钮:`\n        }\n      },\n      inlineButtons:[\n        [\n          {\n            text:isEnable ? \"关闭\" : \"开启\",\n            type:\"callback\",\n            data:`${chatId}/enableAi/${isEnable ? \"0\":\"1\"}`\n          }\n        ]\n      ]\n    }\n    MsgDispatcher.newMessage(chatId,messageId,message)\n    return message\n  }\n  static async createBotWs(chatId:string){\n    let global = getGlobal();\n    // @ts-ignore\n    let botApi:string | undefined = MsgCommandChatGpt.getAiBotConfig(global,chatId,\"botApi\")\n    if(!botApi){\n      const res = await showModalFromEvent({\n        type:\"singleInput\",\n        title:\"请输入 网址\",\n        placeholder:\"\",\n        initVal:botApi\n      });\n      let {value} = res\n      if(botApi !== value){\n        botApi = value\n        MsgCommandChatGpt.changeAiBotConfig(global,chatId,{\n          botApi:value || \"\"\n        })\n      }\n    }\n\n    if(botApi){\n      await MsgCommand.createWsBot(chatId)\n    }\n  }\n  static async answerCallbackButton(global:GlobalState,chatId:string,messageId:number,data:string){\n    switch (data){\n      case `${chatId}/setting/createBotWs`:\n        await MsgCommandChatGpt.createBotWs(chatId)\n        return\n      case `${chatId}/setting/uploadUser`:\n        await MsgCommand.uploadUser(global,chatId)\n        break\n      case `${chatId}/setting/downloadUser`:\n        await MsgCommand.downloadUser(global,chatId)\n        break\n      case `${chatId}/setting/reloadCommands`:\n        await MsgCommand.reloadCommands(chatId, DEFAULT_AI_CONFIG_COMMANDS)\n        break\n      case `${chatId}/requestChatStream/stop`:\n        MsgDispatcher.updateMessage(chatId,messageId, {\n          inlineButtons:[\n            [\n              {\n                text: \"已停止输出\",\n                type: \"unsupported\"\n              }\n            ]\n          ]\n        })\n        await callApiWithPdu(new StopChatStreamReq({\n          chatId:parseInt(chatId),\n          msgId:messageId\n        }).pack())\n        break\n      case `${chatId}/init_system_content`:\n        global = getGlobal();\n        let init_system_content = MsgCommandChatGpt.getChatGptConfig(global,chatId,\"init_system_content\")\n        const {value} = await showModalFromEvent({\n          type:\"singleInput\",\n          title:\"请输入 上下文记忆\",\n          placeholder:\"每次请求都会带入 上下文记忆\",\n          initVal:init_system_content\n        });\n        if(value){\n          init_system_content = value\n          MsgCommandChatGpt.changeChatGptConfig(chatId,{\n            init_system_content:value\n          })\n          const message1 = {\n            content:{\n              text:{\n                text:`${init_system_content?init_system_content:\"未设置\"}`\n              }\n            },\n            inlineButtons:[\n              [\n                {\n                  text:\"点击修改 Prompt\",\n                  type:\"callback\",\n                  data:`${chatId}/init_system_content`\n                }\n              ]\n            ]\n          }\n          // @ts-ignore\n          MsgDispatcher.newMessage(chatId,messageId,message1)\n        }\n\n        break;\n      case `${chatId}/apiKey`:\n        const res = await showModalFromEvent({\n          type:\"singleInput\",\n          title:\"请输入 ApiKey\",\n          placeholder:\"\"\n        });\n        let api_key = res.value\n        if(api_key){\n          global = getGlobal();\n          const user = selectUser(global,chatId);\n          global = updateUser(global,chatId,{\n            ...user,\n            fullInfo:{\n              ...user?.fullInfo,\n              botInfo:{\n                ...user?.fullInfo?.botInfo!,\n                aiBot:{\n                  ...user?.fullInfo?.botInfo?.aiBot,\n                  chatGptConfig:{\n                    ...user?.fullInfo?.botInfo?.aiBot?.chatGptConfig,\n                    api_key\n                  }\n                }\n              }\n            }\n          })\n          setGlobal(global)\n          if(api_key){\n            api_key = \"```\\n\"+api_key+\"```\";\n          }\n          const message2 = {\n            content:{\n              text:{\n                text:`当前 /apiKey:\\n ${api_key? api_key:\"未设置\"}`\n              }\n            },\n            inlineButtons:[\n              [\n                {\n                  text:\"点击修改 apiKey\",\n                  type:\"callback\",\n                  data:`${chatId}/apiKey`\n                }\n              ]\n            ]\n          }\n          // @ts-ignore\n          MsgDispatcher.newMessage(chatId,messageId,message2)\n        }\n\n        break;\n      case `${chatId}/enableAi/0`:\n      case `${chatId}/enableAi/1`:\n        const isEnable = data === `${chatId}/enableAi/1`;\n        global = getGlobal();\n        const user = selectUser(global,chatId);\n        global = updateUser(global,chatId,{\n          ...user,\n          fullInfo:{\n            ...user?.fullInfo,\n            botInfo:{\n              ...user?.fullInfo?.botInfo!,\n              aiBot:{\n                ...user?.fullInfo?.botInfo?.aiBot,\n                enableAi:isEnable\n              }\n            }\n          }\n        })\n        setGlobal(global)\n        MsgDispatcher.updateMessage(chatId,messageId,{\n          content:{\n            text:{\n              text:`当前状态:【${isEnable ? \"开启\" : \"关闭\"}】，修改请点击下面按钮:`\n            }\n          },\n          inlineButtons:[\n            [\n              {\n                text:isEnable ? \"关闭\" : \"开启\",\n                type:\"callback\",\n                data:`${chatId}/enableAi/${isEnable ? \"0\":\"1\"}`\n              }\n            ]\n          ]\n        })\n        break\n    }\n  }\n}\n","import MsgDispatcher from \"./MsgDispatcher\";\nimport {ApiBotInfo, ApiKeyboardButtons, ApiMessage} from \"../../api/types\";\nimport {DEFAULT_BOT_COMMANDS, UserIdCnPrompt, UserIdEnPrompt, UserIdFirstBot} from \"../setting\";\nimport {GlobalState} from \"../../global/types\";\nimport {showModalFromEvent} from \"../share/utils/modal\";\nimport {getActions, getGlobal, setGlobal} from \"../../global\";\nimport {currentTs} from \"../share/utils/utils\";\nimport {DEBUG} from \"../../config\";\nimport {selectChatMessage} from \"../../global/selectors\";\nimport {updateChat} from \"../../global/reducers\";\n\nexport default class MsgCommandChatLab{\n  private chatId: string;\n  private botInfo: ApiBotInfo;\n  constructor(chatId:string,botInfo:ApiBotInfo) {\n    this.chatId = chatId\n    this.botInfo = botInfo;\n  }\n  static getInlineButtonsDemo():ApiKeyboardButtons{\n    return [\n\n      [\n        {\n          text:\"command button\",\n          type:'command'\n        },\n        {\n          text:\"unsupported button\",\n          type:'unsupported'\n        },\n        {\n          text:\"buy button\",\n          type:'buy'\n        }\n      ],\n      [\n        {\n          text:\"game button\",\n          type:'game'\n        },\n        {\n          text:\"requestPhone button\",\n          type:'requestPhone'\n        }\n      ],\n      [\n        {\n          text:\"receipt button\",\n          type:'receipt',\n          receiptMessageId:1\n        },\n      ],\n      [\n        {\n          text:\"url button\",\n          type:'url',\n          url:\"http://www.ai.com\"\n        },\n      ],\n      [\n        {\n          text:\"simpleWebView button\",\n          type:'simpleWebView',\n          url:\"http://www.ai.com\"\n        },\n        {\n          text:\"webView button\",\n          type:'webView',\n          url:\"http://www.ai.com\"\n        },\n      ],\n      [\n        {\n          text:\"requestPoll button\",\n          type:'requestPoll',\n          isQuiz:true\n        },\n        {\n          text:\"switchBotInline button\",\n          type:'switchBotInline',\n          query: \"\",\n          isSamePeer: false\n        },\n        {\n          text:\"userProfile button\",\n          type:'userProfile',\n          userId: UserIdFirstBot,\n        },\n      ],\n      [\n        {\n          text:\"requestUploadImage button\",\n          type:'requestUploadImage',\n        },\n      ]\n    ]\n  }\n  static async createChat(botId:string,data:string,msgId:number){\n    const t = data.split(\"/\")\n    const chatId = t[0]\n    const title = t[3]\n    const message = selectChatMessage(getGlobal(),chatId,msgId)\n    if(message){\n      const prompt = message.content.text!.text\n      getActions().createChat({title,promptInit:prompt})\n    }\n  }\n  static async createPromptChat(chatId:string,id:string){\n    let name: string;\n    const prompts = require('./prompts.json')\n    let tag: string;\n    if(id === UserIdEnPrompt){\n      name = \"英文Prompt大全\"\n      tag = 'en'\n    }else{\n      name = \"中文Prompt大全\"\n      tag = 'cn'\n    }\n    let needCreate = true;\n    let global = getGlobal();\n    if(global.chats.byId[id]){\n      const chat = global.chats.byId[id];\n      if(chat.isNotJoined){\n        delete global.chats.byId[id]\n        delete global.users.byId[id]\n        setGlobal(global)\n      }else{\n        needCreate = false\n      }\n    }\n    if(!needCreate){\n      getActions().openChat({id,shouldReplaceHistory:true})\n      return MsgDispatcher.showNotification(`${name} 已创建`)\n    }\n    const promptRows = prompts[tag]\n    getActions().createChat({id,title:name})\n    const msg0 = await MsgDispatcher.newTextMessage(chatId,undefined,\"正在创建 \"+name+\"...\")\n    setTimeout(async ()=>{\n      promptRows.reverse();\n      for (let i = 0; i < promptRows.length; i++) {\n        const desc = promptRows[i][1]\n        const title = promptRows[i][0]\n        if(desc){\n          await MsgDispatcher.newTextMessage(id,undefined,desc,[\n            [\n              {\n                text:\"创建Gpt聊天\",\n                type:\"callback\",\n                data:`${id}/createChat/${tag}/${title}`\n              }\n            ]\n          ])\n          await MsgDispatcher.updateMessage(chatId,msg0.id,{\n            ...msg0,\n            content:{\n              text:{\n                text:`正在创建 ${name}... ${i+1}/${promptRows.length}`\n              }\n            }\n          })\n        }\n\n      }\n    },500)\n  }\n  static async answerCallbackButton(global:GlobalState,chatId:string,messageId:number,data:string){\n\n    if(data.startsWith(`${chatId}/createChat/cn`)){\n      await MsgCommandChatLab.createChat(UserIdCnPrompt,data,messageId)\n      return\n    }\n    if(data.startsWith(`${chatId}/createChat/en`)){\n      await MsgCommandChatLab.createChat(UserIdEnPrompt,data,messageId)\n      return\n    }\n    switch (data){\n      case `${chatId}/lab/createEnPrompt`:\n        await MsgCommandChatLab.createPromptChat(chatId,UserIdEnPrompt)\n        break\n      case `${chatId}/lab/createCnPrompt`:\n        await MsgCommandChatLab.createPromptChat(chatId,UserIdCnPrompt)\n        break\n      case `${chatId}/lab/InlineButs`:\n        await MsgDispatcher.newTextMessage(chatId,undefined,\"\",MsgCommandChatLab.getInlineButtonsDemo())\n        break\n\n      case `${chatId}/lab/dumpUsers`:\n        if(DEBUG){\n          await MsgDispatcher.newCodeMessage(chatId,undefined,JSON.stringify(global.messages.byChatId[chatId],null,2))\n        }\n        break\n      case `${chatId}/lab/testMsg`:\n        const {value} = await showModalFromEvent({\n          title: \"输入JSON 格式的 msg\", type: \"singleInput\"\n        })\n        try {\n          if(value){\n            const testMsg = async (value:string)=>{\n              const message:ApiMessage = JSON.parse(value);\n              message.chatId = chatId;\n              message.id = await MsgDispatcher.genMsgId();\n              message.isOutgoing = false\n              message.senderId = chatId\n              message.date = currentTs()\n              await MsgDispatcher.newMessage(chatId,message.id,message)\n            }\n            await testMsg(value);\n          }\n        }catch (e){\n          getActions().showNotification({\n            message:\"解析失败\"\n          })\n        }\n        break\n    }\n  }\n  async lab(){\n    const messageId = await MsgDispatcher.genMsgId();\n    return await MsgDispatcher.newTextMessage(this.chatId,messageId,\"实验室\",[\n      [\n        {\n          data:`${this.chatId}/lab/createCnPrompt`,\n          text:\"中文Prompt大全\",\n          type:\"callback\"\n        },\n      ],\n      [\n        {\n          data:`${this.chatId}/lab/createEnPrompt`,\n          text:\"英文Prompt大全\",\n          type:\"callback\"\n        },\n      ],\n      // [\n      //   {\n      //     data:`${this.chatId}/lab/dumpUsers`,\n      //     text:\"DumpUsers\",\n      //     type:\"callback\"\n      //   },\n      // ],\n      // [\n      //   {\n      //     data:`${this.chatId}/lab/InlineButs`,\n      //     text:\"InlineButs Demo\",\n      //     type:\"callback\"\n      //   },\n      // ],\n        // [\n        //   {\n        //     data:`${this.chatId}/temp/PromptDemo`,\n        //     text:\"PromptDemo\",\n        //     type:\"callback\"\n        //   },\n        // ],\n    ])\n  }\n\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { SyncReq_Type } from './types';\n\nexport default class SyncReq extends BaseMsg {\n  public msg?: SyncReq_Type\n  constructor(msg?: SyncReq_Type) {\n    super('PTP.Sync.SyncReq', msg);\n    this.setCommandId(ActionCommands.CID_SyncReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): SyncReq_Type {\n    return new SyncReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { SyncRes_Type } from './types';\n\nexport default class SyncRes extends BaseMsg {\n  public msg?: SyncRes_Type\n  constructor(msg?: SyncRes_Type) {\n    super('PTP.Sync.SyncRes', msg);\n    this.setCommandId(ActionCommands.CID_SyncRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): SyncRes_Type {\n    return new SyncRes().decode(pdu.body());\n  }\n}\n","import MsgDispatcher from \"./MsgDispatcher\";\nimport {selectChatMessage, selectChatMessages, selectUser} from \"../../global/selectors\";\nimport {addChats, addUsers, updateChatListIds, updateUser} from \"../../global/reducers\";\nimport {getActions, getGlobal, setGlobal} from \"../../global\";\nimport {ApiKeyboardButtons, ApiUser} from \"../../api/types\";\nimport {callApiWithPdu} from \"./utils\";\nimport {currentTs} from \"../share/utils/utils\";\nimport {\n  MessageStoreRow_Type,\n  PbMsg_Type,\n  QrCodeType,\n  UserStoreData_Type,\n  UserStoreRow_Type\n} from \"../../lib/ptp/protobuf/PTPCommon/types\";\nimport {DownloadMsgReq, DownloadMsgRes, UploadMsgReq} from \"../../lib/ptp/protobuf/PTPMsg\";\nimport {DownloadUserReq, DownloadUserRes, UploadUserReq} from \"../../lib/ptp/protobuf/PTPUser\";\nimport Mnemonic from \"../../lib/ptp/wallet/Mnemonic\";\nimport Account from \"../share/Account\";\nimport {AuthNativeReq} from \"../../lib/ptp/protobuf/PTPAuth\";\nimport {GlobalState} from \"../../global/types\";\nimport {getPasswordFromEvent} from \"../share/utils/password\";\nimport {hashSha256} from \"../share/utils/helpers\";\nimport {SyncReq, SyncRes} from \"../../lib/ptp/protobuf/PTPSync\";\nimport MsgCommand from \"./MsgCommand\";\nimport {Decoder} from \"@nuintun/qrcode\";\nimport {PbQrCode} from \"../../lib/ptp/protobuf/PTPCommon\";\nimport {Pdu} from \"../../lib/ptp/protobuf/BaseMsg\";\nimport {aesDecrypt} from \"../../util/passcode\";\nimport {DEBUG} from \"../../config\";\n\nlet currentSyncBotContext:string|undefined;\n\nexport default class MsgCommandSetting{\n  static async start(chatId:string){\n    const messageId = await MsgDispatcher.genMsgId();\n    const text = `你可以通过发送以下命令来控制我：\n\n/setting - 设置面板\n/clearHistory - 清除历史记录\n/reloadCommands - 重载命令\n/lab - 实验室\n  * 创建中文Prompt大全\n  * 创建英文Prompt大全\n`\n    return MsgDispatcher.newMessage(chatId,messageId,{\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      content:{\n        text:{\n          text\n        }\n      },\n    })\n  }\n  static async setting(chatId:string){\n    const account = Account.getCurrentAccount();\n    const isEnableSync = account?.getSession();\n    const messageId = await MsgDispatcher.genMsgId();\n    return MsgDispatcher.newMessage(chatId,messageId,{\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      content:{\n        text:{\n          text:\"设置面板\"\n        }\n      },\n      inlineButtons:MsgCommandSetting.getInlineButtons(chatId,!!isEnableSync),\n    })\n  }\n  static getInlineButtons(chatId:string,isEnableSync:boolean):ApiKeyboardButtons{\n    const res:ApiKeyboardButtons = isEnableSync ? [\n      [\n        {\n          data:`${chatId}/setting/uploadFolder`,\n          text:\"上传对话\",\n          type:\"callback\"\n        },\n        {\n          data:`${chatId}/setting/downloadFolder`,\n          text:\"下载对话\",\n          type:\"callback\"\n        },\n      ],\n      [\n        {\n          data:`${chatId}/setting/accountAddress`,\n          text:\"账户地址\",\n          type:\"callback\"\n        },\n      ],\n      [\n        {\n          data:`${chatId}/setting/showMnemonic`,\n          text:\"二维码导出账户\",\n          type:\"callback\"\n        },\n      ],\n      [\n        {\n          text:\"二维码导入账户\",\n          type:\"requestUploadImage\"\n        },\n      ],\n      [\n        {\n          data:`${chatId}/setting/disableSync`,\n          text:\"单机模式\",\n          type:\"callback\"\n        },\n        {\n          data:`${chatId}/setting/cancel`,\n          text:\"取消\",\n          type:\"callback\"\n        },\n      ],\n    ]:[\n      [\n        {\n          text:\"二维码导入账户\",\n          type:'requestUploadImage',\n        },\n      ],\n      [\n        {\n          data:`${chatId}/setting/enableSync`,\n          text:\"云端模式\",\n          type:\"callback\"\n        },\n        {\n          data:`${chatId}/setting/cancel`,\n          text:\"取消\",\n          type:\"callback\"\n        },\n      ],\n    ]\n    if(DEBUG){\n      res.push(MsgCommand.buildInlineButton(chatId,\"setting/debug\",\"Debug\",'callback'))\n    }\n    return res;\n  }\n  static async requestUploadImage(global:GlobalState,chatId:string,messageId:number,files:FileList | null){\n    if(files && files.length > 0){\n      const file = files[0]\n      const qrcode = new Decoder();\n      const blob = new Blob([file], { type: file.type });\n      const blobUrl = URL.createObjectURL(blob);\n      try {\n        const result = await qrcode.scan(blobUrl)\n        if(result && result.data.startsWith('wai://')){\n          const mnemonic =  result.data\n          const qrcodeData = mnemonic.replace('wai://','')\n          const qrcodeDataBuf = Buffer.from(qrcodeData,'hex')\n          const decodeRes = PbQrCode.parseMsg(new Pdu(qrcodeDataBuf))\n          if(decodeRes){\n            const {type,data} = decodeRes;\n            if(type !== QrCodeType.QrCodeType_MNEMONIC){\n              throw new Error(\"解析二维码失败\")\n            }\n            const {password} = await getPasswordFromEvent();\n            const res = await aesDecrypt(data,Buffer.from(hashSha256(password),\"hex\"))\n            if(res){\n              await MsgCommandSetting.setMnemonic(chatId,res,password);\n              return;\n            }\n          }\n        }\n      }catch (e){\n\n      }finally {\n        getActions().showNotification({message:\"解析二维码失败\"})\n      }\n    }\n  }\n  static async setMnemonic(chatId:string,data:string,password?:string){\n    const mnemonic = new Mnemonic(data)\n    if(mnemonic.checkMnemonic()){\n      await MsgCommand.sendText(chatId,mnemonic.toEntropy())\n      if(!password){\n        const res = await getPasswordFromEvent()\n        if(res.password){\n          password = res.password\n        }else{\n          return\n        }\n      }\n      if(password){\n        const entropy = mnemonic.toEntropy();\n        let accountId = Account.getAccountIdByEntropy(entropy);\n        if(!accountId){\n          accountId = Account.genAccountId()\n        }\n        const account = Account.getInstance(accountId);\n        Account.setCurrentAccountId(accountId);\n        await account?.setEntropy(entropy)\n        const pwd = hashSha256(password)\n        const ts = +(new Date());\n        const {address, sign} = await account!.signMessage(ts.toString(), pwd);\n        const session = Account.formatSession({address,sign,ts});\n        account!.saveSession(session)\n        await callApiWithPdu(new AuthNativeReq({\n          accountId,entropy:mnemonic.toEntropy(),session\n        }).pack())\n        window.location.reload()\n      }\n    }else{\n      await MsgCommand.sendText(chatId,\"mnemonic 不合法\")\n    }\n  }\n  static async answerCallbackButton(global:GlobalState,chatId:string,messageId:number,data:string){\n    switch (data){\n      case `${chatId}/setting/debug`:\n        if(DEBUG){\n          console.log(\"=========>>>【start】\",{\n            users:global.users,\n            chats:global.chats,\n            chatIdsDeleted:global.chatIdsDeleted,\n            messages:global.messages,\n            chatFolders:global.chatFolders,\n          })\n        }\n        // await MsgDispatcher.newJsonMessage(chatId,undefined,{chatFolders:global.chatFolders})\n        // await MsgDispatcher.newJsonMessage(chatId,undefined,{chatIdsDeleted:global.chatIdsDeleted})\n        await MsgCommand.createWsBot(chatId)\n        break\n      case `${chatId}/setting/getSession`:\n        const account = Account.getCurrentAccount();\n        const entropy = await account?.getEntropy();\n        const mnemonic = Mnemonic.fromEntropy(entropy!)\n        const accountId = account?.getAccountId()\n\n        await MsgCommand.sendText(chatId,accountId!.toString())\n        await MsgCommand.sendText(chatId,entropy!)\n        await MsgCommand.sendText(chatId,mnemonic.getWords())\n        const session = account?.getSession()\n        if(session){\n          const {address} = Account.parseSession(session)!\n          await MsgCommand.sendText(chatId,address)\n        }\n        break\n      case `${chatId}/setting/setMnemonic`:\n      case `${chatId}/setting/import`:\n        const res = prompt(\"setMnemonic\")\n        if(res){\n          await MsgCommandSetting.setMnemonic(chatId,res)\n        }\n        break\n      case `${chatId}/setting/uploadFolder`:\n        await MsgCommandSetting.syncFolders(true)\n        break\n      case `${chatId}/setting/downloadFolder`:\n        await MsgCommandSetting.syncFolders(false)\n        break\n      case `${chatId}/setting/syncMessage`:\n        getActions().updateGlobal({\n          showPickBotModal:true\n        })\n        break\n      case `${chatId}/setting/uploadMessages`:\n      case `${chatId}/setting/downloadMessages`:\n        currentSyncBotContext = data;\n        getActions().updateGlobal({\n          showPickBotModal:true\n        })\n        break\n      case `${chatId}/setting/accountAddress`:\n        const address = Account.getCurrentAccount()?.getSessionAddress()\n        await MsgDispatcher.newCodeMessage(chatId,undefined,address||\"-\")\n        break\n      case `${chatId}/setting/showMnemonic`:\n        getActions().updateGlobal({\n          showMnemonicModal:true\n        })\n        break\n      case `${chatId}/setting/cancel`:\n        MsgDispatcher.updateMessage(chatId,messageId,{\n          inlineButtons:[],\n        })\n        break\n      case `${chatId}/setting/disableSync`:\n        await MsgCommandSetting.disableSync(global,chatId,messageId)\n        break\n      case `${chatId}/setting/enableSync`:\n        const {password} = await getPasswordFromEvent()\n        if(!password){\n          MsgDispatcher.updateMessage(chatId,messageId,{\n            inlineButtons:[],\n          })\n        }else{\n          await MsgCommandSetting.enableSync(global,chatId,messageId,password)\n        }\n        break\n    }\n  }\n  static buildDefaultChat(user:ApiUser){\n    return {\n      \"id\": user.id,\n      \"title\":  user.firstName,\n      \"type\": \"chatTypePrivate\",\n      \"isMuted\": false,\n      \"isMin\": false,\n      \"hasPrivateLink\": false,\n      \"isSignaturesShown\": false,\n      \"isVerified\": true,\n      \"isJoinToSend\": true,\n      \"isJoinRequest\": true,\n      lastMessage:{\n        id:0,\n        chatId:user.id,\n        isOutgoing:false,\n        date:Math.ceil(+(new Date)/1000),\n        content:{\n          action:{\n            type:\"chatCreate\",\n            text:\"\",\n          }\n        }\n      },\n      \"isForum\": false,\n      \"isListed\": true,\n      \"settings\": {\n        \"isAutoArchived\": false,\n        \"canReportSpam\": false,\n        \"canAddContact\": false,\n        \"canBlockContact\": false\n      },\n      \"accessHash\": \"\"\n    }\n  }\n  static async syncFolders(isUpload:boolean){\n    let global = getGlobal();\n    const chats = global.chats.byId\n    const chatIds = Object.keys(chats).filter(id=>id !== \"1\");\n    const chatIdsDeleted:string[] = global.chatIdsDeleted;\n    console.log(\"【local】\",{chatIds,chatIdsDeleted})\n    const userStoreData:UserStoreData_Type|undefined = isUpload ?{\n      time:currentTs(),\n      chatFolders:JSON.stringify(global.chatFolders),\n      chatIds,\n      chatIdsDeleted\n    } :undefined\n\n    const res = await callApiWithPdu(new SyncReq({\n      userStoreData\n    }).pack())\n    const syncRes = SyncRes.parseMsg(res!.pdu)\n\n    let users:UserStoreRow_Type[] = [];\n    if(isUpload){\n      for (let index = 0; index < chatIds.length; index++) {\n        const userId = chatIds[index];\n        users.push({\n          time:currentTs(),\n          userId,\n          user:selectUser(global,userId)\n        })\n      }\n      await callApiWithPdu(new UploadUserReq({\n        users,\n        time:currentTs()\n      }).pack())\n    }\n\n    if(syncRes.userStoreData){\n      let {chatFolders,...res} = syncRes.userStoreData\n      console.log(\"【remote userStoreData】\",res,\"chatFolders:\",chatFolders ? JSON.parse(chatFolders):[])\n      if(!chatFolders){\n        // @ts-ignore\n        chatFolders = global.chatFolders\n      }else{\n        chatFolders = JSON.parse(chatFolders)\n      }\n      res.chatIdsDeleted?.forEach(id=>{\n        if(!chatIdsDeleted.includes(id)){\n          chatIdsDeleted.push(id)\n        }\n      })\n      if(res.chatIds){\n        const DownloadUserReqRes = await callApiWithPdu(new DownloadUserReq({\n          userIds:res.chatIds,\n        }).pack())\n        if(DownloadUserReqRes){\n          const downloadUserRes = DownloadUserRes.parseMsg(DownloadUserReqRes?.pdu!)\n          console.log(\"【DownloadUserRes】\",downloadUserRes.users)\n          global = getGlobal();\n          if(downloadUserRes.users){\n            const addUsersObj = {}\n            const addChatsObj = {}\n            for (let index = 0; index < downloadUserRes.users.length; index++) {\n              const {user} = downloadUserRes.users[index];\n              if(!chatIdsDeleted.includes(user!.id)){\n                if(chatIds.includes(user!.id)){\n                  // @ts-ignore\n                  global = updateUser(global,user!.id, user!)\n                }else{\n                  chatIds.push(user?.id!)\n                  // @ts-ignore\n                  addUsersObj[user!.id] = user!\n                  // @ts-ignore\n                  addChatsObj[user!.id] = MsgCommandSetting.buildDefaultChat(user!)\n                }\n              }\n            }\n            if(Object.keys(addUsersObj).length > 0){\n              global = addUsers(global,addUsersObj)\n              global = addChats(global,addChatsObj)\n            }\n          }\n          global = updateChatListIds(global, \"active\", chatIds);\n          // @ts-ignore\n          global = {...global,chatFolders}\n          setGlobal({\n            ...global,\n            chatIdsDeleted:chatIdsDeleted || [],\n          })\n        }\n      }else{\n        getActions().updateGlobal({\n          chatIdsDeleted:chatIdsDeleted || [],\n          chatFolders\n        })\n      }\n    }\n    getActions().showNotification({message:\"更新成功\"})\n  }\n  static async enableSync(global:GlobalState,chatId:string,messageId:number,password:string){\n    const account = Account.getCurrentAccount();\n    const pwd = hashSha256(password)\n    const ts = +(new Date());\n    const {address, sign} = await account!.signMessage(ts.toString(), pwd);\n    const session = Account.formatSession({address,sign,ts});\n    account!.saveSession(session)\n    const entropy = await account!.getEntropy()\n    const accountId = account!.getAccountId();\n    await callApiWithPdu(new AuthNativeReq({\n      accountId,entropy,session\n    }).pack())\n    MsgDispatcher.updateMessage(chatId,messageId,{\n      inlineButtons:[]\n    })\n    getActions().showNotification({message:\"开启成功\"})\n    setTimeout(()=>window.location.reload(),500)\n  }\n  static async disableSync(global:GlobalState,chatId:string,messageId:number){\n    const account = Account.getCurrentAccount();\n    account?.delSession();\n    MsgDispatcher.updateMessage(chatId,messageId,{\n      inlineButtons:[]\n    })\n    await callApiWithPdu(new AuthNativeReq({\n      accountId:account!.getAccountId(),\n      entropy:await account!.getEntropy(),\n      session:undefined\n    }).pack())\n    getActions().showNotification({message:\"关闭成功\"})\n    setTimeout(()=>window.location.reload(),500)\n  }\n  static async onSelectSyncBot(chatId:string){\n    const data = currentSyncBotContext;\n    const isUpload = !data?.endsWith(\"downloadMessages\");\n    currentSyncBotContext = undefined\n    let global = getGlobal();\n    if(isUpload){\n      const messageById = selectChatMessages(global,chatId);\n      const messages:MessageStoreRow_Type[] = [];\n      if(messageById){\n        for (let i = 0; i < Object.keys(messageById).length; i++) {\n          const msgId = parseInt(Object.keys(messageById)[i])\n          // @ts-ignore\n          const message:PbMsg_Type = messageById[msgId]\n          messages.push({\n            time:currentTs(),\n            message,\n            messageId:msgId,\n          })\n        }\n      }\n      await MsgCommandSetting.uploadMsgList(chatId,messages)\n\n    }else{\n      const res = await callApiWithPdu(new DownloadMsgReq({\n        chatId,\n      }).pack())\n      if(res){\n        const {err,messages} = DownloadMsgRes.parseMsg(res?.pdu)\n        console.log(\"messages\",messages)\n        if(messages){\n          for (let i = 0; i < messages?.length; i++) {\n            const {message,messageId} = messages[i]\n            const localMsg = selectChatMessage(global,chatId,messageId)\n            if(!localMsg){\n              // @ts-ignore\n              MsgDispatcher.newMessage(chatId,messageId,message)\n            }else{\n              // @ts-ignore\n              MsgDispatcher.updateMessage(chatId,messageId,message)\n            }\n          }\n        }\n        getActions().showNotification({message:\"更新成功\"})\n      }else{\n        getActions().showNotification({message:\"更新失败\"})\n      }\n    }\n  }\n  static async uploadMsgList(chatId:string,messages:MessageStoreRow_Type[]){\n\n    if(messages.length > 0){\n      const res = await callApiWithPdu(new UploadMsgReq({\n        messages,\n        chatId,\n        time:currentTs(),\n      }).pack())\n      if(!res){\n        getActions().showNotification({message:\"更新失败\"})\n      }else{\n        getActions().showNotification({message:\"更新成功\"})\n      }\n    }\n  }\n}\n","import {\n  ApiAttachment,\n  ApiBotInfo,\n  ApiChat,\n  ApiFormattedText,\n  ApiKeyboardButtons,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiSticker,\n  ApiUser,\n  ApiVideo\n} from \"../../api/types\";\nimport {GlobalState} from \"../../global/types\";\nimport {getActions, getGlobal} from \"../../global\";\nimport {callApiWithPdu} from \"./utils\";\nimport {currentTs} from \"../share/utils/utils\";\nimport {GenMsgIdReq, GenMsgIdRes, SendReq} from \"../../lib/ptp/protobuf/PTPMsg\";\nimport MsgCommand from \"./MsgCommand\";\nimport {parseCodeBlock} from \"../share/utils/stringParse\";\nimport MsgWorker from \"./MsgWorker\";\nimport {DEFAULT_BOT_COMMANDS, UserIdFirstBot} from \"../setting\";\nimport MsgCommandChatGpt from \"./MsgCommandChatGpt\";\nimport MsgCommandSetting from \"./MsgCommandSetting\";\nimport {selectUser} from \"../../global/selectors\";\nimport MsgCommandChatLab from \"./MsgCommandChatLab\";\nimport BotWebSocket, {BotWebSocketState} from \"./bot/BotWebSocket\";\n\nexport type ParamsType = {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n  botInfo?: ApiBotInfo\n}\nexport type OptionsType = {\n  senderId?:string,\n  inlineButtons?:ApiKeyboardButtons\n  isLocalMessageId?:boolean,\n}\n\nexport default class MsgDispatcher {\n  private params: ParamsType;\n  private global: GlobalState;\n  private msgCommand: MsgCommand;\n  constructor(global:GlobalState,params: ParamsType) {\n    this.global = global;\n    this.params = params;\n    this.msgCommand = new MsgCommand(this)\n  }\n\n  static apiUpdate(update:any){\n    const {apiUpdate} = getActions()\n    apiUpdate(update)\n  }\n  getMsgSenderAsId(){\n    return this.params.sendAs?.id;\n  }\n  getMsgText(){\n    return this.params.text;\n  }\n\n  getChatId(){\n    return this.params.chat.id;\n  }\n  genMsgDate(){\n    return Math.ceil(+(new Date())/1000);\n  }\n\n  static async genMsgId(isLocal?:boolean){\n    // @ts-ignore\n    const {pdu} = await callApiWithPdu(new GenMsgIdReq({isLocal:!!isLocal}).pack())\n    const {messageId} = GenMsgIdRes.parseMsg(pdu)\n    return messageId\n  }\n\n  updateMessageSendSucceeded(localId:number,message:ApiMessage){\n    MsgDispatcher.apiUpdate({\n      '@type': \"updateMessageSendSucceeded\",\n      localId,\n      chatId: this.params.chat.id,\n      message: message\n    });\n  }\n  updateMessageText(id:number,{text}:{text: any},message:ApiMessage){\n    this.updateMessage(id,{\n      ...message,\n      content:{\n        ...message.content,\n        text: {\n          ...message.content.text,\n          text\n        }\n      }\n    })\n  }\n  updateMessage(id:number,message:Partial<ApiMessage>){\n    return MsgDispatcher.updateMessage(this.getChatId(),id,message)\n  }\n  static updateMessage(chatId:string,messageId:number,message:Partial<ApiMessage>){\n    MsgDispatcher.apiUpdate({\n        '@type': \"updateMessage\",\n        id: messageId,\n        chatId,\n        message,\n      });\n    return message\n  }\n  static async newCodeMessage(chatId:string,messageId?:number,text?:string){\n    text = \"```\\n\"+text!+\"```\"\n    return await MsgDispatcher.newTextMessage(chatId,messageId,text,[])\n  }\n\n  static async newJsonMessage(chatId:string,messageId?:number,json?:object){\n    const text = \"```json\\n\"+JSON.stringify(json,null,2)!+\"```\"\n    return await MsgDispatcher.newTextMessage(chatId,messageId,text,[])\n  }\n\n  static async newTextMessage(chatId:string,messageId?:number,text?:string,inlineButtons?:ApiKeyboardButtons,options?:{isOutgoing?:boolean}){\n    if(!messageId){\n      messageId = await MsgDispatcher.genMsgId();\n    }\n    const global = getGlobal();\n    const user = selectUser(global,chatId)\n    let message:ApiMessage = {\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      inlineButtons,\n      content:{\n        text:{\n          text:text||\"\"\n        }\n      },\n      ...options\n    }\n    message = MsgWorker.handleMessageTextCode(message)\n    if(user && user.fullInfo?.botInfo){\n      message = MsgWorker.handleBotCmdText(message,user.fullInfo?.botInfo)\n    }\n    MsgDispatcher.apiUpdate({\n      '@type': \"newMessage\",\n      chatId,\n      id:messageId,\n      message,\n      shouldForceReply:false\n    });\n    return MsgDispatcher.newMessage(chatId,messageId,message)\n  }\n  static newMessage(chatId:string,messageId:number,message:ApiMessage){\n    const global = getGlobal();\n    const user = selectUser(global,chatId)\n    if(user && user.fullInfo?.botInfo){\n      message = MsgWorker.handleBotCmdText(message,user.fullInfo?.botInfo)\n    }\n    MsgDispatcher.apiUpdate({\n      '@type': \"newMessage\",\n      chatId,\n      id:messageId,\n      message,\n      shouldForceReply:false\n    });\n    return message\n  }\n  async sendNewMessage(content:{text?:ApiFormattedText},options:OptionsType){\n    const {isLocalMessageId,senderId,inlineButtons} = options || {}\n    const id = await MsgDispatcher.genMsgId(!!isLocalMessageId)\n    const message = {\n      id,\n      content,\n      inlineButtons,\n      chatId: this.getChatId(),\n      date: this.genMsgDate(),\n      senderId:this.getMsgSenderAsId(),\n      isOutgoing:(senderId || this.getMsgSenderAsId()) !== this.getChatId(),\n      sendingState: undefined\n    }\n    if(this.params.botInfo){\n      MsgWorker.handleBotCmdText(message,this.params.botInfo)\n    }\n    return MsgDispatcher.newMessage(this.getChatId(),id,message)\n  }\n  async sendNewTextMessage({text,options}:{text?:string,options?:OptionsType}){\n    const res = parseCodeBlock(text!)\n    // @ts-ignore\n    return await this.sendNewMessage({text:res!,},options)\n  }\n\n  async replyText(text:string){\n    return await this.replyNewTextMessage({text})\n  }\n\n  async replyCode(text:string){\n    return await this.replyNewTextMessage({text:\"```\\n\"+text+\"```\"})\n  }\n\n  async replyNewTextMessage({text,options}:{text?:string,options?:OptionsType}){\n    return await this.sendNewTextMessage({text,options:{\n      ...options,\n        senderId:this.getChatId()\n      }})\n\n  }\n  async sendOutgoingMsg(){\n    return await this.sendNewTextMessage({\n      text:this.getMsgText(),\n    })\n  }\n  static buildMsgHistoryClear(chatId:string):ApiMessage{\n    return {\n      id: 0,\n      chatId,\n      isOutgoing: false,\n      date: currentTs(),\n      content: {\n        action: {\n          text: \"历史记录已清空\",\n          type: 'historyClear',\n          translationValues:[],\n        }\n      }\n    }\n  }\n  getBotCommands(){\n    const {botInfo} = this.params;\n    if(botInfo && botInfo.commands){\n      const commands: string[] = []\n      botInfo.commands.forEach(cmd=>commands.push(\"/\"+cmd.command))\n      return commands\n    }else{\n      return []\n    }\n  }\n  getBot(){\n    const {botInfo} = this.params;\n    return botInfo\n  }\n\n  getBotConfig(){\n    const {botInfo} = this.params;\n    return botInfo ? botInfo.aiBot : undefined\n  }\n\n  async processCmd(){\n    const sendMsgText = this.getMsgText();\n    const commands = this.getBotCommands();\n    console.log(\"processCmd\",this.params.chat.id,sendMsgText,commands)\n    if(sendMsgText && commands.includes(sendMsgText)){\n      if(this.params.botInfo?.botId === UserIdFirstBot){\n        return await this.processFirstBotCmd();\n      }\n      if(this.params.botInfo?.aiBot?.chatGptConfig){\n        return await this.processAiBotCmd();\n      }\n    }\n\n    return true\n  }\n\n  async processAiBotCmd(){\n    const sendMsgText = this.getMsgText();\n    const msgCommandChatGpt = new MsgCommandChatGpt(this.getChatId(),this.params.botInfo!);\n    if(sendMsgText !== \"/apiKey\"){\n      await this.sendOutgoingMsg();\n    }\n\n    switch(sendMsgText){\n      case \"/start\":\n        // await MsgCommand.reloadCommands(this.getChatId(),DEFAULT_AI_CONFIG_COMMANDS)\n        return await msgCommandChatGpt.start();\n      case \"/setting\":\n        return msgCommandChatGpt.setting()\n      case \"/clearHistory\":\n        return await MsgCommand.clearHistory(this.getChatId());\n      case \"/enableAi\":\n        return await msgCommandChatGpt.enableAi();\n      case \"/aiModel\":\n        return await msgCommandChatGpt.aiModel();\n      case \"/initPrompt\":\n        return await msgCommandChatGpt.initPrompt();\n      case \"/apiKey\":\n        return await msgCommandChatGpt.apiKey();\n      default:\n        return true;\n    }\n  }\n  async processFirstBotCmd(){\n    const sendMsgText = this.getMsgText();\n    switch(sendMsgText){\n      case \"/start\":\n        await this.sendOutgoingMsg();\n        return MsgCommandSetting.start(this.getChatId())\n      case \"/reloadCommands\":\n        await this.sendOutgoingMsg();\n        return await MsgCommand.reloadCommands(this.getChatId(),DEFAULT_BOT_COMMANDS);\n      case \"/clearHistory\":\n        return await MsgCommand.clearHistory(this.getChatId());\n      case \"/lab\":\n        return await new MsgCommandChatLab(this.getChatId(),this.params.botInfo!).lab();\n      case \"/setting\":\n        return await this.msgCommand.setting();\n      default:\n        return await this.sendOutgoingMsg();\n    }\n  }\n  async process(){\n    let res;\n    console.log(\"process\",this.getChatId(),this.getMsgText())\n    if(this.getMsgText()?.startsWith(\"/\")){\n      res = this.processCmd();\n    }\n    if(!res && this.getBot()){\n      res = await this.handleWsBot();\n    }\n    return res\n  }\n  async handleWsBot(){\n    const config = this.getBotConfig();\n    if(config && config.botApi){\n      const wsBot = BotWebSocket.getInstance(this.getChatId())\n      if(wsBot){\n        if(!wsBot.isConnect()){\n          await MsgCommand.createWsBot(this.getChatId())\n        }\n        if(wsBot.isConnect()){\n          wsBot.send(new SendReq({\n            chatId:this.getChatId(),\n            text:this.getMsgText()\n          }).pack().getPbData())\n        }\n        return await this.sendOutgoingMsg();\n      }\n    }\n  }\n  static showNotification(message:string){\n    getActions().showNotification({message})\n  }\n}\n","import {DEBUG} from '../../../config';\nimport {Pdu} from \"../../../lib/ptp/protobuf/BaseMsg\";\nimport {getActionCommandsName} from \"../../../lib/ptp/protobuf/ActionCommands\";\n\nexport enum BotWebSocketNotifyAction{\n  onConnectionStateChanged,\n  onData,\n}\n\nexport type BotWebSocketNotify = {\n  action: BotWebSocketNotifyAction;\n  payload: any;\n};\n\nexport enum BotWebSocketState {\n  connect_none,\n  closed,\n  connect_error,\n  connecting,\n  connected,\n  logged,\n}\n\nexport type MsgHandleType = (chatId:string,notifies:BotWebSocketNotify[])=>void\n\nlet reconnect_cnt = 0;\nlet seq_num = 0;\nlet clients: Record<string, BotWebSocket> = {};\n\nlet currentMsgConn: BotWebSocket | null = null;\n\nexport default class BotWebSocket {\n  private autoConnect: boolean;\n  public client: WebSocket | any | undefined;\n  private __rev_msg_map: Record<number, Pdu>;\n  private __sending_msg_map: Record<number, boolean>;\n  private __msgHandler?: MsgHandleType;\n  private sendMsgTimer?: NodeJS.Timeout;\n  private state: BotWebSocketState;\n  private chatId: string;\n  private wsUrl?: string;\n  private session?: string;\n  constructor(chatId: string) {\n    currentMsgConn = this;\n    this.chatId = chatId;\n    this.autoConnect = true;\n    this.sendMsgTimer = undefined;\n    this.state = BotWebSocketState.connect_none;\n    this.__rev_msg_map = {};\n    this.__sending_msg_map = {};\n  }\n  setWsUrl(wsUrl:string) {\n    this.wsUrl = wsUrl;\n  }\n  setSession(session:string) {\n    this.session = session;\n  }\n  getState() {\n    return this.state;\n  }\n  getChatId(){\n    return this.chatId;\n  }\n\n  getAutoConnect() {\n    return this.autoConnect;\n  }\n  setAutoConnect(autoConnect: boolean) {\n    this.autoConnect = autoConnect;\n  }\n\n  async close() {\n    this.notifyState(BotWebSocketState.closed);\n    if (this.client && this.isConnect()) {\n      this.client.close();\n    }\n  }\n  connect() {\n    if (!this.wsUrl ) {\n      console.error('no ws url');\n      return;\n    }\n    if (\n      this.state === BotWebSocketState.logged ||\n      this.state === BotWebSocketState.connecting ||\n      this.state === BotWebSocketState.connected\n    ) {\n      return;\n    }\n    try {\n      console.log('connecting', this.chatId,this.wsUrl);\n      this.notifyState(BotWebSocketState.connecting);\n      this.client = new WebSocket(`${this.wsUrl}`);\n      this.client.binaryType = 'arraybuffer';\n      this.client.onopen = this.onConnected.bind(this);\n      this.client.onmessage = this.onData.bind(this);\n      this.client.onclose = this.onClose.bind(this);\n    } catch (e) {\n      console.error('connect error', e);\n      this.reconnect(this.getAutoConnect());\n    }\n  }\n\n  waitForMsgServerState(\n    state: BotWebSocketState,\n    timeout: number = 10000,\n    startTime: number = 0\n  ) {\n    const timeout_ = 500;\n    return new Promise<boolean>((resolve) => {\n      setTimeout(() => {\n        if (this.getState() === state) {\n          resolve(true);\n        } else if (timeout > 0 && startTime >= timeout) {\n          //console.debug('waitForMsgServerState timeout', startTime, timeout);\n          resolve(false);\n        } else {\n          startTime += timeout_;\n          // eslint-disable-next-line promise/catch-or-return\n          this.waitForMsgServerState(state, timeout, startTime).then(resolve);\n        }\n      }, timeout_);\n    });\n  }\n\n  waitTime(timeout: number = 1000, startTime: number = 0) {\n    const timeout_ = 1000;\n    return new Promise<void>((resolve) => {\n      setTimeout(() => {\n        if (startTime >= timeout) {\n          resolve();\n        } else {\n          startTime += timeout_;\n          // eslint-disable-next-line promise/catch-or-return\n          this.waitTime(timeout, startTime).then(resolve);\n        }\n      }, timeout_);\n    });\n  }\n\n  setMsgHandler(msgHandler: MsgHandleType) {\n    this.__msgHandler = msgHandler;\n  }\n\n  onConnected() {\n    reconnect_cnt = 0\n    console.log(\"[onConnected account]\",this.getChatId())\n    this.notifyState(BotWebSocketState.connected);\n  }\n  async login(){\n      const {session} = this;\n\n  }\n  notify(notifyList:BotWebSocketNotify[]) {\n    if (this.__msgHandler) {\n      this.__msgHandler(this.chatId,notifyList);\n    }\n  }\n  onData(e: { data: Buffer }) {\n    if(e.data && e.data.byteLength && e.data.byteLength > 16){\n      let pdu = new Pdu(Buffer.from(e.data));\n      const seq_num = pdu.getSeqNum();\n      if(DEBUG){\n        console.log(\"[onData]\",seq_num,pdu.getCommandId(),getActionCommandsName(pdu.getCommandId()))\n      }\n      if(this.__sending_msg_map[seq_num]){\n        this.__rev_msg_map[seq_num] = pdu\n        delete this.__sending_msg_map[seq_num];\n      }else{\n        if (this.__msgHandler) {\n          this.notify([\n            {\n              action: BotWebSocketNotifyAction.onData,\n              payload: pdu,\n            },\n          ]);\n        }\n      }\n    }\n\n  }\n  notifyState(state: BotWebSocketState) {\n    this.state = state;\n    this.notify([\n      {\n        action: BotWebSocketNotifyAction.onConnectionStateChanged,\n        payload: {\n          BotWebSocketState: state,\n        },\n      },\n    ]);\n  }\n  onClose() {\n    if (this.sendMsgTimer) {\n      clearTimeout(this.sendMsgTimer);\n    }\n    console.log('onClose', this.autoConnect);\n    this.notifyState(BotWebSocketState.closed);\n    this.reconnect(this.getAutoConnect());\n  }\n\n  reconnect(autoConnect: boolean) {\n    if (autoConnect) {\n      setTimeout(() => {\n        if (\n          this.state === BotWebSocketState.closed ||\n          this.state === BotWebSocketState.connect_error\n        ) {\n          if (reconnect_cnt > 20) {\n            reconnect_cnt = 0;\n          }\n          if (reconnect_cnt < 5) {\n            reconnect_cnt += 1;\n          } else {\n            reconnect_cnt += 2;\n          }\n          console.log(\"[reconnect_cnt]\",reconnect_cnt)\n          this.connect();\n        }\n      }, 1000 * (reconnect_cnt + 1));\n    }\n  }\n\n  static getInstance(chatId: string): BotWebSocket {\n    if (!clients[chatId]) {\n      clients[chatId] = new BotWebSocket(chatId);\n    }\n    return clients[chatId];\n  }\n\n  waitForMsgCallback(\n    seq_num: number,\n    timeout: number = 5000,\n    startTime: number = 0\n  ) {\n    return new Promise<Pdu>((resolve, reject) => {\n      setTimeout(() => {\n        if (this.__rev_msg_map[seq_num]) {\n          const res = this.__rev_msg_map[seq_num];\n          delete this.__rev_msg_map[seq_num];\n          resolve(res);\n        } else {\n          if (startTime >= timeout) {\n            reject('TIMEOUT');\n          } else {\n            startTime += 200;\n            if (this.isConnect()) {\n              this.waitForMsgCallback(seq_num, timeout, startTime)\n                .then(resolve)\n                .catch(reject);\n            }\n          }\n        }\n      }, 200);\n    });\n  }\n\n  send(data:Buffer|Uint8Array){\n    this.client.send(data);\n  }\n\n  sendPduWithCallback(\n    pdu:Pdu,\n    timeout: number = 10000\n  ) {\n    seq_num += 1;\n    if(seq_num > 100000){\n      seq_num = 1\n    }\n    pdu.updateSeqNo(seq_num)\n    return new Promise<Pdu>((resolve, reject) => {\n      if (this.isConnect()) {\n        if(DEBUG){\n          console.log(\"[sendPduWithCallback]\",pdu.getSeqNum(),pdu.getCommandId(),getActionCommandsName(pdu.getCommandId()))\n        }\n        this.__sending_msg_map[pdu.getSeqNum()] = true;\n        this.send(pdu.getPbData())\n        this.waitForMsgCallback(pdu.getSeqNum(), timeout)\n          .then(resolve)\n          .catch(reject);\n      } else {\n        this.reconnect(this.autoConnect);\n        reject('BotWebSocketState is not connected');\n      }\n    });\n  }\n\n  isLogged() {\n    return [BotWebSocketState.logged].includes(this.state);\n  }\n  isConnect() {\n    return [BotWebSocketState.connected, BotWebSocketState.logged].includes(\n      this.state\n    );\n  }\n  async destroy(){\n    this.client.close()\n    this.setAutoConnect(false)\n    await this.waitForMsgServerState(BotWebSocketState.closed)\n  }\n}\n","import {callApi} from \"../../api/gramjs\";\nimport {Pdu} from \"../../lib/ptp/protobuf/BaseMsg\";\nexport type CallApiWithPduRes = {\n  pdu:Pdu\n}\nexport async function callApiWithPdu(pdu:Pdu):Promise<undefined|CallApiWithPduRes>{\n  //@ts-ignore\n  const buf = await callApi(\"sendWithCallback\",Buffer.from(pdu.getPbData()))\n  if(buf){\n    return {pdu:new Pdu(Buffer.from(buf))}\n  }else{\n    return undefined\n  }\n}\n","export type ShowModalFromEventPayload = {\n  title?:string,\n  type?:'singleInput'|'multipleInput',\n  placeholder?:string,\n  initVal?:string\n}\nexport type ShowModalFromEventResult = {\n  value?:string,\n}\n\nexport async function showModalFromEvent(payload:ShowModalFromEventPayload):Promise<ShowModalFromEventResult>{\n  return new Promise((resolve)=>{\n    const event = new CustomEvent('modal',{\n      detail:{\n        payload,\n        callback:(res:ShowModalFromEventResult)=>{\n          resolve(res)\n        }\n      }\n    });\n    document.dispatchEvent(event);\n  })\n}\n","\nexport function generateRandomString(length:number) {\n  let result = '';\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nexport function sha1(str: string): string {\n  function utf8_encode(str: string): string {\n    str = str.replace(/\\r\\n/g, '\\n');\n    let utf8str = '';\n    for (let n = 0; n < str.length; n++) {\n      let c = str.charCodeAt(n);\n      if (c < 128) {\n        utf8str += String.fromCharCode(c);\n      } else if ((c > 127) && (c < 2048)) {\n        utf8str += String.fromCharCode((c >> 6) | 192);\n        utf8str += String.fromCharCode((c & 63) | 128);\n      } else {\n        utf8str += String.fromCharCode((c >> 12) | 224);\n        utf8str += String.fromCharCode(((c >> 6) & 63) | 128);\n        utf8str += String.fromCharCode((c & 63) | 128);\n      }\n    }\n    return utf8str;\n  }\n\n  function rotate_left(n: number, s: number): number {\n    return (n << s) | (n >>> (32 - s));\n  }\n\n  function cvt_hex(val: number): string {\n    let str = '';\n    let i;\n    let v;\n    for (i = 7; i >= 0; i--) {\n      v = (val >>> (i * 4)) & 0x0f;\n      str += v.toString(16);\n    }\n    return str;\n  }\n\n  let blockstart;\n\n  let i: number, j: number;\n\n  let W = new Array(80);\n\n  let H0 = 0x67452301;\n  let H1 = 0xEFCDAB89;\n  let H2 = 0x98BADCFE;\n  let H3 = 0x10325476;\n  let H4 = 0xC3D2E1F0;\n\n  let A, B, C, D, E;\n\n  let temp;\n\n  str = utf8_encode(str);\n\n  let len = str.length * 8;\n\n  let K = new Array(\n    0x5A827999,\n    0x6ED9EBA1,\n    0x8F1BBCDC,\n    0xCA62C1D6\n  );\n\n  let str_len = str.length;\n\n  let word_array = new Array();\n\n  for (i = 0; i < str_len - 3; i += 4) {\n    j =\n      (str.charCodeAt(i) << 24) |\n      (str.charCodeAt(i + 1) << 16) |\n      (str.charCodeAt(i + 2) << 8) |\n      str.charCodeAt(i + 3);\n    word_array.push(j);\n  }\n\n  switch (str_len % 4) {\n    case 0:\n      i = 0x080000000;\n      break;\n    case 1:\n      i = (str.charCodeAt(str_len - 1) << 24) | 0x0800000;\n      break;\n\n    case 2:\n      i =\n        (str.charCodeAt(str_len - 2) << 24) |\n        (str.charCodeAt(str_len - 1) << 16) |\n        0x08000;\n      break;\n\n    case 3:\n      i =\n        (str.charCodeAt(str_len - 3) << 24) |\n        (str.charCodeAt(str_len - 2) << 16) |\n        (str.charCodeAt(str_len - 1) << 8) |\n        0x80;\n      break;\n  }\n\n  word_array.push(i);\n\n  while (word_array.length % 16 != 14) word_array.push(0);\n\n  word_array.push(len >>> 32);\n  word_array.push(len & 0xffffffff);\n\n  for (blockstart = 0; blockstart < word_array.length; blockstart += 16) {\n    for (i = 0; i < 16; i++) W[i] = word_array[blockstart + i];\n    for (i = 16; i < 80; i++)\n      W[i] = rotate_left(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n    A = H0;\n    B = H1;\n    C = H2;\n    D = H3;\n    E = H4;\n\n    for (i = 0; i < 20; i++) {\n      temp =\n        (rotate_left(A, 5) + ((B & C) | (~B & D)) + E + W[i] + K[0]) &\n        0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    for (i = 20; i < 40; i++) {\n      temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + K[1]) & 0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    for (i = 40; i < 60; i++) {\n      temp =\n        (rotate_left(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + K[2]) &\n        0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    for (i = 60; i < 80; i++) {\n      temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + K[3]) & 0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    H0 = (H0 + A) & 0xffffffff;\n    H1 = (H1 + B) & 0xffffffff;\n    H2 = (H2 + C) & 0xffffffff;\n    H3 = (H3 + D) & 0xffffffff;\n    H4 = (H4 + E) & 0xffffffff;\n  }\n\n  let result =\n    cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);\n  return result.toLowerCase();\n}\n\nexport function replaceSubstring(text:string, offset:number, length:number,replace:string) {\n  const prefix = text.substring(0, offset);\n  const suffix = text.substring(offset + length);\n  return prefix + replace + suffix;\n\n}\nexport function fetchWithTimeout(url: RequestInfo | URL, options: RequestInit | undefined, timeout = 10000) {\n  return Promise.race([\n    fetch(url, options),\n    new Promise((_, reject) =>\n      setTimeout(() => reject(new Error(`Timeout: ${timeout}s`)), timeout)\n    )\n  ]);\n}\n\nexport const isEmailValid = (email:string)=>{\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return re.test(email);\n}\n\nexport function parseQueryFromUrl(urlStr: string): { url: URL; query: Record<string, string> } {\n  const replacedUrl = urlStr.replace(/#/g, '?');\n  const url = new URL(replacedUrl);\n  const query = Array.from(url.searchParams.entries()).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: value,\n    }),\n    {}\n  );\n\n  return { url, query };\n}\n\n\nexport function getCorsHeader(Access_Control_Allow_Origin: string = '*',ContentType:string = \"application/json;charset=UTF-8\") {\n  return {\n    'content-type': ContentType,\n    'Access-Control-Allow-Origin': Access_Control_Allow_Origin,\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization, Accept',\n    'Access-Control-Allow-Credentials': 'true',\n  };\n}\n\nexport function ResponseJson(result: object, status = 200,Access_Control_Allow_Origin: string = '*') {\n  return new Response(JSON.stringify(result), {\n    status,\n    headers: {\n      ...getCorsHeader(Access_Control_Allow_Origin),\n    },\n  });\n}\n\nexport function currentTs(){\n  return Math.ceil(+(new Date)/1000)\n}\n\nexport function currentTs1000(){\n  return Math.ceil(+(new Date))\n}\n\nexport async function fileToArrayBuffer(file:File) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      resolve(reader.result);\n    };\n    reader.onerror = () => {\n      reject(reader.error);\n    };\n    reader.readAsArrayBuffer(file);\n  });\n}\nexport async function fileToBuffer(file:File) {\n  return new Promise<Buffer>((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      // @ts-ignore\n      const buffer = Buffer.from(reader.result);\n      resolve(buffer);\n    };\n    reader.onerror = reject;\n    reader.readAsArrayBuffer(file);\n  });\n}\n\nfunction downloadText(text:string, filename:string,type = \"text/json\") {\n  var element = document.createElement('a');\n  element.setAttribute('href', 'data:'+type+';charset=utf-8,' + encodeURIComponent(text));\n  element.setAttribute('download', filename);\n\n  element.style.display = 'none';\n  document.body.appendChild(element);\n  element.click();\n  document.body.removeChild(element);\n}\n\nexport async function blobToArrayBuffer(blob:Blob):Promise<ArrayBuffer> {\n  return new Promise((resolve) => {\n    const reader = new FileReader();\n    reader.addEventListener('loadend', () => {\n      // @ts-ignore\n      resolve(reader.result);\n    });\n    reader.readAsArrayBuffer(blob);\n  });\n}\n\nexport async function blobToBuffer(blob:Blob) {\n  const ab = await blobToArrayBuffer(blob);\n  return Buffer.from(ab)\n}\n","exports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n\nexports.homedir = function () {\n\treturn '/'\n};\n"],"names":["Object","defineProperty","exports","value","tslib_1","Semaphore_1","Mutex","cancelError","this","_semaphore","default","prototype","acquire","__awaiter","__generator","_b","label","sent","runExclusive","callback","isLocked","waitForUnlock","release","cancel","errors_1","Semaphore","_value","_cancelError","E_CANCELED","_weightedQueues","_weightedWaiters","weight","_this","Error","concat","Promise","resolve","reject","push","_dispatch","_a","trys","getValue","setValue","forEach","queue","entry","queueEntry","shift","previousValue","previousWeight","_newReleaser","_drainUnlockWaiters","called","waiter","E_ALREADY_LOCKED","E_TIMEOUT","tryAcquire","withTimeout","Mutex_1","enumerable","get","withTimeout_1","tryAcquire_1","__exportStar","sync","alreadyAcquiredError","timeout","timeoutError","undefined","isTimeout","handle","ticket","e_1","setTimeout","Array","isArray","clearTimeout","then","omitVirtualClassFields","instance","flags","CONSTRUCTOR_ID","SUBCLASS_OF_ID","className","classType","getBytes","rest","TIMESTAMP_BASE","TIMESTAMP_PRECISION","LOCAL_MESSAGES_LIMIT","localMessageCounter","LOCAL_MESSAGE_MIN_ID","getNextLocalMessageId","datePart","Math","round","Date","now","IS_MULTITAB_SUPPORTED","self","channel","BroadcastChannel","DATA_BROADCAST_CHANNEL_NAME","batchedUpdates","throttledLocalDbUpdate","throttle","postMessage","type","convertToVirtualClass","Uint8Array","Buffer","from","keys","length","BigInt","map","VirtualClass","split","reduce","acc","field","constructors","valueOmited","key","_initial","initial","valueVirtualClass","acc2","key2","name","Proxy","target","prop","Reflect","set","Set","GramJsLogger","DEBUG_GRAMJS","SERVICE_NOTIFICATIONS_USER_ID","runThrottledForLoadTopChats","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","global","listType","offsetId","offsetDate","shouldReplace","isFullDraftSync","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","result","users","byId","UserIdFirstBot","chats","isFullyLoaded","setGlobal","LoadAllChats","i","chat","messages","byChatId","id","threadsById","lastViewportIds","lastMessage","userStatusesById","user","chatIds","totalChatCount","chatFoldersById","chatFolders","row","orderedIds","folderIds","msgClientState","tabStates","values","byTabId","visibleChats","flatMap","tabId","currentChat","selectCurrentChat","visibleUsers","selectVisibleUsers","currentUserId","replaceUsers","buildCollectionByKey","replaceUserStatuses","replaceChats","updateChatListIds","addUsers","addUserStatuses","updateChats","replaceChatListIds","newChats","includes","notificationsChat","updateChatListSecondaryInfo","draftsById","chatId","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","replyingToById","e","console","error","loadFullChat","actions","getCurrentTabId","callApi","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","stickerSet","loadStickers","stickerSetInfo","accessHash","fetchChatByUsername","username","localChat","selectChatByUsername","isMin","updateUser","getAttachBotOrNotify","selectUser","isUserBot","bot","showNotification","langProvider","openAttachMenuFromLink","attach","startAttach","callAttachBot","startParam","ensureIsSuperGroup","selectChat","isChatBasicGroup","newChat","openLimitReachedModal","limit","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","selectCurrentMessageList","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","threadId","payload","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestThreadInfoUpdate","originChannelId","topMessageId","selectThreadTopMessageId","selectThreadOriginChat","TMP_CHAT_ID","openPreviousChat","chatFullInfo","linkedChatId","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","onReplace","getOrderDate","date","joinDate","DEBUG","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","force","lastLocalMessage","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","updateTabState","chatCreation","progress","ChatCreationProgress","channelId","selectTabState","userId","leaveChat","promptInit","userIds","userIdInt","parseInt","a","b","toString","chatGptApiKey","localStorage","getItem","init_system_content","DEFAULT_PROMPT","isSelf","avatarHash","isPremium","firstName","photos","usernames","bio","DEFAULT_CREATE_USER_BIO","botInfo","aiBot","enableAi","chatGptConfig","api_key","max_history_length","config","ChatModelConfig","botId","commands","DEFAULT_AI_CONFIG_COMMANDS","cmd","MsgCommandSetting","activeChatFolderRow","activeChatFolder","window","sessionStorage","chatFolderById","includedChatIds","addChats","editChatFolder","folderUpdate","sendBotCommand","command","createdChat","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","maxId","max","recommendedId","description","newFolder","setActiveChatFolder","unreadCount","lastTopicMessageId","topics","lastMessageId","updateThreadInfo","lastReadInboxMessageId","hash","phoneNumber","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","openChatByUsername","openChatByUsernameAction","match","RE_TG_LINK","processDeepLink","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","open","hostParts","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","substr","shortName","chatOrChannelPostId","Number","commentId","comment","text","formatShareText","inviteHash","voicechat","livestream","slug","substring","start","c","channelPostId","isCurrentChat","startBot","param","usernameChat","threadInfo","selectThreadInfo","chatByUsername","discussionChatId","isEnabled","isPreHistoryHidden","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembersById","isDismissed","newAdminMembersById","remove","updateManagementProgress","ManagementProgress","all","profilePhoto","loadProfilePhotos","profileId","photosToDelete","nextPhoto","groups","addedById","group","isForum","forDiscussionIds","fullChat","setItem","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","forumPanelChatId","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","addMessages","updateTopics","count","updateListedTopicIds","entries","formattedText","replyingToId","readInboxMessageIdByTopicId","shouldCloseChatOnError","prevIsForum","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","currentTime","requestAnimationFrame","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","peer","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount","KB_TO_BYTES","LARGE_FILE_THRESHOLD","DISCONNECT_SLEEP","MAX_CONCURRENT_CONNECTIONS","MAX_CONCURRENT_CONNECTIONS_PREMIUM","foremans","fill","Foreman","uploadFileV1","fileParams","file","onProgress","size","fileIdStr","readBigIntFromBuffer","generateRandomBytes","fileId","String","localDb","isLarge","partSize","getUploadPartSize","partCount","floor","buf","fileToBuffer","cipher","Account","body","DownloadRes","part_total","err","ERR","pack","getPbData","blob","Blob","cacheApi","MEDIA_CACHE_NAME_WAI","Api","parts","md5Checksum","uploadFileCache","activeCounts","activeWorkers","currentForemanIndex","indexOf","min","promises","senderIndex","requestWorker","blobSlice","subarray","jMemo","blobSliceMemo","CLOUD_MESSAGE_API","getSession","log","fileInfo","uploadReq","UploadReq","fetch","method","headers","Authorization","releaseWorker","uploadFile","client","isCanceled","slice","sender","getSender","session","dcId","partBytes","arrayBuffer","send","filePart","fileTotalParts","bytes","isConnected","sleep","errors","seconds","AuthNativeReq","BaseMsg","constructor","msg","super","setCommandId","ActionCommands","static","pdu","decode","PbMsg","PbQrCode","PbUser","DownloadMsgReq","DownloadMsgRes","GenMsgIdReq","GenMsgIdRes","SendReq","SendRes","UploadMsgReq","StopChatStreamReq","DownloadUserReq","MsgCommand","msgDispatcher","MsgDispatcher","senderId","isOutgoing","currentTs","content","path","buildInlineButton","sendOutgoingMsg","replyText","getActions","updateGlobal","showMnemonicModal","cmds","time","callApiWithPdu","UploadUserReq","DownloadUserReqRes","downloadUserRes","DownloadUserRes","getChatId","files","MsgCommandChatGpt","MsgCommandChatLab","endsWith","chatMessages","inlineButtons","ControllerPool","botWs","BotWebSocket","isConnect","botApi","setMsgHandler","notifies","BotWebSocketNotifyAction","BotWebSocketState","handleWsBotOnData","setWsUrl","setSession","waitForMsgServerState","getCommandId","_defineProperty","isEnableSync","account","getInlineButtons","getChatGptConfig","aiBotConfig","getAiBotConfig","aiConfig","changeAiBotConfig","showModalFromEvent","initVal","changeChatGptConfig","model","isEnable","res","placeholder","createBotWs","msgId","message1","message2","receiptMessageId","isQuiz","query","isSamePeer","t","selectChatMessage","prompt","createChat","prompts","require","tag","UserIdEnPrompt","needCreate","isNotJoined","promptRows","msg0","reverse","desc","UserIdCnPrompt","createPromptChat","getInlineButtonsDemo","JSON","stringify","testMsg","parse","SyncReq","SyncRes","currentSyncBotContext","qrcode","Decoder","blobUrl","createObjectURL","scan","qrcodeData","qrcodeDataBuf","decodeRes","Pdu","QrCodeType","password","getPasswordFromEvent","aesDecrypt","hashSha256","setMnemonic","mnemonic","Mnemonic","checkMnemonic","toEntropy","entropy","accountId","setEntropy","pwd","ts","address","sign","signMessage","saveSession","location","reload","chatIdsDeleted","getEntropy","getAccountId","getWords","syncFolders","showPickBotModal","getSessionAddress","disableSync","enableSync","ceil","isUpload","userStoreData","syncRes","parseMsg","index","addUsersObj","addChatsObj","buildDefaultChat","delSession","messageById","selectChatMessages","uploadMsgList","msgCommand","update","apiUpdate","getMsgSenderAsId","sendAs","getMsgText","genMsgDate","updateMessageSendSucceeded","localId","updateMessageText","updateMessage","newTextMessage","json","options","genMsgId","MsgWorker","shouldForceReply","newMessage","isLocalMessageId","sendingState","parseCodeBlock","sendNewMessage","replyNewTextMessage","sendNewTextMessage","translationValues","getBotCommands","getBot","getBotConfig","sendMsgText","processFirstBotCmd","processAiBotCmd","msgCommandChatGpt","setting","aiModel","initPrompt","apiKey","DEFAULT_BOT_COMMANDS","lab","processCmd","handleWsBot","wsBot","reconnect_cnt","seq_num","clients","currentMsgConn","autoConnect","sendMsgTimer","connect_none","__rev_msg_map","__sending_msg_map","wsUrl","getState","getAutoConnect","setAutoConnect","notifyState","closed","close","logged","connected","WebSocket","binaryType","onopen","onConnected","bind","onmessage","onData","onclose","onClose","reconnect","startTime","waitTime","msgHandler","__msgHandler","notify","notifyList","byteLength","getSeqNum","getActionCommandsName","onConnectionStateChanged","connect_error","waitForMsgCallback","sendPduWithCallback","updateSeqNo","isLogged","event","CustomEvent","detail","document","dispatchEvent","replaceSubstring","isEmailValid","email","test","parseQueryFromUrl","urlStr","replacedUrl","currentTs1000","reader","FileReader","onload","buffer","onerror","readAsArrayBuffer","endianness","loadavg","uptime","freemem","MAX_VALUE","totalmem","cpus","appVersion","networkInterfaces","getNetworkInterfaces","arch","platform","tmpdir","tmpDir","EOL","homedir"],"sourceRoot":""}