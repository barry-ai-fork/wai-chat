{"version":3,"file":"8422.332e0cc56d510065d817.js","mappings":"sWAiGMA,EAAAA,IAJN,MAWMC,GAA8BC,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAM,GAC3DC,GAA8BC,EAAAA,EAAAA,KAAUF,GAAOA,KAAM,KAAK,GAAO,GA00DhE,SAASG,EAAWC,GACzB,MAAMC,GAASC,EAAAA,EAAAA,MACf,OAAGD,EAAOE,MAAMC,KAAKJ,IAAUC,EAAOE,MAAMC,KAAKJ,GAAOK,SAC/C,CACLC,IAAIL,EAAOE,MAAMC,KAAKJ,GAAOM,IAC7BC,QAAQN,EAAOE,MAAMC,KAAKJ,GAAOK,SAAUE,cAG7C,CAEJ,CAEOC,eAAeC,EACpBR,EACAS,EACAC,EACAC,EACAC,GAAgB,EAChBC,GAEAb,GAASC,EAAAA,EAAAA,MACT,IAAIa,GAA0BC,EAAAA,EAAAA,IAA8Bf,IAASgB,QACrE,IAEE,IAAIC,EACJ,GAAIjB,EAAOE,MAAMC,KAAKe,EAAAA,IAwBpB,OAXAlB,EAAS,IACJA,EACHmB,MAAO,IACFnB,EAAOmB,MACVC,cAAe,IACVpB,EAAOmB,MAAMC,cAChB,CAACX,IAAW,UAIlBY,EAAAA,EAAAA,IAAUrB,GAtBViB,EAASK,EAAAA,GACT,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAOE,MAAMK,OAAQD,IAAK,CAC5C,MAAME,EAAOR,EAAOE,MAAMI,GAC1B,GAAIvB,EAAO0B,SAASC,SAASF,EAAKG,IAAK,CACrC,MAAM,YAACC,EAAW,KAAE1B,GAAQH,EAAO0B,SAASC,SAASF,EAAKG,IACtDC,GAAa,IAAMA,GAAa,GAAGC,iBAAmBD,GAAa,GAAGC,gBAAiBN,OAAS,IAElGP,EAAOE,MAAMI,GAAGQ,YAAc5B,EAAK0B,GAAa,GAAGC,gBAAgBD,GAAa,GAAGC,gBAAgBN,OAAS,IAEhH,CACF,CAsBF,MAAMQ,EAAmB,CAAC,EAC1Bf,EAAOf,MAAM+B,SAASC,IAGpBF,EAAiBE,EAAKN,IAAM,CAC1B,KAAQ,kBACT,IAEHX,EAAOe,iBAAmBA,EAE1BhC,GAASC,EAAAA,EAAAA,MACTgB,EAAOkB,QAAUlB,EAAOE,MAAMiB,KAAKX,GAAuBA,EAAKG,KAC/D,MAAM,QAAEO,GAAYlB,EAChBkB,EAAQX,OAAS,GAAKW,EAAQ,KAAOzB,GACvCyB,EAAQE,QAEVpB,EAAOqB,eAAiBrB,EAAOE,MAAMK,OACrCV,GAA0BC,EAAAA,EAAAA,IAA8Bf,IAASgB,QACjE,MAAMuB,EAAsB,CAAC,EAC7BtB,EAAOuB,aAAaP,SAAQQ,IAC1BF,EAAgBE,EAAIb,IAAMa,CAAG,IAE/B,MAAMC,EAAazB,EAAOuB,aAAevB,EAAOuB,YAAYhB,OAAS,EAAIP,EAAO0B,UAAW,CAAC,GAW5F,GATA3C,EAAS,IACJA,EACHwC,YAAY,CACVrC,KAAK,IACAoC,GAELG,eAGA9B,GAA8B,WAAbH,GAAmD,0BAA1BT,EAAO4C,eAA4C,CAmB/F,MAAMC,EAAYC,OAAOC,OAAO/C,EAAOgD,SACjCC,EAAeJ,EAAUK,SAAQ,EAAGtB,GAAIuB,MAC5C,MAAMC,GAAcC,EAAAA,EAAAA,IAAkBrD,EAAQmD,GAC9C,OAAOC,EAAc,CAACA,GAAe,EAAE,IAGnCE,EAAeT,EAAUK,SAAQ,EAAGtB,GAAIuB,MACrCI,EAAAA,EAAAA,IAAmBvD,EAAQmD,IAAU,KAE1CnD,EAAOwD,eAAiBxD,EAAOE,MAAMC,KAAKH,EAAOwD,gBACnDF,EAAaG,KAAKzD,EAAOE,MAAMC,KAAKH,EAAOwD,gBAG7CxD,GAAS0D,EAAAA,EAAAA,IAAa1D,GAAQ2D,EAAAA,EAAAA,IAAqBL,EAAaM,OAAO3C,EAAOf,OAAQ,OACtFF,GAAS6D,EAAAA,EAAAA,IAAoB7D,EAAQiB,EAAOe,kBAC5ChC,GAAS8D,EAAAA,EAAAA,IAAa9D,GAAQ2D,EAAAA,EAAAA,IAAqBV,EAAaW,OAAO3C,EAAOE,OAAQ,OACtFnB,GAAS+D,EAAAA,EAAAA,IAAkB/D,EAAQS,EAAU0B,EAC/C,MAAO,GAAIvB,GAA8B,aAAbH,GAAuD,0BAA1BT,EAAO4C,eAC9D5C,GAASgE,EAAAA,EAAAA,IAAShE,GAAQ2D,EAAAA,EAAAA,IAAqB1C,EAAOf,MAAO,OAC7DF,GAASiE,EAAAA,EAAAA,IAAgBjE,EAAQiB,EAAOe,kBACxChC,GAASkE,EAAAA,EAAAA,IAAYlE,GAAQ2D,EAAAA,EAAAA,IAAqB1C,EAAOE,MAAO,OAChEnB,GAASmE,EAAAA,EAAAA,IAAmBnE,EAAQS,EAAU0B,OACzC,CACL,MAAMiC,GAAWT,EAAAA,EAAAA,IAAqB1C,EAAOE,MAAO,MACpD,GAAIgB,EAAQkC,SAAS7E,EAAAA,KAAgC,CACnD,MAAM8E,EAAoBF,EAAS5E,EAAAA,KAC/B8E,GAAqBxD,IACvBsD,EAAS5E,EAAAA,KAAiC,IACrC8E,EACHvC,YAAajB,GAGnB,CAEAd,GAASgE,EAAAA,EAAAA,IAAShE,GAAQ2D,EAAAA,EAAAA,IAAqB1C,EAAOf,MAAO,OAC7DF,GAASiE,EAAAA,EAAAA,IAAgBjE,EAAQiB,EAAOe,kBACxChC,GAASkE,EAAAA,EAAAA,IAAYlE,EAAQoE,GAC7BpE,GAAS+D,EAAAA,EAAAA,IAAkB/D,EAAQS,EAAU0B,EAE/C,CAEAnC,GAASuE,EAAAA,EAAAA,IAA4BvE,EAAQS,EAAUQ,IAE9BJ,EAAkBI,EAAOkB,QAAUW,OAAO0B,KAAKvD,EAAOwD,aAC9DxC,SAASyC,IACxB,MAAMC,EAAQ1D,EAAOwD,WAAWC,GAC1BE,GAASC,EAAAA,EAAAA,IAAa7E,EAAQ0E,EAAQI,EAAAA,KACvCH,GAAUC,MAEVG,EAAAA,EAAAA,IAAY/E,EAAQ0E,EAAQI,EAAAA,KAAiBE,UAChDhF,GAASiF,EAAAA,EAAAA,IACPjF,EAAQ0E,EAAQI,EAAAA,GAAgB,QAASH,IAE7C,KAG8B9D,EAAkBI,EAAOkB,QAAUW,OAAO0B,KAAKvD,EAAOiE,iBAC9DjD,SAASyC,IAC/B,MAAMQ,EAAiBjE,EAAOiE,eAAeR,GACvCE,GAASC,EAAAA,EAAAA,IAAa7E,EAAQ0E,EAAQI,EAAAA,KACvCI,GAAmBN,KAExB5E,GAASiF,EAAAA,EAAAA,IACPjF,EAAQ0E,EAAQI,EAAAA,GAAgB,eAAgBI,GACjD,IAgBHlF,EAAS,IACJA,EACHmB,MAAO,IACFnB,EAAOmB,MACVC,cAAe,IACVpB,EAAOmB,MAAMC,cAChB,CAACX,IAAW,MAKlBY,EAAAA,EAAAA,IAAUrB,EAEZ,CAAC,MAAOmF,GACNC,QAAQC,MAAMF,EAChB,CAYF,CAEO5E,eAAe+E,EACpBtF,EAAWuF,EAAgC9D,MACvC0B,GAAQqC,EAAAA,EAAAA,QAEZ,MAAMvE,QAAewE,EAAAA,EAAAA,IAAQ,gBAAiBhE,GAC9C,IAAKR,EACH,OAGF,MAAM,MACJf,EAAK,iBAAE8B,EAAgB,SAAE5B,EAAQ,UAAEsF,EAAS,aAAEC,GAC5C1E,EAWJ,GATAjB,GAASC,EAAAA,EAAAA,MACLC,IACFF,GAASgE,EAAAA,EAAAA,IAAShE,GAAQ2D,EAAAA,EAAAA,IAAqBzD,EAAO,QAGpD8B,IACFhC,GAASiE,EAAAA,EAAAA,IAAgBjE,EAAQgC,IAG/B0D,EAAW,CACb,MAAME,GAAoBC,EAAAA,EAAAA,IAAgB7F,EAAQ0F,EAAU9D,IAC5D5B,GAAS8F,EAAAA,EAAAA,IACP9F,EACA0F,EAAU9D,IACVmE,EAAAA,EAAAA,IAAKL,EAAW,CAAC,yBACjBM,EACAJ,OAAoBI,EAAYN,EAAUO,kBAE9C,CAEAjG,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQyB,EAAKG,GAAI,CACnCxB,cACIuF,GAAgB,CAAEA,mBAGxBtE,EAAAA,EAAAA,IAAUrB,GAEV,MAAMmG,EAAa/F,EAAS+F,WAW5B,OAVIA,GACFZ,EAAQa,aAAa,CACnBC,eAAgB,CACdzE,GAAIuE,EAAWvE,GACf0E,WAAYH,EAAWG,YAEzBnD,UAIGlC,CACT,CAqBOV,eAAegG,EACpBvG,EACAwG,GAEAxG,GAASC,EAAAA,EAAAA,MACT,MAAMwG,GAAYC,EAAAA,EAAAA,IAAqB1G,EAAQwG,GAC/C,GAAIC,IAAcA,EAAUE,MAC1B,OAAOF,EAGT,MAAM,KAAEhF,EAAI,KAAES,SAAeuD,EAAAA,EAAAA,IAAQ,oBAAqBe,IAAa,CAAC,EACxE,OAAK/E,GAILzB,GAASC,EAAAA,EAAAA,MACTD,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQyB,EAAKG,GAAIH,GACjCS,IACFlC,GAAS4G,EAAAA,EAAAA,IAAW5G,EAAQkC,EAAKN,GAAIM,KAGvCb,EAAAA,EAAAA,IAAUrB,GAEHyB,QAZP,CAaF,CA0BAlB,eAAesG,EACb7G,EAAWuF,EAAgCiB,MACvCrD,GAAQqC,EAAAA,EAAAA,QAEZ,MAAM/D,QAAa8E,EAAoBvG,EAAQwG,GAC/C,IAAK/E,EAAM,OAEXzB,GAASC,EAAAA,EAAAA,MACT,MAAMiC,GAAO4E,EAAAA,EAAAA,IAAW9G,EAAQyB,EAAKG,IACrC,IAAKM,EAAM,OAGX,KADc6E,EAAAA,EAAAA,IAAU7E,GACZ,OACZ,MAAMjB,QAAewE,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5CpF,IAAK6B,IAIP,GADAlC,GAASC,EAAAA,EAAAA,MACJgB,EAYL,OAHAjB,GAASgE,EAAAA,EAAAA,IAAShE,GAAQ2D,EAAAA,EAAAA,IAAqB1C,EAAOf,MAAO,QAC7DmB,EAAAA,EAAAA,IAAUrB,GAEHiB,EAAOZ,IAXZkF,EAAQyB,iBAAiB,CACvBhG,QAASiG,EAAAA,GAAuB,0CAChC9D,SAUN,CAmEA5C,eAAe2G,EACblH,EACAuF,EACAb,EACAyC,EACAC,MACIjE,GAAQqC,EAAAA,EAAAA,QAEZxF,GAASC,EAAAA,EAAAA,MACT,MAAMI,QAAYwG,EAAqB7G,EAAQuF,EAAS4B,EAAQhE,GAC3D9C,GAELkF,EAAQ8B,cAAc,CACpBhH,MACAqE,YAC2B,iBAAhB0C,GAA4B,CAAEE,WAAYF,GACrDjE,SAEJ,CAEO5C,eAAegH,EACpBvH,EACAuF,EACAb,MACIvB,GAAQqC,EAAAA,EAAAA,QAEZ,MAAM/D,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAChC,IAAKjD,KAASgG,EAAAA,EAAAA,IAAiBhG,GAC7B,OAAOA,EAGT,MAAMiG,QAtMDnH,eACLP,EAAWuF,EAAgC9D,MACvC0B,GAAQqC,EAAAA,EAAAA,QAEZ,IAGE,aAFyBC,EAAAA,EAAAA,IAAQ,cAAehE,EAGlD,CAAE,MAAO4D,GAOP,YANoC,sBAA/BA,EAAmBrE,QACtBuE,EAAQoC,sBAAsB,CAAEC,MAAO,WAAYzE,UAEnDoC,EAAQsC,WAAW,CAAEC,KAAM,IAAMzC,EAAoB0C,aAAa,GAAQ5E,UAI9E,CACF,CAqLwB6E,CAAYhI,EAAQuF,EAAS9D,EAAM0B,GACzD,OAAKuE,GAILnC,EAAQ0C,SAAS,CAAErG,GAAI8F,EAAQ9F,GAAIuB,UAE5BuE,QANP,CAOF,EAvyEAQ,EAAAA,EAAAA,IAAiB,0BAA0B3H,MAAOP,EAAQuF,KACxD,MAAM4C,EAAmB,IAAIC,IAE7B,IAAK,IAAI7G,EAAI,EAAGA,EAAI8G,EAAAA,IAAiC9G,IAAK,OAClD+G,EAAAA,EAAAA,IAlBiC,KAoBvCtI,GAASC,EAAAA,EAAAA,MACT,MAAMsI,EAAiBzF,OAAOC,OAAO/C,EAAOgD,SAEzCZ,KAAI,EAAGR,GAAIuB,MAAYqF,EAAAA,EAAAA,IAAyBxI,EAAQmD,IAAQuB,SAChE+D,OAAOC,SAEJC,GAAsBC,EAAAA,EAAAA,IAAcC,EAAAA,KACpCC,EAAaH,GAAqBI,MAAMnH,IAAQ2G,EAAelE,SAASzC,KAAQuG,EAAiBa,IAAIpH,KAC3G,IAAKkH,EACH,OAGFX,EAAiBc,IAAIH,GAErBvD,EAAQ2D,qBAAqB,CAAExE,OAAQoE,EAAYK,SAAUrE,EAAAA,GAAgB3B,OAAOqC,EAAAA,EAAAA,OACtF,MAGF0C,EAAAA,EAAAA,IAAiB,YAAY,CAAClI,EAAQuF,EAAS6D,KAC7C,MAAM,GACJxH,EAAE,SAAEuH,EAAWrE,EAAAA,IACbsE,EACJ,IAAKxH,EACH,OAGF,MAAM,cAAE4B,GAAkBxD,EACpByB,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ4B,GAMhC,GAJIH,GAAM4H,eACR9D,EAAQ+D,iBAAiB,CAAE1H,OAGxBH,GASM8H,EAAAA,EAAAA,IAAkB9H,IAAUA,EAAKkF,WAR1C,GAAI/E,IAAO4B,GACJiC,EAAAA,EAAAA,IAAQ,YAAa,CAAE+D,KAAM,aAC7B,CACL,MAAMtH,GAAO4E,EAAAA,EAAAA,IAAW9G,EAAQ4B,GAC5BM,IACGuD,EAAAA,EAAAA,IAAQ,YAAa,CAAE+D,KAAM,OAAQtH,QAE9C,CAMEiH,IAAarE,EAAAA,IACfS,EAAQkE,wBAAwB,CAAE/E,OAAQ9C,EAAIuH,YAChD,KAGFjB,EAAAA,EAAAA,IAAiB,gBAAgB3H,MAAOP,EAAQuF,EAAS6D,KACvD,MAAM,GACJxH,EAAE,SAAEuH,EAAQ,gBAAEO,EAAe,MAAEvG,GAAQqC,EAAAA,EAAAA,OACrC4D,EAEJ,GAAID,IAAarE,EAAAA,GAAgB,CAC/B,MAAM6E,GAAeC,EAAAA,EAAAA,IAAyB5J,EAAQ4B,EAAIuH,GAC1D,GAAKQ,EAmBHpE,EAAQ0C,SAAS,CAAErG,KAAIuH,SAAUQ,EAAcxG,cAnB9B,CACjB,MAAM1B,GAAOoI,EAAAA,EAAAA,IAAuB7J,EAAQ4B,EAAIuH,GAChD,IAAK1H,EACH,OAGF8D,EAAQ0C,SAAS,CAAErG,GAAIkI,EAAAA,IAAa3G,UAEpC,MAAMlC,QAAewE,EAAAA,EAAAA,IAAQ,0BAA2B,CAAEhE,OAAM0H,WAAUO,oBAC1E,IAAKzI,EAEH,YADAsE,EAAQwE,iBAAiB,CAAE5G,UAG7BnD,GAASC,EAAAA,EAAAA,MACTD,GAASgE,EAAAA,EAAAA,IAAShE,GAAQ2D,EAAAA,EAAAA,IAAqB1C,EAAOf,MAAO,QAC7DmB,EAAAA,EAAAA,IAAUrB,GAEVuF,EAAQ0C,SAAS,CAAErG,KAAIuH,SAAUlI,EAAO0I,aAAcxG,SACxD,CAGF,MAGF+E,EAAAA,EAAAA,IAAiB,kBAAkB3H,MAAOP,EAAQuF,EAAS6D,KACzD,MAAM,GAAExH,EAAE,MAAEuB,GAAQqC,EAAAA,EAAAA,OAAsB4D,EACpC3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ4B,GAChC,IAAKH,EACH,OAGF,MAAMuI,QAAqBvE,EAAAA,EAAAA,IAAQ,gBAAiBhE,GAEhDuI,GAAc5J,UAAU6J,cAC1B1E,EAAQ0C,SAAS,CAAErG,GAAIoI,EAAa5J,SAAS6J,aAAc9G,SAC7D,KAGF+E,EAAAA,EAAAA,IAAiB,0BAA0B3H,MAAOP,EAAQuF,EAAS6D,KACjE,MAAM,OACJ1E,EAAM,SAAEyE,EAAQ,UAAEe,EAAS,MAAE/G,GAAQqC,EAAAA,EAAAA,OACnC4D,EACE3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAChC,IAAKjD,EACH,OAGF,MAAMR,QAAewE,EAAAA,EAAAA,IAAQ,0BAA2B,CAAEhE,OAAM0H,aAC3DlI,IAGLjB,GAASC,EAAAA,EAAAA,MACTD,GAASgE,EAAAA,EAAAA,IAAShE,GAAQ2D,EAAAA,EAAAA,IAAqB1C,EAAOf,MAAO,QAC7DmB,EAAAA,EAAAA,IAAUrB,GAEVuF,EAAQ4E,aAAa,CACnBzF,SAAQyE,WAAUe,YAAW/G,UAC7B,KAGJ+E,EAAAA,EAAAA,IAAiB,mBAAmB3H,MAAOP,EAAQuF,EAAS6D,KAC1D,MAAM,MAAEjG,GAAQqC,EAAAA,EAAAA,OAAsB4D,GAAW,CAAC,EAC5C3H,GAAO2I,EAAAA,EAAAA,IAAkBpK,GAC/B,GAAIyB,EAEF,YADA8D,EAAQ0C,SAAS,CAAErG,GAAIH,EAAKG,GAAIyI,sBAAsB,EAAMlH,UAI9DoC,EAAQ0C,SAAS,CAAErG,GAAIkI,EAAAA,IAAaO,sBAAsB,EAAMlH,UAEhE,MAAMlC,QAAewE,EAAAA,EAAAA,IAAQ,YAAa,CAAE+D,KAAM,YAC9CvI,GACFsE,EAAQ0C,SAAS,CAAErG,GAAIX,EAAOyD,OAAQ2F,sBAAsB,EAAMlH,SACpE,KAGF+E,EAAAA,EAAAA,IAAiB,gBAAgB3H,MAAOP,EAAQuF,EAAS6D,KACvD,MAAM3I,EAAW2I,EAAQ3I,SACzB,GAAgB,aAAbA,EACD,OAEF,MAAM,UAAE6J,GAAclB,EACtB,IAAI,cAAExI,GAAkBwI,EACpB7H,EAAI,EAER,MAAMgJ,EAAgB9I,GACbA,EAAKM,aAAayI,MAAQ/I,EAAKgJ,SAExC,KAAO7J,IAAkBZ,EAAOmB,MAAMC,cAAcX,IAAW,CAC7D,GAAIc,KAvKqB,IA4KvB,YAJImJ,EAAAA,KAEFtF,QAAQC,MAAM,mDAOlB,GAE8B,2BAJ9BrF,GAASC,EAAAA,EAAAA,OAIE2C,gBACmB,gCAA1B5C,EAAO4C,gBACmB,6BAA1B5C,EAAO4C,eAET,OAGF,MAAM+H,GAAW/J,GAAiBZ,EAAOmB,MAAMwJ,QAAQlK,GACjDmK,EAAaD,EACfA,EAECvI,KAAKR,GAAO5B,EAAOmB,MAAMhB,KAAKyB,KAC9B6G,QAAQhH,GACPiH,QAAQjH,GAAQ8I,EAAa9I,KAC1BA,EAAKG,KAAOpC,EAAAA,OACXqL,EAAAA,EAAAA,IAAmB7K,EAAQyB,EAAKG,MAGrCkJ,MAAK,CAACC,EAAOC,IAAUT,EAAaQ,GAAUR,EAAaS,KAAS,QACrEhF,QACExF,EAAUR,EACdS,EACAmK,GAAYhJ,GACZgJ,GAAaL,EAAaK,GAC1BhK,GACA,GAGEA,IACF0J,MACA1J,GAAgB,GAGlBZ,GAASC,EAAAA,EAAAA,KACX,MAGFiI,EAAAA,EAAAA,IAAiB,gBAAgB,CAAClI,EAAQuF,EAAS6D,KACjD,MAAM,OAAE1E,EAAM,MAAEuG,EAAK,MAAE9H,GAAQqC,EAAAA,EAAAA,OAAsB4D,EAC/C3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAC3BjD,IAIDwJ,EACF3F,EAAatF,EAAQuF,EAAS9D,EAAM0B,GAEpCvD,GAA4B,IAAM0F,EAAatF,EAAQuF,EAAS9D,EAAM0B,KACxE,KAGF+E,EAAAA,EAAAA,IAAiB,gBAAiBlI,IAChCP,GAA4B,IAAMe,EAAUR,EAAQ,WAAU,KAGhEkI,EAAAA,EAAAA,IAAiB,qBAAqB,CAAClI,EAAQuF,EAAS6D,KACtD,MAAM,OAAE1E,GAAW0E,EACb3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAC3BjD,IAIAgE,EAAAA,EAAAA,IAAQ,oBAAqB,CAChChE,UACIiD,IAAWlF,EAAAA,KAAiC,CAC9C0L,kBAAkBnK,EAAAA,EAAAA,IAA8Bf,IAASgB,UAE3D,KAGJkH,EAAAA,EAAAA,IAAiB,wBAAwB,CAAClI,EAAQuF,EAAS6D,KACzD,MAAM,OAAE1E,EAAM,QAAEyG,GAAY/B,EACtB3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAC3BjD,IAILzB,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQ0E,EAAQ,CAAEyG,aACtC9J,EAAAA,EAAAA,IAAUrB,IACLyF,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEhE,OAAM0J,YAAU,KAGzDjD,EAAAA,EAAAA,IAAiB,yBAAyB,CAAClI,EAAQuF,EAAS6D,KAC1D,MAAM,OAAE1E,EAAM,QAAEyG,EAAO,QAAEC,GAAYhC,EAC/B3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAC3BjD,IAILzB,GAASqL,EAAAA,EAAAA,IAAYrL,EAAQ0E,EAAQ0G,EAAS,CAAED,aAChD9J,EAAAA,EAAAA,IAAUrB,IACLyF,EAAAA,EAAAA,IAAQ,wBAAyB,CACpChE,OAAM2J,UAASD,YACf,KAGJjD,EAAAA,EAAAA,IAAiB,iBAAiB3H,MAAOP,EAAQuF,EAAS6D,KACxD,MAAM,MACJkC,EAAK,MAAEC,EAAK,MAAEC,EAAK,UAAEC,EAAS,MAAEtI,GAAQqC,EAAAA,EAAAA,OACtC4D,EAEElJ,EAASuL,EACZrJ,KAAKR,IAAOkF,EAAAA,EAAAA,IAAW9G,EAAQ4B,KAC/B6G,OAAOC,SASV,IAAIgD,EAPJ1L,GAAS2L,EAAAA,EAAAA,GAAe3L,EAAQ,CAC9B4L,aAAc,CACZC,SAAUC,EAAAA,GAAAA,aAEX3I,IACH9B,EAAAA,EAAAA,IAAUrB,GAIV,IACE0L,QAAuBjG,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE6F,QAAOC,QAAOrL,SAClE,CAAE,MAAOmF,GACPrF,GAASC,EAAAA,EAAAA,MAETD,GAAS2L,EAAAA,EAAAA,GAAe3L,EAAQ,CAC9B4L,aAAc,CACZC,SAAUC,EAAAA,GAAAA,QAEX3I,IAEH9B,EAAAA,EAAAA,IAAUrB,GAE0B,sBAA/BqF,EAAmBrE,QACtBuE,EAAQoC,sBAAsB,CAAEC,MAAO,WAAYzE,UAEnDoC,EAAQsC,WAAW,CAAEC,KAAM,IAAMzC,EAAoB0C,aAAa,GAAQ5E,SAE9E,CAEA,IAAKuI,EACH,OAGF,MAAQ9J,GAAImK,EAAS,WAAEzF,GAAeoF,EAEtC1L,GAASC,EAAAA,EAAAA,MACTD,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQ+L,EAAWL,GACvC1L,GAAS2L,EAAAA,EAAAA,GAAe3L,EAAQ,CAC9B4L,aAAc,KACTI,EAAAA,EAAAA,IAAehM,EAAQmD,GAAOyI,aACjCC,SAAUH,EAAiBI,EAAAA,GAAAA,SAAgCA,EAAAA,GAAAA,QAE5D3I,IACH9B,EAAAA,EAAAA,IAAUrB,GACVuF,EAAQ0C,SAAS,CAAErG,GAAImK,EAAW1B,sBAAsB,EAAMlH,UAE1D4I,GAAazF,GAAckF,SACvB/F,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEf,OAAQqH,EAAWzF,aAAYkF,SAClE,KAGFtD,EAAAA,EAAAA,IAAiB,eAAe3H,MAAOP,EAAQuF,EAAS6D,KACtD,MAAM,OAAE1E,EAAM,MAAEvB,GAAQqC,EAAAA,EAAAA,OAAsB4D,EACxC3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAChC,IAAKjD,EACH,OAGF,MAAQG,GAAImK,EAAS,WAAEzF,GAAe7E,EAEtC,GAAMsK,GAAazF,EAInB,UACQb,EAAAA,EAAAA,IAAQ,cAAe,CAAEsG,YAAWzF,cAC5C,CAAE,MAAOjB,GAC6B,sBAA/BA,EAAmBrE,QACtBuE,EAAQoC,sBAAsB,CAAEC,MAAO,WAAYzE,UAEnDoC,EAAQsC,WAAW,CAAEC,KAAM,IAAMzC,EAAoB0C,aAAa,GAAQ5E,SAE9E,MAGF+E,EAAAA,EAAAA,IAAiB,kBAAkB,CAAClI,EAAQuF,EAAS6D,KACnD,MAAM,OAAE1E,EAAM,OAAEuH,EAAM,MAAE9I,GAAQqC,EAAAA,EAAAA,OAAsB4D,EAChD3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAC1BxC,GAAO4E,EAAAA,EAAAA,IAAW9G,EAAQiM,GAC3BxK,GAASS,IAIdlC,GAASkM,EAAAA,EAAAA,IAAUlM,EAAQ0E,IAC3BrD,EAAAA,EAAAA,IAAUrB,IAENwI,EAAAA,EAAAA,IAAyBxI,EAAQmD,IAAQuB,SAAWA,GACtDa,EAAQ0C,SAAS,CAAErG,QAAIoE,EAAW7C,WAG/BsC,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEhE,OAAMS,SAAO,KAGhDgG,EAAAA,EAAAA,IAAiB,cAAc,CAAClI,EAAQuF,EAAS6D,KAC/C,MAAM,OAAE1E,EAAM,MAAEvB,GAAQqC,EAAAA,EAAAA,OAAsB4D,EACxC3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAC3BjD,IAILzB,GAASkM,EAAAA,EAAAA,IAAUlM,EAAQ0E,IAC3BrD,EAAAA,EAAAA,IAAUrB,IAENwI,EAAAA,EAAAA,IAAyBxI,EAAQmD,IAAQuB,SAAWA,GACtDa,EAAQ0C,SAAS,CAAErG,QAAIoE,EAAW7C,WAG/BsC,EAAAA,EAAAA,IAAQ,aAAc,CAAEf,OAAQjD,EAAKG,KAAK,KAGjDsG,EAAAA,EAAAA,IAAiB,gBAAgB,CAAClI,EAAQuF,EAAS6D,KACjD,MAAM,OAAE1E,EAAM,MAAEvB,GAAQqC,EAAAA,EAAAA,OAAsB4D,EACxC3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAChC,IAAKjD,EACH,OAGFzB,GAASkM,EAAAA,EAAAA,IAAUlM,EAAQ0E,IAC3BrD,EAAAA,EAAAA,IAAUrB,IAENwI,EAAAA,EAAAA,IAAyBxI,EAAQmD,IAAQuB,SAAWA,GACtDa,EAAQ0C,SAAS,CAAErG,QAAIoE,EAAW7C,UAGpC,MAAQvB,GAAImK,EAAS,WAAEzF,GAAe7E,EAClCsK,GAAazF,IACVb,EAAAA,EAAAA,IAAQ,eAAgB,CAAEsG,YAAWzF,cAC5C,KAGF4B,EAAAA,EAAAA,IAAiB,iBAAiB,CAAClI,EAAQuF,EAAS6D,KAClD,MAAM,OAAE1E,EAAM,MAAEvB,GAAQqC,EAAAA,EAAAA,OAAsB4D,EACxC3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAChC,IAAKjD,EACH,OAGFzB,GAASkM,EAAAA,EAAAA,IAAUlM,EAAQ0E,IAC3BrD,EAAAA,EAAAA,IAAUrB,IAENwI,EAAAA,EAAAA,IAAyBxI,EAAQmD,IAAQuB,SAAWA,GACtDa,EAAQ0C,SAAS,CAAErG,QAAIoE,EAAW7C,UAGpC,MAAQvB,GAAImK,EAAS,WAAEzF,GAAe7E,EAClCsK,GAAazF,IACVb,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEsG,YAAWzF,cAC7C,KAGF4B,EAAAA,EAAAA,IAAiB,cAAc3H,MAAOP,EAAQuF,EAAS6D,KACrD,MAAM,MACJkC,EAAK,MAAEC,EAAK,MAAEpI,GAAQqC,EAAAA,EAAAA,OACpB4D,EAEJpJ,GAAS2L,EAAAA,EAAAA,GAAe3L,EAAQ,CAC9B4L,aAAc,CACZC,SAAUC,EAAAA,GAAAA,aAEX3I,IACH9B,EAAAA,EAAAA,IAAUrB,GACV,IACE,MAAMmM,EAAUrJ,OAAO0B,KAAKxE,EAAOE,MAAMC,MACzC,IAAI8L,EAAS/K,EAAAA,GAAiB,EAC3BiL,EAAQ3K,OAAS,IAClB2K,EAAQrB,MAAK,CAACsB,EAAEC,IAAIC,SAASD,GAAKC,SAASF,KAC3CH,EAASE,EAAQ,GAAK,GAExB,MAAMjK,EAAO,CACX,qBAAuB,EACvB,gBAAkB,EAClB,KAAQ,cACRN,GAAGqK,EACH,YAAe,GACftF,OAAM,EACN,UAAY,EACZ4F,QAAO,EACPC,WAAW,GACXlG,WAAW,GACXmG,WAAW,EACXC,UAAWpB,EACXqB,OAAO,GACPC,UAAW,CACT,CACE,SAAY,OAAOX,EACnB,UAAY,EACZ,YAAc,IAGlB7L,SAAU,CACR,WAAa,EACb,iBAAmB,EACnByM,IAAKtB,GAASuB,EAAAA,GACdxM,QAAS,CACPyM,OAAO,CACLC,UAAS,EACTC,cAAc,CACZC,oBAAoB,GACpBC,QAAQ,GACRC,mBAAmB,GACnBL,OAAOM,EAAAA,KAGXtN,MAAOkM,EACP,YAAeV,GAASuB,EAAAA,GACxB,WAAc,CACZ,KAAQ,YAEVQ,SAASC,EAAAA,GAAAA,KAAyBC,IAChCA,EAAIzN,MAAQkM,EACLuB,QAKfxN,GAASC,EAAAA,EAAAA,MACT,MAAM,YAACuC,GAAexC,EAEhBE,EAAkB,CAACgC,GAEnBf,EAAkB,CAACsM,EAAAA,EAAAA,iBAAmCvL,IAE5D,IACIwL,EADAC,EAAmBC,OAAOC,eAAeC,QAAQ,oBAErD,MAAMC,EAA+C,CAAC,EACnDJ,GAED7K,OAAOC,OAAOP,EAAYrC,MAAM8B,SAASQ,IACpCA,EAAIb,KAAO0K,SAASqB,KACrBD,EAAsBjL,EAClBA,EAAIuL,kBACNvL,EAAIuL,gBAAkB,IAExBvL,EAAIuL,gBAAgBvK,KAAKwI,GACzB8B,EAAetL,EAAIb,IAAMa,EAC3B,IAKJ,MAAMT,EAAgD,CACpD,CAACE,EAAKN,IAAM,CACV,KAAQ,oBAIZ5B,GAASC,EAAAA,EAAAA,MACTD,GAASgE,EAAAA,EAAAA,IAAShE,GAAQ2D,EAAAA,EAAAA,IAAqBzD,EAAO,OACtDF,GAASiO,EAAAA,EAAAA,IAASjO,GAAQ2D,EAAAA,EAAAA,IAAqBxC,EAAO,OACtDnB,GAAS+D,EAAAA,EAAAA,IAAkB/D,EAAQ,SAAUmB,EAAMiB,KAAIX,GAAMA,EAAKG,MAClE5B,GAASiE,EAAAA,EAAAA,IAAgBjE,EAAQgC,GACjChC,GAAS2L,EAAAA,EAAAA,GAAe3L,EAAQ,CAC9B4L,aAAc,KACTI,EAAAA,EAAAA,IAAehM,EAAQmD,GAAOyI,aACjCC,SAAUC,EAAAA,GAAAA,WAEX3I,IAEH9B,EAAAA,EAAAA,IAAU,IACLrB,EACHwC,YAAY,IACPxC,EAAOwC,YACVrC,KAAK,IACAH,EAAOwC,YAAYrC,QACnB4N,MAMNL,GACDnI,EAAQ2I,eAAe,CAAEtM,GAAI8L,EAAoB9L,GAAIuM,aAAcT,IAGrEnI,EAAQ0C,SAAS,CAACrG,GAAIqK,EAAO5B,sBAAsB,GAErD,CAAC,MAAOlF,GAENC,QAAQC,MAAMF,GACdnF,GAASC,EAAAA,EAAAA,MACTD,GAAS2L,EAAAA,EAAAA,GAAe3L,EAAQ,CAC9B4L,aAAc,KACTI,EAAAA,EAAAA,IAAehM,EAAQmD,GAAOyI,aACjCC,SAAUC,EAAAA,GAAAA,MACVzG,MAAO,SAERlC,IACH9B,EAAAA,EAAAA,IAAUrB,EACZ,MAEFkI,EAAAA,EAAAA,IAAiB,mBAAmB3H,MAAOP,EAAQuF,EAAS6D,KAC1D,MAAM,MACJkC,EAAK,UAAEG,EAAS,MAAED,EAAK,MAAErI,GAAQqC,EAAAA,EAAAA,OAC/B4D,EACElJ,EAASuL,EACZrJ,KAAKR,IAAOkF,EAAAA,EAAAA,IAAW9G,EAAQ4B,KAC/B6G,OAAOC,SAEV1I,GAAS2L,EAAAA,EAAAA,GAAe3L,EAAQ,CAC9B4L,aAAc,CACZC,SAAUC,EAAAA,GAAAA,aAEX3I,IACH9B,EAAAA,EAAAA,IAAUrB,GAEV,IACE,MAAMoO,QAAoB3I,EAAAA,EAAAA,IAAQ,kBAAmB,CACnD6F,QACApL,UAGF,IAAKkO,EACH,OAGF,MAAQxM,GAAI8C,GAAW0J,EAEvBpO,GAASC,EAAAA,EAAAA,MACTD,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQ0E,EAAQ0J,GACpCpO,GAAS2L,EAAAA,EAAAA,GAAe3L,EAAQ,CAC9B4L,aAAc,KACTI,EAAAA,EAAAA,IAAehM,EAAQmD,GAAOyI,aACjCC,SAAUuC,EAActC,EAAAA,GAAAA,SAAgCA,EAAAA,GAAAA,QAEzD3I,IACH9B,EAAAA,EAAAA,IAAUrB,GACVuF,EAAQ0C,SAAS,CACfrG,GAAI8C,EACJ2F,sBAAsB,EACtBlH,UAGEuB,GAAU8G,SACN/F,EAAAA,EAAAA,IAAQ,gBAAiB,CAC7Bf,SACA8G,SAGN,CAAE,MAAOrG,GACW,kBAAdA,EAAEnE,UACJhB,GAASC,EAAAA,EAAAA,MACTD,GAAS2L,EAAAA,EAAAA,GAAe3L,EAAQ,CAC9B4L,aAAc,KACTI,EAAAA,EAAAA,IAAehM,EAAQmD,GAAOyI,aACjCC,SAAUC,EAAAA,GAAAA,MACVzG,MAAO,qBAERlC,IACH9B,EAAAA,EAAAA,IAAUrB,GAEd,MAGFkI,EAAAA,EAAAA,IAAiB,oBAAoB,CAAClI,EAAQuF,EAAS6D,KACrD,MAAM,GAAExH,EAAE,SAAEyM,EAAQ,MAAElL,GAAQqC,EAAAA,EAAAA,OAAsB4D,EAC9C3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ4B,GAChC,IAAKH,EACH,OAGF,MAAMmG,GAAQ0G,EAAAA,EAAAA,GAAmBtO,EAAQ,sBAEzC,GAAIqO,EAAU,CACZ,MAAME,GAASC,EAAAA,EAAAA,IAAiBxO,EAAQqO,GACxC,GAAIE,EAAQ,CACV,MAAME,IAAkB5D,EAAAA,EAAAA,IAAmB7K,EAAQ4B,EAAIyM,IAEjD,cAAEK,EAAa,gBAAEV,GAAoBO,EACrCI,EAAeF,EACjB,CAAC7M,KAAQ8M,GAAiB,KACzBA,GAAiB,IAAIjG,QAAQmG,GAAaA,IAAahN,IAGtDiN,EAAqB,CAACjN,KAAOoM,IAE9BvI,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7B7D,GAAIyM,EACJF,aAAc,IACTI,EACHG,cAAeC,EACfX,gBAAiBa,IAGvB,CACF,KAAO,CACL,MAAMpO,GAAWqO,EAAAA,EAAAA,IAAmB9O,EAAQ4B,GACtCmN,GAAWlE,EAAAA,EAAAA,IAAmB7K,EAAQ4B,EAAiB,aAAbnB,EAA0BuO,EAAAA,SAAqBhJ,GAEzFiJ,EAAMjP,EAAOmB,MAAM+N,iBAA8B,aAAbzO,EAA0B,WAAa,UACjF,IAAKwO,GAAKzN,QAAU,IAAMoG,IAAUmH,EAKlC,YAJAxJ,EAAQoC,sBAAsB,CAC5BC,MAAO,qBACPzE,WAICsC,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEhE,OAAMgN,gBAAiBM,GAC5D,MAGF7G,EAAAA,EAAAA,IAAiB,sBAAsB,CAAClI,EAAQuF,EAAS6D,KACvD,MAAM,GAAExH,GAAOwH,EACT3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ4B,GAC5BH,IACGgE,EAAAA,EAAAA,IAAQ,qBAAsB,CACjChE,OACA4M,UAAUc,EAAAA,EAAAA,IAAe1N,GAAQ,EAAIuN,EAAAA,KAEzC,KAGF9G,EAAAA,EAAAA,IAAiB,mBAAmB3H,UAClC,MAAMiC,QAAoBiD,EAAAA,EAAAA,IAAQ,oBAE9BjD,IACFxC,GAASC,EAAAA,EAAAA,MAETD,EAAS,IACJA,EACHwC,YAAa,IACRxC,EAAOwC,eACPA,KAGPnB,EAAAA,EAAAA,IAAUrB,GACZ,KAGFkI,EAAAA,EAAAA,IAAiB,8BAA8B3H,UAC7C,MAAM6O,QAA+B3J,EAAAA,EAAAA,IAAQ,+BAEzC2J,IACFpP,GAASC,EAAAA,EAAAA,MAETD,EAAS,IACJA,EACHwC,YAAa,IACRxC,EAAOwC,YACV6M,YAAaD,KAGjB/N,EAAAA,EAAAA,IAAUrB,GACZ,KAGFkI,EAAAA,EAAAA,IAAiB,mBAAmB,CAAClI,EAAQuF,EAAS6D,KACpD,MAAM,OACJ1E,EAAM,YAAE4K,EAAW,SAAEC,EAAQ,MAAEpM,GAAQqC,EAAAA,EAAAA,OACrC4D,EACExB,GAAQ0G,EAAAA,EAAAA,GAAmBtO,EAAQ,sBAClBuP,EACpBC,MAAM5N,IAAO4M,EAAAA,EAAAA,IAAiBxO,EAAQ4B,GAAKoM,gBAAgBxM,QAAUoG,IAEtErC,EAAQoC,sBAAsB,CAAEC,MAAO,qBAAsBzE,WAI/DmM,EAAYrN,SAAQ1B,UAClB,MAAMgO,GAASC,EAAAA,EAAAA,IAAiBxO,EAAQ4B,GACpC2M,SACI9I,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9B7D,KACAuM,aAAc,IACTI,EACHG,cAAeH,EAAOG,eAAejG,QAAQmG,GAAaA,IAAalK,IACvEsJ,gBAAiBO,EAAOP,gBAAgBvF,QAAQgH,GAAeA,IAAe/K,MAGpF,IAGF6K,EAAStN,SAAQ1B,UACf,MAAMgO,GAASC,EAAAA,EAAAA,IAAiBxO,EAAQ4B,GACpC2M,SACI9I,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9B7D,KACAuM,aAAc,IACTI,EACHP,gBAAiBO,EAAOP,gBAAgBpK,OAAOc,KAGrD,IACA,KAGJwD,EAAAA,EAAAA,IAAiB,kBAAkB,CAAClI,EAAQuF,EAAS6D,KACnD,MAAM,GAAExH,EAAE,aAAEuM,GAAiB/E,EACvBmF,GAASC,EAAAA,EAAAA,IAAiBxO,EAAQ4B,GACpC2M,IACG9I,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7B7D,KACAuM,aAAc,CACZvM,KACA8N,SAAUnB,EAAOmB,SACjBhB,cAAeH,EAAOG,iBACnBP,IAGT,KAGFjG,EAAAA,EAAAA,IAAiB,iBAAiB3H,MAAOP,EAAQuF,EAAS6D,KACxD,MAAM,OAAEmF,EAAM,MAAEpL,GAAQqC,EAAAA,EAAAA,OAAsB4D,GACxC,WAAE1G,EAAU,KAAEvC,GAASH,EAAOwC,YAE9BoF,GAAQ0G,EAAAA,EAAAA,GAAmBtO,EAAQ,iBACzC,GAAI8C,OAAO0B,KAAKrE,GAAMqB,QAAUoG,EAK9B,YAJArC,EAAQoC,sBAAsB,CAC5BC,MAAO,gBACPzE,UAKJ,MAAMwM,EAAQC,KAAKC,OAAQnN,GAAc,GAAKsM,EAAAA,MAGtCpN,GAAIkO,EAAa,YAAEC,KAAgBC,GAAczB,EAUzD,SARM9I,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9B7D,GAAI+N,EAAQ,EACZxB,aAAc,CACZvM,GAAI+N,EAAQ,KACTK,MAIFD,EACH,OAGF/P,GAASC,EAAAA,EAAAA,MACT,MAAM,YAAEoP,GAAgBrP,EAAOwC,YAE3B6M,IACFrP,EAAS,IACJA,EACHwC,YAAa,IACRxC,EAAOwC,YACV6M,YAAaA,EAAY5G,QAAO,EAAG7G,QAASA,IAAOkO,OAGvDzO,EAAAA,EAAAA,IAAUrB,GACZ,KAGFkI,EAAAA,EAAAA,IAAiB,mBAAmB3H,MAAOP,EAAQuF,EAAS6D,KAC1D,MAAM,UAAEzG,GAAcyG,QAED3D,EAAAA,EAAAA,IAAQ,kBAAmB9C,KAE9C3C,GAASC,EAAAA,EAAAA,MACTD,EAAS,IACJA,EACHwC,YAAa,IACRxC,EAAOwC,YACVE,WAAYC,KAGhBtB,EAAAA,EAAAA,IAAUrB,GACZ,KAGFkI,EAAAA,EAAAA,IAAiB,oBAAoB3H,MAAOP,EAAQuF,EAAS6D,KAC3D,MAAM,GAAExH,GAAOwH,EACTmF,GAASC,EAAAA,EAAAA,IAAiBxO,EAAQ4B,GAExC2D,EAAQ0K,oBAAoB,CAACtC,iBAAiB,IAAGnI,EAAAA,EAAAA,OAC7C+I,SACI9I,EAAAA,EAAAA,IAAQ,mBAAoB7D,EACpC,KAGFsG,EAAAA,EAAAA,IAAiB,oBAAoB,CAAClI,EAAQuF,EAAS6D,KACrD,MAAM,GAAExH,GAAOwH,EACT3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ4B,GAC5BH,IACEA,EAAKyO,aACFzK,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEhE,OAAM0H,SAAUrE,EAAAA,MAEjDW,EAAAA,EAAAA,IAAQ,qBAAsB,CACjChE,OACA4H,eAAgB5H,EAAK4H,gBAG3B,KAGFnB,EAAAA,EAAAA,IAAiB,iBAAiB,CAAClI,EAAQuF,EAAS6D,KAClD,MAAM,OAAE1E,EAAM,QAAE0G,GAAYhC,EACtB3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAChC,IAAKjD,EAAM,OAEX,MAAM0O,EAAqB1O,EAAK2O,SAAShF,IAAUiF,cAC9CF,KAEA1K,EAAAA,EAAAA,IAAQ,sBAAuB,CAClChE,OACA0H,SAAUiC,EACVuE,MAAOQ,IAGTnQ,GAASC,EAAAA,EAAAA,MACTD,GAASqL,EAAAA,EAAAA,IAAYrL,EAAQ0E,EAAQ0G,EAAS,CAC5C8E,YAAa,IAEflQ,GAASsQ,EAAAA,EAAAA,IAAiBtQ,EAAQ0E,EAAQ0G,EAAS,CACjDmF,uBAAwBJ,KAE1B9O,EAAAA,EAAAA,IAAUrB,GAAO,KAGnBkI,EAAAA,EAAAA,IAAiB,oBAAoB3H,MAAOP,EAAQuF,EAAS6D,KAC3D,MAAM,KAAEoH,EAAI,MAAErN,GAAQqC,EAAAA,EAAAA,OAAsB4D,EAEtCnI,QAAewE,EAAAA,EAAAA,IAAQ,mBAAoB+K,GAC5CvP,GAILsE,EAAQ0C,SAAS,CAAErG,GAAIX,EAAOyD,OAAQvB,SAAQ,KAGhD+E,EAAAA,EAAAA,IAAiB,yBAAyB3H,MAAOP,EAAQuF,EAAS6D,KAChE,MAAM,YACJqH,EAAW,YAAErJ,EAAW,OAAED,EAAM,MAAEhE,GAAQqC,EAAAA,EAAAA,OACxC4D,EAGJ7D,EAAQ0C,SAAS,CAAErG,GAAIkI,EAAAA,IAAa3G,UAEpC,MAAM1B,QAgwCDlB,eAA6DP,EAAWyQ,GAC7EzQ,GAASC,EAAAA,EAAAA,MACT,MAAMyQ,GAAYC,EAAAA,EAAAA,IAAwB3Q,EAAQyQ,GAClD,GAAIC,IAAcA,EAAU/J,MAC1B,OAAOa,EAAAA,EAAAA,IAAWxH,EAAQ0Q,EAAU9O,IAGtC,MAAM,KAAEH,EAAI,KAAES,SAAeuD,EAAAA,EAAAA,IAAQ,uBAAwBgL,IAAgB,CAAC,EAC9E,OAAKhP,GAILzB,GAASC,EAAAA,EAAAA,MACTD,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQyB,EAAKG,GAAIH,IACrCJ,EAAAA,EAAAA,IAAUrB,GAENkC,IACFlC,GAAS4G,EAAAA,EAAAA,IAAW5G,EAAQkC,EAAKN,GAAIM,IACrCb,EAAAA,EAAAA,IAAUrB,IAGLyB,QAbP,CAcF,CAtxCqBmP,CAAuB5Q,EAAQyQ,GAClD,IAAKhP,EAMH,OALA8D,EAAQwE,iBAAiB,CAAE5G,eAC3BoC,EAAQyB,iBAAiB,CACvBhG,QAASiG,EAAAA,GAAuB,mCAAmC4J,QAAQ,UAAWJ,GACtFtN,UAKJoC,EAAQ0C,SAAS,CAAErG,GAAIH,EAAKG,GAAIuB,UAE5BgE,GAEFD,EADAlH,GAASC,EAAAA,EAAAA,MACsBsF,EAAS9D,EAAKG,GAAIuF,EAAQC,EAAajE,EACxE,KAGF+E,EAAAA,EAAAA,IAAiB,oBAAoB,CAAClI,EAAQuF,EAAS6D,KACrD,MAAM,IACJ0H,EAAG,MACH3N,GAAQqC,EAAAA,EAAAA,OACN4D,GAEE,sBACJ2H,EAAqB,iBACrBC,EAAgB,eAChBC,EAAc,kBACdC,EAAiB,oBACjBC,EAAmB,iBACnBnK,EAAgB,aAChBmD,EAAY,YACZiH,EAAW,2BACXC,EACAC,mBAAoBC,GAClBhM,EAEJ,GAAIuL,EAAIU,MAAMC,EAAAA,KAEZ,YADAC,EAAAA,EAAAA,IAAgBZ,GAIlB,MAAMa,EAAM,IAAIC,IAAId,EAAIe,cAAcC,WAAW,QAAUhB,EAAO,WAAUA,KAC5E,GAAIiB,EAAAA,IAAAA,IAAoBJ,EAAIK,WAA8B,MAAjBL,EAAIM,SAE3C,YADArE,OAAOsE,KAAKP,EAAIQ,WAAY,SAAU,YAIxC,MACMC,GADWL,EAAAA,IAAAA,IAAoBJ,EAAIK,UAAY,OAASL,EAAIK,UACvCK,MAAM,KACjC,GAAID,EAAU5Q,OAAS,EAAG,OAC1B,MAAMyQ,EAAgC,IAArBG,EAAU5Q,OAAgB,GAAE4Q,EAAU,MAAMT,EAAIM,WAAaN,EAAIM,UAC3EK,EAAOC,EAAOC,GAASP,EAASI,MAAM,KAAK5J,OAAOC,SAAStG,KAAKqQ,GAASC,UAAUD,KACpFE,EAAS7P,OAAO8P,YAAYjB,EAAIkB,cAEtC,IAAIrC,EACU,aAAV8B,IACF9B,EAAO+B,GAGT,MAAMnL,KAAcuL,EAAOG,eAAe,gBAAmBH,EAAOI,cAAqBJ,EAAOI,YAC1FC,GAASC,EAAAA,EAAAA,IAAqBN,EAAOK,QAE3C,GAAIV,EAAMd,MAAM,qBAOd,YANAT,EAAsB,CACpBN,YAAa6B,EAAMY,OAAO,EAAGZ,EAAM9Q,OAAS,GAC5C4F,cACAD,OAAQwL,EAAOxL,OACfhE,UASJ,IAJImP,EAAMR,WAAW,MAAQQ,EAAMR,WAAW,QAC5CtB,EAAO8B,EAAMY,OAAO,EAAGZ,EAAM9Q,OAAS,IAGpCgP,EAEF,YADAQ,EAAiB,CAAER,OAAMrN,UAI3B,GAAc,gBAAVmP,GAAqC,aAAVA,EAO7B,YANArB,EAAe,CACb5K,eAAgB,CACd8M,UAAWZ,GAEbpP,UAKJ,MAAMiQ,EAAsBb,QAASvM,EAC/BkE,EAAYsI,EAAQa,OAAOb,QAASxM,EACpCsN,EAAYX,EAAOY,QAAUF,OAAOV,EAAOY,cAAWvN,EAE5D,GAAc,UAAVsM,EAEFpB,EAAkB,CAAEsC,MADPC,EAAAA,EAAAA,IAAgBd,EAAO7B,IAAK6B,EAAOa,MACtBrQ,eACrB,GAAIwP,EAAOG,eAAe,cAAgBH,EAAOG,eAAe,cACrE3B,EAAoB,CAClB3K,SAAU8L,EACVoB,WAAYf,EAAOgB,WAAahB,EAAOiB,WACvCzQ,eAEG,GAAc,MAAVmP,GAAiBc,GAAuBlJ,EAAW,CAC5D,MAAMxF,EAAU,IAAG0O,IAEnB,KADa5L,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAG9B,YADAsC,EAAiB,CAAEhG,QAAS,sBAAuBmC,UAIrDgH,EAAa,CACXzF,SACAwF,YACA/G,SAEJ,MAAWmP,EAAMR,WAAW,KAC1BV,EAAY,CACVyC,KAAMvB,EAAMwB,UAAU,GACtB3Q,UAEiB,YAAVmP,EACTlB,EAAY,CACVyC,KAAMtB,EACNpP,UAEOiE,GAAe4L,EACxB3B,EAA2B,CACzB7K,SAAU8L,EACV7J,OAAQuK,KACmB,iBAAhB5L,GAA4B,CAAEE,WAAYF,GACrDjE,UAGFoO,EAAyB,CACvB/K,SAAU8L,EACVpI,UAAWA,GAAamJ,OAAOD,GAC/BjK,SAAUe,EAAYmJ,OAAOD,QAAuBpN,EACpDsN,YACAhM,WAAYqL,EAAOoB,MACnB3M,cACAD,OAAQwL,EAAOxL,OACfhE,SAEJ,KAGF+E,EAAAA,EAAAA,IAAiB,4BAA4B3H,MAAOP,EAAQuF,EAAS6D,KACnE,MAAM,KAAEoH,EAAI,MAAErN,GAAQqC,EAAAA,EAAAA,OAAsB4D,EACtCnI,QAAewE,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE+K,SAC9CvP,GAILsE,EAAQ0C,SAAS,CAAErG,GAAIX,EAAOW,GAAIuB,SAAQ,KAG5C+E,EAAAA,EAAAA,IAAiB,sBAAsB3H,MAAOP,EAAQuF,EAAS6D,KAC7D,MAAM,SACJ5C,EAAQ,UAAE0D,EAAS,UAAEoJ,EAAS,WAAEhM,EAAU,YAAEF,EAAW,OAAED,EAAM,SAAEgC,EAAQ,MACzEhG,GAAQqC,EAAAA,EAAAA,OACN4D,EAEE3H,GAAO4B,EAAAA,EAAAA,IAAkBrD,EAAQmD,GAEvC,IAAKmQ,EACH,OAAKlM,GAAe8C,IAAc5C,GAAc7F,GAAMmL,WAAW4C,MAAMwE,GAAMA,EAAExN,WAAaA,SAC1FjB,EAAQ4E,aAAa,CACnBzF,OAAQjD,EAAKG,GAAIuH,WAAUe,YAAW/G,qBA+oC9C5C,eACEP,EACAuF,EACAiB,EACA2C,EACA8K,EACA3M,EACAF,EACAD,MACIhE,GAAQqC,EAAAA,EAAAA,QAEZxF,GAASC,EAAAA,EAAAA,MACT,MAAMmD,GAAcC,EAAAA,EAAAA,IAAkBrD,EAAQmD,GAG9C,GAAIiE,IAAgBD,EAAQ,CAC1B,MAAM9G,QAAYwG,EAAqB7G,EAAQuF,EAASiB,EAAUrD,GAElE,IAAKC,IAAgB/C,EAAK,OAS1B,YAPAkF,EAAQ8B,cAAc,CACpBhH,MACAqE,OAAQtB,EAAYxB,MACO,iBAAhBwF,GAA4B,CAAEE,WAAYF,GACrDjE,SAIJ,CAEA,MAAM+Q,EAAgB9Q,GAAawJ,WAAW4C,MAAMwE,GAAMA,EAAExN,WAAaA,IAEpE0N,GAEH3O,EAAQ0C,SAAS,CAAErG,GAAIkI,EAAAA,IAAa3G,UAGtC,MAAM1B,QAAa8E,EAAoBvG,EAAQwG,GAC1C/E,GASDwS,EACF1O,EAAQ4E,aAAa,CACnBzF,OAAQjD,EAAKG,GAAIuH,WAAUe,UAAW+J,EAAe9Q,UAE7C+Q,GACV3O,EAAQ0C,SAAS,CAAErG,GAAIH,EAAKG,GAAIuH,WAAUhG,UAGxCmE,GACF/B,EAAQ4O,SAAS,CAAEpU,MAAO0B,EAAKG,GAAIwS,MAAO9M,IAGxCH,GAEFD,EADAlH,GAASC,EAAAA,EAAAA,MACsBsF,EAAS9D,EAAKG,GAAIuF,EAAQC,EAAajE,IAtBjE+Q,IACH3O,EAAQwE,iBAAiB,CAAE5G,UAC3BoC,EAAQyB,iBAAiB,CAAEhG,QAAS,sBAAuBmC,UAsBjE,CA1sCUmO,CAAmBtR,EAAQuF,EAASiB,EAAU2C,EAAUe,EAAW5C,EAAYF,EAAaD,EAAQhE,GAI5G,MAAM,OAAEuB,EAAM,KAAE8E,IAAShB,EAAAA,EAAAA,IAAyBxI,EAAQmD,IAAU,CAAC,EAC/DkR,GAAe3N,EAAAA,EAAAA,IAAqB1G,EAAQwG,GAClD,GAAI9B,GAAUwF,GAAamK,GAAyB,WAAT7K,EAAmB,CAC5D,MAAM8K,GAAaC,EAAAA,EAAAA,IAAiBvU,EAAQ0E,EAAQwF,GAEpD,GAAIoK,GAAcA,EAAW5P,SAAWA,EAOtC,YANAa,EAAQ4E,aAAa,CACnBzF,OAAQ4P,EAAW5P,OACnByE,SAAUmL,EAAWnL,SACrBe,UAAWoJ,EACXnQ,SAIN,CAEA,IAAK+G,EAAW,OAEhB3E,EAAQ0C,SAAS,CAAErG,GAAIkI,EAAAA,IAAa3G,UAEpC,MAAMqR,QAAuBjO,EAAoBvG,EAAQwG,GAEzD,IAAKgO,EAAgB,OAErBxU,GAASC,EAAAA,EAAAA,MAET,MAAMqU,GAAaC,EAAAA,EAAAA,IAAiBvU,EAAQwU,EAAe5S,GAAIsI,GAC/D,IAAIuK,EAEJ,GAAKH,EAUHG,EAAmBH,EAAW5P,WAVf,CACf,MAAMzD,QAAewE,EAAAA,EAAAA,IAAQ,0BAA2B,CAAEhE,KAAM+S,EAAgBrL,SAAUe,IAC1F,IAAKjJ,EAAQ,OAEbjB,GAASC,EAAAA,EAAAA,MACTD,GAASgE,EAAAA,EAAAA,IAAShE,GAAQ2D,EAAAA,EAAAA,IAAqB1C,EAAOf,MAAO,QAC7DmB,EAAAA,EAAAA,IAAUrB,GAEVyU,EAAmBxT,EAAOwT,gBAC5B,CAIKA,GAELlP,EAAQ4E,aAAa,CACnBzF,OAAQ+P,EACRtL,SAAUe,EACVA,UAAWmJ,OAAOC,GAClBnQ,SACA,KAGJ+E,EAAAA,EAAAA,IAAiB,0BAA0B3H,MAAOP,EAAQuF,EAAS6D,KACjE,MAAM,OACJ1E,EAAM,UAAEgQ,EAAS,MACjBvR,GAAQqC,EAAAA,EAAAA,OACN4D,EAEE3H,QAAa8F,EAAmBvH,EAAQuF,EAASb,EAAQvB,GAC1D1B,IAILzB,GAASC,EAAAA,EAAAA,MAETD,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQyB,EAAKG,GAAI,CACnCxB,SAAU,IACLqB,EAAKrB,SACRuU,mBAAoBD,MAGxBrT,EAAAA,EAAAA,IAAUrB,IAELyF,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEhE,OAAMiT,cAAY,KAG7DxM,EAAAA,EAAAA,IAAiB,iCAAiC,CAAClI,EAAQuF,EAAS6D,KAClE,MAAM,OAAE1E,EAAM,aAAEkQ,GAAiBxL,EAC3B3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAE3BjD,IAIAgE,EAAAA,EAAAA,IAAQ,gCAAiC,CAAEhE,OAAMmT,gBAAe,KAGvE1M,EAAAA,EAAAA,IAAiB,gCAAgC3H,MAAOP,EAAQuF,EAAS6D,KACvE,MAAM,OACJ1E,EAAM,OAAEuH,EAAM,aAAE2I,EAAY,MAC5BzR,GAAQqC,EAAAA,EAAAA,OACN4D,EAEElH,GAAO4E,EAAAA,EAAAA,IAAW9G,EAAQiM,GAEhC,IAAK/J,EACH,OAGF,MAAMT,QAAa8F,EAAmBvH,EAAQuF,EAASb,EAAQvB,GAE/D,IAAK1B,EAAM,aAELgE,EAAAA,EAAAA,IAAQ,+BAAgC,CAAEhE,OAAMS,OAAM0S,iBAE5D5U,GAASC,EAAAA,EAAAA,MAET,MAAM4U,GAAkBrN,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAE3C,IAAKmQ,IAAoBA,EAAgBzU,SACvC,OAGF,MAAM,QAAE0U,EAAO,cAAEC,GAAkBF,EAAgBzU,SAE7C4U,EAAWtM,QAAQkM,EAAaK,cAChCC,GAAepS,OAAO0B,KAAKoQ,GAAcpT,OAE/CxB,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQ0E,EAAQ,CAClCtE,SAAU,IACLyU,EAAgBzU,YACf0U,GAAWE,GAAY,CACzBF,QAASA,EAAQrM,QAAQ0M,GAAMA,EAAElJ,SAAWA,QAE1C6I,IAAYE,GAAY,CAC1BF,QAASA,EAAQ1S,KAAK+S,GACpBA,EAAElJ,SAAWA,EACT,IAAKkJ,EAAGP,gBACRO,QAGJD,GAAeH,GAAiB,CAClCA,cAAeA,EAActM,QAAQ0M,GAAMA,EAAElJ,SAAWA,SAI9D5K,EAAAA,EAAAA,IAAUrB,EAAO,KAGnBkI,EAAAA,EAAAA,IAAiB,mBAAmB3H,MAAOP,EAAQuF,EAAS6D,KAC1D,MAAM,OACJ1E,EAAM,OAAEuH,EAAM,YAAEmJ,EAAW,YAAEC,EAAW,MACxClS,GAAQqC,EAAAA,EAAAA,OACN4D,EAEElH,GAAO4E,EAAAA,EAAAA,IAAW9G,EAAQiM,GAChC,IAAK/J,EACH,OAGF,MAAMT,QAAa8F,EAAmBvH,EAAQuF,EAASb,EAAQvB,GAE/D,IAAK1B,EAAM,aAELgE,EAAAA,EAAAA,IAAQ,kBAAmB,CAC/BhE,OAAMS,OAAMkT,cAAaC,gBAG3B,MAAMR,QAAwBpP,EAAAA,EAAAA,IAAQ,gBAAiBhE,GACvD,IAAKoT,GAAiBzU,SACpB,OAGF,MAAM,iBAAEkV,GAAqBT,EAAgBzU,SACvCmV,GAAezS,OAAO0B,KAAK4Q,GAAa5T,OAC9C,IAAIgU,EACJ,GAAIF,EACF,GAAIC,EAAa,CACf,MAAQ,CAACtJ,GAASwJ,KAAWC,GAASJ,EACtCE,EAAsBE,CACxB,MACEF,EAAsB,IACjBF,EACH,CAACrJ,GAAS,IACLqJ,EAAiBrJ,GACpBmJ,cACAC,gBAMRrV,GAASC,EAAAA,EAAAA,MAETD,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQ0E,EAAQ,CAClCtE,SAAU,IACLyU,EAAgBzU,YACfoV,GAAuB,CAAEF,iBAAkBE,OAGnDnU,EAAAA,EAAAA,IAAUrB,EAAO,KAGnBkI,EAAAA,EAAAA,IAAiB,cAAc3H,MAAOP,EAAQuF,EAAS6D,KACrD,MAAM,OACJ1E,EAAM,MAAE4G,EAAK,MAAEC,EAAK,MAAEC,EAAK,MAAErI,GAAQqC,EAAAA,EAAAA,OACnC4D,EAEE3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAC3BjD,IAILzB,GAASC,EAAAA,EAAAA,MACTD,GAAS2V,EAAAA,EAAAA,IAAyB3V,EAAQ4V,EAAAA,GAAAA,WAA+BzS,IACzE9B,EAAAA,EAAAA,IAAUrB,SAEJ6V,QAAQC,IAAI,CAChBrU,EAAK6J,QAAUA,GACX7F,EAAAA,EAAAA,IAAQ,kBAAmBhE,EAAM6J,QACjCtF,EACJvE,EAAKrB,UAAYqB,EAAKrB,SAASmL,QAAUA,GACrC9F,EAAAA,EAAAA,IAAQ,kBAAmBhE,EAAM8J,QACjCvF,EACJwF,GACI/F,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEf,SAAQ4B,WAAY7E,EAAK6E,WAAYkF,eAChExF,IAGNhG,GAASC,EAAAA,EAAAA,MACTD,GAAS2V,EAAAA,EAAAA,IAAyB3V,EAAQ4V,EAAAA,GAAAA,SAA6BzS,IACvE9B,EAAAA,EAAAA,IAAUrB,GAAO,KAGnBkI,EAAAA,EAAAA,IAAiB,mBAAmB3H,MAAOP,EAAQuF,EAAS6D,KAC1D,MAAM,MAAEoC,EAAK,OAAE9G,EAAM,MAAEvB,GAAQqC,EAAAA,EAAAA,OAAsB4D,EAC/C3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAC3BjD,IACLzB,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQ0E,EAAQ,CAClC8H,gBAAYxG,EACZ5F,SAAU,IACLqB,EAAKrB,SACR2V,kBAAc/P,MAGlB3E,EAAAA,EAAAA,IAAUrB,SAEJyF,EAAAA,EAAAA,IAAQ,gBAAiB,CAC7Bf,SACA4B,WAAY7E,EAAK6E,WACjBkF,gBAGI/F,EAAAA,EAAAA,IAAQ,sBAAuB,CAAC+F,IACtCjG,EAAQD,aAAa,CAAEZ,SAAQvB,UAC/BoC,EAAQyQ,kBAAkB,CAAEC,UAAWvR,IAAS,KAGlDwD,EAAAA,EAAAA,IAAiB,mBAAmB3H,MAAOP,EAAQuF,EAAS6D,KAC1D,MAAM,MAAEoC,EAAK,OAAE9G,EAAM,MAAEvB,GAAQqC,EAAAA,EAAAA,OAAsB4D,EAC/C3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAChC,IAAKjD,EAAM,OACX,MAAMyU,EAAiB,CAAC1K,GACxB,GAAI/J,EAAK+K,aAAehB,EAAM5J,GAAI,CAEhC,MAAMuU,EAAY1U,EAAKkL,SAAS,GAC5BwJ,GACFD,EAAezS,KAAK0S,GAEtBnW,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQ0E,EAAQ,CAClC8H,gBAAYxG,EACZ5F,SAAU,IACLqB,EAAKrB,SACR2V,kBAAc/P,MAGlB3E,EAAAA,EAAAA,IAAUrB,SAEJyF,EAAAA,EAAAA,IAAQ,gBAAiB,CAC7Bf,SACA4B,WAAY7E,EAAK6E,WACjBkF,MAAO2K,GAEX,OAEqB1Q,EAAAA,EAAAA,IAAQ,sBAAuByQ,KAEpD3Q,EAAQD,aAAa,CAAEZ,SAAQvB,UAC/BoC,EAAQyQ,kBAAkB,CAAEC,UAAWvR,IAAS,KAGlDwD,EAAAA,EAAAA,IAAiB,oBAAoB,CAAClI,EAAQuF,EAAS6D,KACrD,MAAM,OAAE1E,EAAM,UAAEgQ,GAActL,EACxB3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAE3BjD,IAIAgE,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEhE,OAAMiT,aAAY,KAGvDxM,EAAAA,EAAAA,IAAiB,2BAA2B3H,UAC1C,MAAM6V,QAAe3Q,EAAAA,EAAAA,IAAQ,4BAC7B,IAAK2Q,EACH,OAGF,MAAMC,EAAYD,EAAOE,QAAO,CAACrV,EAAQsV,KACnCA,IAAUA,EAAMC,UAClBvV,EAAOsV,EAAM3U,IAAM2U,GAGdtV,IACN,CAAC,GAEJjB,GAASC,EAAAA,EAAAA,MACTD,GAASiO,EAAAA,EAAAA,IAASjO,EAAQqW,GAC1BrW,EAAS,IACJA,EACHmB,MAAO,IACFnB,EAAOmB,MACVsV,iBAAkB3T,OAAO0B,KAAK6R,MAGlChV,EAAAA,EAAAA,IAAUrB,EAAO,KAGnBkI,EAAAA,EAAAA,IAAiB,uBAAuB3H,MAAOP,EAAQuF,EAAS6D,KAC9D,MAAM,UAAE2C,EAAS,OAAErH,EAAM,MAAEvB,GAAQqC,EAAAA,EAAAA,OAAsB4D,GAAW,CAAC,EAE/DsN,GAAUlP,EAAAA,EAAAA,IAAWxH,EAAQ+L,GACnC,IAAK2K,EACH,OAGF,MAAMjV,QAAa8F,EAAmBvH,EAAQuF,EAASb,EAAQvB,GAE/D,IAAK1B,EAAM,OAEX,IAAI,SAAErB,GAAaqB,EACnB,IAAKrB,EAAU,CACb,MAAMuW,QAAiBlR,EAAAA,EAAAA,IAAQ,gBAAiBhE,GAChD,IAAKkV,EACH,OAGFvW,EAAWuW,EAASvW,QACtB,CAEIA,EAAUuU,qBACZ3U,GAASC,EAAAA,EAAAA,MACTD,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQyB,EAAKG,GAAI,CACnCxB,SAAU,IACLqB,EAAKrB,SACRuU,oBAAoB,MAGxBtT,EAAAA,EAAAA,IAAUrB,SAEJyF,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEhE,OAAMiT,WAAW,MAGxDjP,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEiR,UAASjV,QAAO,KAGvDyG,EAAAA,EAAAA,IAAiB,yBAAyB3H,MAAOP,EAAQuF,EAAS6D,KAChE,MAAM,UAAE2C,EAAS,MAAE5I,GAAQqC,EAAAA,EAAAA,OAAsB4D,EAE3CsN,GAAUlP,EAAAA,EAAAA,IAAWxH,EAAQ+L,GACnC,IAAK2K,EACH,OAGF,IAAIjV,EACAiV,EAAQtW,UAAU6J,eACpBxI,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0W,EAAQtW,SAAS6J,qBAGvCxE,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEiR,YAClCjV,GAEF6D,EADAtF,GAASC,EAAAA,EAAAA,MACYsF,EAAS9D,EAAM0B,EACtC,KAGF+E,EAAAA,EAAAA,IAAiB,uBAAuB,CAAClI,EAAQuF,EAAS6D,KACxD,MAAM,iBAAEuE,EAAgB,MAAExK,GAAQqC,EAAAA,EAAAA,OAAsB4D,EAKxD,KAFkBuE,EAAmB,GAFlBW,EAAAA,EAAAA,GAAmBtO,EAAQ,kBAY9C,OADA4N,OAAOC,eAAe+I,QAAQ,mBAAmBjJ,EAAiBwE,aAC3DxG,EAAAA,EAAAA,GAAe3L,EAAQ,CAC5B2N,oBACCxK,GATDoC,EAAQoC,sBAAsB,CAC5BC,MAAO,gBACPzE,SAOK,KAGX+E,EAAAA,EAAAA,IAAiB,0BAA0B,CAAClI,EAAQuF,EAAS6D,KAC3D,MAAM,MAAEjG,GAAQqC,EAAAA,EAAAA,OAAsB4D,GAAW,CAAC,EAElD,OAAOuC,EAAAA,EAAAA,GAAe3L,EAAQ,CAC5B6W,oBAAgB7Q,GACf7C,EAAM,KAGX+E,EAAAA,EAAAA,IAAiB,mBAAmB3H,MAAOP,EAAQuF,EAAS6D,KAC1D,MAAM,MAAEjG,GAAQqC,EAAAA,EAAAA,OAAsB4D,GAAW,CAAC,GAC5C,OAAE1E,IAAW8D,EAAAA,EAAAA,IAAyBxI,EAAQmD,IAAU,CAAC,EACzD1B,EAAOiD,GAAS8C,EAAAA,EAAAA,IAAWxH,EAAQ0E,QAAUsB,EACnD,IAAKvE,IAAQgG,EAAAA,EAAAA,IAAiBhG,GAC5B,OAGF,MAAMqV,EAAUrV,EAAKrB,UAAU0U,SAAStT,aAAWwE,EACnD,QAAeA,IAAX8Q,QAA8C9Q,IAAtBvE,EAAKkE,cAA8BmR,GAAUrV,EAAKkE,aAAc,OAE5F,MAAM1E,QAAewE,EAAAA,EAAAA,IAAQ,eAAgBhE,EAAKG,GAAIH,EAAK6E,WAAa,SAAUwQ,GAClF,IAAK7V,EACH,OAGF,MAAM,QAAE6T,EAAO,MAAE5U,EAAK,iBAAE8B,GAAqBf,EACxC6T,GAAYA,EAAQtT,SAIzBxB,GAASC,EAAAA,EAAAA,MACTD,GAASgE,EAAAA,EAAAA,IAAShE,GAAQ2D,EAAAA,EAAAA,IAAqBzD,EAAO,OACtDF,GAASiE,EAAAA,EAAAA,IAAgBjE,EAAQgC,GACjChC,GAAS+W,EAAAA,EAAAA,IAAe/W,EAAQyB,EAAMqT,IACtCzT,EAAAA,EAAAA,IAAUrB,GAAO,KAGnBkI,EAAAA,EAAAA,IAAiB,kBAAkB3H,MAAOP,EAAQuF,EAAS6D,KACzD,MAAM,OAAE1E,EAAM,UAAE+G,EAAS,MAAEtI,GAAQqC,EAAAA,EAAAA,OAAsB4D,EACnD3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAC1BxE,EAASuL,EAAuBrJ,KAAK6J,IAAWnF,EAAAA,EAAAA,IAAW9G,EAAQiM,KAASxD,OAAOC,SAEpFjH,GAASvB,EAAMsB,SAIpB+D,EAAQyR,6BAA6B,CAAEC,uBAAwBC,EAAAA,GAAAA,QAAgC/T,gBACzFsC,EAAAA,EAAAA,IAAQ,iBAAkBhE,EAAMvB,GACtCqF,EAAQyR,6BAA6B,CAAEC,uBAAwBC,EAAAA,GAAAA,OAA+B/T,UAE9FmC,EADAtF,GAASC,EAAAA,EAAAA,MACYsF,EAAS9D,EAAM0B,GAAM,KAG5C+E,EAAAA,EAAAA,IAAiB,oBAAoB3H,MAAOP,EAAQuF,EAAS6D,KAC3D,MAAM,OAAE1E,EAAM,OAAEuH,EAAM,MAAE9I,GAAQqC,EAAAA,EAAAA,OAAsB4D,EAChD3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAC1BxC,GAAO4E,EAAAA,EAAAA,IAAW9G,EAAQiM,GAE3BxK,GAASS,UAIRuD,EAAAA,EAAAA,IAAQ,mBAAoBhE,EAAMS,GAExCoD,EADAtF,GAASC,EAAAA,EAAAA,MACYsF,EAAS9D,EAAM0B,GAAM,KAG5C+E,EAAAA,EAAAA,IAAiB,qBAAqB,CAAClI,EAAQuF,EAAS6D,KACtD,MAAM,OAAE1E,EAAM,YAAEyS,GAAgB/N,EAC1B3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAE3BjD,IAIAgE,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEhE,OAAM0V,eAAc,KAG1DjP,EAAAA,EAAAA,IAAiB,2BAA2B3H,MAAOP,EAAQuF,EAAS6D,KAClE,MAAM,OAAE1E,EAAM,iBAAE0S,EAAgB,MAAEjU,GAAQqC,EAAAA,EAAAA,OAAsB4D,EAC1D3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAC3BjD,UAECgE,EAAAA,EAAAA,IAAQ,0BAA2B,CACvChE,OACA2V,qBAIG9R,EADLtF,GAASC,EAAAA,EAAAA,MACiBsF,EAAS9D,EAAM0B,GAAM,KAGjD+E,EAAAA,EAAAA,IAAiB,oBAAoB3H,MAAOP,EAAQuF,EAAS6D,KAC3D,MAAM,OAAE1E,GAAW0E,EACb3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAChC,IAAKjD,EAAM,OAEX,MAAMR,QAAewE,EAAAA,EAAAA,IAAQ,oBAAqBhE,GAClD,IAAKR,EAAQ,OACb,MAAM,SAAEoW,EAAQ,MAAEnX,GAAUe,EAC5BjB,GAASC,EAAAA,EAAAA,MAETD,GAASgE,EAAAA,EAAAA,IAAShE,GAAQ2D,EAAAA,EAAAA,IAAqBzD,EAAO,OAEtDF,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQyB,EAAKG,GAAI,CAAEyV,cACvChW,EAAAA,EAAAA,IAAUrB,EAAO,KAGnBkI,EAAAA,EAAAA,IAAiB,oBAAoB3H,MAAOP,EAAQuF,EAAS6D,KAC3D,MAAM,OAAE1E,EAAM,UAAEgQ,GAActL,EACxB3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAC3BjD,KACA6V,EAAAA,EAAAA,IAAiB7V,KAAU8V,EAAAA,EAAAA,IAAc9V,WAExCgE,EAAAA,EAAAA,IAAQ,mBAAoBhE,EAAMiT,EAAU,KAGpDxM,EAAAA,EAAAA,IAAiB,qBAAqB3H,MAAOP,EAAQuF,EAAS6D,KAC5D,MAAM,OAAE1E,EAAM,UAAEgQ,GAActL,EACxB3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAC3BjD,KACA6V,EAAAA,EAAAA,IAAiB7V,KAAU8V,EAAAA,EAAAA,IAAc9V,WAExCgE,EAAAA,EAAAA,IAAQ,oBAAqBhE,EAAMiT,EAAU,KAGrDxM,EAAAA,EAAAA,IAAiB,kBAAkB,CAAClI,EAAQuF,EAAS6D,KACnD,MAAM,OAAE1E,EAAM,MAAEvB,GAAQqC,EAAAA,EAAAA,OAAsB4D,EAC9C,OAAOuC,EAAAA,EAAAA,GAAe3L,EAAQ,CAC5BwX,iBAAkB9S,GACjBvB,EAAM,KAGX+E,EAAAA,EAAAA,IAAiB,mBAAmB,CAAClI,EAAQuF,EAAS6D,KACpD,MAAM,MAAEjG,GAAQqC,EAAAA,EAAAA,OAAsB4D,GAAW,CAAC,EAClD,OAAOuC,EAAAA,EAAAA,GAAe3L,EAAQ,CAC5BwX,sBAAkBxR,GACjB7C,EAAM,KAGX+E,EAAAA,EAAAA,IAAiB,8BAA8B3H,MAAOP,EAAQuF,EAAS6D,KACrE,MAAM,SACJ5C,EAAQ,OAAEiC,EAAM,WAAEnB,EAAU,MAAEnE,GAAQqC,EAAAA,EAAAA,OACpC4D,EACE/I,QAAYwG,EAAqB7G,EAAQuF,EAASiB,EAAUrD,GAClE,IAAK9C,EAAK,OAEVL,GAASC,EAAAA,EAAAA,MACT,MAAQwX,YAAY,KAAEC,IAAW1X,EACjC,IAAK0X,EAAKrX,EAAIuB,IAeZ,OAdA5B,GAAS2L,EAAAA,EAAAA,GAAe3L,EAAQ,CAC9B2X,0BAA2B,CACzBtX,MACAuX,UAAW,CACTC,OAAQ,yBACRzO,QAAS,CACP/I,MACAoI,SACAnB,iBAILnE,QACH9B,EAAAA,EAAAA,IAAUrB,GAIZuF,EAAQuS,uBAAuB,CAC7BzX,MACAoI,SACAnB,aACAnE,SACA,KAGJ+E,EAAAA,EAAAA,IAAiB,cAAc3H,MAAOP,EAAQuF,EAAS6D,KACrD,MAAM,OAAE1E,EAAM,MAAEuG,GAAU7B,EACpB3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAChC,IAAKjD,EAAM,OAEX,IAAKwJ,GAASxJ,EAAKsW,gBAAkBtW,EAAKsW,eAAevW,SAAWC,EAAKuW,YACvE,OAGF,MAAMC,GAAehN,GAASxJ,EAAKsW,eAAiBtW,EAAKsW,eAAezB,QAAO,CAAC4B,EAAKC,KACnF,MAAMC,EAAQ3W,EAAK2O,SAAS+H,GACtBE,EAAW5W,EAAK2O,SAAS8H,GAC/B,OAAKE,KACAC,GAAYD,EAAM/H,cAAgBgI,EAAShI,eACvC8H,EAFUD,CAIT,SACPlS,GAEGpE,GAAI0W,EAAe9N,KAAM7J,EAAY0P,cAAe3P,GAAcuX,GACrExW,EAAK2O,SAAS6H,IAAiB,CAAC,EAC/BhX,QAAewE,EAAAA,EAAAA,IAAQ,cAAe,CAC1ChE,OAAM6W,gBAAe5X,WAAUC,aAAYiH,MAAO0Q,EAAgBC,EAAAA,IAAeC,EAAAA,MAG9EvX,IAELjB,GAASC,EAAAA,EAAAA,MACTD,GAASgE,EAAAA,EAAAA,IAAShE,GAAQ2D,EAAAA,EAAAA,IAAqB1C,EAAOf,MAAO,OAC7DF,GAASiO,EAAAA,EAAAA,IAASjO,GAAQ2D,EAAAA,EAAAA,IAAqB1C,EAAOE,MAAO,OAC7DnB,GAASyY,EAAAA,EAAAA,IAAYzY,EAAQiB,EAAOS,UACpC1B,GAAS0Y,EAAAA,EAAAA,IAAa1Y,EAAQ0E,EAAQzD,EAAO0X,MAAO1X,EAAOmP,QAC3DpQ,GAAS4Y,EAAAA,EAAAA,IAAqB5Y,EAAQ0E,EAAQzD,EAAOmP,OAAOhO,KAAKgW,GAAUA,EAAMxW,MACjFkB,OAAO+V,QAAQ5X,EAAOwD,YAAc,CAAC,GAAGxC,SAAQ,EAAEkH,EAAUxE,MAC1D3E,GAASiF,EAAAA,EAAAA,IAAmBjF,EAAQ0E,EAAQ2O,OAAOlK,GAAW,QAASxE,GAAOmU,eAC9E9Y,GAASiF,EAAAA,EAAAA,IAAmBjF,EAAQ0E,EAAQ2O,OAAOlK,GAAW,eAAgBxE,GAAOoU,aAAa,IAEpGjW,OAAO+V,QAAQ5X,EAAO+X,6BAA+B,CAAC,GAAG/W,SAAQ,EAAEmJ,EAASlB,MAC1ElK,GAASsQ,EAAAA,EAAAA,IAAiBtQ,EAAQ0E,EAAQ2O,OAAOjI,GAAU,CAAEmF,uBAAwBrG,GAAY,KAGnG7I,EAAAA,EAAAA,IAAUrB,GAAO,KAGnBkI,EAAAA,EAAAA,IAAiB,iBAAiB3H,MAAOP,EAAQuF,EAAS6D,KACxD,MAAM,OAAE1E,EAAM,QAAE0G,GAAYhC,EAEtB3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAChC,IAAKjD,EAAM,OAEX,MAAMR,QAAewE,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEhE,OAAM2J,YAEvD,GAAKnK,EAQLjB,GAASC,EAAAA,EAAAA,MACTD,GAASgE,EAAAA,EAAAA,IAAShE,GAAQ2D,EAAAA,EAAAA,IAAqB1C,EAAOf,MAAO,OAC7DF,GAASiO,EAAAA,EAAAA,IAASjO,GAAQ2D,EAAAA,EAAAA,IAAqB1C,EAAOE,MAAO,OAC7DnB,GAASyY,EAAAA,EAAAA,IAAYzY,EAAQiB,EAAOS,UACpC1B,GAASqL,EAAAA,EAAAA,IAAYrL,EAAQ0E,EAAQ0G,EAASnK,EAAOmX,QAErD/W,EAAAA,EAAAA,IAAUrB,QAbR,GAAI,UAAWoJ,GAAWA,EAAQ6P,uBAAwB,CACxD,MAAM,MAAE9V,GAAQqC,EAAAA,EAAAA,OAAsB4D,EACtC7D,EAAQ0C,SAAS,CAAErG,QAAIoE,EAAW7C,SACpC,CAUe,KAGnB+E,EAAAA,EAAAA,IAAiB,eAAe3H,MAAOP,EAAQuF,EAAS6D,KACtD,MAAM,OAAE1E,EAAM,UAAEgQ,EAAS,MAAEvR,GAAQqC,EAAAA,EAAAA,OAAsB4D,EAEnD3H,QAAa8F,EAAmBvH,EAAQuF,EAASb,EAAQvB,GAC/D,IAAK1B,EACH,OAGFzB,GAASC,EAAAA,EAAAA,MAET,MAAMiZ,EAAczX,EAAK+U,QACzBxW,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQ0E,EAAQ,CAAE8R,QAAS9B,KAC/CrT,EAAAA,EAAAA,IAAUrB,SAEWyF,EAAAA,EAAAA,IAAQ,cAAe,CAAEhE,OAAMiT,gBAGlD1U,GAASC,EAAAA,EAAAA,MACTD,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQ0E,EAAQ,CAAE8R,QAAS0C,KAC/C7X,EAAAA,EAAAA,IAAUrB,GACZ,KAGFkI,EAAAA,EAAAA,IAAiB,4BAA4B3H,MAAOP,EAAQuF,EAAS6D,KACnE,MAAM,OAAE1E,EAAM,UAAEgQ,GAActL,EACxB3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAChC,IAAKjD,EACH,OAGF,MAAM0X,EAAgB1X,EAAKrB,UAAUgZ,sBAErCpZ,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQ0E,EAAQ,CAClCtE,SAAU,IACLqB,EAAKrB,SACRgZ,sBAAuB1E,MAG3BrT,EAAAA,EAAAA,IAAUrB,SAEWyF,EAAAA,EAAAA,IAAQ,2BAA4B,CAAEhE,OAAMiT,oBAEhC1O,IAAlBmT,IACbnZ,GAASC,EAAAA,EAAAA,MACTD,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQ0E,EAAQ,CAClCtE,SAAU,IACLqB,EAAKrB,SACRgZ,sBAAuBD,MAG3B9X,EAAAA,EAAAA,IAAUrB,GACZ,KAGFkI,EAAAA,EAAAA,IAAiB,eAAe3H,MAAOP,EAAQuF,EAAS6D,KACtD,MAAM,OACJ1E,EAAM,MAAE4G,EAAK,UAAE+N,EAAS,YAAEC,EAAW,MACrCnW,GAAQqC,EAAAA,EAAAA,OACN4D,EACE3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAChC,IAAKjD,EAAM,QAEPuK,EAAAA,EAAAA,IAAehM,EAAQmD,GAAOoW,mBAChCvZ,GAAS2L,EAAAA,EAAAA,GAAe3L,EAAQ,CAC9BuZ,iBAAkB,CAChB7U,SACA8U,WAAW,IAEZrW,IACH9B,EAAAA,EAAAA,IAAUrB,IAGZ,MAAMoL,QAAgB3F,EAAAA,EAAAA,IAAQ,cAAe,CAC3ChE,OAAM6J,QAAO+N,YAAWC,gBAEtBlO,GACF7F,EAAQ0C,SAAS,CACfrG,GAAI8C,EAAQyE,SAAUiC,EAASf,sBAAsB,EAAMlH,UAG/DoC,EAAQkU,sBAAsB,CAAEtW,SAAQ,KAG1C+E,EAAAA,EAAAA,IAAiB,eAAe3H,MAAOP,EAAQuF,EAAS6D,KACtD,MAAM,OAAE1E,EAAM,QAAE0G,GAAYhC,EACtB3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAC3BjD,SAEgBgE,EAAAA,EAAAA,IAAQ,cAAe,CAAEhE,OAAM2J,cAIpDpL,GAASC,EAAAA,EAAAA,MACTD,GAAS0Z,EAAAA,EAAAA,IAAY1Z,EAAQ0E,EAAQ0G,IACrC/J,EAAAA,EAAAA,IAAUrB,GAAO,KAGnBkI,EAAAA,EAAAA,IAAiB,aAAa3H,MAAOP,EAAQuF,EAAS6D,KACpD,MAAM,OACJ1E,EAAM,QAAE0G,EAAO,MAAEjI,GAAQqC,EAAAA,EAAAA,SAAsBkQ,GAC7CtM,EACE3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAC1B0T,EAAQ3W,GAAM2O,SAAShF,GACxB3J,GAAS2W,KAEVpM,EAAAA,EAAAA,IAAehM,EAAQmD,GAAOwW,iBAChC3Z,GAAS2L,EAAAA,EAAAA,GAAe3L,EAAQ,CAC9B2Z,eAAgB,CACdjV,SACA0G,UACAoO,WAAW,IAEZrW,IACH9B,EAAAA,EAAAA,IAAUrB,UAGSyF,EAAAA,EAAAA,IAAQ,YAAa,CAAEhE,OAAM2J,aAAYsK,MAG9D1V,GAASC,EAAAA,EAAAA,MACTD,GAASqL,EAAAA,EAAAA,IAAYrL,EAAQ0E,EAAQ0G,EAASsK,IAC9CrU,EAAAA,EAAAA,IAAUrB,GAEVuF,EAAQqU,oBAAoB,CAAEzW,WAAQ,KAGxC+E,EAAAA,EAAAA,IAAiB,qBAAqB,CAAClI,EAAQuF,EAAS6D,KACtD,MAAM,OACJ1E,EAAM,QAAE0G,EAAO,SAAE2D,EAAQ,MAAE5L,GAAQqC,EAAAA,EAAAA,OACjC4D,GAEE,kBAAEyQ,GAAsB7Z,EAAO8Z,WAAa,CAAC,EAC7CrY,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAC3BjD,GAASA,EAAK2O,QAAWyJ,IAE1B9K,GAAYjM,OAAOC,OAAOtB,EAAK2O,QAAQ3H,QAAQ2P,GAAUA,EAAMrJ,WAAUvN,QAAUqY,EACrFtU,EAAQyB,iBAAiB,CACvBhG,QAASiG,EAAAA,GAAuB,2BAA4B4S,EAAmB,KAC/E1W,WAKCsC,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEhE,OAAM2J,UAAS2D,aAAW,G,0PCl5DhE,MAAMgL,EAAc,0oBAEpB,IAAIC,EACAC,EACAC,EAKG,SAASC,IAGd,OAFAC,IAEOvE,QAAQC,IAAIhT,OAAOC,OAAOmX,GAAQ9X,KAAKiY,IAC5C,MAAMC,EAAUD,EAAME,IAItB,OAHAF,EAAME,IAAMR,EACZM,EAAMG,OAAQ,EACdH,EAAMI,OAAS,KACRJ,EAAMK,OACVC,MAAK,KACJN,EAAM/R,QACN+R,EAAMI,OAAS,EACfJ,EAAMO,YAAc,EACpBP,EAAMG,OAAQ,EAEdK,uBAAsB,KACpBR,EAAME,IAAMD,CAAO,GACnB,GACF,IAER,CAEO,SAASF,IACd,GAAIF,EACF,OAEF,MAAMY,EAAY,IAAIC,MAAM,wBACtBC,EAAkB,IAAID,MAAM,8BAClCC,EAAgBC,MAAO,EACvB,MAAMC,EAAa,IAAIH,MAAM,yBACvBI,EAAiB,IAAIJ,MAAM,+BAC3BK,EAAY,IAAIL,MAAM,mBACtBM,EAAe,IAAIN,MAAM,sBACzBO,EAAW,IAAIP,MAAM,kBACrBQ,EAAgB,IAAIR,MAAM,uBAChCQ,EAAcN,MAAO,EACrB,MAAMO,EAAe,IAAIT,MAAM,sBAC/BS,EAAaP,MAAO,EAEpBf,EAAS,CACPuB,KAAMX,EACNY,UAAWP,EACXQ,MAAOT,EACPU,WAAYZ,EACZa,SAAUN,EACVO,IAAKR,EACLS,QAASV,EACTW,KAAMZ,EACNa,QAAST,EAEb,CAEAjb,eAAe2b,EAAsClc,EAAW0F,GAC9D,MAAMzE,QAAewE,EAAAA,EAAAA,IAAQ,eAAgB,CAC3C0W,KAAMzW,IAGR,IAAKzE,EAAQ,OAEbjB,GAASC,EAAAA,EAAAA,MAET,MAAM2F,GAAoBC,EAAAA,EAAAA,IAAgB7F,EAAQ0F,EAAU9D,IAc5D,OAZA5B,GAAS8F,EAAAA,EAAAA,IACP9F,EACA0F,EAAU9D,IACVmE,EAAAA,EAAAA,IAAK9E,EAAOyE,UAAW,CAAC,yBACxBM,EACAJ,GAAmBwW,cAAWpW,EAAY/E,EAAOyE,UAAUO,mBAE7DjG,GAASgE,EAAAA,EAAAA,IAAShE,GAAQ2D,EAAAA,EAAAA,IAAqB1C,EAAOf,MAAO,OAC7DF,GAASiO,EAAAA,EAAAA,IAASjO,GAAQ2D,EAAAA,EAAAA,IAAqB1C,EAAOE,MAAO,QAE7DE,EAAAA,EAAAA,IAAUrB,GAEHiB,EAAOyE,SAChB,CAEAnF,eAAe8b,EACbrc,EACA0F,EAAkC4W,GAElC,MAAMrb,QAAewE,EAAAA,EAAAA,IAAQ,6BAA8B,CACzD0W,KAAMzW,EACNoR,OAAQwF,IAGLrb,IAELjB,GAASC,EAAAA,EAAAA,MAETD,GAASgE,EAAAA,EAAAA,IAAShE,GAAQ2D,EAAAA,EAAAA,IAAqB1C,EAAOf,MAAO,OAC7DF,GAASiO,EAAAA,EAAAA,IAASjO,GAAQ2D,EAAAA,EAAAA,IAAqB1C,EAAOE,MAAO,QAE7DE,EAAAA,EAAAA,IAAUrB,GACZ,EAEAkI,EAAAA,EAAAA,IAAiB,wBAAwB,CAAClI,EAAQuF,EAAS6D,KACzD,MAAM,MAAE6B,EAAK,MAAE9H,GAAQqC,EAAAA,EAAAA,OAAsB4D,GAAW,CAAC,EACzD,OAAOuC,EAAAA,EAAAA,GAAe3L,EAAQ,CAC5Buc,mBAAoB,UAAYnT,GAAW,CAAC,GAAK6B,IAASe,EAAAA,EAAAA,IAAehM,EAAQmD,GAAOoZ,oBACvFpZ,EAAM,KAGX+E,EAAAA,EAAAA,IAAiB,+BAA+B3H,MAAOP,EAAQuF,EAAS6D,KACtE,MAAM,WAAEoT,EAAU,GAAE5a,GAAOwH,EACrB1D,GAAYG,EAAAA,EAAAA,IAAgB7F,EAAQ4B,GAErC8D,IAED8W,UACIN,EAAelc,EAAQ0F,GAC7B1F,GAASC,EAAAA,EAAAA,YACHoc,EAA2Brc,EAAQ0F,UAGrCD,EAAAA,EAAAA,IAAQ,mCAAoC,CAChD+W,aACAL,KAAMzW,IACN,KAGJwC,EAAAA,EAAAA,IAAiB,mBAAmB3H,MAAOP,EAAQuF,EAAS6D,KAC1D,MAAM,OAAE1E,EAAM,MAAEvB,GAAQqC,EAAAA,EAAAA,OAAsB4D,EAExC3H,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0E,GAChC,IAAKjD,EACH,OAGF,MAAMR,QAAewE,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9CgX,KAAMhb,IAGHR,IAELjB,GAASC,EAAAA,EAAAA,MACTD,GAAS8F,EAAAA,EAAAA,IAAgB9F,EAAQiB,EAAOW,GAAI,IACvCX,EACHyD,YAEFrD,EAAAA,EAAAA,IAAUrB,GAEVuF,EAAQmX,8BAA8B,CAAE9a,GAAIX,EAAOW,GAAI0E,WAAYrF,EAAOqF,WAAYnD,UAAQ,KAGhG+E,EAAAA,EAAAA,IAAiB,6BAA6B3H,MAAOP,EAAQuF,EAAS6D,KACpE,MAAM,MAAEjG,GAAQqC,EAAAA,EAAAA,OAAsB4D,GAAW,CAAC,EAC5C1D,GAAYiX,EAAAA,EAAAA,IAAsB3c,GAExC,IAAK0F,IAAcA,EAAUhB,OAC3B,OAGF,MAAMjD,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0F,EAAUhB,QAC1C,IAAKjD,EACH,OAGF,MAAMmb,EAAoBlU,SAAQmU,EAAAA,EAAAA,IAAgBpb,IAElD,IAAI,WAAEqb,GAAerb,EAAKrB,SACtBwc,IACFE,QAAmBrX,EAAAA,EAAAA,IAAQ,wBAAyB,CAClD0W,KAAMzW,EACNqX,eAAe,KAIdD,KAILE,EAAAA,EAAAA,IAAoBF,GACpBvX,EAAQyB,iBAAiB,CACvBhG,QAAS,2BACTmC,UACA,KAGJ+E,EAAAA,EAAAA,IAAiB,uBAAuB3H,MAAOP,EAAQuF,EAAS6D,KAC9D,MAAM,SAAE5C,EAAQ,WAAEkN,EAAU,MAAEvQ,GAAQqC,EAAAA,EAAAA,OAAsB4D,EAEtD3H,QAAa8E,EAAAA,EAAAA,IAAoBvG,EAAQwG,GAE/C,IAAK/E,EAEH,YADA8D,EAAQyB,iBAAiB,CAAEhG,QAASiG,EAAAA,GAAuB,mBAAoB9D,UAIjFnD,GAASC,EAAAA,EAAAA,MACT,MAAMgd,QAAa3X,EAAAA,EAAAA,IAAatF,EAAQuF,EAAS9D,EAAM0B,GAEnD8Z,GAAMvX,WACRH,EAAQmX,8BAA8B,CACpC9a,GAAIqb,EAAKvX,UAAU9D,GACnB0E,WAAY2W,EAAKvX,UAAUY,WAC3BoN,aACAvQ,SAEJ,KAGF+E,EAAAA,EAAAA,IAAiB,iCAAiC,CAAClI,EAAQuF,EAAS6D,KAClE7D,EAAQ2X,2BAA2B,CACjCrF,OAAQ,gBACRzO,UACAjG,MAAOiG,EAAQjG,QAASqC,EAAAA,EAAAA,OACxB,KAGJ0C,EAAAA,EAAAA,IAAiB,8BAA8B,CAAClI,EAAQuF,EAAS6D,KAC/D7D,EAAQ2X,2BAA2B,CACjCrF,OAAQ,aACRzO,aAASpD,EACT7C,MAAOiG,GAASjG,QAASqC,EAAAA,EAAAA,OACzB,KAGJ0C,EAAAA,EAAAA,IAAiB,iBAAiB3H,MAAOP,EAAQuF,EAAS6D,KACxD,MAAM,OACJ1E,EAAM,GAAE9C,EAAE,WAAE0E,EAAU,WAAEoN,EAAU,MAAEvQ,GAAQqC,EAAAA,EAAAA,OAC1C4D,EAEJ,IAAK+T,EAAAA,GAAqB,OAE1B,GAAInd,EAAOod,UAET,YADA7X,EAAQ8X,qBAAqB,CAAEla,WAuJnC,WACE,MAAMma,EAXE,IAAK1P,OAAO2P,cAAiB3P,OAAe4P,oBAYpDxD,EAAe,IAAIe,MACnBd,EAAeqD,EACftD,EAAayD,UAAYC,EAAQJ,IACjCK,EAAAA,EAAAA,GAAS3D,EACX,CAzJE4D,GAEAxD,IAEKyD,EADL7d,GAASC,EAAAA,EAAAA,MACuCsF,GAAS,EAAMpC,GAE/D,MAAQ2a,YAAY,kBAAEC,IAAwB/d,EAC9C,IAAI0F,EAAY9D,GAAKiE,EAAAA,EAAAA,IAAgB7F,EAAQ4B,IAAMoc,EAAAA,EAAAA,IAAoBhe,EAAQ0E,GAE3EgB,GAAW9D,KAAOmc,EAKlBA,EACE,mBAAoBxY,GACtBA,EAAQ0Y,eAAe,CACrBC,OAAQ9U,EACRjG,UAMFuC,GAAaqY,IAAsBrY,EAAU9D,GAC/C2D,EAAQ8X,qBAAqB,CAAEla,WAI5BuC,GAAe9D,GAAO0E,IACzBZ,QAAkBwW,EAAelc,EAAQ,CACvC4B,KACA0E,gBAICZ,IAEL1F,GAASC,EAAAA,EAAAA,MACTD,GAAS8F,EAAAA,EAAAA,IACP9F,EACA0F,EAAU9D,GACV,IACK8D,EACHgO,mBAEF1N,EACAN,EAAUO,kBAAoB,GAEhCjG,EAAS,IACJA,EACH8d,WAAY,IACP9d,EAAO8d,WACVC,kBAAmBrY,EAAU9D,MAIjCP,EAAAA,EAAAA,IAAUrB,GAEVuF,EAAQ8X,qBAAqB,CAAEpS,OAAO,EAAO9H,YAjD3CoC,EAAQ8X,qBAAqB,CAAEla,SAiDoB,KAGvD+E,EAAAA,EAAAA,IAAiB,sBAAsB,CAAClI,EAAQuF,EAAS6D,KACvD,MAAM,MAAEiR,GAAUjR,EAEb8Q,EAAOG,KAKI,eAAVA,GACFH,EAAO0B,WAAWtT,QAEN,aAAV+R,GACFH,EAAO2B,SAASvT,QAEJ,YAAV+R,GACFH,EAAO+B,QAAQ3T,SAEjBqV,EAAAA,EAAAA,GAASzD,EAAOG,IAGV,KAGVnS,EAAAA,EAAAA,IAAiB,iCAAkClI,IACjD,MAAM0F,GAAYiX,EAAAA,EAAAA,IAAsB3c,GACnC0F,GAIA2W,EAA2Brc,EAAQ0F,EAAWA,EAAU4W,WAAW,KAG1EpU,EAAAA,EAAAA,IAAiB,+BAA+B,CAAClI,EAAQuF,EAAS6D,KAChE7D,EAAQ2X,2BAA2B,CACjCrF,OAAQ,cACRzO,UACAjG,MAAOiG,EAAQjG,QAASqC,EAAAA,EAAAA,OACxB,KAGJ0C,EAAAA,EAAAA,IAAiB,eAAe3H,MAAOP,EAAQuF,EAAS6D,KACtD,MAAM,OAAE6C,EAAM,QAAEkS,EAAO,MAAEhb,GAAQqC,EAAAA,EAAAA,OAAsB4D,EAEnDpJ,EAAOod,UACT7X,EAAQ8X,qBAAqB,CAAEla,WAIpB2D,EAAAA,EAAAA,IAAW9G,EAAQiM,KAMhCmO,IAEKyD,EADL7d,GAASC,EAAAA,EAAAA,MACuCsF,EAAS4Y,EAAShb,GAElEnD,GAASC,EAAAA,EAAAA,MACTD,EAAS,IACJA,EACHod,UAAW,CACTxb,GAAI,GACJwc,MAAO,aACPC,cAAepS,EACfkS,UACAG,QAASte,EAAOwD,iBAGpBnC,EAAAA,EAAAA,IAAUrB,GAEVuF,EAAQ8X,qBAAqB,CAAEpS,OAAO,EAAO9H,UAAQ,IAOvD,MAAMua,EAAWJ,IACf,MAAMiB,EAAajB,EAAIkB,mBACjBC,EAAMF,EAAWxC,QAAQuB,EAAIoB,gCAEnC,OADAH,EAAWxK,QACJ,IAAI4K,YAAY,CAAC7b,OAAO8b,OAAQH,EAAYI,OAAOC,iBAAiB,GAAI,CAAEC,SAAS,KAAU,EAW/F,SAASC,IACd,OAAOhF,CACT,CAEO,SAASiF,IACd,OAAOhF,CACT,CAEO,SAASiF,IACdlF,GAAc1R,QACd2R,OAAejU,EACfgU,OAAehU,CACjB,CAKO,SAAS6X,EACd7d,EACAuF,EAAgC4Y,MAC5Bhb,GAAQqC,EAAAA,EAAAA,QAER2Y,EACFgB,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IAC1C3E,MAAMkE,IACkC,IAAnCA,EAAOU,iBAAiB/d,OAC1B+D,EAAQyB,iBAAiB,CACvBhG,QAASiG,EAAAA,GAAuB,qBAChC9D,UAGFqc,EAA0Bxf,EAAQuF,EAASpC,EAC7C,IAEDsc,OAAM,KACLla,EAAQyB,iBAAiB,CACvBhG,QAASiG,EAAAA,GAAuB,qBAChC9D,SACA,IAGNqc,EAA0Bxf,EAAQuF,EAASpC,EAE/C,CAEA,SAASqc,EACPxf,EAAWuF,MAAoCpC,GAAQqC,EAAAA,EAAAA,QAEvD2Z,UAAUC,aAAaC,aAAa,CAAEK,OAAO,IAC1C/E,MAAMkE,IACkC,IAAnCA,EAAOC,iBAAiBtd,QAC1B+D,EAAQyB,iBAAiB,CACvBhG,QAASiG,EAAAA,GAAuB,yCAChC9D,SAEJ,IAEDsc,OAAM,KACLla,EAAQyB,iBAAiB,CACvBhG,QAASiG,EAAAA,GAAuB,yCAChC9D,SACA,GAER,C,+GCheO,SAAS2C,EACd9F,EACA2f,EACAC,EACAC,EACAC,GAEA,MAKMC,EALajd,OAAOC,OAAO,IAC5B/C,EAAO8d,WAAW3d,KAAKwf,IAAcI,gBACrCH,EAAgBG,eAEOtX,QAAO,EAAGuX,aAAcA,IACtB1J,QAAO,CAAC4B,EAA2CC,KAC/ED,EAAIC,EAAGvW,IAAMuW,EACND,IACN,CAAC,GAEJ,MAAO,IACFlY,EACH8d,WAAY,IACP9d,EAAO8d,WACV3d,KAAM,IACDH,EAAO8d,WAAW3d,KACrB,CAACwf,GAAc,IACV3f,EAAO8d,WAAW3d,KAAKwf,OACvB5Z,EAAAA,EAAAA,IAAK6Z,EAAiB,CAAC,yBACtBC,GAAyB,CAC3B5Z,kBAAmBjG,EAAO8d,WAAW3d,KAAKwf,GAAa1Z,kBAAoB4Z,WAE/C7Z,IAA1B8Z,GAAuC,CACzC7Z,kBAAmB6Z,GAErBC,kBAKV,CAEO,SAASE,EACdjgB,EACA2f,GAEA,MAAMja,GAAYG,EAAAA,EAAAA,IAAgB7F,EAAQ2f,GAC1C,GAAIja,GAAaA,EAAUhB,OAAQ,CACjC,MAAMjD,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAQ0F,EAAUhB,QACtCjD,IACFzB,GAASkG,EAAAA,EAAAA,IAAWlG,EAAQ0F,EAAUhB,OAAQ,CAC5CtE,SAAU,IACLqB,EAAKrB,SACRuf,iBAAa3Z,KAIrB,CAEA,MAAO,IACFhG,EACH8d,WAAY,IACP9d,EAAO8d,WACV3d,KAAM,KACD4F,EAAAA,EAAAA,IAAK/F,EAAO8d,WAAW3d,KAAM,CAACwf,EAAYxN,eAIrD,CAEO,SAAS+N,EACdlgB,EACA4f,EACAE,GAEA,OAAK9f,EAAO8d,WAAWC,kBAIhBjY,EAAgB9F,EACrBA,EAAO8d,WAAWC,kBAClB6B,OACA5Z,EACA8Z,GAPO9f,CAQX,CAEO,SAASmgB,EACdngB,EACA2f,EACA1T,EACAmU,EACAC,GAAgB,GAEhB,MAAM3a,GAAYG,EAAAA,EAAAA,IAAgB7F,EAAQ2f,GAC1C,OAAKja,EAIEI,EAAgB9F,EAAQ2f,EAAa,CAC1CI,aAAc,IACTra,EAAUqa,aACb,CAAC9T,GAAS,IACLvG,EAAUqa,aAAa9T,MACvBmU,KAGNA,EAAkBJ,OAChBK,EAAgB,GAAK,EACrB3a,EAAUqa,aAAa9T,IAAWoU,EAAgB,EAAI,GAblDrgB,CAcX,C,oCClHO,IAAKsgB,EAAc,SAAdA,GAAc,OAAdA,EAAAA,EAAc,0CAAdA,EAAAA,EAAc,0CAAdA,EAAAA,EAAc,4CAAdA,EAAAA,EAAc,4CAAdA,EAAAA,EAAc,gDAAdA,EAAAA,EAAc,gDAAdA,EAAAA,EAAc,0CAAdA,EAAAA,EAAc,0CAAdA,EAAAA,EAAc,0CAAdA,EAAAA,EAAc,0CAAdA,EAAAA,EAAc,kDAAdA,EAAAA,EAAc,kDAAdA,EAAAA,EAAc,oDAAdA,EAAAA,EAAc,oDAAdA,EAAAA,EAAc,4DAAdA,EAAAA,EAAc,4DAAdA,EAAAA,EAAc,0CAAdA,EAAAA,EAAc,0CAAdA,EAAAA,EAAc,wCAAdA,EAAAA,EAAc,wCAAdA,EAAAA,EAAc,oCAAdA,EAAAA,EAAc,oCAAdA,EAAAA,EAAc,gEAAdA,EAAAA,EAAc,gEAAdA,EAAAA,EAAc,8CAAdA,EAAAA,EAAc,8CAAdA,EAAAA,EAAc,wCAAdA,EAAAA,EAAc,wCAAdA,EAAAA,EAAc,0CAAdA,EAAAA,EAAc,0CAAdA,EAAAA,EAAc,sCAAdA,EAAAA,EAAc,sCAAdA,EAAAA,EAAc,0CAAdA,EAAAA,EAAc,0CAAdA,EAAAA,EAAc,oDAAdA,EAAAA,EAAc,oDAAdA,EAAAA,EAAc,gCAAdA,EAAAA,EAAc,gCAAdA,EAAAA,EAAc,0CAAdA,EAAAA,EAAc,0CAAdA,EAAAA,EAAc,wCAAdA,EAAAA,EAAc,gCAAdA,EAAAA,EAAc,gCAAdA,EAAAA,EAAc,gDAAdA,EAAAA,EAAc,gDAAdA,EAAAA,EAAc,0CAAdA,EAAAA,EAAc,0CAAdA,EAAAA,EAAc,4CAAdA,EAAAA,EAAc,4CAAdA,CAAc,K,6DCKX,MAAMC,UAAsBC,EAAAA,GAEzCC,YAAYC,G,UACVC,MAAM,yBAA0BD,G,EAAK,K,OAAA,G,+SAAA,U,wFACrCE,KAAKC,aAAaP,EAAAA,GAAAA,mBAClBM,KAAKF,IAAMA,CACb,CACAI,gBAAgBC,GACd,OAAO,IAAIR,GAAgBS,OAAOD,EAAIE,OACxC,E,+gBCTa,MAAMC,UAAuBV,EAAAA,GAE1CC,YAAYC,G,UACVC,MAAM,yBAA0BD,G,EAAK,K,OAAA,G,+SAAA,U,wFACrCE,KAAKC,aAAaP,EAAAA,GAAAA,oBAClBM,KAAKF,IAAMA,CACb,CACAI,gBAAgBC,GACd,OAAO,IAAIG,GAAiBF,OAAOD,EAAIE,OACzC,E,6DCTa,MAAME,UAAuBX,EAAAA,GAE1CC,YAAYC,G,UACVC,MAAM,yBAA0BD,G,EAAK,K,OAAA,G,+SAAA,U,wFACrCE,KAAKC,aAAaP,EAAAA,GAAAA,oBAClBM,KAAKF,IAAMA,CACb,CACAI,gBAAgBC,GACd,OAAO,IAAII,GAAiBH,OAAOD,EAAIE,OACzC,E,6DCTa,MAAMG,UAAoBZ,EAAAA,GAEvCC,YAAYC,G,UACVC,MAAM,sBAAuBD,G,EAAK,K,OAAA,G,+SAAA,U,wFAClCE,KAAKC,aAAaP,EAAAA,GAAAA,iBAClBM,KAAKF,IAAMA,CACb,CACAI,gBAAgBC,GACd,OAAO,IAAIK,GAAcJ,OAAOD,EAAIE,OACtC,E,6DCTa,MAAMI,UAAoBb,EAAAA,GAEvCC,YAAYC,G,UACVC,MAAM,sBAAuBD,G,EAAK,K,OAAA,G,+SAAA,U,wFAClCE,KAAKC,aAAaP,EAAAA,GAAAA,iBAClBM,KAAKF,IAAMA,CACb,CACAI,gBAAgBC,GACd,OAAO,IAAIM,GAAcL,OAAOD,EAAIE,OACtC,E,mICTa,MAAMK,UAAqBd,EAAAA,GAExCC,YAAYC,G,UACVC,MAAM,uBAAwBD,G,EAAK,K,OAAA,G,+SAAA,U,wFACnCE,KAAKC,aAAaP,EAAAA,GAAAA,kBAClBM,KAAKF,IAAMA,CACb,CACAI,gBAAgBC,GACd,OAAO,IAAIO,GAAeN,OAAOD,EAAIE,OACvC,E,+TCTa,MAAMM,UAAwBf,EAAAA,GAE3CC,YAAYC,G,UACVC,MAAM,2BAA4BD,G,EAAK,K,OAAA,G,+SAAA,U,wFACvCE,KAAKC,aAAaP,EAAAA,GAAAA,qBAClBM,KAAKF,IAAMA,CACb,CACAI,gBAAgBC,GACd,OAAO,IAAIQ,GAAkBP,OAAOD,EAAIE,OAC1C,E,8UC6OK,MAAMO,EAAiB,CAC5BC,YAAa,CAAC,EAEdC,cACEC,EACAC,EACAC,GAEA,MAAMC,EAAMlB,KAAKkB,IAAIH,EAAcC,GAEnC,OADAhB,KAAKa,YAAYK,GAAOD,EACjBC,CACT,EAEAC,KAAKJ,EAAsBC,GACzB,MAAME,EAAMlB,KAAKkB,IAAIH,EAAcC,GAC7BC,EAAajB,KAAKa,YAAYK,GACpC1c,QAAQ4c,IAAIH,GACZA,GAAYI,OACd,EAEAxM,OAAOkM,EAAsBC,GAC3B,MAAME,EAAMlB,KAAKkB,IAAIH,EAAcC,UAC5BhB,KAAKa,YAAYK,EAC1B,EAEAA,IAAGA,CAACH,EAAsBC,IAChB,GAAED,KAAgBC,KChQf,MAAMM,EAEnBzB,YAAY0B,G,YAA6B,K,OAAA,G,+SAAA,oB,wFACvCvB,KAAKuB,cAAgBA,CACvB,CACArB,sBAAsBpc,EAAc8O,GAClC,MAAMtJ,QAAkBkY,EAAAA,EAAAA,WACxBA,EAAAA,EAAAA,WAAyB1d,EAAOwF,EAAU,CACxCxF,SACA9C,GAAGsI,EACHmY,SAAS3d,EACT4d,YAAW,EACX9X,MAAK+X,EAAAA,EAAAA,MACLC,QAAQ,CACNhP,KAAK,CACHA,KAAKA,KAIb,CACAsN,0BAA0Bpc,GACxB,IAAI1E,GAASC,EAAAA,EAAAA,MACb,MAAMwiB,EAAeziB,EAAO0B,SAASC,SAAS+C,GACxCuK,EAAMnM,OAAO0B,KAAKie,EAAatiB,MAAMiC,IAAIiR,QACzC5R,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAO0E,GAgB/B,OAfA0d,EAAAA,EAAAA,UAAwB,CACtB,QAAQ,iBACR1d,SACAuK,QAEFyT,YAAW,KACT1iB,GAASC,EAAAA,EAAAA,MACTD,GAASkG,EAAAA,EAAAA,IAAWlG,EAAO0E,EAAO,IAC7BjD,EACHyO,YAAY,EACZnO,YAAYqgB,EAAAA,EAAAA,qBAAmC1d,MAEjDrD,EAAAA,EAAAA,IAAUrB,EAAO,GACjB,MAEK,CACT,CAEAO,2BACQqgB,KAAKuB,cAAcQ,wBACnB/B,KAAKuB,cAAcS,UAAU,SACnCC,EAAAA,EAAAA,MAAaC,aAAa,CACxBC,mBAAkB,GAEtB,CACAxiB,sBACQqgB,KAAKuB,cAAcQ,kBACzB,MACMK,EAAUC,EAAAA,EAAAA,YAAoBA,EAAAA,EAAAA,gBAC9BC,EAAU,IAAIC,EAAAA,EAFV,mFAEsBC,kBAC1BJ,EAAQK,WAAWH,GACzB,MAAMI,EAAYN,EAAQO,eAC1BN,EAAAA,EAAAA,oBAA4BK,GAC5B,MAAME,EAAUR,GAASS,aACzB,GAAID,QAmBI5C,KAAKuB,cAAcuB,UAAUF,OAnBzB,CACV,MAAM,SAACG,SAAkBC,EAAAA,EAAAA,KACzB,GAAGD,EAAS,CACV,MAAME,GAAMC,EAAAA,EAAAA,GAAWH,GACjBI,GAAO,IAAIC,MACX,QAACC,EAAO,KAAEC,SAAclB,EAAQmB,YAAYJ,EAAG5R,WAAY0R,GAC3DL,EAAUP,EAAAA,EAAAA,cAAsB,CAACgB,UAAQC,OAAKH,OACpDf,EAAQoB,YAAYZ,GACpB,MAAMN,QAAgBF,EAAQqB,aACxBf,EAAYN,EAAQO,qBACpBe,EAAAA,EAAAA,GAAe,IAAI/D,EAAAA,GAAc,CACrC+C,YAAUJ,UAAQM,YACjBe,cACG3D,KAAKuB,cAAcS,UAAU,gBAC7BhC,KAAKuB,cAAcuB,UAAUF,SAC7B5C,KAAKuB,cAAcuB,UAAUR,SAC7BtC,KAAKuB,cAAcuB,UAAUJ,EAAUnR,WAC/C,CACF,CAGF,CACA5R,0BACQqgB,KAAKuB,cAAcQ,kBACzB,MAAMxN,EAAI,IAAIgO,EAAAA,EACd,aAAavC,KAAKuB,cAAcqC,oBAAoB,CAAChR,KAAK2B,EAAEsP,YAC9D,CACAlkB,mBAAmBR,GACjB,IAAIC,GAASC,EAAAA,EAAAA,MACb,MAAMiC,GAAO4E,EAAAA,EAAAA,IAAW9G,EAAOD,GAQ/B,aANM6gB,KAAKuB,cAAcQ,wBACP2B,EAAAA,EAAAA,GAAe,IAAI/C,EAAAA,GAAgB,CACnDpV,QAAQ,CAACjK,EAAMN,MACd2iB,cAEG3D,KAAKuB,cAAcqC,oBAAoB,CAAChR,KAAM,UAC7C,CAET,CACAjT,iBAAiBR,GACf,IAAIC,GAASC,EAAAA,EAAAA,MACb,MAAMiC,GAAO4E,EAAAA,EAAAA,IAAW9G,EAAOD,SAEzB6gB,KAAKuB,cAAcQ,kBACzB,MAAMziB,EAA4B,GAC5B+O,EAAM,CAAC/M,GAAMN,IACnB,IAAK,IAAIL,EAAI,EAAGA,EAAI0N,EAAIzN,UACnBD,EAAI,GADuBA,IAAK,CAInC,MAAMK,EAAKqN,EAAI1N,GACfrB,EAAMuD,KAAK,CACTihB,MAAKnC,EAAAA,EAAAA,MACLtW,OAAOrK,EACPM,MAAK4E,EAAAA,EAAAA,IAAW9G,EAAOD,IAE3B,OACkBukB,EAAAA,EAAAA,GAAe,IAAIK,EAAAA,GAAc,CACjDzkB,QACAwkB,MAAKnC,EAAAA,EAAAA,QACJgC,QAHH,MAIM/Q,QAAayP,EAAAA,EAAAA,qBAA6BoB,cAEhD,aADMzD,KAAKuB,cAAcqC,oBAAoB,CAAChR,UACvC,CAET,CACAjT,qBAAqBmE,EAAckgB,GACjC,IAAI5kB,GAASC,EAAAA,EAAAA,MACb,MAAMwiB,EAAeziB,EAAO0B,SAASC,SAAS+C,GACxCuK,EAAMnM,OAAO0B,KAAKie,EAAatiB,MAAMiC,IAAIiR,cACzCuN,KAAKuB,cAAcQ,kBACzB,MAAMjhB,EAAkC,GACxC,IAAK,IAAIH,EAAI,EAAGA,EAAI0N,EAAIzN,UACnBD,EAAI,GADuBA,IAAK,CAInC,MAAMK,EAAKqN,EAAI1N,GAEfG,EAAS+B,KAAK,CACZihB,MAAKnC,EAAAA,EAAAA,MACLrY,UAAUtI,EACVZ,SAAQ6jB,EAAAA,EAAAA,IAAkB7kB,EAAO0E,EAAO9C,IAE5C,CAQA,aAPkB0iB,EAAAA,EAAAA,GAAe,IAAIhD,EAAAA,GAAa,CAChD5f,WACAgD,SACAggB,MAAKnC,EAAAA,EAAAA,QACJgC,cAEG3D,KAAKuB,cAAcqC,oBAAoB,CAAChR,KAAM,UAASvE,EAAIzN,YAC1D,CACT,CACAjB,uBACE,IAAIP,GAASC,EAAAA,EAAAA,MACTiC,GAAO4E,EAAAA,EAAAA,IAAW9G,EAAO4gB,KAAKuB,cAAc2C,aAChD,MAAMxkB,EAAU4B,GAAM9B,UAAUE,QAChC,GAAGA,EAAQ,CAET,MAAMgN,EAA2BC,EAAAA,GAAAA,KAAyBC,IACjD,IACFA,EACHzN,MAAOmC,GAAMN,OAGjB5B,GAAS4G,EAAAA,EAAAA,IAAW5G,EAAOkC,GAAMN,GAAI,IAChCM,EACH9B,SAAS,IACJ8B,GAAM9B,SACTE,QAAQ,IACH4B,GAAM9B,SAAUE,QACnBgN,gBAINjM,EAAAA,EAAAA,IAAUrB,GACVA,GAASC,EAAAA,EAAAA,MACT,MAAMwB,GAAO+F,EAAAA,EAAAA,IAAWxH,EAAO4gB,KAAKuB,cAAc2C,aAOlD,OANA5iB,GAAO4E,EAAAA,EAAAA,IAAW9G,EAAOyB,GAAMG,UAEzBgf,KAAKuB,cAAcQ,wBACnB/B,KAAKuB,cAAcqC,oBAAoB,CAAChR,KAAK,UAG5C,CACT,CACF,CACAjT,gBACE,MAAMmE,EAASkc,KAAKuB,cAAc2C,kBAC5BlE,KAAKuB,cAAcQ,wBACnBlV,EAAAA,EAAAA,QAA0B/I,EAClC,CACAoc,gCAAgC9gB,EAAmB0E,EAAcwF,EAAiB6a,GAElF,CACAjE,kCAAkC9gB,EAAmB0E,EAAcwF,EAAiBpC,GAElF,SADM2F,EAAAA,EAAAA,qBAAuCzN,EAAO0E,EAAOwF,EAAUpC,GAClEA,EAAKgK,WAAW,2BAA2B,CAC5C,MAAOpN,EAAOwF,GAAapC,EAAK+I,QAAQ,0BAA0B,IAAIwB,MAAM,KAAKjQ,IAAIiR,QACrFmO,EAAeO,KAAKrd,EAAOwF,EAC7B,CACF,CACA4W,8BAEA,CACAvgB,mBACQqgB,KAAKuB,cAAcQ,wBACnB/B,KAAKuB,cAAc6C,eAAe,CACtCxR,KAAK,CACHA,KAAK,SAEP,CACAyR,cAAc,CACZ,CACE,CACEnd,KAAK,IACL0L,KAAK,kBACLhK,KAAK,aAGT,CACE,CACEgK,KAAK,iBACLhK,KAAK,WAEP,CACEgK,KAAK,qBACLhK,KAAK,eAEP,CACEgK,KAAK,aACLhK,KAAK,QAGT,CACE,CACEgK,KAAK,cACLhK,KAAK,QAEP,CACEgK,KAAK,sBACLhK,KAAK,iBAGT,CACE,CACEgK,KAAK,iBACLhK,KAAK,UACL0b,iBAAiB,IAGrB,CACE,CACE1R,KAAK,aACLhK,KAAK,MACLsH,IAAI,sBAGR,CACE,CACE0C,KAAK,uBACLhK,KAAK,gBACLsH,IAAI,qBAEN,CACE0C,KAAK,iBACLhK,KAAK,UACLsH,IAAI,sBAGR,CACE,CACE0C,KAAK,qBACLhK,KAAK,cACL2b,QAAO,GAET,CACE3R,KAAK,yBACLhK,KAAK,kBACL4b,MAAO,GACPC,YAAY,GAEd,CACE7R,KAAK,qBACLhK,KAAK,cACLyC,OAAQ/K,EAAAA,KAGZ,CACE,CACEsS,KAAK,4BACLhK,KAAK,wBAIX6Y,SAASzB,KAAKuB,cAAc2C,oBAExBlE,KAAKuB,cAAcmD,kBAC3B,E,oNC1Ta,MAAMC,UAAgB/E,EAAAA,GAEnCC,YAAYC,G,UACVC,MAAM,mBAAoBD,G,EAAK,K,OAAA,G,+SAAA,U,wFAC/BE,KAAKC,aAAaP,EAAAA,GAAAA,aAClBM,KAAKF,IAAMA,CACb,CACAI,gBAAgBC,GACd,OAAO,IAAIwE,GAAUvE,OAAOD,EAAIE,OAClC,ECTa,MAAMuE,UAAgBhF,EAAAA,GAEnCC,YAAYC,G,UACVC,MAAM,mBAAoBD,G,EAAK,K,OAAA,G,+SAAA,U,wFAC/BE,KAAKC,aAAaP,EAAAA,GAAAA,aAClBM,KAAKF,IAAMA,CACb,CACAI,gBAAgBC,GACd,OAAO,IAAIyE,GAAUxE,OAAOD,EAAIE,OAClC,E,eCMF,IAAIwE,EAEW,MAAMhY,EACnBqT,qBAAqBpc,GACnB,MAAMse,EAAUC,EAAAA,EAAAA,oBACVyC,EAAe1C,GAASS,aACxBvZ,QAAkBkY,EAAAA,EAAAA,WACxBA,EAAAA,EAAAA,WAAyB1d,EAAOwF,EAAU,CACxCxF,SACA9C,GAAGsI,EACHmY,SAAS3d,EACT4d,YAAW,EACX9X,MAAK+X,EAAAA,EAAAA,MACLC,QAAQ,CACNhP,KAAK,CACHA,KAAK,SAGTyR,cAAcxX,EAAkBkY,iBAAiBjhB,IAASghB,IAE9D,CACA5E,wBAAwBpc,EAAcghB,GACpC,OAAOA,EAAe,CACpB,CACE,CACE5d,KAAM,GAAEpD,yBACR8O,KAAK,OACLhK,KAAK,YAEP,CACE1B,KAAM,GAAEpD,2BACR8O,KAAK,OACLhK,KAAK,aAGT,CACE,CACE1B,KAAM,GAAEpD,2BACR8O,KAAK,OACLhK,KAAK,YAEP,CACE1B,KAAM,GAAEpD,6BACR8O,KAAK,OACLhK,KAAK,aAIT,CACE,CACE1B,KAAM,GAAEpD,uBACR8O,KAAK,YACLhK,KAAK,aAGT,CACE,CACE1B,KAAM,GAAEpD,yBACR8O,KAAK,eACLhK,KAAK,YAEP,CACE1B,KAAM,GAAEpD,wBACR8O,KAAK,cACLhK,KAAK,aAGT,CACE,CACE1B,KAAM,GAAEpD,wBACR8O,KAAK,OACLhK,KAAK,YAEP,CACE1B,KAAM,GAAEpD,mBACR8O,KAAK,KACLhK,KAAK,cAGT,CACA,CACE,CACE1B,KAAM,GAAEpD,uBACR8O,KAAK,OACLhK,KAAK,YAEP,CACE1B,KAAM,GAAEpD,mBACR8O,KAAK,KACLhK,KAAK,aAIb,CACAsX,kCAAkC9gB,EAAmB0E,EAAcwF,EAAiBpC,GAClF,OAAQA,GACN,IAAM,GAAEpD,uBACN,MAAMse,EAAUC,EAAAA,EAAAA,oBACVC,QAAgBF,GAASqB,cACzBuB,EAAWzC,EAAAA,EAAAA,YAAqBD,SAChChB,EAAAA,EAAAA,SAAoBxd,EAAOse,GAASS,oBACpCvB,EAAAA,EAAAA,SAAoBxd,EAAOwe,SAC3BhB,EAAAA,EAAAA,SAAoBxd,EAAOkhB,EAASnB,YAC1C,MAEF,IAAM,GAAE/f,wBACN,MAAMmhB,EAAMC,OAAO,eACnB,GAAGD,EAAI,CACL,MAAMD,EAAW,IAAIzC,EAAAA,EAAS0C,GAC9B,GAAGD,EAASG,gBAAgB,OACpB7D,EAAAA,EAAAA,SAAoBxd,EAAOkhB,EAASxC,aAC1C,MAAM,SAACO,SAAkBC,EAAAA,EAAAA,KACzB,GAAGD,EAAS,CACV,MAAMT,EAAU0C,EAASxC,YACzB,IAAIE,EAAYL,EAAAA,EAAAA,sBAA8BC,GAC1CI,IACFA,EAAYL,EAAAA,EAAAA,gBAEd,MAAMD,EAAUC,EAAAA,EAAAA,YAAoBK,GACpCL,EAAAA,EAAAA,oBAA4BK,SACtBN,GAASK,WAAWH,GAAQ,IAClC,MAAMW,GAAMC,EAAAA,EAAAA,GAAWH,GACjBI,GAAO,IAAIC,MACX,QAACC,EAAO,KAAEC,SAAclB,EAASmB,YAAYJ,EAAG5R,WAAY0R,GAC5DL,EAAUP,EAAAA,EAAAA,cAAsB,CAACgB,UAAQC,OAAKH,OACpDf,EAASoB,YAAYZ,SACfc,EAAAA,EAAAA,GAAe,IAAI/D,EAAAA,GAAc,CACrC+C,YAAUJ,QAAQ0C,EAASxC,YAAYI,YACtCe,cACGrC,EAAAA,EAAAA,SAAoBxd,EAAO8e,GACjC5V,OAAOoY,SAASC,QAClB,CACF,YACQ/D,EAAAA,EAAAA,SAAoBxd,EAAO,eAErC,CACA,MACF,IAAM,GAAEA,+BACA+I,EAAkByY,aAAY,GACpC,MACF,IAAM,GAAExhB,iCACA+I,EAAkByY,aAAY,GACpC,MACF,IAAM,GAAExhB,yBACNme,EAAAA,EAAAA,MAAaC,aAAa,CACxBqD,kBAAiB,IAEnB,MACF,IAAM,GAAEzhB,2BACR,IAAM,GAAEA,6BACN+gB,EAAwB3d,GACxB+a,EAAAA,EAAAA,MAAaC,aAAa,CACxBqD,kBAAiB,IAEnB,MACF,IAAM,GAAEzhB,0BACNme,EAAAA,EAAAA,MAAaC,aAAa,CACxBC,mBAAkB,IAEpB,MACF,IAAM,GAAEre,mBACN0d,EAAAA,EAAAA,cAA4B1d,EAAOwF,EAAU,CAC3C+a,cAAc,KAEhB,MACF,IAAM,GAAEvgB,8BACA+I,EAAkB2Y,YAAYpmB,EAAO0E,EAAOwF,GAClD,MACF,IAAM,GAAExF,uBACN,MAAM,SAACif,SAAkBC,EAAAA,EAAAA,KACrBD,GACFvB,EAAAA,EAAAA,cAA4B1d,EAAOwF,EAAU,CAC3C+a,cAAc,WAGZxX,EAAkB4Y,WAAWrmB,EAAO0E,EAAOwF,EAAUyZ,GAGjE,CACA7C,wBAAwB5e,GACtB,MAAO,CACL,GAAMA,EAAKN,GACX,MAAUM,EAAKwK,UACf,KAAQ,kBACR,SAAW,EACX,OAAS,EACT,gBAAkB,EAClB,mBAAqB,EACrB,YAAc,EACd,cAAgB,EAChB,eAAiB,EACjB3K,YAAY,CACVH,GAAG,EACH8C,OAAOxC,EAAKN,GACZ0gB,YAAW,EACX9X,KAAKoF,KAAK0W,MAAO,IAAItC,KAAM,KAC3BxB,QAAQ,CACN3K,OAAO,CACLrO,KAAK,aACLgK,KAAK,MAIX,SAAW,EACX,UAAY,EACZ,SAAY,CACV,gBAAkB,EAClB,eAAiB,EACjB,eAAiB,EACjB,iBAAmB,GAErB,WAAc,GAElB,CACAsN,yBAAyByF,GACvB,IAAIvmB,GAASC,EAAAA,EAAAA,MACb,MAAMkB,EAAQnB,EAAOmB,MAAMhB,KACrBgC,EAAUW,OAAO0B,KAAKrD,GAAOsH,QAAO7G,GAAW,MAAPA,IACxC4kB,EAA0BxmB,EAAOwmB,eACvCphB,QAAQ4c,IAAI,QAAQ,CAAC7f,UAAQqkB,mBAC7B,MAAMC,EAA6CF,EAAU,CAC3D7B,MAAKnC,EAAAA,EAAAA,MACL/f,YAAYkkB,KAAKC,UAAU3mB,EAAOwC,aAClCL,UACAqkB,uBACCxgB,EAEG6f,QAAYvB,EAAAA,EAAAA,GAAe,IAAIiB,EAAQ,CAC3CkB,kBACClC,QACGqC,EAAUpB,EAAQqB,SAAShB,EAAK9E,KACtC,IAAI7gB,EAA4B,GAChC,GAAGqmB,EAAS,CACV,IAAK,IAAIO,EAAQ,EAAGA,EAAQ3kB,EAAQX,OAAQslB,IAAS,CACnD,MAAM7a,EAAS9J,EAAQ2kB,GACvB5mB,EAAMuD,KAAK,CACTihB,MAAKnC,EAAAA,EAAAA,MACLtW,SACA/J,MAAK4E,EAAAA,EAAAA,IAAW9G,EAAOiM,IAE3B,OACMqY,EAAAA,EAAAA,GAAe,IAAIK,EAAAA,GAAc,CACrCzkB,QACAwkB,MAAKnC,EAAAA,EAAAA,QACJgC,OACL,CAEA,GAAGqC,EAAQH,cAAc,CACvB,MAAM,YAACjkB,KAAeqjB,GAAOe,EAAQH,cAOrC,GANAZ,EAAIW,gBAAgBvkB,SAAQL,IACtB4kB,EAAeniB,SAASzC,IAC1B4kB,EAAe/iB,KAAK7B,EACtB,IAEFwD,QAAQ4c,IAAI,SAAS6D,GAClBA,EAAI1jB,QAAQ,CACb,MAAM4kB,QAA2BzC,EAAAA,EAAAA,GAAe,IAAI/C,EAAAA,GAAgB,CAClEpV,QAAQ0Z,EAAI1jB,UACXoiB,QACH,GAAGwC,EAAmB,CACpB,MAAMC,EAAkBC,EAAAA,GAAAA,SAAyBF,GAAoBhG,KAGrE,GAFA3b,QAAQ4c,IAAI,kBAAkBgF,GAC9BhnB,GAASC,EAAAA,EAAAA,MACN+mB,EAAgB9mB,MAAM,CACvB,MAAMgnB,EAAc,CAAC,EACfC,EAAc,CAAC,EACrB,IAAK,IAAIL,EAAQ,EAAGA,EAAQE,EAAgB9mB,MAAMsB,OAAQslB,IAAS,CACjE,MAAM,KAAC5kB,GAAQ8kB,EAAgB9mB,MAAM4mB,GACjCN,EAAeniB,SAASnC,EAAMN,MAC7BO,EAAQkC,SAASnC,EAAMN,IAExB5B,GAAS4G,EAAAA,EAAAA,IAAW5G,EAAOkC,EAAMN,GAAIM,IAGrCglB,EAAYhlB,EAAMN,IAAMM,EAExBilB,EAAYjlB,EAAMN,IAAM6L,EAAkB2Z,iBAAiBllB,IAE1DY,OAAO0B,KAAK0iB,GAAa1lB,OAAS,IACnCxB,GAASgE,EAAAA,EAAAA,IAAShE,EAAOknB,GACzBlnB,GAASiO,EAAAA,EAAAA,IAASjO,EAAOmnB,IAG/B,CACF,EACA9lB,EAAAA,EAAAA,IAAU,IACLrB,EACHwmB,eAAeA,GAAkB,GACjChkB,YAAYkkB,KAAKW,MAAM7kB,IAE3B,CACF,MACEqgB,EAAAA,EAAAA,MAAaC,aAAa,CACxB0D,eAAeA,GAAkB,GACjChkB,YAAYkkB,KAAKW,MAAM7kB,IAG7B,EACAqgB,EAAAA,EAAAA,MAAa7b,iBAAiB,CAAChG,QAAQ,QACzC,CACA8f,wBAAwB9gB,EAAmB0E,EAAcwF,EAAiByZ,GACxE,MAAMX,EAAUC,EAAAA,EAAAA,oBACVY,GAAMC,EAAAA,EAAAA,GAAWH,GACjBI,GAAO,IAAIC,MACX,QAACC,EAAO,KAAEC,SAAclB,EAASmB,YAAYJ,EAAG5R,WAAY0R,GAC5DL,EAAUP,EAAAA,EAAAA,cAAsB,CAACgB,UAAQC,OAAKH,OACpDf,EAASoB,YAAYZ,GACrB,MAAMN,QAAgBF,EAASqB,aACzBf,EAAYN,EAASO,qBACrBe,EAAAA,EAAAA,GAAe,IAAI/D,EAAAA,GAAc,CACrC+C,YAAUJ,UAAQM,YACjBe,QACHnC,EAAAA,EAAAA,cAA4B1d,EAAOwF,EAAU,CAC3C+a,cAAc,MAEhBpC,EAAAA,EAAAA,MAAa7b,iBAAiB,CAAChG,QAAQ,SACvC0hB,YAAW,IAAI9U,OAAOoY,SAASC,UAAS,IAC1C,CAEAnF,yBAAyB9gB,EAAmB0E,EAAcwF,GACxD,MAAM8Y,EAAUC,EAAAA,EAAAA,oBAChBD,GAASsE,aACTlF,EAAAA,EAAAA,cAA4B1d,EAAOwF,EAAU,CAC3C+a,cAAc,WAEVX,EAAAA,EAAAA,GAAe,IAAI/D,EAAAA,GAAc,CACrC+C,UAAUN,EAASO,eACnBL,cAAcF,EAASqB,aACvBb,aAAQxd,IACPue,SACH1B,EAAAA,EAAAA,MAAa7b,iBAAiB,CAAChG,QAAQ,SACvC0hB,YAAW,IAAI9U,OAAOoY,SAASC,UAAS,IAC1C,CAEAnF,6BAA6Bpc,GAC3B,MAAMoD,EAAO2d,EACPc,GAAYze,GAAMyf,SAAS,oBACjC9B,OAAwBzf,QAClBkc,EAAAA,EAAAA,SAAoBhhB,EAAAA,GAAe4G,GACzC,IAAI9H,GAASC,EAAAA,EAAAA,MACb,GAAGsmB,EAAS,CACV,MAAMiB,GAAcC,EAAAA,EAAAA,IAAmBznB,EAAO0E,GACxChD,EAAkC,GACxC,GAAG8lB,EACD,IAAK,IAAIjmB,EAAI,EAAGA,EAAIuB,OAAO0B,KAAKgjB,GAAahmB,OAAQD,IAAK,CACxD,MAAMmmB,EAAQpb,SAASxJ,OAAO0B,KAAKgjB,GAAajmB,IAChDG,EAAS+B,KAAK,CACZihB,MAAKnC,EAAAA,EAAAA,MACLvhB,QAAQwmB,EAAYE,GACpBxd,UAAUwd,GAEd,CAEChmB,EAASF,OAAS,UACD8iB,EAAAA,EAAAA,GAAe,IAAIhD,EAAAA,GAAa,CAChD5f,WACAgD,SACAggB,MAAKnC,EAAAA,EAAAA,QACJgC,UAED1B,EAAAA,EAAAA,MAAa7b,iBAAiB,CAAChG,QAAQ,SAG7C,KAAK,CACH,MAAM6kB,QAAYvB,EAAAA,EAAAA,GAAe,IAAIpD,EAAAA,GAAe,CAClDxc,WACC6f,QACH,GAAGsB,EAAI,CACL,MAAM,IAAC8B,EAAG,SAACjmB,GAAYyf,EAAAA,GAAAA,SAAwB0E,GAAK9E,KAEpD,GADA3b,QAAQ4c,IAAI,WAAWtgB,GACpBA,EACD,IAAK,IAAIH,EAAI,EAAGA,EAAIG,GAAUF,OAAQD,IAAK,CACzC,MAAM,QAACP,EAAO,UAACkJ,GAAaxI,EAASH,IACpBsjB,EAAAA,EAAAA,IAAkB7kB,EAAO0E,EAAOwF,GAM/CkY,EAAAA,EAAAA,cAA4B1d,EAAOwF,EAAUlJ,GAH7CohB,EAAAA,EAAAA,WAAyB1d,EAAOwF,EAAUlJ,EAK9C,CAGJ,MACE6hB,EAAAA,EAAAA,MAAa7b,iBAAiB,CAAChG,QAAQ,QAE3C,CACF,E,2gBC9Wa,MAAMohB,EAInB3B,YAAYzgB,EAAmB2S,GAAoBiV,EAAA,sBAAAA,EAAA,sBAAAA,EAAA,0BACjDhH,KAAK5gB,OAASA,EACd4gB,KAAKjO,OAASA,EACdiO,KAAKiH,WAAa,IAAI3F,EAAAA,EAAWtB,KACnC,CAEAE,iBAAiBgH,GACf,MAAM,UAACC,IAAalF,EAAAA,EAAAA,MACpBkF,EAAUD,EACZ,CACAE,mBACE,OAAOpH,KAAKjO,OAAOsV,QAAQrmB,EAC7B,CACAsmB,aACE,OAAOtH,KAAKjO,OAAOa,IACrB,CAEAsR,YACE,OAAOlE,KAAKjO,OAAOlR,KAAKG,EAC1B,CACAumB,aACE,OAAOvY,KAAK0W,MAAO,IAAItC,KAAQ,IACjC,CAEAlD,sBAAsB9b,GAEpB,MAAM,IAAC+b,SAAauD,EAAAA,EAAAA,GAAe,IAAIlD,EAAAA,GAAY,CAACpc,UAAUA,IAAUuf,SAClE,UAACra,GAAamX,EAAAA,GAAAA,SAAqBN,GACzC,OAAO7W,CACT,CAEAke,2BAA2BC,EAAernB,GACxCohB,EAAc2F,UAAU,CACtB,QAAS,6BACTM,UACA3jB,OAAQkc,KAAKjO,OAAOlR,KAAKG,GACzBZ,QAASA,GAEb,CACAsnB,kBAAkB1mB,GAAU,KAAC4R,GAAkBxS,GAC7C4f,KAAK2H,cAAc3mB,EAAG,IACjBZ,EACHwhB,QAAQ,IACHxhB,EAAQwhB,QACXhP,KAAM,IACDxS,EAAQwhB,QAAQhP,KACnBA,UAIR,CACA+U,cAAc3mB,EAAUZ,GACtB,OAAOohB,EAAcmG,cAAc3H,KAAKkE,YAAYljB,EAAGZ,EACzD,CACA8f,qBAAqBpc,EAAcwF,EAAiBlJ,GAOlD,OANAohB,EAAc2F,UAAU,CACpB,QAAS,gBACTnmB,GAAIsI,EACJxF,SACA1D,YAEGA,CACT,CACA8f,kBAAkBpc,EAAcwF,EAAiBlJ,GAQ/C,OAPAohB,EAAc2F,UAAU,CACtB,QAAS,aACTrjB,SACA9C,GAAGsI,EACHlJ,UACAwnB,kBAAiB,IAEZxnB,CACT,CACAT,qBAAqBiiB,EAAiCiG,GACpD,MAAM,iBAACC,EAAgB,SAACrG,EAAQ,cAAC4C,GAAiBwD,GAAW,CAAC,EACxD7mB,QAAWwgB,EAAcuG,WAAWD,GACpC1nB,EAAU,CACdY,KACA4gB,UACAyC,gBACAvgB,OAAQkc,KAAKkE,YACbta,KAAMoW,KAAKuH,aACX9F,SAASzB,KAAKoH,mBACd1F,YAAYD,GAAYzB,KAAKoH,sBAAwBpH,KAAKkE,YAC1D8D,kBAAc5iB,GAEhB,OAAOoc,EAAcyG,WAAWjI,KAAKkE,YAAYljB,EAAGZ,EACtD,CACAT,0BAAyB,KAACiT,EAAI,QAACiV,IAC7B,MAAM5C,ECrIH,SAAwBrS,GAC7B,MAAMsV,EAAM,2BACTtV,EAAKuV,QAAQ,QAAU,GAAKvV,EAAKnB,MAAM,OAAO7Q,OAAS,GAAM,IAC9DgS,GAAa,OAEf,IACIhC,EADAvQ,EAASuS,EAETwV,EAAY,GACZznB,EAAI,EACJ0nB,EAAI,EACR,KAAOzX,EAAQsX,EAAII,KAAK1V,IACtBwV,EAAUvlB,KAAK,CACb+F,KAAK2f,EAAAA,GAAAA,IACLC,SAAU5X,EAAM,GAChBsF,OAAQtF,EAAMsV,MAAQ,EAAIvlB,EAAI0nB,EAC9BznB,OAAQgQ,EAAM,GAAGhQ,SAEnBynB,GAAKzX,EAAM,GAAGhQ,OAAO,EACrBP,EAASA,EAAO4P,QAAQW,EAAM,GAAKA,EAAM,MACvCjQ,EAEJ,MAAO,CACLiS,KAAKvS,EAAOsmB,SAAS,OAAStmB,EAAO6S,UAAU,EAAE7S,EAAO8nB,QAAQ,QAAS9nB,EACzEooB,SAASL,EAEb,CD4GgBM,CAAe9V,GAE3B,aAAaoN,KAAKoE,eAAe,CAACxR,KAAKqS,GAAO4C,EAChD,CAEAloB,gBAAgBiT,GACd,aAAaoN,KAAK4D,oBAAoB,CAAChR,QACzC,CAEAjT,gBAAgBiT,GACd,aAAaoN,KAAK4D,oBAAoB,CAAChR,KAAK,QAAQA,EAAK,OAC3D,CAEAjT,2BAA0B,KAACiT,EAAI,QAACiV,IAE9B,OADA7H,KAAK0E,iBAAiB,WACT1E,KAAK2I,mBAAmB,CAAC/V,OAAKiV,QAAQ,IAC9CA,EACDpG,SAASzB,KAAKkE,cAGpB,CACAvkB,wBAEE,OADAqgB,KAAK0E,iBAAiB,WACT1E,KAAK2I,mBAAmB,CACnC/V,KAAKoN,KAAKsH,cAEd,CACApH,4BAA4Bpc,GAC1B,MAAO,CACL9C,GAAI,EACJ8C,SACA4d,YAAY,EACZ9X,MAAM+X,EAAAA,EAAAA,MACNC,QAAS,CACP3K,OAAQ,CACNrE,KAAM,UACNhK,KAAM,eACNggB,kBAAkB,KAI1B,CACAjpB,mBAGE,OADoBqgB,KAAKsH,cAEvB,IAAK,kBAQL,IAAK,SACH,aAAatH,KAAKiH,WAAW4B,iBAP/B,IAAK,gBACH,aAAavH,EAAAA,EAAAA,aAAwBtB,KAAKkE,aAC5C,IAAK,QACH,aAAalE,KAAKiH,WAAW6B,OAC/B,IAAK,WACH,aAAa9I,KAAKiH,WAAW8B,UAKnC,CACArE,iBAAiBsE,EAAe,KAEhC,CACArpB,gBACE,IAAIslB,EAIJ,OAHGjF,KAAKsH,cAAcpW,WAAW,OAC/B+T,EAAMjF,KAAKiJ,cAENhE,CACT,E,8EEtMKtlB,eAAe+jB,EAAevD,GAEnC,MAAM+I,QAAYrkB,EAAAA,EAAAA,IAAQ,mBAAmBskB,EAAOC,KAAKjJ,EAAIkJ,cAC7D,OAAGH,EACM,CAAC/I,IAAI,IAAImJ,EAAAA,GAAIH,EAAOC,KAAKF,UAEhC,CAEJ,C,iBCuKO,SAASK,EAAiB3W,EAAasD,EAAetV,EAAcqP,GAGzE,OAFe2C,EAAKM,UAAU,EAAGgD,GAEjBjG,EADD2C,EAAKM,UAAUgD,EAAStV,EAGzC,C,6CAUO,MAAM4oB,EAAgBC,GAChB,6BACDC,KAAKD,GAGV,SAASE,EAAkBC,GAChC,MAAMC,EAAcD,EAAO3Z,QAAQ,KAAM,KACnCC,EAAM,IAAIc,IAAI6Y,GACdrF,EAAQsF,MAAMV,KAAKlZ,EAAI+B,aAAagG,WAAWvC,QACnD,CAAC4B,GAAM4J,EAAK6I,MAAW,IAClBzS,EACH,CAAC4J,GAAM6I,KAET,CAAC,GAGH,MAAO,CAAE7Z,MAAKsU,QAChB,CAsBO,SAAS7C,IACd,OAAO3S,KAAK0W,MAAO,IAAItC,KAAM,IAC/B,C","sources":["webpack://wai/./src/global/actions/api/chats.ts","webpack://wai/./src/global/actions/ui/calls.ts","webpack://wai/./src/global/reducers/calls.ts","webpack://wai/./src/lib/ptp/protobuf/ActionCommands.ts","webpack://wai/./src/lib/ptp/protobuf/PTPAuth/AuthNativeReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/DownloadMsgReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/DownloadMsgRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/GenMsgIdReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/GenMsgIdRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/UploadMsgReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPUser/DownloadUserReq.ts","webpack://wai/./src/lib/ptp/functions/requests.ts","webpack://wai/./src/worker/msg/MsgCommand.ts","webpack://wai/./src/lib/ptp/protobuf/PTPSync/SyncReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPSync/SyncRes.ts","webpack://wai/./src/worker/msg/MsgCommandSetting.ts","webpack://wai/./src/worker/msg/MsgDispatcher.ts","webpack://wai/./src/worker/share/utils/stringParse.ts","webpack://wai/./src/worker/msg/utils.ts","webpack://wai/./src/worker/share/utils/utils.ts"],"sourcesContent":["import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getGlobal, setGlobal,} from '../../index';\n\nimport type {ApiChat, ApiChatFolder, ApiChatMember, ApiError, ApiUser, ApiUserStatus,} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport {ChatCreationProgress, ManagementProgress, NewChatMembersProgress} from '../../../types';\nimport type {ActionReturnType, GlobalState, TabArgs,} from '../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  DEBUG,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport {callApi} from '../../../api/gramjs';\nimport {\n  addChatMembers,\n  addChats,\n  addMessages,\n  addUsers,\n  addUserStatuses,\n  deleteTopic,\n  leaveChat,\n  replaceChatListIds,\n  replaceChats,\n  replaceThreadParam,\n  replaceUsers,\n  replaceUserStatuses,\n  updateChat,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatListType,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectLastServiceNotification,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserByPhoneNumber,\n  selectVisibleUsers,\n} from '../../selectors';\nimport {buildCollectionByKey, omit} from '../../../util/iteratees';\nimport {debounce, pause, throttle} from '../../../util/schedulers';\nimport {\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSummaryOnly,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport {formatShareText, parseChooseParameter, processDeepLink} from '../../../util/deeplink';\nimport {updateGroupCall} from '../../reducers/calls';\nimport {selectGroupCall} from '../../selectors/calls';\nimport {getOrderedIds} from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport {selectCurrentLimit} from '../../selectors/limits';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport {\n  ChatModelConfig,\n  DEFAULT_BOT_COMMANDS,\n  DEFAULT_CREATE_USER_BIO,\n  LoadAllChats,\n  UserIdFirstBot\n} from \"../../../worker/setting\";\nimport {Api} from \"../../../lib/gramjs\";\nimport MsgCommandSetting from \"../../../worker/msg/MsgCommandSetting\";\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, threadId = MAIN_THREAD_ID,\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    //todo\n    // actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    actions.requestThreadInfoUpdate({ chatId: id, threadId });\n  }\n});\n\naddActionHandler('openComments', async (global, actions, payload): Promise<void> => {\n  const {\n    id, threadId, originChannelId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      const chat = selectThreadOriginChat(global, id, threadId);\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n      const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n      if (!result) {\n        actions.openPreviousChat({ tabId });\n        return;\n      }\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      actions.openChat({ id, threadId: result.topMessageId, tabId });\n    } else {\n      actions.openChat({ id, threadId: topMessageId, tabId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, messageId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  actions.focusMessage({\n    chatId, threadId, messageId, tabId,\n  });\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType as 'active' | 'archived';\n  if(listType === \"archived\"){\n    return;\n  }\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n      return;\n    }\n\n    global = getGlobal();\n\n    if (\n      !(\n        global.msgClientState === 'connectionStateLogged' ||\n        global.msgClientState === 'connectionStateWaitingLogin'||\n        global.msgClientState === 'connectionStateConnected'\n      ) ) {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n    await loadChats(global,\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true,\n    );\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, force, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(global, actions, chat, tabId);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(global, actions, chat, tabId));\n  }\n});\n\naddActionHandler('loadTopChats', (global): ActionReturnType => {\n  runThrottledForLoadTopChats(() => loadChats(global, 'active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n  try{\n    const userIds = Object.keys(global.users.byId)\n    let userId = UserIdFirstBot + 1\n    if(userIds.length > 0){\n      userIds.sort((a,b)=>parseInt(b) - parseInt(a))\n      userId = userIds[0] + 1\n    }\n    const user = {\n      \"canBeInvitedToGroup\": false,\n      \"hasVideoAvatar\": false,\n      \"type\": \"userTypeBot\",\n      id:userId,\n      \"phoneNumber\": \"\",\n      isMin:false,\n      \"noStatus\": true,\n      isSelf:false,\n      avatarHash:\"\",\n      accessHash:\"\",\n      isPremium: false,\n      firstName: title,\n      photos:[],\n      usernames: [\n        {\n          \"username\": \"Bot_\"+userId,\n          \"isActive\": true,\n          \"isEditable\": true\n        }\n      ],\n      fullInfo: {\n        \"isBlocked\": false,\n        \"noVoiceMessages\": false,\n        bio: about || DEFAULT_CREATE_USER_BIO,\n        botInfo: {\n          config:{\n            enableAi:true,\n            chatGptConfig:{\n              init_system_content:\"\",\n              api_key:\"\",\n              max_history_length:10,\n              config:ChatModelConfig\n            }\n          },\n          botId: userId,\n          \"description\": about || DEFAULT_CREATE_USER_BIO,\n          \"menuButton\": {\n            \"type\": \"commands\"\n          },\n          commands:DEFAULT_BOT_COMMANDS.map(cmd=>{\n            cmd.botId = userId;\n            return cmd\n          })\n        }\n      }\n    }\n    global = getGlobal()\n    const {chatFolders} = global;\n    // @ts-ignore\n    const users:ApiUser[] = [user]\n// @ts-ignore\n    const chats:ApiChat[] = [MsgCommandSetting.buildDefaultChat(user)]\n\n    let activeChatFolder = window.sessionStorage.getItem(\"activeChatFolder\")\n    let activeChatFolderRow;\n    const chatFolderById:Record<string, ApiChatFolder> = {};\n    if(activeChatFolder){\n      // @ts-ignore\n      Object.values(chatFolders.byId).forEach((row:ApiChatFolder)=>{\n        if(row.id === parseInt(activeChatFolder!)){\n          activeChatFolderRow = row;\n          if(!row.includedChatIds){\n            row.includedChatIds = []\n          }\n          row.includedChatIds.push(userId)\n          chatFolderById[row.id] = row;\n        }\n      })\n    }\n\n\n    const userStatusesById:Record<string,ApiUserStatus> = {\n      [user.id] : {\n        \"type\": \"userStatusEmpty\"\n      }\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n    global = updateChatListIds(global, \"active\", chats.map(chat=>chat.id));\n    global = addUserStatuses(global, userStatusesById);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: ChatCreationProgress.Complete,\n      },\n    }, tabId);\n\n    setGlobal({\n      ...global,\n      chatFolders:{\n        ...global.chatFolders,\n        byId:{\n          ...global.chatFolders.byId,\n          ...chatFolderById\n        }\n\n      }\n    })\n\n    if(activeChatFolderRow){\n      actions.editChatFolder({ id: activeChatFolderRow.id, folderUpdate: activeChatFolderRow });\n    }\n    // @ts-ignore\n    actions.openChat({id: userId,shouldReplaceHistory: true,});\n\n  }catch (e){\n    // debugger\n    console.error(e)\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: ChatCreationProgress.Error,\n        error: '创建失败',\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n})\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n  // @ts-ignore\n  actions.setActiveChatFolder({activeChatFolder:0},getCurrentTabId())\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    openChatByUsername: openChatByUsernameAction,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n  } else if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!commentId) {\n    if (!startAttach && messageId && !startParam && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    await openChatByUsername(global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global, tabId) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && messageId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chatByUsername.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat: chatByUsername, threadId: messageId });\n    if (!result) return;\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    setGlobal(global);\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n    tabId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chat.id, {\n    fullInfo: {\n      ...chat.fullInfo,\n      isPreHistoryHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(newAdminMembersById && { adminMembersById: newAdminMembersById }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, {\n    avatarHash: undefined,\n    fullInfo: {\n      ...chat.fullInfo,\n      profilePhoto: undefined,\n    },\n  });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, {\n      avatarHash: undefined,\n      fullInfo: {\n        ...chat.fullInfo,\n        profilePhoto: undefined,\n      },\n    });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        isPreHistoryHidden: false,\n      },\n    });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n  window.sessionStorage.setItem(\"activeChatFolder\",activeChatFolder.toString())\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft?.formattedText);\n    global = replaceThreadParam(global, chatId, Number(threadId), 'replyingToId', draft?.replyingToId);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const prevIsForum = chat.isForum;\n  global = updateChat(global, chatId, { isForum: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleForum', { chat, isEnabled });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, { isForum: prevIsForum });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = chat.fullInfo?.areParticipantsHidden;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      areParticipantsHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      fullInfo: {\n        ...chat.fullInfo,\n        areParticipantsHidden: prevIsEnabled,\n      },\n    });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openChat({\n      id: chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\nexport function getChatBot(botId:string){\n  const global = getGlobal();\n  if(global.users.byId[botId] && global.users.byId[botId].fullInfo){\n    return {\n      bot:global.users.byId[botId].bot,\n      botInfo:global.users.byId[botId].fullInfo!.botInfo\n    };\n  }else{\n    return undefined;\n  }\n}\n\nexport async function loadChats<T extends GlobalState>(\n  global: T,\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  global = getGlobal();\n  let lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  try {\n\n    let result: { folderIds?: number[],chatFolders?: any[]; users?: any; userStatusesById?: any; chats?: any; chatIds?: any; draftsById?: any; replyingToById?: any; orderedPinnedIds?: string[] | never[] | undefined; totalChatCount?: number; };\n    if(!global.users.byId[UserIdFirstBot]) {\n      result = LoadAllChats;\n      for (let i = 0; i < result.chats.length; i++) {\n        const chat = result.chats[i];\n        if (global.messages.byChatId[chat.id]) {\n          const {threadsById, byId} = global.messages.byChatId[chat.id]\n          if (threadsById[-1] && threadsById[-1].lastViewportIds && threadsById[-1].lastViewportIds!.length > 0) {\n            // @ts-ignore\n            result.chats[i].lastMessage = byId[threadsById[-1].lastViewportIds[threadsById[-1].lastViewportIds.length - 1]]\n          }\n        }\n      }\n    }else {\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          isFullyLoaded: {\n            ...global.chats.isFullyLoaded,\n            [listType]: true,\n          },\n        },\n      };\n      setGlobal(global);\n      return\n    }\n    // result = await callApi('fetchChats', {\n    //   limit: CHAT_LIST_LOAD_SLICE,\n    //   offsetDate,\n    //   archived: listType === 'archived',\n    //   withPinned: shouldReplace,\n    //   lastLocalServiceMessage,\n    // });\n    const userStatusesById = {};\n    result.users.forEach((user: ApiUser)=>{\n\n      // @ts-ignore\n      userStatusesById[user.id] = {\n        \"type\": \"userStatusEmpty\"\n      }\n    })\n    result.userStatusesById = userStatusesById;\n\n    global = getGlobal();\n    result.chatIds = result.chats.map((chat: { id: any; }) => chat.id);\n    const { chatIds } = result;\n    if (chatIds.length > 0 && chatIds[0] === offsetId) {\n      chatIds.shift();\n    }\n    result.totalChatCount = result.chats.length;\n    lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n    const chatFoldersById:any = {};\n    result.chatFolders?.forEach(row=>{\n      chatFoldersById[row.id] = row\n    })\n    const orderedIds = result.chatFolders && result.chatFolders.length > 0 ? result.folderIds: [0];\n\n    global = {\n      ...global,\n      chatFolders:{\n        byId:{\n          ...chatFoldersById\n        },\n        orderedIds\n      }\n    }\n    if (shouldReplace && listType === 'active' && global.msgClientState === 'connectionStateLogged') {\n      // Always include service notifications chat\n      // if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      //   const result2 = await callApi('fetchChat', {\n      //     type: 'user',\n      //     user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      //   });\n      //\n      //   global = getGlobal();\n      //\n      //   const notificationsChat = result2 && selectChat(global, result2.chatId);\n      //   if (notificationsChat) {\n      //     chatIds.unshift(notificationsChat.id);\n      //     result.chats.unshift(notificationsChat);\n      //     if (lastLocalServiceMessage) {\n      //       notificationsChat.lastMessage = lastLocalServiceMessage;\n      //     }\n      //   }\n      // }\n      const tabStates = Object.values(global.byTabId);\n      const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n        const currentChat = selectCurrentChat(global, tabId);\n        return currentChat ? [currentChat] : [];\n      });\n\n      const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n        return selectVisibleUsers(global, tabId) || [];\n      });\n      if (global.currentUserId && global.users.byId[global.currentUserId]) {\n        visibleUsers.push(global.users.byId[global.currentUserId]);\n      }\n\n      global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n      global = replaceUserStatuses(global, result.userStatusesById);\n      global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n      global = updateChatListIds(global, listType, chatIds);\n    } else if (shouldReplace && listType === 'archived'   && global.msgClientState === 'connectionStateLogged') {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    } else {\n      const newChats = buildCollectionByKey(result.chats, 'id');\n      if (chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n        const notificationsChat = newChats[SERVICE_NOTIFICATIONS_USER_ID];\n        if (notificationsChat && lastLocalServiceMessage) {\n          newChats[SERVICE_NOTIFICATIONS_USER_ID] = {\n            ...notificationsChat,\n            lastMessage: lastLocalServiceMessage,\n          };\n        }\n      }\n\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, newChats);\n      global = updateChatListIds(global, listType, chatIds);\n\n    }\n\n    global = updateChatListSecondaryInfo(global, listType, result);\n\n    const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n    idsToUpdateDraft.forEach((chatId) => {\n      const draft = result.draftsById[chatId];\n      const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n      if (!draft && !thread) return;\n\n      if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n        global = replaceThreadParam(\n          global, chatId, MAIN_THREAD_ID, 'draft', draft,\n        );\n      }\n    });\n\n    const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n    idsToUpdateReplyingToId.forEach((chatId) => {\n      const replyingToById = result.replyingToById[chatId];\n      const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n      if (!replyingToById && !thread) return;\n\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToById,\n      );\n    });\n\n    // if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    //   global = {\n    //     ...global,\n    //     chats: {\n    //       ...global.chats,\n    //       isFullyLoaded: {\n    //         ...global.chats.isFullyLoaded,\n    //         [listType]: true,\n    //       },\n    //     },\n    //   };\n    // }\n\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n\n    setGlobal(global);\n\n  }catch (e){\n    console.error(e)\n  }\n\n  return;\n  // const result = await callApi('fetchChats', {\n  //   limit: CHAT_LIST_LOAD_SLICE,\n  //   offsetDate,\n  //   archived: listType === 'archived',\n  //   withPinned: shouldReplace,\n  //   lastLocalServiceMessage,\n  // });\n  //\n\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  setGlobal(global);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n    setGlobal(global);\n  }\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id, threadId, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectTabState, selectUser,\n} from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type {\n  CallSound, ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { getMainUsername } from '../../helpers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestAnimationFrame(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let { inviteLink } = chat.fullInfo!;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload!;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', async (global, actions, payload): Promise<void> => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n","export enum ActionCommands {\n  CID_AuthLoginReq = 1001,\n  CID_AuthLoginRes = 1002,\n  CID_AuthNativeReq = 1003,\n  CID_AuthNativeRes = 1004,\n  CID_AuthPreLoginReq = 1005,\n  CID_AuthPreLoginRes = 1006,\n  CID_AuthStep1Req = 1007,\n  CID_AuthStep1Res = 1008,\n  CID_AuthStep2Req = 1009,\n  CID_AuthStep2Res = 1010,\n  CID_UpdateProfileReq = 1011,\n  CID_UpdateProfileRes = 1012,\n  CID_UpdateUsernameReq = 1013,\n  CID_UpdateUsernameRes = 1014,\n  CID_UploadProfilePhotoReq = 1015,\n  CID_UploadProfilePhotoRes = 1016,\n  CID_LoadChatsReq = 2001,\n  CID_LoadChatsRes = 2002,\n  CID_DownloadReq = 3001,\n  CID_DownloadRes = 3002,\n  CID_UploadReq = 3003,\n  CID_UploadRes = 3004,\n  CID_AnswerCallbackButtonReq = 4001,\n  CID_AnswerCallbackButtonRes = 4002,\n  CID_DownloadMsgReq = 4003,\n  CID_DownloadMsgRes = 4004,\n  CID_GenMsgIdReq = 4005,\n  CID_GenMsgIdRes = 4006,\n  CID_MsgDeleteReq = 4007,\n  CID_MsgDeleteRes = 4008,\n  CID_MsgListReq = 4009,\n  CID_MsgListRes = 4010,\n  CID_MsgUpdateReq = 4011,\n  CID_MsgUpdateRes = 4012,\n  CID_RemoveMessagesReq = 4013,\n  CID_RemoveMessagesRes = 4014,\n  CID_SendReq = 4015,\n  CID_SendRes = 4016,\n  CID_UploadMsgReq = 4017,\n  CID_UploadMsgRes = 4018,\n  CID_OtherNotify = 5001,\n  CID_SyncReq = 6001,\n  CID_SyncRes = 6002,\n  CID_DownloadUserReq = 7001,\n  CID_DownloadUserRes = 7002,\n  CID_GenUserIdReq = 7003,\n  CID_GenUserIdRes = 7004,\n  CID_UploadUserReq = 7005,\n  CID_UploadUserRes = 7006,\n}\n\nexport const ActionCommandsName = {\n  1001: \"CID_AuthLoginReq\",\n  1002: \"CID_AuthLoginRes\",\n  1003: \"CID_AuthNativeReq\",\n  1004: \"CID_AuthNativeRes\",\n  1005: \"CID_AuthPreLoginReq\",\n  1006: \"CID_AuthPreLoginRes\",\n  1007: \"CID_AuthStep1Req\",\n  1008: \"CID_AuthStep1Res\",\n  1009: \"CID_AuthStep2Req\",\n  1010: \"CID_AuthStep2Res\",\n  1011: \"CID_UpdateProfileReq\",\n  1012: \"CID_UpdateProfileRes\",\n  1013: \"CID_UpdateUsernameReq\",\n  1014: \"CID_UpdateUsernameRes\",\n  1015: \"CID_UploadProfilePhotoReq\",\n  1016: \"CID_UploadProfilePhotoRes\",\n  2001: \"CID_LoadChatsReq\",\n  2002: \"CID_LoadChatsRes\",\n  3001: \"CID_DownloadReq\",\n  3002: \"CID_DownloadRes\",\n  3003: \"CID_UploadReq\",\n  3004: \"CID_UploadRes\",\n  4001: \"CID_AnswerCallbackButtonReq\",\n  4002: \"CID_AnswerCallbackButtonRes\",\n  4003: \"CID_DownloadMsgReq\",\n  4004: \"CID_DownloadMsgRes\",\n  4005: \"CID_GenMsgIdReq\",\n  4006: \"CID_GenMsgIdRes\",\n  4007: \"CID_MsgDeleteReq\",\n  4008: \"CID_MsgDeleteRes\",\n  4009: \"CID_MsgListReq\",\n  4010: \"CID_MsgListRes\",\n  4011: \"CID_MsgUpdateReq\",\n  4012: \"CID_MsgUpdateRes\",\n  4013: \"CID_RemoveMessagesReq\",\n  4014: \"CID_RemoveMessagesRes\",\n  4015: \"CID_SendReq\",\n  4016: \"CID_SendRes\",\n  4017: \"CID_UploadMsgReq\",\n  4018: \"CID_UploadMsgRes\",\n  5001: \"CID_OtherNotify\",\n  6001: \"CID_SyncReq\",\n  6002: \"CID_SyncRes\",\n  7001: \"CID_DownloadUserReq\",\n  7002: \"CID_DownloadUserRes\",\n  7003: \"CID_GenUserIdReq\",\n  7004: \"CID_GenUserIdRes\",\n  7005: \"CID_UploadUserReq\",\n  7006: \"CID_UploadUserRes\",\n};\n\nexport const getActionCommandsName = (cid:ActionCommands)=>{\n   return ActionCommandsName[cid] || cid.toString();\n}\n\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { AuthNativeReq_Type } from './types';\n\nexport default class AuthNativeReq extends BaseMsg {\n  public msg?: AuthNativeReq_Type\n  constructor(msg?: AuthNativeReq_Type) {\n    super('PTP.Auth.AuthNativeReq', msg);\n    this.setCommandId(ActionCommands.CID_AuthNativeReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): AuthNativeReq_Type {\n    return new AuthNativeReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { DownloadMsgReq_Type } from './types';\n\nexport default class DownloadMsgReq extends BaseMsg {\n  public msg?: DownloadMsgReq_Type\n  constructor(msg?: DownloadMsgReq_Type) {\n    super('PTP.Msg.DownloadMsgReq', msg);\n    this.setCommandId(ActionCommands.CID_DownloadMsgReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): DownloadMsgReq_Type {\n    return new DownloadMsgReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { DownloadMsgRes_Type } from './types';\n\nexport default class DownloadMsgRes extends BaseMsg {\n  public msg?: DownloadMsgRes_Type\n  constructor(msg?: DownloadMsgRes_Type) {\n    super('PTP.Msg.DownloadMsgRes', msg);\n    this.setCommandId(ActionCommands.CID_DownloadMsgRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): DownloadMsgRes_Type {\n    return new DownloadMsgRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { GenMsgIdReq_Type } from './types';\n\nexport default class GenMsgIdReq extends BaseMsg {\n  public msg?: GenMsgIdReq_Type\n  constructor(msg?: GenMsgIdReq_Type) {\n    super('PTP.Msg.GenMsgIdReq', msg);\n    this.setCommandId(ActionCommands.CID_GenMsgIdReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): GenMsgIdReq_Type {\n    return new GenMsgIdReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { GenMsgIdRes_Type } from './types';\n\nexport default class GenMsgIdRes extends BaseMsg {\n  public msg?: GenMsgIdRes_Type\n  constructor(msg?: GenMsgIdRes_Type) {\n    super('PTP.Msg.GenMsgIdRes', msg);\n    this.setCommandId(ActionCommands.CID_GenMsgIdRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): GenMsgIdRes_Type {\n    return new GenMsgIdRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UploadMsgReq_Type } from './types';\n\nexport default class UploadMsgReq extends BaseMsg {\n  public msg?: UploadMsgReq_Type\n  constructor(msg?: UploadMsgReq_Type) {\n    super('PTP.Msg.UploadMsgReq', msg);\n    this.setCommandId(ActionCommands.CID_UploadMsgReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UploadMsgReq_Type {\n    return new UploadMsgReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { DownloadUserReq_Type } from './types';\n\nexport default class DownloadUserReq extends BaseMsg {\n  public msg?: DownloadUserReq_Type\n  constructor(msg?: DownloadUserReq_Type) {\n    super('PTP.User.DownloadUserReq', msg);\n    this.setCommandId(ActionCommands.CID_DownloadUserReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): DownloadUserReq_Type {\n    return new DownloadUserReq().decode(pdu.body());\n  }\n}\n","import {ChatRequest, ChatResponse, Message} from \"../../../../functions/api/types\";\nimport {AI_PROXY_API} from \"../../../config\";\nimport {PbChatGptConfig_Type} from \"../protobuf/PTPCommon/types\";\n\nconst TIME_OUT_MS = 30000;\n\nconst ENABLE_GPT4 = true;\n\nexport const ALL_MODELS = [\n  {\n    name: \"gpt-4\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-4-0314\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-4-32k\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-4-32k-0314\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-3.5-turbo\",\n    available: true,\n  },\n  {\n    name: \"gpt-3.5-turbo-0301\",\n    available: true,\n  },\n];\n\nexport function isValidModel(name: string) {\n  return ALL_MODELS.some((m) => m.name === name && m.available);\n}\n\nexport function isValidNumber(x: number, min: number, max: number) {\n  return typeof x === \"number\" && x <= max && x >= min;\n}\n\n\nconst makeRequestParam = (\n  messages: Message[],\n  options?: {\n    filterBot?: boolean;\n    stream?: boolean;\n  },\n): ChatRequest => {\n  let sendMessages = messages.map((v) => ({\n    role: v.role,\n    content: v.content,\n  }));\n\n  if (options?.filterBot) {\n    sendMessages = sendMessages.filter((m) => m.role !== \"assistant\");\n  }\n\n  return {\n    model: \"gpt-3.5-turbo\",\n    messages: sendMessages,\n    stream: options?.stream,\n  };\n};\n\nfunction getHeaders(apiKey:string) {\n  let headers: Record<string, string> = {};\n  headers[\"token\"] = apiKey;\n  return headers;\n}\n\nexport function requestOpenaiClient(path: string,apiKey:string) {\n  return (body: any, method = \"POST\") =>\n    fetch(AI_PROXY_API +\"/api/openai\", {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        path,\n        ...getHeaders(apiKey),\n      },\n      body: body && JSON.stringify(body),\n    });\n}\n\nexport async function requestChat(messages: Message[],apiKey:string) {\n  const req: ChatRequest = makeRequestParam(messages, { filterBot: true });\n\n  const res = await requestOpenaiClient(\"v1/chat/completions\",apiKey)(req);\n\n  try {\n    return (await res.json()) as ChatResponse;\n  } catch (error) {\n    console.error(\"[Request Chat] \", error, res.body);\n  }\n}\n\nexport async function requestUsage(apiKey:string) {\n  const res = await requestOpenaiClient(\n    \"dashboard/billing/credit_grants?_vercel_no_cache=1\",apiKey\n  )(null, \"GET\");\n\n  try {\n    const response = (await res.json()) as {\n      total_available: number;\n      total_granted: number;\n      total_used: number;\n    };\n    return response;\n  } catch (error) {\n    console.error(\"[Request usage] \", error, res.body);\n  }\n}\n\n\nexport function filterConfig(oldConfig: PbChatGptConfig_Type): Partial<PbChatGptConfig_Type> {\n  const config = Object.assign({}, oldConfig);\n\n  const validator: {\n    [k in keyof PbChatGptConfig_Type]: (x: PbChatGptConfig_Type[keyof PbChatGptConfig_Type]) => boolean;\n  } = {\n    model(x) {\n      return isValidModel(x as string);\n    },\n    max_tokens(x) {\n      return isValidNumber(x as number, 100, 4000);\n    },\n    presence_penalty(x) {\n      return isValidNumber(x as number, -2, 2);\n    },\n    temperature(x) {\n      return isValidNumber(x as number, 0, 2);\n    },\n  };\n\n  Object.keys(validator).forEach((k) => {\n    const key = k as keyof PbChatGptConfig_Type;\n    if (!validator[key](config[key])) {\n      delete config[key];\n    }\n  });\n\n  return config;\n}\n\nexport async function requestChatStream(\n  messages: Message[],\n  options?: {\n    apiKey:string,\n    filterBot?: boolean;\n    modelConfig?: PbChatGptConfig_Type;\n    onMessage: (message: string, done: boolean) => void;\n    onAbort: (error: Error) => void;\n    onError: (error: Error) => void;\n    onController?: (controller: AbortController) => void;\n  },\n) {\n  const req = makeRequestParam(messages, {\n    stream: true,\n    filterBot: options?.filterBot,\n  });\n\n  // valid and assign model config\n  if (options?.modelConfig) {\n    Object.assign(req, filterConfig(options.modelConfig));\n  }\n\n  console.log(\"[Request] \", req);\n\n  const controller = new AbortController();\n  const reqTimeoutId = setTimeout(() => controller.abort(), TIME_OUT_MS);\n\n  try {\n    const res = await fetch(AI_PROXY_API + \"/api/chat-stream\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        path: \"v1/chat/completions\",\n        ...getHeaders(options!.apiKey),\n      },\n      body: JSON.stringify(req),\n      signal: controller.signal,\n    });\n    clearTimeout(reqTimeoutId);\n\n    let responseText = \"\";\n\n    const finish = () => {\n      options?.onMessage(responseText, true);\n      controller.abort();\n    };\n\n    if (res.ok) {\n      const reader = res.body?.getReader();\n      const decoder = new TextDecoder();\n\n      options?.onController?.(controller);\n\n      while (true) {\n        // handle time out, will stop if no response in 10 secs\n        const resTimeoutId = setTimeout(() => finish(), TIME_OUT_MS);\n        const content = await reader?.read();\n        clearTimeout(resTimeoutId);\n        const text = decoder.decode(content?.value);\n        responseText += text;\n\n        const done = !content || content.done;\n        options?.onMessage(responseText, false);\n\n        if (done) {\n          break;\n        }\n      }\n\n      finish();\n    } else if (res.status === 401) {\n      console.error(\"Anauthorized\");\n      responseText = \"Unauthorized\";\n      finish();\n    } else {\n      console.error(\"Stream Error\", res.body);\n      options?.onError(new Error(\"Stream Error\"));\n    }\n  } catch (err:any) {\n    if(err.code === 20){\n      console.error(\"onAbort\", err);\n      options?.onAbort(err);\n    }else{\n      // AbortError\n      console.error(\"NetWork Error\", err);\n      options?.onError(err);\n    }\n  }\n}\n\nexport async function requestWithPrompt(messages: Message[], prompt: string,apiKey:string) {\n  messages = messages.concat([\n    {\n      role: \"user\",\n      content: prompt,\n      date: new Date().toLocaleString(),\n    },\n  ]);\n\n  const res = await requestChat(messages,apiKey);\n\n  return res?.choices?.at(0)?.message?.content ?? \"\";\n}\n\n// To store message streaming controller\nexport const ControllerPool = {\n  controllers: {} as Record<string, AbortController>,\n\n  addController(\n    sessionIndex: number,\n    messageIndex: number,\n    controller: AbortController,\n  ) {\n    const key = this.key(sessionIndex, messageIndex);\n    this.controllers[key] = controller;\n    return key;\n  },\n\n  stop(sessionIndex: number, messageIndex: number) {\n    const key = this.key(sessionIndex, messageIndex);\n    const controller = this.controllers[key];\n    console.log(controller);\n    controller?.abort();\n  },\n\n  remove(sessionIndex: number, messageIndex: number) {\n    const key = this.key(sessionIndex, messageIndex);\n    delete this.controllers[key];\n  },\n\n  key(sessionIndex: number, messageIndex: number) {\n    return `${sessionIndex},${messageIndex}`;\n  },\n};\n","import MsgDispatcher from \"./MsgDispatcher\";\nimport {selectChat, selectChatMessage, selectUser} from \"../../global/selectors\";\nimport {updateChat, updateUser} from \"../../global/reducers\";\nimport {DEFAULT_BOT_COMMANDS, UserIdFirstBot} from \"../setting\";\nimport {getActions, getGlobal, setGlobal} from \"../../global\";\nimport {ApiBotCommand} from \"../../api/types\";\nimport {callApiWithPdu} from \"./utils\";\nimport {currentTs} from \"../share/utils/utils\";\n\nimport {MessageStoreRow_Type, UserStoreRow_Type} from \"../../lib/ptp/protobuf/PTPCommon/types\";\nimport {UploadMsgReq} from \"../../lib/ptp/protobuf/PTPMsg\";\nimport {DownloadUserReq, UploadUserReq} from \"../../lib/ptp/protobuf/PTPUser\";\nimport Mnemonic from \"../../lib/ptp/wallet/Mnemonic\";\nimport Account from \"../share/Account\";\nimport {AuthNativeReq} from \"../../lib/ptp/protobuf/PTPAuth\";\nimport {GlobalState} from \"../../global/types\";\nimport {getPasswordFromEvent} from \"../share/utils/password\";\nimport {hashSha256} from \"../share/utils/helpers\";\nimport MsgCommandSetting from \"./MsgCommandSetting\";\nimport {ControllerPool} from \"../../lib/ptp/functions/requests\";\n\nexport default class MsgCommand {\n  private msgDispatcher: MsgDispatcher;\n  constructor(msgDispatcher:MsgDispatcher) {\n    this.msgDispatcher = msgDispatcher;\n  }\n  static async sendText(chatId:string,text:string){\n    const messageId = await MsgDispatcher.genMsgId();\n    MsgDispatcher.newMessage(chatId,messageId,{\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      content:{\n        text:{\n          text:text\n        }\n      },\n    })\n  }\n  static async clearHistory(chatId:string){\n    let global = getGlobal();\n    const chatMessages = global.messages.byChatId[chatId];\n    const ids = Object.keys(chatMessages.byId).map(Number);\n    const chat = selectChat(global,chatId)\n    MsgDispatcher.apiUpdate({\n      \"@type\":\"deleteMessages\",\n      chatId,\n      ids\n    })\n    setTimeout(()=>{\n      global = getGlobal();\n      global = updateChat(global,chatId,{\n        ...chat,\n        unreadCount:0,\n        lastMessage:MsgDispatcher.buildMsgHistoryClear(chatId)\n      })\n      setGlobal(global)\n    },500)\n\n    return true;\n  }\n\n  async showMnemonic(){\n    await this.msgDispatcher.sendOutgoingMsg();\n    await this.msgDispatcher.replyText(\"显示成功\")\n    getActions().updateGlobal({\n      showMnemonicModal:true\n    })\n  }\n  async setAuth(){\n    await this.msgDispatcher.sendOutgoingMsg();\n    const m = \"control combine high meat erode catalog public tumble rebel benefit upon public\"\n    const account = Account.getInstance(Account.genAccountId());\n    const entropy = new Mnemonic(m).toEntropy();\n    await account.setEntropy(entropy)\n    const accountId = account.getAccountId();\n    Account.setCurrentAccountId(accountId)\n    const session = account?.getSession();\n    if(!session){\n      const {password} = await getPasswordFromEvent();\n      if(password){\n        const pwd = hashSha256(password)\n        const ts = +(new Date());\n        const {address, sign} = await account.signMessage(ts.toString(), pwd);\n        const session = Account.formatSession({address,sign,ts});\n        account.saveSession(session)\n        const entropy = await account.getEntropy()\n        const accountId = account.getAccountId();\n        await callApiWithPdu(new AuthNativeReq({\n          accountId,entropy,session\n        }).pack())\n        await this.msgDispatcher.replyText(\"账户设置成功\")\n        await this.msgDispatcher.replyCode(session)\n        await this.msgDispatcher.replyCode(entropy)\n        await this.msgDispatcher.replyCode(accountId.toString())\n      }\n    }else {\n      await this.msgDispatcher.replyCode(session)\n    }\n  }\n  async genMnemonic(){\n    await this.msgDispatcher.sendOutgoingMsg();\n    const m = new Mnemonic()\n    return await this.msgDispatcher.replyNewTextMessage({text:m.getWords()})\n  }\n  async downloadBots(botId:string){\n    let global = getGlobal();\n    const user = selectUser(global,botId);\n\n    await this.msgDispatcher.sendOutgoingMsg();\n    const res = await callApiWithPdu(new DownloadUserReq({\n      userIds:[user!.id!],\n    }).pack())\n\n    await this.msgDispatcher.replyNewTextMessage({text:`正在下载`})\n    return true;\n\n  }\n  async uploadBots(botId:string){\n    let global = getGlobal();\n    const user = selectUser(global,botId);\n\n    await this.msgDispatcher.sendOutgoingMsg();\n    const users:UserStoreRow_Type[] = [];\n    const ids = [user?.id]\n    for (let i = 0; i < ids.length; i++) {\n      if(i > 0){\n        break\n      }\n      const id = ids[i];\n      users.push({\n        time:currentTs(),\n        userId:id!,\n        user:selectUser(global,botId)\n      })\n    }\n    const res = await callApiWithPdu(new UploadUserReq({\n      users,\n      time:currentTs()\n    }).pack())\n    const text = await Account.getCurrentAccount()?.getEntropy();\n    await this.msgDispatcher.replyNewTextMessage({text})\n    return true;\n\n  }\n  async uploadMessages(chatId:string,messageIds?:number[]){\n    let global = getGlobal();\n    const chatMessages = global.messages.byChatId[chatId];\n    const ids = Object.keys(chatMessages.byId).map(Number);\n    await this.msgDispatcher.sendOutgoingMsg();\n    const messages:MessageStoreRow_Type[] = [];\n    for (let i = 0; i < ids.length; i++) {\n      if(i > 0){\n        break\n      }\n      const id = ids[i]\n\n      messages.push({\n        time:currentTs(),\n        messageId:id,\n        message:selectChatMessage(global,chatId,id)\n      })\n    }\n    const res = await callApiWithPdu(new UploadMsgReq({\n      messages,\n      chatId,\n      time:currentTs()\n    }).pack())\n\n    await this.msgDispatcher.replyNewTextMessage({text:`正在上传.. ${ids.length}`})\n    return true;\n  }\n  async reloadCommands(){\n    let global = getGlobal();\n    let user = selectUser(global,this.msgDispatcher.getChatId())\n    const botInfo = user?.fullInfo?.botInfo;\n    if(botInfo){\n      //@ts-ignore\n      const commands:ApiBotCommand[] = DEFAULT_BOT_COMMANDS.map(cmd => {\n        return {\n          ...cmd,\n          botId: user?.id\n        };\n      });\n      global = updateUser(global,user?.id!,{\n        ...user,\n        fullInfo:{\n          ...user?.fullInfo,\n          botInfo:{\n            ...user?.fullInfo!.botInfo!,\n            commands\n          }\n        }\n      })\n      setGlobal(global)\n      global = getGlobal()\n      const chat = selectChat(global,this.msgDispatcher.getChatId())\n      user = selectUser(global,chat?.id!)\n\n      await this.msgDispatcher.sendOutgoingMsg();\n      await this.msgDispatcher.replyNewTextMessage({text:\"重载成功\"})\n      // await this.msgDispatcher.replyNewTextMessage({text:\"```\\n\"+JSON.stringify(chat,null,2)+\"```\"})\n      // await this.msgDispatcher.replyNewTextMessage({text:\"```\\n\"+JSON.stringify(user,null,2)+\"```\"})\n      return true;\n    }\n  }\n  async setting(){\n    const chatId = this.msgDispatcher.getChatId()\n    await this.msgDispatcher.sendOutgoingMsg();\n    await MsgCommandSetting.setting(chatId);\n  }\n  static async requestUploadImage(global:GlobalState,chatId:string,messageId:number,files:FileList | null){\n    debugger\n  }\n  static async answerCallbackButton(global:GlobalState,chatId:string,messageId:number,data:string){\n    await MsgCommandSetting.answerCallbackButton(global,chatId,messageId,data)\n    if(data.startsWith(\"requestChatStream/stop/\")){\n      const [chatId,messageId] = data.replace(\"requestChatStream/stop/\",\"\").split(\"/\").map(Number)\n      ControllerPool.stop(chatId,messageId);\n    }\n  }\n  static async onUploadFolder(){\n\n  }\n  async temp(){\n    await this.msgDispatcher.sendOutgoingMsg();\n    await this.msgDispatcher.sendNewMessage({\n      text:{\n        text:\"test\"\n      }\n    },{\n      inlineButtons:[\n        [\n          {\n            data:\"1\",\n            text:\"callback button\",\n            type:\"callback\"\n          },\n        ],\n        [\n          {\n            text:\"command button\",\n            type:'command'\n          },\n          {\n            text:\"unsupported button\",\n            type:'unsupported'\n          },\n          {\n            text:\"buy button\",\n            type:'buy'\n          }\n        ],\n        [\n          {\n            text:\"game button\",\n            type:'game'\n          },\n          {\n            text:\"requestPhone button\",\n            type:'requestPhone'\n          }\n        ],\n        [\n          {\n            text:\"receipt button\",\n            type:'receipt',\n            receiptMessageId:1\n          },\n        ],\n        [\n          {\n            text:\"url button\",\n            type:'url',\n            url:\"http://www.ai.com\"\n          },\n        ],\n        [\n          {\n            text:\"simpleWebView button\",\n            type:'simpleWebView',\n            url:\"http://www.ai.com\"\n          },\n          {\n            text:\"webView button\",\n            type:'webView',\n            url:\"http://www.ai.com\"\n          },\n        ],\n        [\n          {\n            text:\"requestPoll button\",\n            type:'requestPoll',\n            isQuiz:true\n          },\n          {\n            text:\"switchBotInline button\",\n            type:'switchBotInline',\n            query: \"\",\n            isSamePeer: false\n          },\n          {\n            text:\"userProfile button\",\n            type:'userProfile',\n            userId: UserIdFirstBot,\n          },\n        ],\n        [\n          {\n            text:\"requestUploadImage button\",\n            type:'requestUploadImage',\n          },\n        ]\n      ],\n      senderId:this.msgDispatcher.getChatId()\n    });\n    await this.msgDispatcher.focusLastMessage()\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { SyncReq_Type } from './types';\n\nexport default class SyncReq extends BaseMsg {\n  public msg?: SyncReq_Type\n  constructor(msg?: SyncReq_Type) {\n    super('PTP.Sync.SyncReq', msg);\n    this.setCommandId(ActionCommands.CID_SyncReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): SyncReq_Type {\n    return new SyncReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { SyncRes_Type } from './types';\n\nexport default class SyncRes extends BaseMsg {\n  public msg?: SyncRes_Type\n  constructor(msg?: SyncRes_Type) {\n    super('PTP.Sync.SyncRes', msg);\n    this.setCommandId(ActionCommands.CID_SyncRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): SyncRes_Type {\n    return new SyncRes().decode(pdu.body());\n  }\n}\n","import MsgDispatcher from \"./MsgDispatcher\";\nimport {selectChatMessage, selectChatMessages, selectUser} from \"../../global/selectors\";\nimport {addChats, addUsers, updateUser} from \"../../global/reducers\";\nimport {UserIdFirstBot} from \"../setting\";\nimport {getActions, getGlobal, setGlobal} from \"../../global\";\nimport {ApiKeyboardButtons, ApiUser} from \"../../api/types\";\nimport {callApiWithPdu} from \"./utils\";\nimport {currentTs} from \"../share/utils/utils\";\nimport {MessageStoreRow_Type, UserStoreData_Type, UserStoreRow_Type} from \"../../lib/ptp/protobuf/PTPCommon/types\";\nimport {DownloadMsgReq, DownloadMsgRes, UploadMsgReq} from \"../../lib/ptp/protobuf/PTPMsg\";\nimport {DownloadUserReq, DownloadUserRes, UploadUserReq} from \"../../lib/ptp/protobuf/PTPUser\";\nimport Mnemonic from \"../../lib/ptp/wallet/Mnemonic\";\nimport Account from \"../share/Account\";\nimport {AuthNativeReq} from \"../../lib/ptp/protobuf/PTPAuth\";\nimport {GlobalState} from \"../../global/types\";\nimport {getPasswordFromEvent} from \"../share/utils/password\";\nimport {hashSha256} from \"../share/utils/helpers\";\nimport {SyncReq, SyncRes} from \"../../lib/ptp/protobuf/PTPSync\";\nimport MsgCommand from \"./MsgCommand\";\n\nlet currentSyncBotContext:string|undefined;\n\nexport default class MsgCommandSetting{\n  static async setting(chatId:string){\n    const account = Account.getCurrentAccount();\n    const isEnableSync = account?.getSession();\n    const messageId = await MsgDispatcher.genMsgId();\n    MsgDispatcher.newMessage(chatId,messageId,{\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      content:{\n        text:{\n          text:\"设置面板\"\n        }\n      },\n      inlineButtons:MsgCommandSetting.getInlineButtons(chatId,!!isEnableSync),\n    })\n  }\n  static getInlineButtons(chatId:string,isEnableSync:boolean):ApiKeyboardButtons{\n    return isEnableSync ? [\n      [\n        {\n          data:`${chatId}/setting/uploadFolder`,\n          text:\"上传对话\",\n          type:\"callback\"\n        },\n        {\n          data:`${chatId}/setting/downloadFolder`,\n          text:\"下载对话\",\n          type:\"callback\"\n        },\n      ],\n      [\n        {\n          data:`${chatId}/setting/uploadMessages`,\n          text:\"上传消息\",\n          type:\"callback\"\n        },\n        {\n          data:`${chatId}/setting/downloadMessages`,\n          text:\"下载消息\",\n          type:\"callback\"\n        },\n      ],\n\n      [\n        {\n          data:`${chatId}/setting/getSession`,\n          text:\"获取session\",\n          type:\"callback\"\n        },\n      ],\n      [\n        {\n          data:`${chatId}/setting/showMnemonic`,\n          text:\"showMnemonic\",\n          type:\"callback\"\n        },\n        {\n          data:`${chatId}/setting/setMnemonic`,\n          text:\"setMnemonic\",\n          type:\"callback\"\n        },\n      ],\n      [\n        {\n          data:`${chatId}/setting/disableSync`,\n          text:\"关闭同步\",\n          type:\"callback\"\n        },\n        {\n          data:`${chatId}/setting/cancel`,\n          text:\"取消\",\n          type:\"callback\"\n        },\n      ],\n    ]:[\n      [\n        {\n          data:`${chatId}/setting/enableSync`,\n          text:\"开启同步\",\n          type:\"callback\"\n        },\n        {\n          data:`${chatId}/setting/cancel`,\n          text:\"取消\",\n          type:\"callback\"\n        },\n      ],\n    ]\n  }\n  static async answerCallbackButton(global:GlobalState,chatId:string,messageId:number,data:string){\n    switch (data){\n      case `${chatId}/setting/getSession`:\n        const account = Account.getCurrentAccount();\n        const entropy = await account?.getEntropy();\n        const mnemonic = Mnemonic.fromEntropy(entropy!)\n        await MsgCommand.sendText(chatId,account?.getSession()!)\n        await MsgCommand.sendText(chatId,entropy!)\n        await MsgCommand.sendText(chatId,mnemonic.getWords())\n        break\n\n      case `${chatId}/setting/setMnemonic`:\n        const res = prompt(\"setMnemonic\")\n        if(res){\n          const mnemonic = new Mnemonic(res)\n          if(mnemonic.checkMnemonic()){\n            await MsgCommand.sendText(chatId,mnemonic.toEntropy())\n            const {password} = await getPasswordFromEvent()\n            if(password){\n              const entropy = mnemonic.toEntropy();\n              let accountId = Account.getAccountIdByEntropy(entropy);\n              if(!accountId){\n                accountId = Account.genAccountId()\n              }\n              const account = Account.getInstance(accountId);\n              Account.setCurrentAccountId(accountId);\n              await account?.setEntropy(entropy,true)\n              const pwd = hashSha256(password)\n              const ts = +(new Date());\n              const {address, sign} = await account!.signMessage(ts.toString(), pwd);\n              const session = Account.formatSession({address,sign,ts});\n              account!.saveSession(session)\n              await callApiWithPdu(new AuthNativeReq({\n                accountId,entropy:mnemonic.toEntropy(),session\n              }).pack())\n              await MsgCommand.sendText(chatId,session)\n              window.location.reload()\n            }\n          }else{\n            await MsgCommand.sendText(chatId,\"mnemonic 不合法\")\n          }\n        }\n        break\n      case `${chatId}/setting/uploadFolder`:\n        await MsgCommandSetting.syncFolders(true)\n        break\n      case `${chatId}/setting/downloadFolder`:\n        await MsgCommandSetting.syncFolders(false)\n        break\n      case `${chatId}/setting/syncMessage`:\n        getActions().updateGlobal({\n          showPickBotModal:true\n        })\n        break\n      case `${chatId}/setting/uploadMessages`:\n      case `${chatId}/setting/downloadMessages`:\n        currentSyncBotContext = data;\n        getActions().updateGlobal({\n          showPickBotModal:true\n        })\n        break\n      case `${chatId}/setting/showMnemonic`:\n        getActions().updateGlobal({\n          showMnemonicModal:true\n        })\n        break\n      case `${chatId}/setting/cancel`:\n        MsgDispatcher.updateMessage(chatId,messageId,{\n          inlineButtons:[],\n        })\n        break\n      case `${chatId}/setting/disableSync`:\n        await MsgCommandSetting.disableSync(global,chatId,messageId)\n        break\n      case `${chatId}/setting/enableSync`:\n        const {password} = await getPasswordFromEvent()\n        if(!password){\n          MsgDispatcher.updateMessage(chatId,messageId,{\n            inlineButtons:[],\n          })\n        }\n        await MsgCommandSetting.enableSync(global,chatId,messageId,password)\n        break\n    }\n  }\n  static buildDefaultChat(user:ApiUser){\n    return {\n      \"id\": user.id,\n      \"title\":  user.firstName,\n      \"type\": \"chatTypePrivate\",\n      \"isMuted\": false,\n      \"isMin\": false,\n      \"hasPrivateLink\": false,\n      \"isSignaturesShown\": false,\n      \"isVerified\": true,\n      \"isJoinToSend\": true,\n      \"isJoinRequest\": true,\n      lastMessage:{\n        id:0,\n        chatId:user.id,\n        isOutgoing:false,\n        date:Math.ceil(+(new Date)/1000),\n        content:{\n          action:{\n            type:\"chatCreate\",\n            text:\"\",\n          }\n        }\n      },\n      \"isForum\": false,\n      \"isListed\": true,\n      \"settings\": {\n        \"isAutoArchived\": false,\n        \"canReportSpam\": false,\n        \"canAddContact\": false,\n        \"canBlockContact\": false\n      },\n      \"accessHash\": \"\"\n    }\n  }\n  static async syncFolders(isUpload:boolean){\n    let global = getGlobal();\n    const chats = global.chats.byId\n    const chatIds = Object.keys(chats).filter(id=>id !== \"1\");\n    const chatIdsDeleted:string[] = global.chatIdsDeleted;\n    console.log(\"local\",{chatIds,chatIdsDeleted})\n    const userStoreData:UserStoreData_Type|undefined = isUpload ?{\n      time:currentTs(),\n      chatFolders:JSON.stringify(global.chatFolders),\n      chatIds,\n      chatIdsDeleted\n    } :undefined\n\n    const res = await callApiWithPdu(new SyncReq({\n      userStoreData\n    }).pack())\n    const syncRes = SyncRes.parseMsg(res!.pdu)\n    let users:UserStoreRow_Type[] = [];\n    if(isUpload){\n      for (let index = 0; index < chatIds.length; index++) {\n        const userId = chatIds[index];\n        users.push({\n          time:currentTs(),\n          userId,\n          user:selectUser(global,userId)\n        })\n      }\n      await callApiWithPdu(new UploadUserReq({\n        users,\n        time:currentTs()\n      }).pack())\n    }\n\n    if(syncRes.userStoreData){\n      const {chatFolders,...res} = syncRes.userStoreData\n      res.chatIdsDeleted?.forEach(id=>{\n        if(!chatIdsDeleted.includes(id)){\n          chatIdsDeleted.push(id)\n        }\n      })\n      console.log(\"remote\",res)\n      if(res.chatIds){\n        const DownloadUserReqRes = await callApiWithPdu(new DownloadUserReq({\n          userIds:res.chatIds,\n        }).pack())\n        if(DownloadUserReqRes){\n          const downloadUserRes = DownloadUserRes.parseMsg(DownloadUserReqRes?.pdu!)\n          console.log(\"downloadUserRes\",downloadUserRes)\n          global = getGlobal();\n          if(downloadUserRes.users){\n            const addUsersObj = {}\n            const addChatsObj = {}\n            for (let index = 0; index < downloadUserRes.users.length; index++) {\n              const {user} = downloadUserRes.users[index];\n              if(!chatIdsDeleted.includes(user!.id)){\n                if(chatIds.includes(user!.id)){\n                  // @ts-ignore\n                  global = updateUser(global,user!.id, user!)\n                }else{\n                  // @ts-ignore\n                  addUsersObj[user!.id] = user!\n                  // @ts-ignore\n                  addChatsObj[user!.id] = MsgCommandSetting.buildDefaultChat(user!)\n                }\n                if(Object.keys(addUsersObj).length > 0){\n                  global = addUsers(global,addUsersObj)\n                  global = addChats(global,addChatsObj)\n                }\n              }\n            }\n          }\n          setGlobal({\n            ...global,\n            chatIdsDeleted:chatIdsDeleted || [],\n            chatFolders:JSON.parse(chatFolders)\n          })\n        }\n      }else{\n        getActions().updateGlobal({\n          chatIdsDeleted:chatIdsDeleted || [],\n          chatFolders:JSON.parse(chatFolders)\n        })\n      }\n    }\n    getActions().showNotification({message:\"更新成功\"})\n  }\n  static async enableSync(global:GlobalState,chatId:string,messageId:number,password:string){\n    const account = Account.getCurrentAccount();\n    const pwd = hashSha256(password)\n    const ts = +(new Date());\n    const {address, sign} = await account!.signMessage(ts.toString(), pwd);\n    const session = Account.formatSession({address,sign,ts});\n    account!.saveSession(session)\n    const entropy = await account!.getEntropy()\n    const accountId = account!.getAccountId();\n    await callApiWithPdu(new AuthNativeReq({\n      accountId,entropy,session\n    }).pack())\n    MsgDispatcher.updateMessage(chatId,messageId,{\n      inlineButtons:[]\n    })\n    getActions().showNotification({message:\"开启成功\"})\n    setTimeout(()=>window.location.reload(),500)\n  }\n\n  static async disableSync(global:GlobalState,chatId:string,messageId:number){\n    const account = Account.getCurrentAccount();\n    account?.delSession();\n    MsgDispatcher.updateMessage(chatId,messageId,{\n      inlineButtons:[]\n    })\n    await callApiWithPdu(new AuthNativeReq({\n      accountId:account!.getAccountId(),\n      entropy:await account!.getEntropy(),\n      session:undefined\n    }).pack())\n    getActions().showNotification({message:\"关闭成功\"})\n    setTimeout(()=>window.location.reload(),500)\n  }\n\n  static async onSelectSyncBot(chatId:string){\n    const data = currentSyncBotContext;\n    const isUpload = !data?.endsWith(\"downloadMessages\");\n    currentSyncBotContext = undefined\n    await MsgCommand.sendText(UserIdFirstBot,data!)\n    let global = getGlobal();\n    if(isUpload){\n      const messageById = selectChatMessages(global,chatId);\n      const messages:MessageStoreRow_Type[] = [];\n      if(messageById){\n        for (let i = 0; i < Object.keys(messageById).length; i++) {\n          const msgId = parseInt(Object.keys(messageById)[i])\n          messages.push({\n            time:currentTs(),\n            message:messageById[msgId],\n            messageId:msgId,\n          })\n        }\n      }\n      if(messages.length > 0){\n        const res = await callApiWithPdu(new UploadMsgReq({\n          messages,\n          chatId,\n          time:currentTs(),\n        }).pack())\n        if(!res){\n          getActions().showNotification({message:\"更新失败\"})\n        }\n      }\n    }else{\n      const res = await callApiWithPdu(new DownloadMsgReq({\n        chatId,\n      }).pack())\n      if(res){\n        const {err,messages} = DownloadMsgRes.parseMsg(res?.pdu)\n        console.log(\"messages\",messages)\n        if(messages){\n          for (let i = 0; i < messages?.length; i++) {\n            const {message,messageId} = messages[i]\n            const localMsg = selectChatMessage(global,chatId,messageId)\n            if(!localMsg){\n              // @ts-ignore\n              MsgDispatcher.newMessage(chatId,messageId,message)\n            }else{\n              // @ts-ignore\n              MsgDispatcher.updateMessage(chatId,messageId,message)\n            }\n          }\n        }\n\n      }else{\n        getActions().showNotification({message:\"更新失败\"})\n      }\n    }\n  }\n}\n","import {\n  ApiAttachment, ApiBotInfo,\n  ApiChat,\n  ApiFormattedText,\n  ApiKeyboardButtons,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiSticker,\n  ApiUser,\n  ApiVideo\n} from \"../../api/types\";\nimport {GlobalState} from \"../../global/types\";\nimport {getActions} from \"../../global\";\nimport {callApiWithPdu} from \"./utils\";\nimport {currentTs} from \"../share/utils/utils\";\nimport {GenMsgIdReq, GenMsgIdRes} from \"../../lib/ptp/protobuf/PTPMsg\";\nimport MsgCommand from \"./MsgCommand\";\nimport {parseCodeBlock} from \"../share/utils/stringParse\";\n\nexport type ParamsType = {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n  botInfo?: ApiBotInfo\n}\nexport type OptionsType = {\n  senderId?:string,\n  inlineButtons?:ApiKeyboardButtons\n  isLocalMessageId?:boolean,\n}\n\nexport default class MsgDispatcher {\n  private params: ParamsType;\n  private global: GlobalState;\n  private msgCommand: MsgCommand;\n  constructor(global:GlobalState,params: ParamsType) {\n    this.global = global;\n    this.params = params;\n    this.msgCommand = new MsgCommand(this)\n  }\n\n  static apiUpdate(update:any){\n    const {apiUpdate} = getActions()\n    apiUpdate(update)\n  }\n  getMsgSenderAsId(){\n    return this.params.sendAs?.id;\n  }\n  getMsgText(){\n    return this.params.text;\n  }\n\n  getChatId(){\n    return this.params.chat.id;\n  }\n  genMsgDate(){\n    return Math.ceil(+(new Date())/1000);\n  }\n\n  static async genMsgId(isLocal?:boolean){\n    // @ts-ignore\n    const {pdu} = await callApiWithPdu(new GenMsgIdReq({isLocal:!!isLocal}).pack())\n    const {messageId} = GenMsgIdRes.parseMsg(pdu)\n    return messageId\n  }\n\n  updateMessageSendSucceeded(localId:number,message:ApiMessage){\n    MsgDispatcher.apiUpdate({\n      '@type': \"updateMessageSendSucceeded\",\n      localId,\n      chatId: this.params.chat.id,\n      message: message\n    });\n  }\n  updateMessageText(id:number,{text}:{text: any},message:ApiMessage){\n    this.updateMessage(id,{\n      ...message,\n      content:{\n        ...message.content,\n        text: {\n          ...message.content.text,\n          text\n        }\n      }\n    })\n  }\n  updateMessage(id:number,message:Partial<ApiMessage>){\n    return MsgDispatcher.updateMessage(this.getChatId(),id,message)\n  }\n  static updateMessage(chatId:string,messageId:number,message:Partial<ApiMessage>){\n    MsgDispatcher.apiUpdate({\n        '@type': \"updateMessage\",\n        id: messageId,\n        chatId,\n        message,\n      });\n    return message\n  }\n  static newMessage(chatId:string,messageId:number,message:ApiMessage){\n    MsgDispatcher.apiUpdate({\n      '@type': \"newMessage\",\n      chatId,\n      id:messageId,\n      message,\n      shouldForceReply:false\n    });\n    return message\n  }\n  async sendNewMessage(content:{text?:ApiFormattedText},options:OptionsType){\n    const {isLocalMessageId,senderId,inlineButtons} = options || {}\n    const id = await MsgDispatcher.genMsgId(!!isLocalMessageId)\n    const message = {\n      id,\n      content,\n      inlineButtons,\n      chatId: this.getChatId(),\n      date: this.genMsgDate(),\n      senderId:this.getMsgSenderAsId(),\n      isOutgoing:(senderId || this.getMsgSenderAsId()) !== this.getChatId(),\n      sendingState: undefined\n    }\n    return MsgDispatcher.newMessage(this.getChatId(),id,message)\n  }\n  async sendNewTextMessage({text,options}:{text?:string,options?:OptionsType}){\n    const res = parseCodeBlock(text!)\n    // @ts-ignore\n    return await this.sendNewMessage({text:res!,},options)\n  }\n\n  async replyText(text:string){\n    return await this.replyNewTextMessage({text})\n  }\n\n  async replyCode(text:string){\n    return await this.replyNewTextMessage({text:\"```\\n\"+text+\"```\"})\n  }\n\n  async replyNewTextMessage({text,options}:{text?:string,options?:OptionsType}){\n    this.focusLastMessage(200)\n    return await this.sendNewTextMessage({text,options:{\n      ...options,\n        senderId:this.getChatId()\n      }})\n\n  }\n  async sendOutgoingMsg(){\n    this.focusLastMessage(100)\n    return await this.sendNewTextMessage({\n      text:this.getMsgText(),\n    })\n  }\n  static buildMsgHistoryClear(chatId:string):ApiMessage{\n    return {\n      id: 0,\n      chatId,\n      isOutgoing: false,\n      date: currentTs(),\n      content: {\n        action: {\n          text: \"历史记录已清空\",\n          type: 'historyClear',\n          translationValues:[],\n        }\n      }\n    }\n  }\n  async processCmd(){\n    let res;\n    const sendMsgText = this.getMsgText();\n    switch(sendMsgText){\n      case \"/reloadCommands\":\n        return await this.msgCommand.reloadCommands();\n      case \"/clearHistory\":\n        return await MsgCommand.clearHistory(this.getChatId());\n      case \"/temp\":\n        return await this.msgCommand.temp();\n      case \"/setting\":\n        return await this.msgCommand.setting();\n      case \"/start\":\n        return await this.msgCommand.reloadCommands();\n    }\n    return res\n  }\n  focusLastMessage(delay:number = 500){\n\n  }\n  async process(){\n    let res;\n    if(this.getMsgText()?.startsWith(\"/\")){\n      res = this.processCmd();\n    }\n    return res\n  }\n}\n","import {ApiMessageEntityTypes} from \"../../../api/types\";\n\nexport function parseCodeBlock(text:string) {\n  const reg = /```(.*?)\\n([\\s\\S]*?)```/g;\n  if(text.indexOf(\"```\") >= 0 && text.split(\"```\").length % 2 === 0){\n    text =  text+\"```\";\n  }\n  let result = text;\n  let match;\n  let codeBlock = [];\n  let i = 0;\n  let j = 0;\n  while (match = reg.exec(text)) {\n    codeBlock.push({\n      type:ApiMessageEntityTypes.Pre,\n      language: match[1],\n      offset: match.index - 6 * i - j,\n      length: match[2].length\n    });\n    j += match[1].length+1\n    result = result.replace(match[0],  match[2]);\n    ++i;\n  }\n  return {\n    text:result.endsWith(\"```\") ? result.substring(0,result.indexOf(\"```\")): result,\n    entities:codeBlock\n  };\n}\n\nfunction parseMentionName(text:string) {\n  const regex = /@\\w+/g;\n  let match;\n  let result = [];\n  while ((match = regex.exec(text)) !== null) {\n    result.push({\n      type:ApiMessageEntityTypes.MentionName,\n      offset: match.index,\n      length: match[0].length\n    });\n  }\n  return result\n}\n\nfunction parseCmd(text:string, commands:string[]) {\n  if(commands.length === 0) return [];\n  const regex = new RegExp(`\\\\b(${commands.join('|')})\\\\b`, 'g');\n  const matches = [];\n  let match;\n  while ((match = regex.exec(text)) !== null) {\n    matches.push({\n      type:ApiMessageEntityTypes.BotCommand,\n      offset: match.index-1,\n      length: match[0].length + 1\n    });\n  }\n  return matches\n}\n\nexport function parseEntities(text:string,commands:string[]){\n  return [\n    ...parseCmd(text,commands),\n    ...parseMentionName(text),\n  ]\n}\n","import {callApi} from \"../../api/gramjs\";\nimport {Pdu} from \"../../lib/ptp/protobuf/BaseMsg\";\nexport type CallApiWithPduRes = {\n  pdu:Pdu\n}\nexport async function callApiWithPdu(pdu:Pdu):Promise<undefined|CallApiWithPduRes>{\n  //@ts-ignore\n  const buf = await callApi(\"sendWithCallback\",Buffer.from(pdu.getPbData()))\n  if(buf){\n    return {pdu:new Pdu(Buffer.from(buf))}\n  }else{\n    return undefined\n  }\n}\n","\nexport function generateRandomString(length:number) {\n  let result = '';\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nexport function sha1(str: string): string {\n  function utf8_encode(str: string): string {\n    str = str.replace(/\\r\\n/g, '\\n');\n    let utf8str = '';\n    for (let n = 0; n < str.length; n++) {\n      let c = str.charCodeAt(n);\n      if (c < 128) {\n        utf8str += String.fromCharCode(c);\n      } else if ((c > 127) && (c < 2048)) {\n        utf8str += String.fromCharCode((c >> 6) | 192);\n        utf8str += String.fromCharCode((c & 63) | 128);\n      } else {\n        utf8str += String.fromCharCode((c >> 12) | 224);\n        utf8str += String.fromCharCode(((c >> 6) & 63) | 128);\n        utf8str += String.fromCharCode((c & 63) | 128);\n      }\n    }\n    return utf8str;\n  }\n\n  function rotate_left(n: number, s: number): number {\n    return (n << s) | (n >>> (32 - s));\n  }\n\n  function cvt_hex(val: number): string {\n    let str = '';\n    let i;\n    let v;\n    for (i = 7; i >= 0; i--) {\n      v = (val >>> (i * 4)) & 0x0f;\n      str += v.toString(16);\n    }\n    return str;\n  }\n\n  let blockstart;\n\n  let i: number, j: number;\n\n  let W = new Array(80);\n\n  let H0 = 0x67452301;\n  let H1 = 0xEFCDAB89;\n  let H2 = 0x98BADCFE;\n  let H3 = 0x10325476;\n  let H4 = 0xC3D2E1F0;\n\n  let A, B, C, D, E;\n\n  let temp;\n\n  str = utf8_encode(str);\n\n  let len = str.length * 8;\n\n  let K = new Array(\n    0x5A827999,\n    0x6ED9EBA1,\n    0x8F1BBCDC,\n    0xCA62C1D6\n  );\n\n  let str_len = str.length;\n\n  let word_array = new Array();\n\n  for (i = 0; i < str_len - 3; i += 4) {\n    j =\n      (str.charCodeAt(i) << 24) |\n      (str.charCodeAt(i + 1) << 16) |\n      (str.charCodeAt(i + 2) << 8) |\n      str.charCodeAt(i + 3);\n    word_array.push(j);\n  }\n\n  switch (str_len % 4) {\n    case 0:\n      i = 0x080000000;\n      break;\n    case 1:\n      i = (str.charCodeAt(str_len - 1) << 24) | 0x0800000;\n      break;\n\n    case 2:\n      i =\n        (str.charCodeAt(str_len - 2) << 24) |\n        (str.charCodeAt(str_len - 1) << 16) |\n        0x08000;\n      break;\n\n    case 3:\n      i =\n        (str.charCodeAt(str_len - 3) << 24) |\n        (str.charCodeAt(str_len - 2) << 16) |\n        (str.charCodeAt(str_len - 1) << 8) |\n        0x80;\n      break;\n  }\n\n  word_array.push(i);\n\n  while (word_array.length % 16 != 14) word_array.push(0);\n\n  word_array.push(len >>> 32);\n  word_array.push(len & 0xffffffff);\n\n  for (blockstart = 0; blockstart < word_array.length; blockstart += 16) {\n    for (i = 0; i < 16; i++) W[i] = word_array[blockstart + i];\n    for (i = 16; i < 80; i++)\n      W[i] = rotate_left(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n    A = H0;\n    B = H1;\n    C = H2;\n    D = H3;\n    E = H4;\n\n    for (i = 0; i < 20; i++) {\n      temp =\n        (rotate_left(A, 5) + ((B & C) | (~B & D)) + E + W[i] + K[0]) &\n        0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    for (i = 20; i < 40; i++) {\n      temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + K[1]) & 0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    for (i = 40; i < 60; i++) {\n      temp =\n        (rotate_left(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + K[2]) &\n        0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    for (i = 60; i < 80; i++) {\n      temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + K[3]) & 0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    H0 = (H0 + A) & 0xffffffff;\n    H1 = (H1 + B) & 0xffffffff;\n    H2 = (H2 + C) & 0xffffffff;\n    H3 = (H3 + D) & 0xffffffff;\n    H4 = (H4 + E) & 0xffffffff;\n  }\n\n  let result =\n    cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);\n  return result.toLowerCase();\n}\n\nexport function replaceSubstring(text:string, offset:number, length:number,replace:string) {\n  const prefix = text.substring(0, offset);\n  const suffix = text.substring(offset + length);\n  return prefix + replace + suffix;\n\n}\nexport function fetchWithTimeout(url: RequestInfo | URL, options: RequestInit | undefined, timeout = 10000) {\n  return Promise.race([\n    fetch(url, options),\n    new Promise((_, reject) =>\n      setTimeout(() => reject(new Error(`Timeout: ${timeout}s`)), timeout)\n    )\n  ]);\n}\n\nexport const isEmailValid = (email:string)=>{\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return re.test(email);\n}\n\nexport function parseQueryFromUrl(urlStr: string): { url: URL; query: Record<string, string> } {\n  const replacedUrl = urlStr.replace(/#/g, '?');\n  const url = new URL(replacedUrl);\n  const query = Array.from(url.searchParams.entries()).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: value,\n    }),\n    {}\n  );\n\n  return { url, query };\n}\n\n\nexport function getCorsHeader(Access_Control_Allow_Origin: string = '*',ContentType:string = \"application/json;charset=UTF-8\") {\n  return {\n    'content-type': ContentType,\n    'Access-Control-Allow-Origin': Access_Control_Allow_Origin,\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization, Accept',\n    'Access-Control-Allow-Credentials': 'true',\n  };\n}\n\nexport function ResponseJson(result: object, status = 200,Access_Control_Allow_Origin: string = '*') {\n  return new Response(JSON.stringify(result), {\n    status,\n    headers: {\n      ...getCorsHeader(Access_Control_Allow_Origin),\n    },\n  });\n}\n\nexport function currentTs(){\n  return Math.ceil(+(new Date)/1000)\n}\n\nexport function currentTs1000(){\n  return Math.ceil(+(new Date))\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_ID","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","getChatBot","botId","global","getGlobal","users","byId","fullInfo","bot","botInfo","async","loadChats","listType","offsetId","offsetDate","shouldReplace","isFullDraftSync","lastLocalServiceMessage","selectLastServiceNotification","message","result","UserIdFirstBot","chats","isFullyLoaded","setGlobal","LoadAllChats","i","length","chat","messages","byChatId","id","threadsById","lastViewportIds","lastMessage","userStatusesById","forEach","user","chatIds","map","shift","totalChatCount","chatFoldersById","chatFolders","row","orderedIds","folderIds","msgClientState","tabStates","Object","values","byTabId","visibleChats","flatMap","tabId","currentChat","selectCurrentChat","visibleUsers","selectVisibleUsers","currentUserId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","replaceChats","updateChatListIds","addUsers","addUserStatuses","updateChats","replaceChatListIds","newChats","includes","notificationsChat","updateChatListSecondaryInfo","keys","draftsById","chatId","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","replyingToById","e","console","error","loadFullChat","actions","getCurrentTabId","callApi","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","undefined","participantsCount","updateChat","stickerSet","loadStickers","stickerSetInfo","accessHash","fetchChatByUsername","username","localChat","selectChatByUsername","isMin","updateUser","getAttachBotOrNotify","selectUser","isUserBot","showNotification","langProvider","openAttachMenuFromLink","attach","startAttach","callAttachBot","startParam","ensureIsSuperGroup","selectChat","isChatBasicGroup","newChat","openLimitReachedModal","limit","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","Set","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","selectCurrentMessageList","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","threadId","payload","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","type","requestThreadInfoUpdate","originChannelId","topMessageId","selectThreadTopMessageId","selectThreadOriginChat","TMP_CHAT_ID","openPreviousChat","chatFullInfo","linkedChatId","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","onReplace","getOrderDate","date","joinDate","DEBUG","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","force","lastLocalMessage","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","updateTabState","chatCreation","progress","ChatCreationProgress","channelId","selectTabState","userId","leaveChat","userIds","a","b","parseInt","isSelf","avatarHash","isPremium","firstName","photos","usernames","bio","DEFAULT_CREATE_USER_BIO","config","enableAi","chatGptConfig","init_system_content","api_key","max_history_length","ChatModelConfig","commands","DEFAULT_BOT_COMMANDS","cmd","MsgCommandSetting","activeChatFolderRow","activeChatFolder","window","sessionStorage","getItem","chatFolderById","includedChatIds","addChats","editChatFolder","folderUpdate","createdChat","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","maxId","Math","max","recommendedId","description","newFolder","setActiveChatFolder","unreadCount","lastTopicMessageId","topics","lastMessageId","updateThreadInfo","lastReadInboxMessageId","hash","phoneNumber","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","openChatByUsername","openChatByUsernameAction","match","RE_TG_LINK","processDeepLink","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","substr","shortName","chatOrChannelPostId","Number","commentId","comment","text","formatShareText","inviteHash","voicechat","livestream","slug","substring","start","c","channelPostId","isCurrentChat","startBot","param","usernameChat","threadInfo","selectThreadInfo","chatByUsername","discussionChatId","isEnabled","isPreHistoryHidden","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","profilePhoto","loadProfilePhotos","profileId","photosToDelete","nextPhoto","groups","addedById","reduce","group","isForum","forDiscussionIds","channel","fullChat","setItem","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","forumPanelChatId","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","addMessages","updateTopics","count","updateListedTopicIds","entries","formattedText","replyingToId","readInboxMessageIdByTopicId","shouldCloseChatOnError","prevIsForum","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestAnimationFrame","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","peer","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount","ActionCommands","AuthNativeReq","BaseMsg","constructor","msg","super","this","setCommandId","static","pdu","decode","body","DownloadMsgReq","DownloadMsgRes","GenMsgIdReq","GenMsgIdRes","UploadMsgReq","DownloadUserReq","ControllerPool","controllers","addController","sessionIndex","messageIndex","controller","key","stop","log","abort","MsgCommand","msgDispatcher","MsgDispatcher","senderId","isOutgoing","currentTs","content","chatMessages","setTimeout","sendOutgoingMsg","replyText","getActions","updateGlobal","showMnemonicModal","account","Account","entropy","Mnemonic","toEntropy","setEntropy","accountId","getAccountId","session","getSession","replyCode","password","getPasswordFromEvent","pwd","hashSha256","ts","Date","address","sign","signMessage","saveSession","getEntropy","callApiWithPdu","pack","replyNewTextMessage","getWords","time","UploadUserReq","messageIds","selectChatMessage","getChatId","files","sendNewMessage","inlineButtons","receiptMessageId","isQuiz","query","isSamePeer","focusLastMessage","SyncReq","SyncRes","currentSyncBotContext","isEnableSync","getInlineButtons","mnemonic","res","prompt","checkMnemonic","location","reload","syncFolders","showPickBotModal","disableSync","enableSync","ceil","isUpload","chatIdsDeleted","userStoreData","JSON","stringify","syncRes","parseMsg","index","DownloadUserReqRes","downloadUserRes","DownloadUserRes","addUsersObj","addChatsObj","buildDefaultChat","parse","delSession","endsWith","messageById","selectChatMessages","msgId","err","_defineProperty","msgCommand","update","apiUpdate","getMsgSenderAsId","sendAs","getMsgText","genMsgDate","updateMessageSendSucceeded","localId","updateMessageText","updateMessage","shouldForceReply","options","isLocalMessageId","genMsgId","sendingState","newMessage","reg","indexOf","codeBlock","j","exec","ApiMessageEntityTypes","language","entities","parseCodeBlock","sendNewTextMessage","translationValues","reloadCommands","temp","setting","delay","processCmd","buf","Buffer","from","getPbData","Pdu","replaceSubstring","isEmailValid","email","test","parseQueryFromUrl","urlStr","replacedUrl","Array","value"],"sourceRoot":""}