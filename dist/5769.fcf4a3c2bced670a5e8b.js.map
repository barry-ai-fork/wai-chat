{"version":3,"file":"5769.fcf4a3c2bced670a5e8b.js","mappings":"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AAQG,GACrF+B,gBAAiBuqF,IAAmBvqF,EAAgBuqF,GAAgBnrF,IACpE05B,0BACA0xD,qBACAkB,oBAAoCrtF,IAApBgpC,GAAiCvpC,EAAOypC,eAAeF,IAAkBC,UACzFqkD,qBAAqCttF,IAApBgpC,EAAgCvpC,EAAOypC,eAAeF,IAAkBhmC,UAAOhD,EAChGgf,WAAWC,EAAAA,EAAAA,IAA2Bxf,GACtCoV,eAAgBpV,EAAOqV,SAASC,MAAMF,eACtCm2E,oBACAqB,gBACAnF,eAAgBznF,EAAO+e,oBACvB4tE,gBACAI,oBACAe,uBAAwB9tF,EAAOqV,SAASC,MAAMy4E,aAC9Cd,oCACK5B,GAAiByB,KAAe,CAAEnnF,aACnC0H,GAAc,CAAE8gE,gBAAgB6f,EAAAA,EAAAA,IAAqBhuF,EAAQkF,EAA6B,cAApBT,OAC5C,iBAAnBmvE,GAA+B,CAAEA,qBACxC9N,GAAa,CAAEC,iBAAgBC,mBAAkB/7D,uBACtD,GAtJeopC,EAr+BuB46C,EACzC/oF,UACA+lF,gBACAiD,+BACA7hB,gCACAC,gCACA1b,QACAyP,YACAqqB,aACAD,iBACA0D,aACA7f,YACAtC,kBACA4e,iBACArrE,YACA6uE,gBACAC,yBACA1D,wBACAiD,iBACAC,kBACA5hB,eACAj8C,QACAm7D,kBACAxlF,SACA0lF,gBACAC,eACA15D,YACA65D,cACAC,kBACAC,eACAC,qBACAzd,iBACAyF,iBACAp4C,oBACAsrC,cACAqmB,kBACArnB,YACAC,iBACAC,mBACA/7D,sBACAihF,eACAlzB,iBACA8yB,gBACA1/B,YACAztB,UACAkpC,WACAzmB,gBACA4rC,aACAG,iBACAC,uBACA3E,kBACA7gB,kBACApS,cACA64B,mBACAjtF,YACAqsF,mBACAjyD,sBACAwC,mBACA96B,mBACA84B,2BACAv2B,mBACA8oF,gBACA1Z,iBACA0P,oBACAiK,oBACAE,sBACAD,yBACAnnD,qBACAomD,qBACAvgB,wBACA/2D,kBACAm2E,qBACAqB,gBACAD,gBACAI,oBACAe,0BACAb,oCAEA,MAAM,uBACJ/gF,GAAsB,qBACtBqhD,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","sources":["webpack://wai/./src/global/actions/ui/localSearch.ts","webpack://wai/./src/global/actions/ui/chats.ts","webpack://wai/./src/global/actions/ui/messages.ts","webpack://wai/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://wai/./src/global/actions/ui/globalSearch.ts","webpack://wai/./src/global/actions/ui/stickerSearch.ts","webpack://wai/./src/global/actions/ui/users.ts","webpack://wai/./src/util/updateIcon.ts","webpack://wai/./src/util/updatePageTitle.ts","webpack://wai/./src/global/actions/ui/misc.ts","webpack://wai/./src/global/actions/ui/payments.ts","webpack://wai/./src/global/actions/ui/mediaViewer.ts","webpack://wai/./src/global/actions/ui/passcode.ts","webpack://wai/./src/global/actions/api/symbols.ts","webpack://wai/./src/global/actions/api/globalSearch.ts","webpack://wai/./src/global/actions/api/localSearch.ts","webpack://wai/./src/global/actions/api/management.ts","webpack://wai/./src/global/actions/api/accounts.ts","webpack://wai/./src/global/actions/api/users.ts","webpack://wai/./src/global/reducers/bots.ts","webpack://wai/./src/util/PopupManager.ts","webpack://wai/./src/global/actions/api/bots.ts","webpack://wai/./src/global/actions/api/payments.ts","webpack://wai/./src/global/actions/api/twoFaSettings.ts","webpack://wai/./src/util/requestQuery.ts","webpack://wai/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://wai/./src/global/reducers/reactions.ts","webpack://wai/./src/global/actions/api/reactions.ts","webpack://wai/./src/global/actions/api/statistics.ts","webpack://wai/./src/global/actions/apiUpdaters/chats.ts","webpack://wai/./src/global/actions/apiUpdaters/messages.ts","webpack://wai/./src/global/actions/apiUpdaters/users.ts","webpack://wai/./src/global/actions/apiUpdaters/symbols.ts","webpack://wai/./src/global/actions/apiUpdaters/misc.ts","webpack://wai/./src/global/actions/apiUpdaters/settings.ts","webpack://wai/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://wai/./src/global/actions/apiUpdaters/calls.ts","webpack://wai/./src/global/actions/apiUpdaters/payments.ts","webpack://wai/./src/hooks/useBeforeUnload.ts","webpack://wai/./src/hooks/usePreventPinchZoomGesture.ts","webpack://wai/./src/components/common/StickerSetModal.async.tsx","webpack://wai/./src/components/common/UnreadCounter.tsx","webpack://wai/./src/hooks/useConnectionStatus.ts","webpack://wai/./src/hooks/useBrowserOnline.ts","webpack://wai/./src/components/left/ConnectionStatusOverlay.tsx","webpack://wai/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://wai/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://wai/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://wai/./src/components/left/main/StatusButton.tsx","webpack://wai/./src/components/left/main/LeftMainHeader.tsx","webpack://wai/./src/util/permanentWebVersion.ts","webpack://wai/./src/components/ui/Tab.tsx","webpack://wai/./src/components/ui/TabList.tsx","webpack://wai/./src/components/left/main/ChatFolders.tsx","webpack://wai/./src/components/left/search/LeftSearch.async.tsx","webpack://wai/./src/components/left/main/ContactList.async.tsx","webpack://wai/./src/components/left/NewChatButton.tsx","webpack://wai/./src/components/left/main/LeftMain.tsx","webpack://wai/./src/components/left/settings/Settings.async.tsx","webpack://wai/./src/components/left/newChat/NewChat.async.tsx","webpack://wai/./src/components/left/ArchivedChats.async.tsx","webpack://wai/./src/components/left/LeftColumn.tsx","webpack://wai/./src/hooks/useResize.ts","webpack://wai/./src/components/middle/PinnedMessageNavigation.tsx","webpack://wai/./src/components/middle/HeaderPinnedMessage.tsx","webpack://wai/./src/hooks/useMessageMediaMetadata.ts","webpack://wai/./src/components/middle/AudioPlayer.tsx","webpack://wai/./src/components/middle/ChatReportPanel.tsx","webpack://wai/./src/components/middle/MiddleHeader.tsx","webpack://wai/./src/components/middle/helpers/groupMessages.ts","webpack://wai/./src/components/middle/hooks/useStickyDates.ts","webpack://wai/./src/components/middle/hooks/useScrollHooks.ts","webpack://wai/./src/components/middle/hooks/useMessageObservers.ts","webpack://wai/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://wai/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://wai/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://wai/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://wai/./src/util/languageDetection.ts","webpack://wai/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://wai/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://wai/./src/components/middle/ActionMessage.tsx","webpack://wai/./src/components/common/EmbeddedMessage.tsx","webpack://wai/./src/components/middle/message/MessageMeta.tsx","webpack://wai/./src/components/middle/message/Sticker.tsx","webpack://wai/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://wai/./src/components/middle/message/AnimatedEmoji.tsx","webpack://wai/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://wai/./src/components/middle/message/Video.tsx","webpack://wai/./src/components/middle/message/Contact.tsx","webpack://wai/./src/components/middle/message/PollOption.tsx","webpack://wai/./src/components/middle/message/Poll.tsx","webpack://wai/./src/components/middle/message/WebPage.tsx","webpack://wai/./src/components/middle/message/Invoice.tsx","webpack://wai/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://wai/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://wai/./src/util/map.ts","webpack://wai/./src/components/middle/message/Location.tsx","webpack://wai/./src/components/middle/message/Game.tsx","webpack://wai/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://wai/./src/components/middle/message/Album.tsx","webpack://wai/./src/components/middle/message/RoundVideo.tsx","webpack://wai/./src/components/middle/message/InlineButtons.tsx","webpack://wai/./src/components/middle/message/CommentButton.tsx","webpack://wai/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://wai/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://wai/./src/components/middle/message/ReactionButton.tsx","webpack://wai/./src/components/middle/message/Reactions.tsx","webpack://wai/./src/components/middle/message/MessagePhoneCall.tsx","webpack://wai/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://wai/./src/components/common/TopicChip.tsx","webpack://wai/./src/components/common/TopicChip.module.scss?5208","webpack://wai/./src/components/middle/message/Message.tsx","webpack://wai/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://wai/./src/hooks/useTextLanguage.ts","webpack://wai/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://wai/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://wai/./src/components/common/AboutAdsModal.async.tsx","webpack://wai/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://wai/./src/components/middle/message/SponsoredMessage.tsx","webpack://wai/./src/components/middle/MessageListContent.tsx","webpack://wai/./src/components/middle/ContactGreeting.tsx","webpack://wai/./src/components/middle/NoMessages.tsx","webpack://wai/./src/components/middle/MessageList.tsx","webpack://wai/./src/hooks/useNativeCopySelectedMessages.ts","webpack://wai/./src/components/middle/ScrollDownButton.tsx","webpack://wai/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://wai/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://wai/./src/components/middle/FloatingActionButtons.tsx","webpack://wai/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://wai/./src/util/audio.ts","webpack://wai/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://wai/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://wai/./src/util/voiceRecording.ts","webpack://wai/./src/lib/cleanDocsHtml.ts","webpack://wai/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://wai/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://wai/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://wai/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://wai/./src/components/middle/composer/hooks/useDraft.ts","webpack://wai/./src/components/common/DeleteMessageModal.async.tsx","webpack://wai/./src/components/ui/ResponsiveHoverButton.tsx","webpack://wai/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://wai/./src/components/middle/composer/AttachBotIcon.tsx","webpack://wai/./src/components/middle/composer/AttachBotItem.tsx","webpack://wai/./src/components/middle/composer/AttachMenu.tsx","webpack://wai/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://wai/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://wai/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://wai/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://wai/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://wai/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://wai/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://wai/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://wai/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://wai/./src/components/middle/composer/PollModal.async.tsx","webpack://wai/./src/components/middle/composer/DropArea.async.tsx","webpack://wai/./src/components/middle/composer/WebPagePreview.tsx","webpack://wai/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://wai/./src/components/middle/composer/BotMenuButton.tsx","webpack://wai/./src/components/middle/composer/Composer.tsx","webpack://wai/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://wai/./src/components/middle/composer/hooks/useEditing.ts","webpack://wai/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://wai/./src/components/middle/MobileSearch.async.tsx","webpack://wai/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://wai/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://wai/./src/components/common/SeenByModal.async.tsx","webpack://wai/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://wai/./src/components/middle/ReactorListModal.async.tsx","webpack://wai/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://wai/./src/components/middle/MessageLanguageModal.async.tsx","webpack://wai/./src/components/middle/MiddleColumn.tsx","webpack://wai/./src/hooks/useCustomBackground.ts","webpack://wai/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://wai/./src/components/right/RightHeader.tsx","webpack://wai/./src/components/right/hooks/useProfileViewportIds.ts","webpack://wai/./src/components/right/hooks/useProfileState.ts","webpack://wai/./src/components/right/Profile.tsx","webpack://wai/./src/components/right/hooks/useTransitionFixes.ts","webpack://wai/./src/hooks/useCacheBuster.ts","webpack://wai/./src/components/right/RightSearch.async.tsx","webpack://wai/./src/components/right/management/Management.async.tsx","webpack://wai/./src/components/right/statistics/Statistics.async.tsx","webpack://wai/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://wai/./src/components/right/StickerSearch.async.tsx","webpack://wai/./src/components/right/GifSearch.async.tsx","webpack://wai/./src/components/right/PollResults.async.tsx","webpack://wai/./src/components/right/AddChatMembers.tsx","webpack://wai/./src/components/right/CreateTopic.async.tsx","webpack://wai/./src/components/right/EditTopic.async.tsx","webpack://wai/./src/components/right/RightColumn.tsx","webpack://wai/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://wai/./src/util/download.ts","webpack://wai/./src/components/main/DownloadManager.tsx","webpack://wai/./src/components/main/GameModal.tsx","webpack://wai/./src/components/main/Notifications.async.tsx","webpack://wai/./src/components/main/Dialogs.async.tsx","webpack://wai/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://wai/./src/components/main/SafeLinkModal.async.tsx","webpack://wai/./src/components/main/HistoryCalendar.async.tsx","webpack://wai/./src/components/calls/group/GroupCall.async.tsx","webpack://wai/./src/components/calls/ActiveCallHeader.async.tsx","webpack://wai/./src/components/calls/phone/PhoneCall.async.tsx","webpack://wai/./src/components/middle/MessageListHistoryHandler.tsx","webpack://wai/./src/components/main/NewContactModal.async.tsx","webpack://wai/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://wai/./src/components/main/WebAppModal.async.tsx","webpack://wai/./src/components/main/BotTrustModal.async.tsx","webpack://wai/./src/components/main/AttachBotInstallModal.async.tsx","webpack://wai/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://wai/./src/components/main/ConfettiContainer.tsx","webpack://wai/./src/components/main/UrlAuthModal.async.tsx","webpack://wai/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://wai/./src/components/payment/PaymentModal.async.tsx","webpack://wai/./src/components/payment/ReceiptModal.async.tsx","webpack://wai/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://wai/./src/components/main/DeleteFolderDialog.async.tsx","webpack://wai/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://wai/./src/components/main/DraftRecipientPicker.async.tsx","webpack://wai/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://wai/./src/components/ui/PasswordModal.tsx","webpack://wai/./src/components/main/Main.tsx","webpack://wai/./src/components/main/LockScreen.module.scss?8252","webpack://wai/./src/components/main/LockScreen.tsx","webpack://wai/./src/bundles/main.ts","webpack://wai/./src/global/actions/ui/calls.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  window.open(createMessageHashUrl(chatId, 'thread', threadId), '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  TabState, GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage, updateFocusedMessageReached, toggleMessageSelectAll,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedTranslationLanguage,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n  const messages = selectChatMessages(global,chatId);\n  const {content} = messages[lastOwnEditableMessageId]\n  if(content.text && content.text){\n    actions.saveDraft({\n      chatId, threadId,\n      draft:{\n        text:content.text.text,\n        entities:content.text.entities\n      }\n      , shouldForce:true,\n    })\n    // return replaceThreadParam(global, chatId, threadId, 'editingId', {text:lastOwnEditableMessageId.toString()});\n  }\n\n  // return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('setReachedFocusedMessage', (global, actions, payload): ActionReturnType => {\n  const { hasReached = false, tabId = getCurrentTabId() } = payload;\n\n  return updateFocusedMessageReached(global, hasReached, tabId);\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const byChatId = tabState.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  const byChatId = selectTabState(global, tabId).activeDownloads.byChatId;\n  const newByChatId: TabState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return updateTabState(global, {\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: [...(tabState.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\n\naddActionHandler('toggleMessageSelectAll', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n  return toggleMessageSelectAll(global, chatId, tabId);\n});\n\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (selectTabState(global, tabId).shouldShowContextMenuHint) {\n    actions.disableContextMenuHint({ tabId });\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (!selectTabState(global, tabId).shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    shouldShowContextMenuHint: false,\n  }, tabId);\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, id, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = selectRequestedTranslationLanguage(global, chatId, id, tabId);\n\n  return updateTabState(global, {\n    messageLanguageModal: { chatId, messageId: id, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    messageLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: false, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectIsTrustedBot, selectChat,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (!isBlurred) {\n    actions.updateIsOnline(true);\n  }\n\n  const blurredTabTokens = unique(isBlurred\n    ? [...global.blurredTabTokens, tabId]\n    : global.blurredTabTokens.filter((t) => t !== tabId));\n\n  if (blurredTabTokens.length === getAllMultitabTokens().length) {\n    actions.updateIsOnline(false);\n  }\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  return {\n    ...global,\n    blurredTabTokens,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (messageList && canDisplayChatInTitle) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, undefined, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(PAGE_TITLE);\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { signalPasscodeHash } from '../../../util/establishMultitabRole';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  signalPasscodeHash();\n  global = getGlobal();\n  global = updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  });\n  setGlobal(global);\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  // storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentGlobalSearchQuery,\n  selectTabState, selectUser\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      global = getGlobal();\n      const chatListIdsActive = global.chats.listIds.active;\n      if(!chatListIdsActive){\n        return;\n      }\n      const messagesList:ApiMessage[] = []\n      const chatIds:string[] = [];\n      const userIds:string[] = [];\n      const userIdList = Object.keys(global.users.byId);\n      for (let i = 0; i < userIdList.length; i++) {\n        const userId = userIdList[i]\n        const user = selectUser(global,userId)\n        if(\n          chatListIdsActive.includes(userId) && (\n            (user?.firstName && user?.firstName.toLowerCase().indexOf(query.toLowerCase()) > -1) ||\n            (user?.lastName && user?.lastName.toLowerCase().indexOf(query.toLowerCase()) > -1) ||\n            (user?.fullInfo && user?.fullInfo.bio && user?.fullInfo.bio.toLowerCase().indexOf(query.toLowerCase()) > -1)\n          )\n          ){\n          chatIds.push(userId)\n        }\n      }\n\n      for (let i = 0; i < chatListIdsActive.length; i++) {\n        const chatId = chatListIdsActive[i]\n        const chat = selectChat(global,chatId)\n        if(chat && chat?.title.indexOf(query) > -1 && !chatIds.includes(chat?.id)){\n          chatIds.push(chat?.id)\n        }\n        const messages = selectChatMessages(global,chatId)\n        if(messages){\n          const messageIds = Object.keys(messages);\n          for (let i = 0; i < messageIds.length; i++) {\n            const messageId = Number(messageIds[i])\n            const message = selectChatMessage(global,chatId,messageId)\n            if(message?.content && message?.content.text && message?.content.text.text){\n              if(message?.content.text.text.toLowerCase().indexOf(query.toLowerCase()) > -1){\n                messagesList.push(message)\n              }\n            }\n          }\n        }\n\n      }\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (messagesList.length === 0 || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n      global = updateGlobalSearchResults(global,messagesList,messagesList.length,\"text\",0,tabId)\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds,\n          userIds\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n\n  //\n  // const { query, tabId = getCurrentTabId() } = payload!;\n  // const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  // if (query && !chatId) {\n  //   void searchThrottled(async () => {\n  //     const result = await callApi('searchChats', { query });\n  //\n  //     global = getGlobal();\n  //     const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  //     if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n  //       global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n  //       setGlobal(global);\n  //       return;\n  //     }\n  //\n  //     const {\n  //       localChats, localUsers, globalChats, globalUsers,\n  //     } = result;\n  //\n  //     if (localChats.length || globalChats.length) {\n  //       global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  //     }\n  //\n  //     if (localUsers.length || globalUsers.length) {\n  //       global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  //     }\n  //\n  //     global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n  //     global = updateGlobalSearch(global, {\n  //       localResults: {\n  //         chatIds: localChats.map(({ id }) => id),\n  //         userIds: localUsers.map(({ id }) => id),\n  //       },\n  //       globalResults: {\n  //         ...selectTabState(global, tabId).globalSearch.globalResults,\n  //         chatIds: globalChats.map(({ id }) => id),\n  //         userIds: globalUsers.map(({ id }) => id),\n  //       },\n  //     }, tabId);\n  //\n  //     setGlobal(global);\n  //   });\n  // }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  return\n  console.log(\"searchMessagesGlobal\")\n  // let result: {\n  //   messages: ApiMessage[];\n  //   users: ApiUser[];\n  //   chats: ApiChat[];\n  //   topics?: ApiTopic[];\n  //   totalTopicsCount?: number;\n  //   totalCount: number;\n  //   nextRate: number | undefined;\n  // } | undefined;\n  //   console.log(\"searchMessagesGlobal\")\n  // if (chat) {\n  //   const localResultRequest = callApi('searchMessagesLocal', {\n  //     chat,\n  //     query,\n  //     type,\n  //     limit: GLOBAL_SEARCH_SLICE,\n  //     offsetId: offsetRate,\n  //     minDate,\n  //     maxDate,\n  //   });\n  //   const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n  //     chat,\n  //     query,\n  //     limit: GLOBAL_TOPIC_SEARCH_SLICE,\n  //   }) : undefined;\n  //\n  //   const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n  //\n  //   if (localResult) {\n  //     const {\n  //       messages, users, totalCount, nextOffsetId,\n  //     } = localResult;\n  //\n  //     const { topics: localTopics, count } = topics || {};\n  //\n  //     result = {\n  //       topics: localTopics,\n  //       totalTopicsCount: count,\n  //       messages,\n  //       users,\n  //       chats: [],\n  //       totalCount,\n  //       nextRate: nextOffsetId,\n  //     };\n  //   }\n  // } else {\n  //   result = await callApi('searchMessagesGlobal', {\n  //     query,\n  //     offsetRate,\n  //     limit: GLOBAL_SEARCH_SLICE,\n  //     type,\n  //     maxDate,\n  //     minDate,\n  //   });\n  // }\n  //\n  // global = getGlobal();\n  // const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  // if (!result || (query !== '' && query !== currentSearchQuery)) {\n  //   global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n  //   setGlobal(global);\n  //   return;\n  // }\n  //\n  // const {\n  //   messages, users, chats, totalCount, nextRate,\n  // } = result;\n  //\n  // if (chats.length) {\n  //   global = addChats(global, buildCollectionByKey(chats, 'id'));\n  // }\n  //\n  // if (users.length) {\n  //   global = addUsers(global, buildCollectionByKey(users, 'id'));\n  // }\n  //\n  // if (messages.length) {\n  //   global = addMessages(global, messages);\n  // }\n  //\n  // global = updateGlobalSearchResults(\n  //   global,\n  //   messages,\n  //   totalCount,\n  //   type,\n  //   nextRate,\n  //   tabId,\n  // );\n  //\n  // if (result.topics) {\n  //   global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  // }\n  //\n  // const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  // global = updateGlobalSearch(global, {\n  //   foundTopicIds: sortedTopics,\n  // }, tabId);\n  //\n  // setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers,\n  updateChat,\n  updateManagement,\n  updateManagementProgress,\n  updateUsers,\n  updateUserWaitToSync,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport {ensureIsSuperGroup, updateLocalUser} from './chats';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\nimport {UseLocalDb} from \"../../../worker/setting\";\nimport {blobToDataUri, fetchBlob, imgToBlob} from \"../../../util/files\";\nimport {resizeImage} from \"../../../util/imageResize\";\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n  // debugger\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  const blob = await imgToBlob(file!);\n  const thumbnailUrl = await resizeImage(blob,40,40,file!.type,0.1);\n  const thumbnail = await blobToDataUri(await fetchBlob(thumbnailUrl));\n  result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n    thumbnail,\n  });\n\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  // @ts-ignore\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  if(!UseLocalDb){\n    const newUser = await callApi('fetchFullUser', { id, accessHash });\n    if (!newUser) {\n      global = getGlobal();\n      global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n      setGlobal(global);\n      return;\n    }\n    actions.loadProfilePhotos({ profileId: userId });\n  }else{\n    global = getGlobal();\n    updateLocalUser(result.users[0],false,undefined,global.currentAccountAddress)\n  }\n\n  global = getGlobal();\n  global = updateUserWaitToSync(global,userId)\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus, updateUserWaitToSync,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {UseLocalDb} from \"../../../worker/setting\";\nimport {updateLocalUser} from \"./chats\";\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) return;\n\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = user.fullInfo?.profilePhoto?.id !== newUser.fullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = user.fullInfo?.fallbackPhoto?.id !== newUser.fullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = user.fullInfo?.personalPhoto?.id !== newUser.fullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if(!UseLocalDb){\n    if (!user.isContact && user.phoneNumber) {\n      result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n    } else {\n      const { id, accessHash } = user;\n      result = await callApi('updateContact', {\n        id,\n        accessHash,\n        phoneNumber: '',\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }else{\n    result = {};\n  }\n  global = getGlobal();\n  if (result) {\n    // actions.loadChatSettings({ chatId: userId });\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n  }\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n\n  global = getGlobal();\n  const user1 = selectUser(global,userId)\n  updateLocalUser(user1,false,undefined,global.currentAccountAddress)\n  global = updateUserWaitToSync(global,userId)\n  setGlobal(global);\n\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  if (user && !user?.fullInfo) {\n    const { id, accessHash } = user;\n    user = await callApi('fetchFullUser', { id, accessHash });\n    if (!user) return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = user?.fullInfo?.fallbackPhoto;\n  const personalPhoto = user?.fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getGlobal, setGlobal,} from '../../index';\n\nimport type {ActionReturnType, GlobalState, TabArgs} from '../../types';\nimport type {ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport type {InlineBotSettings} from '../../../types';\nimport {callApi} from '../../../api/gramjs';\nimport {\n  selectChat,\n  selectChatBot,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectReplyingToId,\n  selectSendAs,\n  selectTabState,\n  selectThreadTopMessageId,\n  selectUser,\n} from '../../selectors';\nimport {addChats, addUsers, removeBlockedContact} from '../../reducers';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {debounce} from '../../../util/schedulers';\nimport {replaceInlineBotSettings, replaceInlineBotsIsLoading} from '../../reducers/bots';\nimport {getServerTime} from '../../../util/serverTime';\nimport {extractCurrentThemeParams} from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport {getChatBot} from \"./chats\";\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList || global.msgClientState !== 'connectionStateLogged') {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  global = getGlobal();\n  bot = selectUser(global, botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action](callbackPayload);\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n\n  const bot = getChatBot(chat.id);\n  await callApi('sendMessage', {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n    bot\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat, selectTabState,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload): ActionReturnType => {\n  const { chatId, reaction, tabId = getCurrentTabId() } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  const tabState = selectTabState(global, tabId);\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat, updateTopic, updateFolderWaitToSync,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport type { ActionReturnType } from '../../types';\nimport {isLocalMessageId} from \"../../helpers\";\nimport {updateLocalChatFolder} from \"../api/chats\";\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n      if(!isLocalMessageId(message.id!)){\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n        });\n      }\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      updateLocalChatFolder({\n        folderIds:newOrderedIds || [],\n        chatFolders:Object.values(newChatFoldersById)\n      },global.currentAccountAddress);\n      global = getGlobal();\n      global = updateFolderWaitToSync(global,newOrderedIds,Object.values(newChatFoldersById))\n      return global;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      global = updateFolderWaitToSync(global,orderedIds)\n\n      updateLocalChatFolder({\n        folderIds:orderedIds || [],\n        chatFolders:Object.values(global.chatFolders.byId)\n      },global.currentAccountAddress);\n      global = getGlobal();\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation, updateMessageWaitToSync,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions, isLocalMessageId,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport parseMessageInput from \"../../../util/parseMessageInput\";\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n      });\n      if(message && message.id && !isLocalMessageId(message!.id)){\n        global = updateSyncMessages(global,chatId,message!.id,false);\n        actions.syncToRemote();\n      }\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if(message.id && !isLocalMessageId(message.id)){\n        global = updateSyncMessages(global,chatId,message.id,false);\n        actions.syncToRemote();\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n      let messageNew = message\n      if (!messageNew.isOutgoing && messageNew.content\n        && messageNew.content.text && messageNew.content.text.text && !messageNew.content.text!.entities) {\n        const {text, entities} = parseMessageInput(messageNew.content.text.text);\n        messageNew.content.text.text = text;\n        messageNew.content.text.entities = entities\n      }\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...messageNew,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      if(!isLocalMessageId(message.id)){\n        global = updateSyncMessages(global,chatId,message.id,false);\n        actions.syncToRemote();\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n      deleteMessages(global, chatId, ids, actions);\n      actions.syncToRemote();\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n        actions.syncToRemote();\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error && error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID, tabId);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\n\nfunction updateSyncMessages<T extends GlobalState>(\n  global: T,\n  chatId:string,\n  messageId:number,\n  isDelete:boolean\n) {\n  return updateMessageWaitToSync(global,chatId,messageId,isDelete)\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n\n  ids.forEach((id) => {\n    if (!isLocalMessageId(id)) {\n      global = updateSyncMessages(global, chatId!,id, true);\n    }\n  })\n  // Channel update\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport {\n  addUsers,\n  addUserStatuses,\n  deleteContact,\n  replaceChats,\n  replaceUsers,\n  replaceUserStatuses,\n  updateUser, updateUserWaitToSync\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport {selectChat, selectIsCurrentUserPremium, selectUser} from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\nimport {updateLocalUser} from \"../api/chats\";\nimport {setPauseSyncToRemote} from \"../api/sync\";\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case \"updateGlobalUpdate\":\n      const {data} = update\n      switch (data.action){\n        case \"setPauseSyncToRemote\":{\n          setPauseSyncToRemote(data.payload.pauseSyncToRemote)\n          return\n        }\n        case \"updateBot\":\n          const userBotUpdate = {\n            ...global.users.byId[data.payload!.botInfo.botId],\n            bot:data.payload!.bot\n          };\n          updateLocalUser(userBotUpdate,false,undefined,global.currentAccountAddress);\n          global = updateUserWaitToSync(global,userBotUpdate.id)\n          if(data.payload!.bot.chatGptConfig && data.payload!.bot.chatGptConfig.api_key){\n            localStorage.setItem(\"open-api-key\" , data.payload!.bot.chatGptConfig.api_key)\n          }\n          return updateUser(global,data.payload!.botInfo.botId,userBotUpdate)\n        case \"clearHistory\":\n          actions.updateGlobal({\n            messages:{\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [data.payload!.chatId]:{\n                  ...global.messages.byChatId[data.payload!.chatId],\n                  byId:{},\n                  threadsById:{\n                    \"-1\":{\n                      ...global.messages.byChatId[data.payload!.chatId].threadsById[\"-1\"],\n                      lastScrollOffset:undefined,\n                      lastViewportIds: [],\n                      listedIds:[]\n                    }\n                  }\n                }\n              }\n            },\n            chats:{\n              ...global.chats,\n              byId:{\n                ...global.chats.byId,\n                [data.payload!.chatId]:{\n                  ...global.chats.byId[data.payload!.chatId],\n                  lastMessage:undefined\n                }\n              }\n            }\n          })\n          break;\n        case \"loadChats\":\n        case \"createBot\":\n          actions.loadAllChats({ listType: 'active', shouldReplace: true });\n          return\n        case \"removeBot\":\n          if(global.chats.listIds && global.chats.listIds.active){\n            let listIds_active = global.chats.listIds.active\n            listIds_active = listIds_active!.filter(id=>id !== data.payload!.chatId)\n            actions.updateGlobal({\n              chats:{\n                ...global.chats,\n                listIds: {\n                  ...global.chats.listIds,\n                  active:listIds_active\n                },\n                totalCount: {\n                  ...global.chats.totalCount,\n                  all:listIds_active.length\n                }\n              }\n            })\n            // @ts-ignore\n            actions.openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n            actions.loadAllChats({ listType: 'active', shouldReplace: true });\n          }\n          return\n      }\n\n      const chat_listIds_active = global.chats.listIds.active || []\n      if(data.chats){\n        for (let i = 0; i < data.chats.length; i++) {\n          const chat1 = data.chats[i]\n          const chat = selectChat(global,chat1.id)\n          if(!chat_listIds_active.includes(chat1.id)){\n            chat_listIds_active.push(chat1.id)\n          }\n          if(chat){\n            global = replaceChats(global,{\n              ...global.chats.byId,\n              [chat1.id]:{\n                ...chat,\n                ...chat1,\n              }\n            });\n          }else{\n            const chatFolders = global.chatFolders;\n            if(!chatFolders.byId[\"1\"].includedChatIds.includes(chat1.id)){\n              chatFolders.byId[\"1\"].includedChatIds.push(chat1.id)\n            }\n            global = {\n              ...global,\n              chats:{\n                ...global.chats,\n                byId:{\n                  ...global.chats.byId,\n                  [chat1.id]:{\n                    ...chat1,\n                  }\n                }\n              },\n              chatFolders\n            }\n          }\n        }\n      }\n      if(data.users){\n        for (let i = 0; i < data.users.length; i++) {\n          const user1 = data.users[i]\n          const user = selectUser(global,user1.id)\n          if(user){\n            global = replaceUsers(global,{\n              ...global.users.byId,\n              [user1.id]:{\n                ...user,\n                ...user1,\n              }\n            });\n          }else{\n            global = addUsers(global,{\n              [user1.id]:{\n                ...user1,\n              }\n            });\n            if(user1.fullInfo && user1.fullInfo.botInfo){\n              global = addUserStatuses(global,{\n                [user1.id]:{\n                  type:'userStatusEmpty'\n                }\n              });\n            }\n          }\n        }\n      }\n      actions.updateGlobal({\n        chats:{\n          ...global.chats,\n          listIds:{\n            ...global.chats.listIds,\n            active:chat_listIds_active\n          },\n          totalCount:{\n            all:chat_listIds_active.length\n          }\n        },\n        users:global.users,\n        chatFolders:global.chatFolders,\n      })\n      break\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/environment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default memo(StatusPickerMenuAsync);\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect] as const);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState, GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION, ASSET_CACHE_NAME,\n  BETA_CHANGELOG_URL, CLOUD_MESSAGE_ENABLE,\n  DEBUG,\n  FEEDBACK_URL, GLOBAL_STATE_CACHE_KEY,\n  IS_BETA,\n  IS_TEST, LANG_CACHE_NAME,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport {\n  selectCurrentMessageList, selectIsCurrentUserPremium, selectTabState, selectTheme,\n} from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\nimport * as cacheApi from '../../../util/cacheApi';\nimport {UseLocalDb} from \"../../../worker/setting\";\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    currentAccountAddress?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'archiveSettings'> & Pick<TabState, 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n  archiveSettings,\n  currentAccountAddress,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n    signOut,\n    updateGlobal,\n    syncFromRemote\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    syncFromRemote();\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleClearCache = useCallback(async () => {\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    await cacheApi.clear(LANG_CACHE_NAME);\n    await cacheApi.clear(ASSET_CACHE_NAME);\n    if(!UseLocalDb){\n      setTimeout(async ()=>{\n        const {chats,messages} = getGlobal();\n        Object.values(chats.byId).forEach(chat=>{\n          chat.lastMessage = undefined\n          messages.byChatId[chat.id].byId = {}\n          messages.byChatId[chat.id].threadsById['-1'].lastViewportIds = []\n          messages.byChatId[chat.id].threadsById['-1'].listedIds = []\n          messages.byChatId[chat.id].threadsById['-1'].lastScrollOffset = undefined\n        })\n        updateGlobal({\n          messages,\n          chats\n        })\n\n      },500)\n    }\n    setTimeout(()=>{\n      location.reload();\n    },500)\n  }, [openUrl]);\n\n  const handleSignOutClick = useCallback(() => {\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    window.history.replaceState({}, '', window.location.href.split(\"#\")[0]);\n    setTimeout(()=>{\n      signOut({ forceInitApi: true });\n      updateGlobal({\n        authState:\"authorizationStateWaitSignPassword\"\n      })\n      },300)\n  }, [openChat,signOut]);\n\n  const handleLoginClick = useCallback(() => {\n\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    window.history.replaceState({}, '', window.location.href.split(\"#\")[0]);\n    updateGlobal({\n      authState:\"authorizationStateWaitSignPassword\"\n    })\n  }, [updateGlobal]);\n\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      {\n        currentUserId &&\n        <MenuItem\n          icon=\"settings\"\n          onClick={onSelectSettings}\n        >\n          {lang('Settings')}\n        </MenuItem>\n      }\n      {\n        currentUserId && !UseLocalDb &&\n        <MenuItem\n          icon=\"saved-messages\"\n          onClick={handleSelectSaved}\n        >\n          {lang('SavedMessages')}\n        </MenuItem>\n      }\n      {/* {archiveSettings.isHidden && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"archive\" */}\n      {/*     onClick={onSelectArchived} */}\n      {/*   > */}\n      {/*     <span className=\"menu-item-name\">{lang('ArchivedChats')}</span> */}\n      {/*     {archivedUnreadChatsCount > 0 && ( */}\n      {/*       <div className=\"right-badge\">{archivedUnreadChatsCount}</div> */}\n      {/*     )} */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {/* <MenuItem */}\n      {/*   icon=\"user\" */}\n      {/*   onClick={onSelectContacts} */}\n      {/* > */}\n      {/*   {lang('Contacts')} */}\n      {/* </MenuItem> */}\n\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('NightMode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Animations')}</span>\n        <Switcher\n          id=\"animations\"\n          label=\"Toggle Animations\"\n          checked={animationLevel > 0}\n        />\n      </MenuItem>\n      {/* <MenuItem */}\n      {/*   icon=\"help\" */}\n      {/*   onClick={handleOpenTipsChat} */}\n      {/* > */}\n      {/*   {lang('TelegramFeatures')} */}\n      {/* </MenuItem> */}\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('ReportBug')}\n      </MenuItem>\n      <MenuItem\n        icon=\"stop\"\n        onClick={handleClearCache}\n      >\n        清除缓存\n      </MenuItem>\n      {/* {IS_BETA && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"permissions\" */}\n      {/*     onClick={handleChangelogClick} */}\n      {/*   > */}\n      {/*     Beta Changelog */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {/* {withOtherVersions && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"char-K\" */}\n      {/*     href={WEBK_VERSION_URL} */}\n      {/*     onClick={handleSwitchToWebK} */}\n      {/*   > */}\n      {/*     Switch to K Version */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n      {\n        !CLOUD_MESSAGE_ENABLE ?\n          <></>:\n          currentAccountAddress  ?\n        <MenuItem\n          icon=\"logout\"\n          onClick={handleSignOutClick}\n        >\n          {lang('SignOut')}\n        </MenuItem>:\n          <MenuItem\n            icon=\"user\"\n            onClick={handleLoginClick}\n          >\n            {lang('Login')}\n          </MenuItem>\n      }\n    </>\n  ), [\n    animationLevel, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings,currentAccountAddress\n    } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.messages) : false,\n      currentUserId,\n      currentAccountAddress,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, memo, useEffect } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport forceReflow from '../../util/forceReflow';\nimport renderText from '../common/helpers/renderText';\n\nimport './Tab.scss';\n\ntype OwnProps = {\n  className?: string;\n  title: string;\n  isActive?: boolean;\n  isBlocked?: boolean;\n  badgeCount?: number;\n  isBadgeActive?: boolean;\n  previousActiveTab?: number;\n  onClick: (arg: number) => void;\n  clickArg: number;\n};\n\nconst classNames = {\n  active: 'Tab--active',\n  badgeActive: 'Tab__badge--active',\n};\n\nconst Tab: FC<OwnProps> = ({\n  className,\n  title,\n  isActive,\n  isBlocked,\n  badgeCount,\n  isBadgeActive,\n  previousActiveTab,\n  onClick,\n  clickArg,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const tabRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Set initial active state\n    if (isActive && previousActiveTab === undefined && tabRef.current) {\n      tabRef.current.classList.add(classNames.active);\n    }\n\n    if (!isActive || previousActiveTab === undefined) {\n      return;\n    }\n\n    const tabEl = tabRef.current!;\n    const prevTabEl = tabEl.parentElement!.children[previousActiveTab];\n    if (!prevTabEl) {\n      // The number of tabs in the parent component has decreased. It is necessary to add the active tab class name.\n      if (isActive && !tabEl.classList.contains(classNames.active)) {\n        tabEl.classList.add(classNames.active);\n      }\n      return;\n    }\n\n    const platformEl = tabEl.querySelector<HTMLElement>('.platform')!;\n    const prevPlatformEl = prevTabEl.querySelector<HTMLElement>('.platform')!;\n\n    // We move and resize the platform, so it repeats the position and size of the previous one\n    const shiftLeft = prevPlatformEl.parentElement!.offsetLeft - platformEl.parentElement!.offsetLeft;\n    const scaleFactor = prevPlatformEl.clientWidth / platformEl.clientWidth;\n\n    prevPlatformEl.classList.remove('animate');\n    platformEl.classList.remove('animate');\n    platformEl.style.transform = `translate3d(${shiftLeft}px, 0, 0) scale3d(${scaleFactor}, 1, 1)`;\n    forceReflow(platformEl);\n    platformEl.classList.add('animate');\n    platformEl.style.transform = 'none';\n\n    prevTabEl.classList.remove(classNames.active);\n    tabEl.classList.add(classNames.active);\n  }, [isActive, previousActiveTab]);\n\n  return (\n    <div\n      className={buildClassName('Tab', className)}\n      onClick={() => onClick(clickArg)}\n      ref={tabRef}\n    >\n      <span>\n        {renderText(title)}\n        {Boolean(badgeCount) && (\n          <span className={buildClassName('badge', isBadgeActive && classNames.badgeActive)}>{badgeCount}</span>\n        )}\n        {isBlocked && <i className=\"icon-lock-badge blocked\" />}\n        <i className=\"platform\" />\n      </span>\n    </div>\n  );\n};\n\nexport default memo(Tab);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useEffect } from '../../lib/teact/teact';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport { IS_ANDROID, IS_IOS } from '../../util/environment';\nimport fastSmoothScrollHorizontal from '../../util/fastSmoothScrollHorizontal';\n\nimport usePrevious from '../../hooks/usePrevious';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Tab from './Tab';\n\nimport './TabList.scss';\n\nexport type TabWithProperties = {\n  id?: number;\n  title: string;\n  badgeCount?: number;\n  isBlocked?: boolean;\n  isBadgeActive?: boolean;\n};\n\ntype OwnProps = {\n  tabs: readonly TabWithProperties[];\n  areFolders?: boolean;\n  activeTab: number;\n  big?: boolean;\n  onSwitchTab: (index: number) => void;\n};\n\nconst TAB_SCROLL_THRESHOLD_PX = 16;\n// Should match duration from `--slide-transition` CSS variable\nconst SCROLL_DURATION = IS_IOS ? 450 : IS_ANDROID ? 400 : 300;\n\nconst TabList: FC<OwnProps> = ({\n  tabs, areFolders, activeTab, big, onSwitchTab,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const previousActiveTab = usePrevious(activeTab);\n\n  useHorizontalScroll(containerRef, undefined, true);\n\n  // Scroll container to place active tab in the center\n  useEffect(() => {\n    const container = containerRef.current!;\n    const { scrollWidth, offsetWidth, scrollLeft } = container;\n    if (scrollWidth <= offsetWidth) {\n      return;\n    }\n\n    const activeTabElement = container.childNodes[activeTab] as HTMLElement | null;\n    if (!activeTabElement) {\n      return;\n    }\n\n    const { offsetLeft: activeTabOffsetLeft, offsetWidth: activeTabOffsetWidth } = activeTabElement;\n    const newLeft = activeTabOffsetLeft - (offsetWidth / 2) + (activeTabOffsetWidth / 2);\n\n    // Prevent scrolling by only a couple of pixels, which doesn't look smooth\n    if (Math.abs(newLeft - scrollLeft) < TAB_SCROLL_THRESHOLD_PX) {\n      return;\n    }\n\n    fastSmoothScrollHorizontal(container, newLeft, SCROLL_DURATION);\n  }, [activeTab]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      className={`TabList no-selection no-scrollbar ${big ? 'big' : ''}`}\n      ref={containerRef}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {tabs.map((tab, i) => (\n        <Tab\n          key={tab.id ?? tab.title}\n          // TODO Remove dependency on usage context\n          title={(!areFolders || tab.id === ALL_FOLDER_ID) ? lang(tab.title) : tab.title}\n          isActive={i === activeTab}\n          isBlocked={tab.isBlocked}\n          badgeCount={tab.badgeCount}\n          isBadgeActive={tab.isBadgeActive}\n          previousActiveTab={previousActiveTab}\n          onClick={onSwitchTab}\n          clickArg={i}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(TabList);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectTabState, selectIsForumPanelOpen } from '../../../global/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  isForumPanelOpen?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    syncFromRemote\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    syncFromRemote();\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      lastSyncTime,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      isForumPanelOpen: selectIsForumPanelOpen(global),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\nimport {getActions} from \"../../global\";\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const {loadAllChats,createChat} = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n    onNewChannel();\n    setTimeout(()=>{\n      setIsMenuOpen(false);\n    },200)\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-add\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={false}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\nimport * as cacheApi from '../../../util/cacheApi';\n\nimport './LeftMain.scss';\nimport { getActions } from '../../../global';\nimport {LANG_CACHE_NAME} from \"../../../config\";\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel,syncFromRemote } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && content === LeftColumnContent.ChatList;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    syncFromRemote()\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  }, [closeForumPanel, onContentChange]);\n\n  const handleUpdateClick = useCallback(async () => {\n    await cacheApi.clear(LANG_CACHE_NAME);\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep2);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelVisible}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectTabState, selectCurrentChat, selectIsForumPanelOpen } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  chatCreationProgress?:ChatCreationProgress;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\nconst leftColumnContent = window.sessionStorage.getItem(\"LeftColumnContent\") || LeftColumnContent.ChatList;\nconst LeftColumn: FC<StateProps> = ({\n  chatCreationProgress,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n\n  const [content, setContent] = useState<LeftColumnContent>(Number(leftColumnContent));\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n  const setContent_ = (v:LeftColumnContent)=>{\n    setContent(v);\n    window.sessionStorage.setItem(\"LeftColumnContent\",v.toString())\n  }\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent_(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent_(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      // setContent_(LeftColumnContent.NewChannelStep1);\n      // return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent_(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent_(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent_(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen && !isForumPanelOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent_(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleArchivedChats = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  }, []);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent_(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_PWA && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent_(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onTopicSearch={handleTopicSearch}\n                  foldersDispatch={foldersDispatch}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onLeftColumnContentChange={setContent_}\n                  isForumPanelOpen={isForumPanelOpen}\n                  archiveSettings={archiveSettings}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  isClosingSearch={isClosingSearch}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent_}\n                  onSearchQuery={handleSearchQuery}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                  isForumPanelOpen={isForumPanelOpen}\n                  onTopicSearch={handleTopicSearch}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      chatCreation,\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n    } = tabState;\n    const {\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      chatCreationProgress:chatCreation?.progress,\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isSpoiler)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle ? renderText(customTitle) : `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string, isSpoiler?: boolean) {\n  const { width, height } = getPictogramDimensions();\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className=\"pinned-thumb\">\n      {!isSpoiler && <img className=\"pinned-thumb-image\" src={srcUrl} width={width} height={height} alt=\"\" />}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n    </div>\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  }, [handleContextMenuClose, isPlaybackRateActive, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  }, [\n    handleBeforeContextMenu, handleContextMenu, handleContextMenuClose, handlePlaybackClick, isContextMenuOpen,\n    isMobile, isPlaybackRateActive, playbackRate,\n  ]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  hasReachedFocusedMessage?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  hasReachedFocusedMessage,\n  isSyncing,\n}) => {\n  const {\n    syncFromRemote,\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    setReachedFocusedMessage,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const [isWaitingForPinnedMessageFocus, setWaitingForPinnedMessageFocus] = useState(false);\n  const { isTablet } = useAppLayout();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n    setWaitingForPinnedMessageFocus(false);\n  }, [pinnedMessageIds]);\n\n  useEffect(() => {\n    if (hasReachedFocusedMessage && isWaitingForPinnedMessageFocus) {\n      setReachedFocusedMessage({ hasReached: false });\n      setWaitingForPinnedMessageFocus(false);\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [\n    hasReachedFocusedMessage, isWaitingForPinnedMessageFocus, pinnedMessageIndex, pinnedMessagesCount,\n    setReachedFocusedMessage,\n  ]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    syncFromRemote({chatId})\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  }, [pinMessage]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({\n        chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id, noForumTopicPanel: true,\n      });\n\n      setWaitingForPinnedMessageFocus(true);\n    }\n  }, [pinnedMessage, focusMessage, threadId]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    isMobile, isSelectModeActive, messageListType, currentTransitionKey, setBackButtonActive, isTablet,\n    shouldShowCloseButton,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n\n    // console.log(chatId,{isChatWithBot,canRestartBot},Boolean(selectIsChatBotNotStarted(global, chatId)),canStartBot)\n\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n    const focusedMessage = selectTabState(global).focusedMessage;\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      hasReachedFocusedMessage: !focusedMessage || focusedMessage.hasReachedMessage,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  const toggleScrollToolsRef = useRef<typeof toggleScrollTools>();\n  toggleScrollToolsRef.current = toggleScrollTools;\n  useSyncEffect(() => {\n    if (isReady) {\n      toggleScrollToolsRef.current!();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [freezeForFab, freezeForNotch, messageIds, unfreezeForFab, unfreezeForNotch]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import { getActions } from '../../../../global';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  const { setReachedFocusedMessage } = getActions();\n\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      setReachedFocusedMessage({\n        hasReached: true,\n      });\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, setReachedFocusedMessage,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nsetTimeout(initWorker, WORKER_INIT_DELAY);\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  content?: TextPart;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  content,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  }, [lang, showNotification]);\n\n  const handleSetSuggestedAvatar = useCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  }, [showAvatarNotification, uploadProfilePhoto]);\n\n  const handleCloseCropModal = useCallback(() => {\n    setCropModalBlob(undefined);\n  }, []);\n\n  const handleSetVideo = useCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  }, [closeVideoModal, message.content.action, showAvatarNotification, uploadProfilePhoto]);\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        showVideoOverwrite\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{content}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={content}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    topic,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{content}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          content={content}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  noReplies,\n  isTranslated,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread}>\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon-reply-filled\" />\n        </span>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [\n    hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect,\n    sticker.stickerSetInfo,\n  ]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [chatId, emoji, interactWithAnimatedEmoji, isOwn, messageId, play, sendInteractionBunch, size]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay && !isSpoilerShown);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  }, [openComments, chatId, threadId, originChannelId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestMasterAndRequestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon-lock\" />}\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ActiveEmojiInteraction, ActiveReaction, ChatTranslatedMessages, MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n  selectChatTranslations,\n  selectRequestedTranslationLanguage,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/fastSmoothScroll';\n\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\nimport {TEXT_AI_THINKING} from \"../../../worker/setting\";\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  requestedTranslationLanguage?: string;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  requestedTranslationLanguage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { result: detectedLanguage } = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, messageId, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, true);\n\n  const currentText = isTranslationPending ? (previousTranslatedText || text) : translatedText;\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  const shouldFocusOnResize = isLastInGroup;\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.target.clientHeight;\n    messageHeightRef.current = newHeight;\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(shouldFocusOnResize ? ref : undefined, throttledResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(currentText), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(Boolean(currentText), withCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if(message.content.text?.text === TEXT_AI_THINKING){\n      return <DotAnimation className=\"status\" content={TEXT_AI_THINKING.replace(\"...\",\"\")} />\n    }\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n    const requestedTranslationLanguage = selectRequestedTranslationLanguage(global, chatId, message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled: global.settings.byKey.canTranslate,\n      requestedTranslationLanguage,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTranslationClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openMessageLanguageModal({ chatId, id: messageId });\n  }, [chatId, messageId, openMessageLanguageModal]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  }, [message.chatId, message.id, openChat]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { detectLanguage } from '../util/languageDetection';\nimport useAsync from './useAsync';\n\nexport default function useTextLanguage(text?: string) {\n  const language = useAsync(() => (text ? detectLanguage(text) : Promise.resolve(undefined)), [text], undefined);\n  return language;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId: string,\n  messageId: number,\n  requestedLanguageCode?: string,\n) {\n  const { translateMessages } = getActions();\n  const messageTranslation = requestedLanguageCode\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!text && !isPending && requestedLanguageCode) {\n      translateMessages({ chatId, messageIds: [messageId], toLanguageCode: requestedLanguageCode });\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode, translateMessages]);\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      {/*<span>{lang('UnreadMessages')}</span>*/}\n      <span></span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon topic={topic} size={ICON_SIZE} className=\"icon topic-icon\" />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('ChatYourSelfTitle')}</h3>\n        <ul className=\"description\">\n          <li>{lang('ChatYourSelfDescription1')}</li>\n          <li>{lang('ChatYourSelfDescription2')}</li>\n          <li>{lang('ChatYourSelfDescription3')}</li>\n          <li>{lang('ChatYourSelfDescription1')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium, selectLastScrollOffset, selectThreadInfo,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,focusMessage\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread'\n    && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0);\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useSyncEffect(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useSyncEffect` above\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    // debugger\n    if (!isShown) {\n      return;\n    }\n    if (messageListType !== 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport {resizeImage, scaleImage} from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let thumbBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n    if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n      const resizedUrl = await scaleImage(\n        blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n      );\n\n      URL.revokeObjectURL(blobUrl);\n      return buildAttachment(filename, blob, {\n        compressedBlobUrl: resizedUrl,\n      });\n    }\n\n    if (mimeType === 'image/jpeg') {\n      filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n    }\n\n    quick = { width, height };\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n\n  }\n\n  return {\n    blobUrl,\n    thumbBlobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [username, resetInlineBot] as const);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [chatId, offset, query, queryInlineBot, usernameLowered]);\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    }, [\n      attachments, canSendAudios, canSendDocuments, canSendPhotos, canSendVideos, chatId, fileSizeLimit,\n      handleClearAttachments, openLimitReachedModal, setAttachments, showAllowedMessageTypesNotification,\n    ],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n  requestAnimationFrame(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  }, [chatId, threadId, isEditing, lastSyncTime, getHtml, saveDraft, clearDraft]);\n\n  const forceUpdateDraft = useCallback(() => {\n    updateDraft(undefined, true);\n  }, [updateDraft]);\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [\n    chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis,\n  ] as const);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport type { OwnProps as ButtonProps } from './Button';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate(e);\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate(e);\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    isMouseInside.current = true;\n    onActivate(e);\n  }, [onActivate]);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      // onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      // onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={!IS_TOUCH_ENV ? onActivate : handleClick}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n  canSendVideos = false;\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n      true\n    );\n  }, [canSendPhotos, canSendVideoAndPhoto, handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false),true);\n  }, [canSendAudios, canSendDocuments, handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n          </>\n        )}\n        {/*{canAttachPolls && (*/}\n        {/*  <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>*/}\n        {/*)}*/}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [\n    replyingToId, shouldForceShowEditing, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId,\n    exitForwardMode,\n  ]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { Signal } from '../../../util/signals';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    return linkEntity?.url || text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId, clearWebPagePreview, loadWebPagePreview, toggleMessageWebPage]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {ApiDraft, GlobalState, MessageListType, TabState,} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiAttachMenuPeerType,\n  ApiBotCommand,\n  ApiBotInlineMediaResult,\n  ApiBotInlineResult,\n  ApiBotMenuButton,\n  ApiChat,\n  ApiChatMember,\n  ApiFormattedText,\n  ApiMessage,\n  ApiNewPoll,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type {InlineBotSettings, ISettings} from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  EDITABLE_INPUT_MODAL_ID,\n  MAX_UPLOAD_FILEPART_SIZE,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n} from '../../../config';\nimport {IS_IOS, IS_VOICE_RECORDING_SUPPORTED} from '../../../util/environment';\nimport {MEMO_EMPTY_ARRAY} from '../../../util/memo';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatBot,\n  selectChatMessage,\n  selectChatType,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingMessage,\n  selectEditingScheduledDraft,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectReplyingToId,\n  selectRequestedDraftFiles,\n  selectRequestedDraftText,\n  selectScheduledIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../../global/helpers';\nimport {formatMediaDuration, formatVoiceRecordDuration} from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, {prepareAttachmentsToSend} from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport {insertHtmlInSelection} from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport {isSelectionInsideInput} from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport {getServerTime} from '../../../util/serverTime';\nimport {selectCurrentLimit} from '../../../global/selectors/limits';\nimport {buildCustomEmojiHtml} from './helpers/customEmoji';\nimport {processMessageInputForCustomEmoji} from '../../../util/customEmojiManager';\nimport {getTextWithEntitiesAsHtml} from '../../common/helpers/renderTextWithEntities';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {useStateRef} from '../../../hooks/useStateRef';\nimport useDraft from './hooks/useDraft';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, {DropAreaState} from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n  const [speechRecognizing, setSpeechRecognizing] = useState(false);\n\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && canSendStickers && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [isComposerBlocked, getHtml, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [\n    setHtml, isMobile, closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip,\n    closeSymbolMenu,\n  ]);\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, showNotification]);\n\n  const mainButtonState = useDerivedState(() => {\n    // if(speechRecognizing){\n    //   return MainButtonState.Send;\n    // }\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, speechRecognizing,editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetsOrder: true,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    attachmentSettings.shouldCompress, attachmentSettings.shouldSendGrouped, connectionState, getHtml,\n    validateTextLength, checkSlowMode, sendMessage, clearDraft, chatId, resetComposer,\n  ]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n    // if(speechRecognizing){\n    //   recognition.stop();\n    //   setSpeechRecognizing(false);\n    //   return\n    // }\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, getHtml, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleCustomEmojiSelectAttachmentModal = useCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  }, [handleCustomEmojiSelect]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu, isMobile]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  }, [insertTextAndUpdateCursor]);\n\n  const removeSymbol = useCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  }, [getHtml, setHtml]);\n\n  const removeSymbolAttachmentModal = useCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  }, [removeSymbol]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          // recognition.start().then((res:string)=>{\n          //   setHtml(res);\n          // }).catch((e)=>{\n          //   console.error(e)\n          //   // setSpeechRecognizing(false);\n          // });\n          // setSpeechRecognizing(true);\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule, chatId, showAllowedMessageTypesNotification, canSendVoices,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n  const [passwordOpen,setPasswordOpen] = useState(true);\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              (activeVoiceRecording )&& windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {(activeVoiceRecording ) && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {(activeVoiceRecording) && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={ ()=>{\n            // recognition.stop();\n            // setSpeechRecognizing(false)\n            stopRecordingVoice()\n          } }\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', ( activeVoiceRecording) && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState<boolean>();\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [editedMessage, replyingToId, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, getHtml, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './MessageLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MessageLanguageModal = useModuleLoader(Bundles.Extra, 'MessageLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageLanguageModal ? <MessageLanguageModal {...props} /> : undefined;\n};\n\nexport default memo(MessageLanguageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport {getActions, getGlobal, withGlobal} from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { MASK_IMAGE_DISABLED } from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTheme,\n  selectThreadInfo,\n  selectChatMessage,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport MessageLanguageModal from './MessageLanguageModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\nimport Account from \"../../worker/share/Account\";\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isMessageLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isMessageLanguageModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? 450 + ANIMATION_END_DELAY : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n      && hasAudioPlayer\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    if(!Account.getCurrentAccount()?.getSession()){\n      getActions().updateGlobal({\n        authState:\"authorizationStateWaitSignPassword\"\n      })\n    }else{\n      if(getGlobal().msgClientState !== \"connectionStateLogged\"){\n        sendBotCommand({ command: '/start' });\n      }else{\n        getActions().showNotification({\n          message:\"正在登录请稍后再试\"\n        })\n      }\n    }\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n              isMobile={isMobile}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {isMobile\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                <MessageLanguageModal isOpen={isMessageLanguageModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      messageLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds }, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isMessageLanguageModalOpen: Boolean(messageLanguageModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n      ),\n      hasAudioPlayer: Boolean(audioMessage),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch, selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const handleToggleManagement = useCallback(() => {\n    toggleManagement();\n  }, [toggleManagement]);\n\n  const handleToggleStatistics = useCallback(() => {\n    toggleStatistics();\n  }, [toggleStatistics]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {/* {currentInviteInfo && !currentInviteInfo.isRevoked && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('Edit')} */}\n              {/*     onClick={handleEditInviteClick} */}\n              {/*   > */}\n              {/*     <i className=\"icon-edit\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {/* {canAddContact && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('AddContact')} */}\n              {/*     onClick={handleAddContact} */}\n              {/*   > */}\n              {/*     <i className=\"icon-add-user\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n               {canManage && !isInsideTopic && (\n                 <Button\n                   round\n                   color=\"translucent\"\n                   size=\"smaller\"\n                   ariaLabel={lang('Edit')}\n                   onClick={handleToggleManagement}\n                 >\n                   <i className=\"icon-edit\" />\n                 </Button>\n               )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          {/* <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} /> */}\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport Modal from './Modal';\nimport PasswordMonkey from \"../common/PasswordMonkey\";\nimport PasswordForm from \"../common/PasswordForm\";\nimport {passwordCheck} from \"../../worker/share/utils/helpers\";\nimport InputText from \"./InputText\";\n\ntype OwnProps = {};\n\nlet onConfirm: Function | null = null\n\nexport type PasswordHelperType = undefined | \"showMnemonic\" | \"messageEncryptPassword\"\n\nconst PasswordModal: FC<OwnProps> = ({}: OwnProps) => {\n\n  const [open, setOpen] = useState<boolean>(false);\n  const [showHitInput, setShowHitInput] = useState<boolean>(false);\n  const [passwordHelper, setPasswordHelper] = useState<PasswordHelperType>(undefined);\n  const [validationError, setValidationError] = useState<string>('');\n  const [hint, setHint] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const lang = useLang();\n\n  const handleSubmit = useCallback((password) => {\n    if (!passwordCheck(password)) {\n      setValidationError(lang(\"PasswordTipsCheck\"))\n      return\n    }\n    if (onConfirm) {\n      onConfirm({password, hint});\n      setOpen(false)\n    }\n  }, [hint]);\n\n  useEffect(() => {\n    const evt = (e: Event) => {\n      if (!open) {\n        setOpen(true);\n        // @ts-ignore\n        onConfirm = e.detail.callback;\n        // @ts-ignore\n        setPasswordHelper(e.detail.passwordHelper)\n        // @ts-ignore\n        setHint(e.detail.hint)\n        // @ts-ignore\n        setShowHitInput(!e.detail.hideHitInput);\n      }\n    }\n    document.addEventListener('password', evt);\n    return () => {\n      document.removeEventListener('password', evt);\n    }\n  }, [setHint, setShowHitInput, open])\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  return (\n    <Modal\n      hasCloseButton\n      isOpen={open}\n      onClose={() => {\n        if (onConfirm) {\n          onConfirm({password: \"\", hint: \"\"});\n        }\n        setOpen(false)\n      }}\n      title=\"Password\"\n      className=\"\"\n    >\n      <div className=\"settings-content password-form custom-scroll background\">\n        <div className=\"settings-content-header no-border\">\n          <PasswordMonkey isBig isPasswordVisible={shouldShowPassword}/>\n        </div>\n        <div className=\"pt-0 pb-0 mb-2 background\">\n          {\n            showHitInput &&\n            <InputText\n              id=\"pwd-hint\"\n              type={\"text\"}\n              label={lang(\"PasswordTipsLocalHint\")}\n              onChange={(e) => {\n                setHint(e.target.value)\n              }}\n              value={hint}\n              autoComplete=\"given-name\"\n            />\n          }\n          <PasswordForm\n            error={validationError}\n            hint={(!showHitInput && hint) ? hint : lang(\"PasswordTipsLocalPlaceholder\")}\n            shouldDisablePasswordManager={true}\n            submitLabel={lang('Next')}\n            clearError={handleClearError}\n            isLoading={false}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={true}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n        {\n          passwordHelper === \"messageEncryptPassword\" &&\n          <div className=\"help_text pt-2 pb-4 pr-2\">\n            <ul>\n              <li>{lang(\"PasswordTipsLocalStorage\")}</li>\n              <li>{lang(\"PasswordTipsLocalStorage1\")}</li>\n            </ul>\n          </div>\n        }\n        {\n          passwordHelper === \"showMnemonic\" &&\n          <div className=\"help_text pt-2 pb-4 pr-2\">\n            <ul>\n              <li>{lang(\"密码不会存储服务器,跟账户助记词直接相关，请牢记密码和妥善保管助记词\")}</li>\n            </ul>\n          </div>\n        }\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PasswordModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { fastRaf } from '../../util/schedulers';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\nimport PasswordModal from \"../ui/PasswordModal\";\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isCurrentUserPremium,\n  deleteFolderDialogId,\n  isMasterTab,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      loadDefaultStatusIcons();\n      checkAppVersion();\n      if (isCurrentUserPremium) {\n        loadRecentEmojiStatuses();\n      }\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons,\n    loadDefaultStatusIcons, loadRecentEmojiStatuses, isCurrentUserPremium, isMasterTab,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [animationLevel, forceUpdate, isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useSyncEffect(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [animationLevel, forceUpdate, isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  }, [onTabFocusChange]);\n\n  const handleFocus = useCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  }, [onTabFocusChange, updatePageTitle]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n      <PasswordModal/>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialogId: deleteFolderDialogModal,\n      isMasterTab,\n      requestedDraft,\n    };\n  },\n)(Main));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\nimport {UseLocalDb} from \"../../worker/setting\";\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    if(UseLocalDb){\n      return <div className={styles.help}></div>\n    }\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/environment';\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectTabState, selectUser,\n} from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type {\n  CallSound, ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { getMainUsername } from '../../helpers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestAnimationFrame(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let { inviteLink } = chat.fullInfo!;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload!;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', async (global, actions, payload): Promise<void> => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n"],"names":["closeLocalTextSearch","global","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","activeReactions","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","chat","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","window","open","createMessageHashUrl","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","content","saveDraft","draft","entities","shouldForce","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","hasReached","updateFocusedMessageReached","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","toggleMessageSelectAll","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","activeLanguage","selectRequestedTranslationLanguage","messageLanguageModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","document","querySelectorAll","link","href","replace","setPageTitleInstant","nextTitle","title","setPageTitle","debounce","notificationInterval","force","leftColumnWidth","management","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","updateIsOnline","blurredTabTokens","t","getAllMultitabTokens","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","currentUserId","INACTIVE_MARKER","PAGE_TITLE","round","newUnread","messageList","currentChat","getChatTitle","topics","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","byTabId","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","values","previousGlobal","parse","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","isScreenLocked","invalidAttemptsCount","isMasterTab","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","searchThrottled","throttle","cb","loadRecentStickers","recentStickers","callApi","loadStickers","stickerSetInfo","stickerSet","translate","shortName","set","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","nextOffset","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","i","accessHash","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","count","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","selectIsCurrentUserPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","config","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","byId","buildCollectionByKey","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","searchSharedMedia","offsetId","isBudgetPreload","SHARED_MEDIA_SLICE","topMessageId","users","totalCount","nextOffsetId","newFoundIds","selectCurrentMediaSearch","addChats","addUsers","addChatMessagesById","updateLocalMediaSearchResults","chatListIdsActive","listIds","active","messagesList","chatIds","userIdList","user","selectUser","firstName","toLowerCase","lastName","fullInfo","bio","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","updateGlobalSearchResults","userIds","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","progress","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","ensureIsSuperGroup","invite","editingInvite","update","inviteInfo","adminId","isRevoked","peer","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","updateChat","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","blob","imgToBlob","thumbnailUrl","resizeImage","thumbnail","blobToDataUri","fetchBlob","updateUsers","UseLocalDb","updateLocalUser","currentAccountAddress","loadProfilePhotos","profileId","updateUserWaitToSync","getUserFirstOrLastName","reason","description","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","hasChangedAvatarHash","avatarHash","hasChangedProfilePhoto","profilePhoto","hasChangedFallbackPhoto","fallbackPhoto","hasChangedPersonalPhoto","personalPhoto","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","collator","Intl","Collator","sortedUsers","a","b","compare","isSelf","isUserBot","commonChats","isFullyLoaded","updateUser","concat","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","user1","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","localUsers","globalUsers","emojiStatus","expires","SHOULD_PRE_OPEN","IS_IOS","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","replyingTo","sendAs","getChatBot","replyingToTopId","gameePopups","answerCallbackButton","isGame","showDialog","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","msgClientState","clearWebPagePreview","selectSendAs","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","has","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","isSilent","scheduledAt","selectThreadTopMessageId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","replyToMessageId","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","from","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","currentChatId","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","params","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","options","option","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","startSize","isReversed","activeEmojiInteraction","animatedEffect","random","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","omit","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","updateChatMessage","addMessageReaction","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","addOffset","unreadReactionsCount","unreadReactions","fetchUnreadReactions","markMessagesRead","fromEntries","unread","isGroup","stats","recentTopMessages","msgId","updateStatistics","views","forwards","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","lastReadInboxMessageId","chatUpdate","listType","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","isLocalMessageId","unreadCount","unreadMentionsCount","unreadMentions","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","updateLocalChatFolder","folderIds","updateFolderWaitToSync","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","m","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","draftDate","loadChatJoinRequests","updateTopic","orderedPinnedTopicIds","loadTopicById","loadTopics","ANIMATION_DELAY","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","onTickEnd","isReaction","updateWithLocalMedia","isScheduled","currentMessage","selectScheduledMessage","video","getMessageContent","blobUrl","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","selectThreadByMessage","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","threadUpdate","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","selectListedIds","updateListedIds","addViewportId","updateThreadInfo","messagesCount","firstUnreadId","selectFirstUnreadId","candidateGlobal","newViewportIds","updateSyncMessages","isDelete","updateMessageWaitToSync","updateChatLastMessage","currentLastMessage","topic","selectTopicFromMessage","findLastMessage","listedIds","deleteMessages","newLastMessage","clearMessageTranslation","deleteTopic","threadIdsToUpdate","selectThreadIdFromMessage","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","repliesThreadInfo","isTopicReply","isLocal","selectIsMessageInCurrentMessageList","syncToRemote","getMessageText","scheduledIds","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","messageNew","thread","currentThreadId","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","currentThreadInfo","newThreadInfo","lastReadInboxMessageIdInThread","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","isDeleted","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","transcriptionId","isPending","transcriptions","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","flushStatusUpdatesThrottled","pendingStatusUpdates","setPauseSyncToRemote","pauseSyncToRemote","userBotUpdate","botInfo","chatGptConfig","api_key","localStorage","setItem","updateGlobal","threadsById","lastScrollOffset","lastViewportIds","loadAllChats","shouldReplace","listIds_active","forceOnHeavyAnimation","chat_listIds_active","chat1","replaceChats","includedChatIds","replaceUsers","deleteContact","openPremiumModal","loadFullUser","statusUpdate","targetUser","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","React","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","isSyncing","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","CustomEmojiEffect","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","currentUser","StatusButton","setEmojiStatus","loadCurrentUser","getActions","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","ANIMATION_LEVEL_OPTIONS","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","isCurrentUserPremium","areChatsLoaded","canInstall","LeftMainHeader","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","signOut","syncFromRemote","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","total","isChatArchived","handleLockScreenHotkey","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","hostname","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleClearCache","cacheApi","clear","LANG_CACHE_NAME","ASSET_CACHE_NAME","reload","handleSignOutClick","history","replaceState","split","forceInitApi","authState","handleLoginClick","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","getPromptInstall","CLOUD_MESSAGE_ENABLE","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","classNames","Tab","badgeCount","isBadgeActive","previousActiveTab","tabRef","tabEl","prevTabEl","parentElement","children","contains","platformEl","prevPlatformEl","shiftLeft","offsetLeft","scaleFactor","clientWidth","remove","transform","forceReflow","renderText","SCROLL_DURATION","TabList","tabs","areFolders","activeTab","big","onSwitchTab","containerRef","usePrevious","useHorizontalScroll","container","scrollWidth","offsetWidth","scrollLeft","activeTabElement","childNodes","activeTabOffsetLeft","activeTabOffsetWidth","newLeft","abs","fastSmoothScrollHorizontal","tab","_tab$id","ALL_FOLDER_ID","orderedFolderIds","archived","lastSyncTime","shouldSkipHistoryAnimations","activeChatFolder","isForumPanelOpen","selectIsForumPanelOpen","hasArchivedChats","maxFolders","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","transitionRef","allChatsFolder","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","chatsCount","notificationsCount","handleSwitchTab","index","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","renderCount","LeftSearch","Loading","ContactList","NewChatButton","isShown","onNewPrivateChat","onNewChannel","onNewGroup","createChat","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","ForumPanel","onCloseAnimationEnd","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","leftColumnContent","sessionStorage","getItem","nextSettingsScreen","isChatOpen","chatCreationProgress","isFirstChatFolderActive","LeftColumn","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","setContent_","v","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_MAC_OS","useSyncEffect","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","onScreenSelect","isChannel","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","svg","div","defs","innerHTML","HeaderPinnedMessage","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","closeAudioPlayer","audio","voice","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ChatReportPanel","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","shouldDeleteForAll","isText","getUserFullName","confirmIsDestructive","Checkbox","onCheck","audioChatId","audioMessageId","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","focusedMessage","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","hasReachedFocusedMessage","hasReachedMessage","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","isComments","originChannelId","firstPinnedMessage","MiddleHeader","isReady","pinMessage","openPreviousChat","setReachedFocusedMessage","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isWaitingForPinnedMessageFocus","setWaitingForPinnedMessageFocus","isTablet","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","cycleRestrict","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","isUnpin","handlePinnedMessageClick","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","getMessageKey","HeaderActions","canExpandActions","GROUP_INTERVAL_SECONDS","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","DEBOUNCE","STICKY_TOP","STICKY_TOP_WITH_TOOLS","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Right","Bottom","Left","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","isOwn","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","createElement","font","whiteSpace","opacity","appendChild","textContent","RELOCATED_FOCUS_OFFSET","FOCUS_MARGIN","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ANDROID_KEYBOARD_HIDE_DELAY_MS","SWIPE_ANIMATION_DURATION","QUICK_REACTION_DOUBLE_TAP_DELAY","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","target","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","clientY","getBoundingClientRect","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","DEFAULT_THRESHOLD","worker","initializationDeferred","Deferred","createConnector","Worker","URL","ContextMenuContainer","ActionMessageSuggestedAvatar","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","showVideoOverwrite","loopIndefinitely","withVideo","CropModal","textParts","usersById","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","isChat","senderUser","senderChat","premiumGiftSticker","ActionMessage","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","play","noLoop","nonInteractive","anchor","EmbeddedMessage","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","MessageMeta","outgoingStatus","signature","withReactionOffset","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","AnimatedCounter","formatTime","MessageOutgoingStatus","Sticker","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","INTERACTION_BUNCH_TIME","MS_DIVIDER","TIME_DEFAULT","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","AnimatedEmoji","forceLoadPreview","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","AnimatedCustomEmoji","getCustomEmojiSize","isBig","Video","canAutoLoad","canAutoPlay","uploadProgress","isDownloading","onCancelUpload","videoRef","getMessageVideo","getMessageWebPageVideo","localBlobUrl","isSpoilerShown","hideSpoiler","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","fullMediaData","isPlayerReady","markPlayerReady","getMessageMediaThumbDataUri","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","useMediaTransition","noThumb","thumbRef","useBlurredMediaThumbRef","thumbClassNames","isInline","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","isOwnMessage","isWebPageVideo","calculateVideoDimensions","cancelMessageMediaDownload","isAllowed","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","withAnimation","ProgressSpinner","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","Contact","isRegistered","formatPhoneNumberWithCode","getPercentage","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","Poll","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","WebPage","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","Photo","SafeLink","Invoice","shouldAffectAppendix","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","Skeleton","forceAspectRatio","InvoiceMediaPreview","loadExtendedMedia","refreshExtendedMedia","useInterval","dataUri","VENUE_COLORS","Map","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","scale","SVG_PIN","__html","Location","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","get","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","Game","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","activeDownloadIds","selectActiveDownloadIds","uploadsById","fileUploads","byMessageLocalId","Album","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","getMessageOriginalId","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","RoundVideo","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","shouldPlay","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","InlineButtons","RE_TME_LINK","renderIcon","CommentButton","openComments","recentReplierIds","recentRepliers","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","ReactionAnimatedEmoji","genericEffects","stopActiveReaction","centerIconId","customEmoji","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","ReactionButton","withRecentReactors","recentReactors","recentReaction","Reactions","isOutside","metaChildren","noRecentReactors","getReactionUniqueKey","MessagePhoneCall","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessage","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","areTranslationsEnabled","canTranslate","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTranscriptionError","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","openMessageLanguageModal","replyToTopMessageId","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","detectedLanguage","threshold","promise","args","detectLanguage","useTextLanguage","isTranslationPending","translatedText","requestedLanguageCode","translateMessages","messageTranslation","byLangCode","useMessageTranslation","previousTranslatedText","currentText","currentTranslatedText","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","clientHeight","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useThrottledCallback","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","getMinMediaWidth","postAuthorTitle","metaSafeAuthorWidth","isForAnimation","TEXT_AI_THINKING","DotAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","selectSponsoredMessage","isBot","channel","SponsoredMessage","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","MessageListContent","messageGroups","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","LoadMoreDirection","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","MESSAGE_LIST_SLICE","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","toggleScrollToolsRef","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isServiceNotificationMessage","isTopicTopMessage","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","ContactGreeting","loadGreetingStickers","sendMessage","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","isRestricted","restrictionReason","focusingId","selectFocusedMessageId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","linkedChatId","MessageList","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadMessageViews","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","areMessagesLoaded","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","contentRect","windowHeight","normalHeight","String","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","patchChromiumScroll","resetScroll","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","backgroundColor","ScrollDownButton","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","FloatingActionButtons","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","createObjectURL","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","img","preloadImage","shouldShrink","GIF_MIME_TYPE","compressedBlobUrl","resizedUrl","revokeObjectURL","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","SUPPORTED_AUDIO_CONTENT_TYPES","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","thumbBlobUrl","uniqueId","prepareAttachmentsToSend","attachments","shouldSendCompressed","attach","shouldSendAsFile","shouldSendAsSpoiler","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","encoderPath","MIN_RECORDING_TIME","POLYFILL_OPTIONS","reuseWorker","BLOB_PARAMS","FFT_SIZE","MIN_VOLUME","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","Blob","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","GDOCS_STYLES","BOLD","ITALIC","UNDERLINE","STRIKETHROUGH","SUPERSCRIPT","SUBSCRIPT","ELEMENTS","ANCHOR","parseHtml","html","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","ApiMessageEntityTypes","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","THROTTLE","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","getAttachmentType","attachment","isFrozen","DeleteMessageModal","openTimeout","isFirstTimeActivation","ResponsiveHoverButton","onActivate","buttonProps","_extends","COLOR_REPLACE_PATTERN","AttachBotIcon","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","AttachBotItem","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","bottom","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","AttachMenu","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","BotKeyboardMenu","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","editingId","selectEditingScheduledId","selectEditingId","forwardedMessages","selectEditingMessage","forwardsHaveCaptions","forward","forwardedMessagesCount","ComposerEmbeddedMessage","onClear","setEditingId","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","noWebPage","selectNoWebPage","webPagePreview","WebPagePreview","getHtml","loadWebPagePreview","toggleMessageWebPage","detectLinkDebounced","useDebouncedResolver","linkEntity","entity","getLink","useDerivedSignal","useDerivedState","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","BotMenuButton","textRef","textEl","composerEl","removeProperty","MainButtonState","_ref","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","sendAsId","sendAsPeerIds","adminRights","anonymous","sendAsUser","sendAsChat","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","noVoiceMessages","editingDraft","selectEditingScheduledDraft","selectEditingDraft","editingMessage","selectDraft","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","Composer","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","useSignal","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","canSendGifs","canAttachEmbedLinks","isComposerBlocked","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","speechRecognizing","setSpeechRecognizing","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","useStateRef","isChatAdmin","slowMode","getChatSlowModeOptions","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","selection","getSelection","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","useDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","forceUpdateDraft","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","scopedShatId","scopedThreadId","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","shouldUpdateStickerSetsOrder","shouldGroupMessages","localOnly","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","passwordOpen","setPasswordOpen","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","CustomEmojiTooltip","EmojiTooltip","allowDisabledClick","CustomSendMenu","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","MessageLanguageModal","isImage","kind","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isMessageLanguageModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","MiddleColumn","unpinAllMessages","loadUser","loadChatSettings","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","Account","getSession","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","CUSTOM_BG_CACHE_NAME","Type","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","RightHeader","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","_useCurrentOrPrev","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleDeleteInviteClick","ManagementScreens","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewerAsync","MediaViewer","LIMIT_PER_BATCH","BATCH_INTERVAL","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","DownloadManager","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","searchParams","encodeURIComponent","downloadWindow","GameModal","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","NotificationsAsync","Notifications","DialogsAsync","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","MessageListHistoryHandler","closeChat","MessageHistoryRecord","createLocationHash","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","fill","prevConfettiTime","hideTimeout","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","PasswordModal","setOpen","showHitInput","setShowHitInput","passwordHelper","setPasswordHelper","validationError","setValidationError","setHint","shouldShowPassword","setShouldShowPassword","handleSubmit","passwordCheck","evt","detail","hideHitInput","handleClearError","PasswordMonkey","isPasswordVisible","InputText","PasswordForm","shouldDisablePasswordManager","submitLabel","clearError","shouldResetValue","onChangePasswordVisibility","onSubmit","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","log","loadBundle","isDesktop","langCode","prevLastSyncTime","ignoreCache","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","UnreadCount","passcodeSettings","LockScreen","isLocked","resetInvalidUnlockAttempts","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleSignOutMessage","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","shouldShowSubmit","noRipple","Link","IS_MULTITAB_SUPPORTED","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","prevSrc","joinAudio","connectingAudio","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","allowTalk","leave","connecting","incoming","end","busy","ringing","fetchGroupCall","existingGroupCall","isLoaded","fetchGroupCallParticipants","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","inviteHash","fetchChatByUsername","full","requestMasterAndCallAction","toggleGroupCallPanel","AudioContext","webkitAudioContext","srcObject","silence","createAudioElement","selectChatGroupCall","rejoin","participantId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","mediaDevices","getUserMedia","getVideoTracks","checkMicrophonePermission"],"sourceRoot":""}