{"version":3,"file":"4789.93685fe911c2b5c78a97.js","mappings":"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","sources":["webpack://telegram-t/./src/components/ui/AvatarEditable.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/lib/ptp/protobuf/PTPCommon/PbQrCode.ts"],"sourcesContent":["import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  isForForum?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  isForForum,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl && croppedBlobUrl !== currentAvatarBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, currentAvatarBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n    isForForum && 'rounded-square',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport useDebouncedCallback from \"../../hooks/useDebouncedCallback\";\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n  noReplaceNewlines?: boolean;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n  noReplaceNewlines,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, [value]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    if (!noReplaceNewlines) {\n      const previousSelectionEnd = e.currentTarget.selectionEnd;\n      // TDesktop replaces newlines with spaces as well\n      e.currentTarget.value = e.currentTarget.value.replace(/\\n/g, ' ');\n      e.currentTarget.selectionEnd = previousSelectionEnd;\n    }\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [noReplaceNewlines, onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        rows={3}\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","// DO NOT EDIT\nimport BaseMsg from '../BaseMsg';\nimport type { Pdu } from '../BaseMsg';\nimport type { PbQrCode_Type } from './types';\n\nexport default class PbQrCode extends BaseMsg {\n  public msg?: PbQrCode_Type\n  constructor(msg?: PbQrCode_Type) {\n    super('PTP.Common.PbQrCode', msg);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): PbQrCode_Type {\n    return new PbQrCode().decode(pdu.body());\n  }\n}\n"],"names":["memo","AvatarEditable","title","disabled","isForForum","currentAvatarBlobUrl","onChange","selectedFile","setSelectedFile","useState","croppedBlobUrl","setCroppedBlobUrl","useEffect","handleAvatarCrop","useCallback","croppedImg","undefined","URL","revokeObjectURL","createObjectURL","handleModalClose","labelClassName","buildClassName","React","className","role","tabIndex","type","event","target","files","value","accept","src","alt","CropModal","file","onClose","TextArea","ref","id","label","error","success","readOnly","placeholder","autoComplete","inputMode","maxLength","maxLengthIndicator","onInput","onKeyPress","onKeyDown","onBlur","onPaste","noReplaceNewlines","textareaRef","useRef","lang","useLang","labelText","fullClassName","textarea","current","style","height","scrollHeight","handleChange","e","previousSelectionEnd","currentTarget","selectionEnd","replace","dir","isRtl","rows","htmlFor","PbQrCode","BaseMsg","constructor","msg","super","this","static","pdu","decode","body"],"sourceRoot":""}