{"version":3,"file":"3779.ec7d8f7729bf90ab5ff5.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/WebAppModal.module.scss?73f6","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.module.scss?f702","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/common/QrCode.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/ui/SelectAvatar.module.scss?3384","webpack://telegram-t/./src/components/ui/SelectAvatar.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx"],"sourcesContent":["import type { ApiDimensions, ApiMessage } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media, ${MESSAGE_CONTENT_SELECTOR} .thumbnail`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/environment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isInPictureInPicture, setIsInPictureInPicture] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsInPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      onLeave();\n      setIsInPictureInPicture(false);\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isInPictureInPicture];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useSyncEffect from './useSyncEffect';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser, ApiDimensions,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize, getMessageActionPhoto,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport {photosMap} from \"../../middle/message/Photo\";\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  let previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n\n  if(previewMediaHash && photosMap[previewMediaHash]){\n    previewBlobUrl = photosMap[previewMediaHash];\n  }\n\n  let {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    undefined,\n    delay,\n  );\n\n  if(getMediaHash(true) && photosMap[getMediaHash(true)!]){\n    fullMediaBlobUrl = photosMap[getMediaHash(true)!];\n  }\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto || actionPhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n  }\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    loadProgress,\n    videoSize,\n  };\n};\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {/*{canDeleteForAll && (*/}\n        {/*  <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>*/}\n        {/*    {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}*/}\n        {/*    {!contactName && lang('Conversation.DeleteMessagesForEveryone')}*/}\n        {/*  </Button>*/}\n        {/*)}*/}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport { isUserId } from '../../global/helpers';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto, ApiChat, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  zoomLevelChange: number;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  setZoomLevelChange: (change: number) => void;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  zoomLevelChange,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n  setZoomLevelChange,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const change = zoomLevelChange < 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change - 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const change = zoomLevelChange > 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change + 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleUpdate = useCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  }, [avatarPhoto, avatarOwnerId, selectMedia, updateProfilePhoto, updateChatPhoto]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (!message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'report',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {/*{message?.isForwardingAllowed && !isChatProtected && (*/}\n      {/*  <Button*/}\n      {/*    round*/}\n      {/*    size=\"smaller\"*/}\n      {/*    color=\"translucent-white\"*/}\n      {/*    ariaLabel={lang('Forward')}*/}\n      {/*    onClick={onForward}*/}\n      {/*  >*/}\n      {/*    <i className=\"icon-forward\" />*/}\n      {/*  </Button>*/}\n      {/*)}*/}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useLayoutEffect, useState, useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/environment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreen(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || IS_IOS)) {\n      return;\n    }\n    safeRequestFullscreen(elRef.current);\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n    safeExitFullscreen();\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const video = elRef.current;\n    const listener = () => {\n      const isEnabled = Boolean(prop && document[prop]);\n      setIsFullscreen(isEnabled);\n      // In Firefox fullscreen video controls are not visible by default, so we force them manually\n      video!.controls = isEnabled;\n    };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && !IS_IOS) {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nexport const useFullscreenStatus = () => {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const listener = () => {\n      setIsFullscreen(checkIfFullscreen());\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n    };\n  }, []);\n\n  return isFullscreen;\n};\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n  return '';\n}\n\nexport function checkIfFullscreen() {\n  const fullscreenProp = getBrowserFullscreenElementProp();\n  return Boolean(fullscreenProp && document[fullscreenProp]);\n}\n\nexport function safeRequestFullscreen(video: HTMLVideoElement) {\n  if (video.requestFullscreen) {\n    video.requestFullscreen();\n  } else if (video.webkitRequestFullscreen) {\n    video.webkitRequestFullscreen();\n  } else if (video.webkitEnterFullscreen) {\n    video.webkitEnterFullscreen();\n  } else if (video.mozRequestFullScreen) {\n    video.mozRequestFullScreen();\n  }\n}\n\nexport function safeExitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitCancelFullScreen) {\n    document.webkitCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick, isProtected,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport { captureEvents } from '../../util/captureEvents';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void ;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  const { isMobile } = useAppLayout();\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlaying ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/environment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  areControlsVisible: boolean;\n  shouldCloseOnClick?: boolean;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\nconst MAX_LOOP_DURATION = 30; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n\n  const handleEnterFullscreen = useCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  }, [setMediaViewerHidden]);\n\n  const handleLeaveFullscreen = useCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  }, [setMediaViewerHidden]);\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  }, [isPlaying]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  }, [onClose, shouldCloseOnClick, togglePlayState, isClickDisabled]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if ((e.key === 'Enter' || e.key === ' ') && !isInPictureInPicture) {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const duration = videoRef.current?.duration || 0;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!IS_TOUCH_ENV ? handleVideoMove : undefined}\n      onMouseOut={!IS_TOUCH_ENV ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isGif || duration <= MAX_LOOP_DURATION}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={duration}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectChat, selectChatMessage, selectTabState, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setControlsVisible?: (isVisible: boolean) => void;\n  areControlsVisible: boolean;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    animationLevel,\n    areControlsVisible,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    setControlsVisible,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const isGhostAnimation = animationLevel === 2;\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControls = useCallback((isVisible) => {\n    setControlsVisible?.(isVisible);\n  }, [setControlsVisible]);\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            areControlsVisible={areControlsVisible}\n            toggleControls={toggleControls}\n            isProtected={isProtected}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          areControlsVisible={areControlsVisible}\n          isMediaViewerOpen={isOpen && isActive}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isHidden={IS_TOUCH_ENV ? !areControlsVisible : false}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { AnimationLevel, MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n  zoomLevelChange: number;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  zoomLevelChange,\n  animationLevel,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const isReleasedRef = useRef(false);\n  const [activeMediaId, setActiveMediaId] = useState<number | undefined>(mediaId);\n  const prevZoomLevelChange = usePrevious(zoomLevelChange);\n  const hasZoomChanged = prevZoomLevelChange !== undefined && prevZoomLevelChange !== zoomLevelChange;\n  const forceUpdate = useForceUpdate();\n  const [areControlsVisible, setControlsVisible] = useState(false);\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!areControlsVisible);\n  }, [clickXThreshold, areControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION + 100);\n\n  useEffect(() => {\n    setActiveMediaId(mediaId);\n  }, [mediaId]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaId === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaId, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (animationLevel === 0) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      if (transformRef.current.scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (transformRef.current.scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ):[Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const absX = Math.abs(transformRef.current.x);\n      const absY = Math.abs(transformRef.current.y);\n      const {\n        scale,\n        x,\n        y,\n      } = transformRef.current;\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaId, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        transformRef.current.x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: transformRef.current.x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: transformRef.current?.scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (transformRef.current.scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        const { x, y, scale } = transformRef.current;\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [\n    onClose,\n    setTransform,\n    getMediaId,\n    activeMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    animationLevel,\n    setIsMouseDown,\n    isHidden,\n    isFullscreen,\n  ]);\n\n  useEffect(() => {\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    const { scale } = transformRef.current;\n    const dir = zoomLevelChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [zoomLevelChange, hasZoomChanged, isHidden, isFullscreen]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n  const isMoving = isMouseDown && scale > 1;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {hasPrev && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-windowWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={prevMediaId}\n          />\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n        style={getAnimationStyle(offsetX, offsetY, scale)}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          animationLevel={animationLevel}\n          isActive={isActiveRef.current}\n          setControlsVisible={setControlsVisible}\n          isMoving={isMoving}\n          areControlsVisible={areControlsVisible && scale === 1}\n        />\n      </div>\n      {hasNext && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(windowWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={nextMediaId}\n          />\n        </div>\n      )}\n      {hasPrev && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n  animationLevel: AnimationLevel;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n  animationLevel,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, isMobile, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} animationLevel={animationLevel} withVideo />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} animationLevel={animationLevel} withVideo />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    const { animationLevel } = global.settings.byKey;\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n        animationLevel,\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return { animationLevel };\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n      animationLevel,\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectTabState,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { exitPictureInPictureIfNeeded } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2 && !shouldSkipHistoryAnimations;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [zoomLevelChange, setZoomLevelChange] = useState<number>(1);\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n    // Disable user selection if media viewer is open, to prevent accidental text selection\n    if (IS_TOUCH_ENV) {\n      document.body.classList.toggle('no-selection', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useCallback(() => closeMediaViewer(), [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    handleClose();\n\n    if (!chatId || !mediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: mediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: mediaId });\n    }\n  }, [handleClose, isMobile, chatId, threadId, focusMessage, toggleChatInfo, mediaId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const index = mediaIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mediaIds.length - 1)) {\n      return mediaIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIds]);\n\n  const handleBeforeDelete = useCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  }, [handleClose, mediaId, mediaIds, selectMedia]);\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!].id === (avatarOwner as ApiUser).fullInfo?.fallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n          zoomLevelChange={zoomLevelChange}\n          setZoomLevelChange={setZoomLevelChange}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        zoomLevelChange={zoomLevelChange}\n        isVideo={isVideo}\n        animationLevel={animationLevel}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        isChatWithSelf,\n        canUpdateMedia,\n        animationLevel,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album\n      || origin === MediaViewerOrigin.SuggestedAvatar) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef, useCallback, useState, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\n\nimport { REM } from './helpers/mediaDimensions';\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport renderText from './helpers/renderText';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport Transition from '../ui/Transition';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  chatsById?: Record<string, ApiChat>;\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  chatsById,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useCallback(() => {\n    onSearchChange('');\n  }, [onSearchChange]);\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const topicsResult = forumId ? chatsById?.[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById![forumId!], topic.id)\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [chatsById, forumId, topicSearch]);\n\n  const handleHeaderBackClick = useCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  }, []);\n\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  }, [onSearchChange]);\n\n  const handleTopicSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  }, []);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById?.[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useCallback((e: React.MouseEvent, chatId: string) => {\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  }, [chatsById, loadTopics, onSelectChatOrUser, resetSearch]);\n\n  const handleTopicClick = useCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  }, [forumId, onSelectChatOrUser]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`height: ${CHAT_HEIGHT_PX}px; top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slide-fade\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatOrTopic, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (selectTabState(global).forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n  animationLevel: AnimationLevel;\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, animationLevel }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} animationLevel={animationLevel} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: TabState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n    try_instant_view?: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_open_scan_qr_popup';\n  eventData: {\n    text?: string;\n  };\n} | {\n  eventType: 'web_app_read_text_from_clipboard';\n  eventData: {\n    req_id: string;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready' | 'web_app_close_scan_qr_popup';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'qr_text_received';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'clipboard_text_received';\n  eventData: {\n    req_id: string;\n    data: string | null;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed' | 'scan_qr_popup_closed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      if (data.eventType === 'web_app_read_text_from_clipboard') {\n        const { req_id: requestId } = data.eventData;\n        // eslint-disable-next-line no-null/no-null -- Required by spec\n        window.navigator.clipboard.readText().catch(() => null).then((text) => {\n          sendEvent({\n            eventType: 'clipboard_text_received',\n            eventData: {\n              req_id: requestId,\n              data: text,\n            },\n          });\n        });\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendEvent, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n    showNotification,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(extractCurrentThemeParams().bg_color);\n  const [headerColor, setHeaderColor] = useState(extractCurrentThemeParams().bg_color);\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeCloseModal] = useFlag(false);\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const { isMobile } = useAppLayout();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n\n    if (eventType === 'web_app_open_scan_qr_popup') {\n      showNotification({\n        message: 'Scan QR code is not supported in this client yet',\n      });\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen, showNotification,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp]);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeCloseModal();\n      setPopupParams(undefined);\n      markUnloaded();\n    }\n  }, [closeCloseModal, isOpen, markUnloaded]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeCloseModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !renderingPopupParams.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"U2Fx70_Xnn6MxQAo6lWe\",\"close-icon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"closeIcon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"state-back\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"stateBack\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"loading-spinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"loadingSpinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"hide\":\"F1D5Dm5CPeMaqWVDpYI1\",\"frame\":\"yFzw6MKed5SilXcABSY5\",\"with-button\":\"O33MOdec2Wd4r1fyRziT\",\"withButton\":\"O33MOdec2Wd4r1fyRziT\",\"main-button\":\"PzPxMQlmpQbPhl8MZSty\",\"mainButton\":\"PzPxMQlmpQbPhl8MZSty\",\"visible\":\"yLdyQH6R0YCJqkmkSvBH\",\"hidden\":\"CB9NVLPnqFkzbneBIuMs\",\"main-button-spinner\":\"z8CBciLaVx2qnhkzZO_c\",\"mainButtonSpinner\":\"z8CBciLaVx2qnhkzZO_c\",\"web-app-popup\":\"ift5IHKU51MeA7p6XdKh\",\"webAppPopup\":\"ift5IHKU51MeA7p6XdKh\",\"without-title\":\"Umnydwi7nysRWdcQItB8\",\"withoutTitle\":\"Umnydwi7nysRWdcQItB8\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown', 'emoji'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot } from '../../api/types';\n\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isWriteAllowed, setIsWriteAllowed] = useState(bot?.shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const prevBot = usePrevious(bot);\n  const renderingBot = bot || prevBot;\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed,\n    });\n  }, [confirmAttachBotInstall, isWriteAllowed]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsWriteAllowed(bot.shouldRequestWriteAccess ?? false);\n    }\n  }, [bot]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={renderingBot?.shortName}\n      confirmHandler={handleConfirm}\n    >\n      {lang('WebApp.AddToAttachmentText', renderingBot?.shortName)}\n      {renderingBot?.shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', renderingBot?.shortName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  deleteFolderDialogId?: number;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  deleteFolderDialogId,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder } = getActions();\n  const lang = useLang();\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    deleteChatFolder({ id: deleteFolderDialogId! });\n  }, [closeDeleteChatFolderModal, deleteChatFolder, deleteFolderDialogId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteFolderDialogId !== undefined}\n      onClose={closeDeleteChatFolderModal}\n      text={lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon)} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities(promo.statusText, promo.statusEntities)}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isClosing: premiumModal?.isClosing,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser: premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState, selectUser } from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n  animationLevel,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <Avatar user={renderedUser} size=\"jumbo\" className={styles.avatar} animationLevel={animationLevel} withVideo />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = selectTabState(global).giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? user.fullInfo?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon)} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER, FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER,\n} from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Button from '../../ui/Button';\n\nimport grey from '../../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix?: string;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideRecentHeader?: boolean;\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  isStatusPicker,\n  isCurrentUserPremium,\n  shouldHideRecentHeader,\n  withDefaultTopicIcon,\n  withDefaultStatusIcon,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(ITEMS_PER_ROW_FALLBACK);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const stickerMarginPx = isMobile ? 8 : 16;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useCallback(() => {\n    if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  }, [clearRecentCustomEmoji, clearRecentStickers, closeConfirmModal, isEmoji]);\n\n  const handleAddClick = useCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  }, [isCurrentUserPremium, isPremiumSet, openPremiumModal, stickerSet, toggleStickerSet]);\n\n  const handleDefaultTopicIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const handleDefaultStatusIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useCallback((width: number) => {\n    if (!width) return ITEMS_PER_ROW_FALLBACK;\n\n    return Math.floor(width / (itemSize + margin));\n  }, [itemSize, margin]);\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  }, [calculateItemsPerRow]);\n  useResizeObserver(ref, handleResize);\n\n  useLayoutEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some(({ isFree }) => !isFree);\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow) * (itemSize + margin);\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * (itemSize + margin);\n\n  const shouldHideHeader = isRecent && shouldHideRecentHeader;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix || 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className=\"symbol-set-name\">\n            {isLocked && <i className=\"symbol-set-locked-icon icon-lock-badge\" />}\n            {stickerSet.title}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n          )}\n          {!isRecent && isEmoji && !isInstalled && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.stickers && stickerSet.stickers\n          .slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersection}\n                noAnimate={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","// extracted by mini-css-extract-plugin\nexport default {\"video\":\"h6jE3TEaqlzbs0ro0J2_\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerPreviewHash } from '../../../global/helpers';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBoundsInSharedCanvas from '../../../hooks/useBoundsInSharedCanvas';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noAnimate?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noAnimate,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { hasThumbnail, isLottie, isVideos: isVideo } = stickerSet;\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const bounds = useBoundsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className=\"sticker-set-cover\">\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size || bounds.size}\n            play={isIntersecting && !noAnimate}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={bounds.coords}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={isIntersecting && !noAnimate}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            className={transitionClassNames}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport {\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  loadAndPlay: boolean;\n  isStatusPicker?: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isStatusPicker,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  onCustomEmojiSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith(idPrefix)) {\n        return;\n      }\n\n      const index = Number(id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets: StickerSetOrRecent[] = [];\n\n    if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true as true,\n      });\n    }\n\n    const setIdsToDisplay = unique(addedCustomEmojiIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, defaultStatusIconsId, lang, defaultTopicIconsId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, [idPrefix]);\n\n  const handleEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', 'CustomEmojiPicker', className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            idPrefix={idPrefix}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            isSavedMessages={isSavedMessages}\n            isStatusPicker={isStatusPicker}\n            shouldHideRecentHeader={withDefaultTopicIcons || isStatusPicker}\n            withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n            withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleEmojiSelect}\n            onContextMenuOpen={onContextMenuOpen}\n            onContextMenuClose={onContextMenuClose}\n            onContextMenuClick={onContextMenuClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n    };\n  },\n)(CustomEmojiPicker));\n","import type { RefObject } from 'react';\nimport React, {\n  useCallback, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport CustomEmojiPicker from '../../middle/composer/CustomEmojiPicker';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isStatusPicker\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"XWSv0Pf1SKleWNyX04yO\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  function handleCopy(e: KeyboardEvent) {\n    if (!isActive) {\n      return;\n    }\n\n    e.preventDefault();\n    copySelectedMessages();\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectTabState,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n\n  const handleExitMessageSelectMode = useCallback(() => {\n    exitMessageSelectMode();\n  }, [exitMessageSelectMode]);\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {/*{messageListType !== 'scheduled' && canForwardMessages && (*/}\n            {/*  renderButton(*/}\n            {/*    'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,*/}\n            {/*  )*/}\n            {/*)}*/}\n            {/*{canReportMessages && (*/}\n            {/*  renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)*/}\n            {/*)}*/}\n            {/*{canDownloadMessages && !hasProtectedMessage && (*/}\n            {/*  renderButton('download', lang('lng_media_download'), handleDownload)*/}\n            {/*)}*/}\n            {/*{!hasProtectedMessage && (*/}\n            {/*  renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)*/}\n            {/*)}*/}\n            {/*{canDeleteMessages && (*/}\n            {/*  renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)*/}\n            {/*)}*/}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)}\n\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const handleCloseSeenByModal = useCallback(() => {\n    closeSeenByModal();\n  }, [closeSeenByModal]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\nimport { isSameReaction, getReactionUniqueKey } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n  animationLevel: AnimationLevel;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n  animationLevel,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ userId }) => userId);\n    }\n    return unique(reactors?.reactions.map(({ userId }) => userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (userId) => {\n                const user = usersById[userId];\n                const userReactions = reactors?.reactions.filter((reactor) => reactor.userId === userId);\n                const items: React.ReactNode[] = [];\n                userReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n                  items.push(\n                    <ListItem\n                      key={`${userId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(userId)}\n                    >\n                      <Avatar user={user} size=\"small\" animationLevel={animationLevel} withVideo />\n                      <FullNameTitle peer={user} withEmojiStatus />\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n      animationLevel: global.settings.byKey.animationLevel,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { selectLanguageCode, selectRequestedTranslationLanguage, selectTabState } from '../../global/selectors';\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport ListItem from '../ui/ListItem';\nimport InputText from '../ui/InputText';\n\nimport styles from './MessageLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst MessageLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const { requestMessageTranslation, closeMessageLanguageModal } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useLang();\n\n  const handleSelect = useCallback((toLanguageCode: string) => {\n    if (!chatId || !messageId) return;\n\n    requestMessageTranslation({ chatId, id: messageId, toLanguageCode });\n    closeMessageLanguageModal();\n  }, [chatId, closeMessageLanguageModal, messageId, requestMessageTranslation]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeMessageLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={styles.listItem}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).messageLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId && messageId\n      ? selectRequestedTranslationLanguage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(MessageLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ty4iYfZBkv7TFGwTrzul\",\"list-item\":\"GXEouxz4KmZfOmlymVnB\",\"listItem\":\"GXEouxz4KmZfOmlymVnB\",\"title\":\"MpKdUudmoMIsoFkDFNbJ\",\"subtitle\":\"B0tluyEaLLlMRQ5TZMEP\",\"languages\":\"SxqwP1DiSMFc8Gh_KgfK\"};","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} animationLevel={animationLevel} withVideo />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n      animationLevel,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageIsSpoiler,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n  animationLevel?: AnimationLevel;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  animationLevel,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n        withVideo\n        animationLevel={animationLevel}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n      />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n    // if (!localContactIds) {\n    //   return {\n    //     chatsById,\n    //   };\n    // }\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport {\n  selectChat,\n} from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport ListItem from '../../ui/ListItem';\nimport TopicIcon from '../../common/TopicIcon';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openChat } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      openChat({ id: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      lastSyncTime,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      {/*<TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />*/}\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{lang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            {/*<DropdownMenu*/}\n            {/*  className=\"settings-more-menu\"*/}\n            {/*  trigger={SettingsMenuButton}*/}\n            {/*  positionX=\"right\"*/}\n            {/*>*/}\n            {/*  <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>*/}\n            {/*</DropdownMenu>*/}\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n\n        {/*<ListItem*/}\n        {/*  icon=\"settings\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.General)}*/}\n        {/*>*/}\n        {/*  {lang('Telegram.GeneralSettingsViewController')}*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"unmute\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.Notifications)}*/}\n        {/*>*/}\n        {/*  {lang('Notifications')}*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"data\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.DataStorage)}*/}\n        {/*>*/}\n        {/*  {lang('DataSettings')}*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"lock\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.Privacy)}*/}\n        {/*>*/}\n        {/*  {lang('PrivacySettings')}*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"folder\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.Folders)}*/}\n        {/*>*/}\n        {/*  {lang('Filters')}*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"active-sessions\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}*/}\n        {/*>*/}\n        {/*  {lang('SessionsTitle')}*/}\n        {/*  {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"language\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.Language)}*/}\n        {/*>*/}\n        {/*  {lang('Language')}*/}\n        {/*  <span className=\"settings-item__current-value\">{lang.langName}</span>*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"stickers\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.Stickers)}*/}\n        {/*>*/}\n        {/*  {lang('StickersName')}*/}\n        {/*</ListItem>*/}\n        {/*{canBuyPremium && (*/}\n        {/*  <ListItem*/}\n        {/*    leftElement={<PremiumIcon withGradient big />}*/}\n        {/*    className=\"settings-main-menu-premium\"*/}\n        {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*    onClick={() => openPremiumModal()}*/}\n        {/*  >*/}\n        {/*    {lang('TelegramPremium')}*/}\n        {/*  </ListItem>*/}\n        {/*)}*/}\n        {/*  <ListItem*/}\n        {/*    leftElement={<PremiumIcon withGradient big />}*/}\n        {/*    className=\"settings-main-menu-premium\"*/}\n        {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*    onClick={() => openPremiumModal()}*/}\n        {/*  >*/}\n        {/*    {lang('TelegramPremium')}*/}\n        {/*  </ListItem>*/}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number | string) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number | string;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    requestAnimationFrame(() => {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n\n      onDragEnd();\n    });\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      state.isDragging && `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.isDragging, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUsername } from '../../api/types';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport { isBetween } from '../../util/math';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { ChangeEvent } from 'react';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectTabState, selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    // if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        {/*<div className=\"settings-item\">*/}\n        {/*  <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>*/}\n\n        {/*  <UsernameInput*/}\n        {/*    currentUsername={currentUsername}*/}\n        {/*    isLoading={isLoading}*/}\n        {/*    isUsernameAvailable={isUsernameAvailable}*/}\n        {/*    checkedUsername={checkedUsername}*/}\n        {/*    onChange={handleUsernameChange}*/}\n        {/*  />*/}\n\n        {/*  {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}*/}\n        {/*  <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>*/}\n        {/*    {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}*/}\n        {/*  </p>*/}\n        {/*  {editableUsername && (*/}\n        {/*    <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>*/}\n        {/*      {lang('lng_username_link')}<br />*/}\n        {/*      <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>*/}\n        {/*    </p>*/}\n        {/*  )}*/}\n        {/*</div>*/}\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { isBetween } from '../../../../util/math';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">{folder.subtitle}</span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  isRemoved?: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId!, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder as ApiChatFolder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div className=\"picker-list-divider\" />\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type {FC} from '../../lib/teact/teact';\nimport React, {useCallback, useEffect, useRef,} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useAsync from '../../hooks/useAsync';\n\nimport Loading from '../ui/Loading';\n\nimport blankUrl from '../../assets/blank.png';\nimport Button from \"../ui/Button\";\n\ntype OwnProps ={ content?:string,tips?:string};\n\nconst DATA_PREFIX = 'wai://';\nconst QR_SIZE = 280;\n\nlet qrCodeStylingPromise: Promise<typeof import('qr-code-styling')>;\n\nfunction ensureQrCodeStyling() {\n  if (!qrCodeStylingPromise) {\n    qrCodeStylingPromise = import('qr-code-styling');\n  }\n  return qrCodeStylingPromise;\n}\n\nconst QrCode: FC<OwnProps> = ({content,tips}) => {\n\n  // @ts-ignore\n  const qrCodeRef = useRef<HTMLDivElement>(null);\n  const [isQrMounted, markQrMounted, unmarkQrMounted] = useFlag();\n\n  const { result: qrCode } = useAsync(async () => {\n    const QrCodeStyling = (await ensureQrCodeStyling()).default;\n    return new QrCodeStyling({\n      width: QR_SIZE,\n      height: QR_SIZE,\n      // image: blankUrl,\n      margin: 10,\n      type: 'svg',\n      dotsOptions: {\n        type: 'rounded',\n      },\n      cornersSquareOptions: {\n        type: 'extra-rounded',\n      },\n      imageOptions: {\n        imageSize: 0.4,\n        margin: 8,\n      },\n      qrOptions: {\n        errorCorrectionLevel: 'M',\n      },\n    });\n  }, []);\n\n  const transitionClassNames = useMediaTransition(isQrMounted);\n\n  useEffect(() => {\n    if (!qrCode) {\n      return () => {\n        unmarkQrMounted();\n      };\n    }\n\n    const container = qrCodeRef.current!;\n    const data = `${DATA_PREFIX}${content}`;\n    qrCode.update({\n      data,\n    });\n\n    if (!isQrMounted) {\n      qrCode.append(container);\n      markQrMounted();\n    }\n    return undefined;\n  }, [content,isQrMounted, markQrMounted, unmarkQrMounted, qrCode]);\n  const onDownload = useCallback(()=>{\n    if(qrCode){\n      qrCode.download()\n    }\n  },[qrCode])\n  return (\n    <div id=\"auth-qr-form\" className=\"custom-scroll\">\n      <div className=\"qr-outer\">\n        <div\n          className={buildClassName('qr-inner', transitionClassNames)}\n          key=\"qr-inner\"\n        >\n          <div\n            key=\"qr-container\"\n            className=\"qr-container\"\n            ref={qrCodeRef}\n            style={`width: ${QR_SIZE}px; height: ${QR_SIZE}px`}\n          />\n        </div>\n        {!isQrMounted && <div className=\"qr-loading\"><Loading /></div>}\n      </div>\n      <div className={'pt-2'} style={\"text-align:center\"}>{tips}</div>\n\n      <Button isText disabled={!isQrMounted} onClick={onDownload}>下载</Button>\n    </div>\n  );\n};\n\nexport default QrCode;\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {ApiPrivacySettings} from '../../../types';\nimport {SettingsScreens} from '../../../types';\n\nimport {selectIsCurrentUserPremium} from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from \"../../ui/Modal\";\nimport Account from \"../../../worker/share/Account\";\nimport Mnemonic from \"../../../lib/ptp/wallet/Mnemonic\";\nimport QrCode from \"../../common/QrCode\";\nimport {getPasswordFromEvent} from \"../../../worker/share/utils/utils\";\nimport {hashSha256} from \"../../../worker/share/utils/helpers\";\nimport {aesEncrypt} from \"../../../util/passcode\";\nimport {PbQrCode} from \"../../../lib/ptp/protobuf/PTPCommon\";\nimport {QrCodeType} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\n\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  canDisplayChatInTitle?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  canDisplayChatInTitle,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n    setSettingOption,\n    updatePageTitle,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n    updatePageTitle();\n  }, []);\n  const [showModal,setShowModal] = useState(false);\n  const [mnemonic,setMnemonic] = useState(\"\");\n  const [mnemonicEncrypt,setMnemonicEncrypt] = useState(\"\");\n  const onShowMnemonic = useCallback(async ()=>{\n    const {password} = await getPasswordFromEvent(undefined,true)\n    if(!password){\n      return\n    }\n    const account = Account.getCurrentAccount();\n    const res = await account?.verifyPwd(password);\n    if(!res){\n      return showNotification({message:\"密码不正确\"})\n    }\n    setShowModal(true);\n    const entropy = await Account.getCurrentAccount()!.getEntropy();\n    const m = Mnemonic.fromEntropy(entropy);\n    const words = m.getWords();\n    const e = await aesEncrypt(words,Buffer.from(hashSha256(password),'hex'))\n    setMnemonicEncrypt(Buffer.from(new PbQrCode({\n      type:QrCodeType.QrCodeType_MNEMONIC,\n      data:Buffer.from(e)\n    }).pack().getPbData()).toString(\"hex\"))\n    setMnemonic(words);\n  },[setShowModal])\n\n  const onCloseMoal = useCallback(async ()=>{\n    setShowModal(false);\n    setMnemonic(\"\");\n  },[setShowModal])\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <Modal title={\"助记词\"} isOpen={showModal} hasCloseButton={true} onClose={()=>setShowModal(false)}>\n        <QrCode content={mnemonicEncrypt} tips={mnemonic} />\n      </Modal>\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"key\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onShowMnemonic()}\n        >\n          助记词\n        </ListItem>\n      </div>\n\n      {/*<div className=\"settings-item pt-3\">*/}\n      {/*  <ListItem*/}\n      {/*    icon=\"delete-user\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}*/}\n      {/*  >*/}\n      {/*    {lang('BlockedUsers')}*/}\n      {/*    <span className=\"settings-item__current-value\">{blockedCount || ''}</span>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    icon=\"key\"*/}\n      {/*    narrow*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(*/}\n      {/*      hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,*/}\n      {/*    )}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('Passcode')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    icon=\"lock\"*/}\n      {/*    narrow*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(*/}\n      {/*      hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,*/}\n      {/*    )}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('TwoStepVerification')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  {webAuthCount > 0 && (*/}\n      {/*    <ListItem*/}\n      {/*      icon=\"web\"*/}\n      {/*      // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*      onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}*/}\n      {/*    >*/}\n      {/*      {lang('PrivacySettings.WebSessions')}*/}\n      {/*      <span className=\"settings-item__current-value\">{webAuthCount}</span>*/}\n      {/*    </ListItem>*/}\n      {/*  )}*/}\n      {/*</div>*/}\n\n      {/*<div className=\"settings-item\">*/}\n      {/*  <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>*/}\n\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyPhoneNumber)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('LastSeenTitle')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyLastSeen)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyProfilePhoto)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('WhoCanCallMe')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyPhoneCall)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('PrivacyP2P')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyPhoneP2P)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyForwarding)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    disabled={!isCurrentUserPremium}*/}\n      {/*    allowDisabledClick*/}\n      {/*    rightElement={!isCurrentUserPremium && <i className=\"icon-lock-badge settings-icon-locked\" />}*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    onClick={handleVoiceMessagesClick}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('PrivacyVoiceMessages')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyVoiceMessages)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('WhoCanAddMe')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyGroupChats)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*</div>*/}\n\n      {/*{canDisplayAutoarchiveSetting && (*/}\n      {/*  <div className=\"settings-item\">*/}\n      {/*    <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>*/}\n      {/*      {lang('NewChatsFromNonContacts')}*/}\n      {/*    </h4>*/}\n      {/*    <Checkbox*/}\n      {/*      label={lang('ArchiveAndMute')}*/}\n      {/*      subLabel={lang('ArchiveAndMuteInfo')}*/}\n      {/*      checked={Boolean(shouldArchiveAndMuteNewNonContact)}*/}\n      {/*      onCheck={handleArchiveAndMuteChange}*/}\n      {/*    />*/}\n      {/*  </div>*/}\n      {/*)}*/}\n\n      {/*<div className=\"settings-item\">*/}\n      {/*  <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>*/}\n      {/*    {lang('lng_settings_window_system')}*/}\n      {/*  </h4>*/}\n      {/*  <Checkbox*/}\n      {/*    label={lang('lng_settings_title_chat_name')}*/}\n      {/*    checked={Boolean(canDisplayChatInTitle)}*/}\n      {/*    onCheck={handleChatInTitleChange}*/}\n      {/*  />*/}\n      {/*</div>*/}\n\n      {/*{canChangeSensitive && (*/}\n      {/*  <div className=\"settings-item\">*/}\n      {/*    <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>*/}\n      {/*      {lang('lng_settings_sensitive_title')}*/}\n      {/*    </h4>*/}\n      {/*    <Checkbox*/}\n      {/*      label={lang('lng_settings_sensitive_disable_filtering')}*/}\n      {/*      subLabel={lang('lng_settings_sensitive_about')}*/}\n      {/*      checked={Boolean(isSensitiveEnabled)}*/}\n      {/*      disabled={!canChangeSensitive}*/}\n      {/*      onCheck={handleUpdateContentSettings}*/}\n      {/*    />*/}\n      {/*  </div>*/}\n      {/*)}*/}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          canDisplayChatInTitle,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n      canDisplayChatInTitle,\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { unique } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  lastSyncTime?: number;\n} & Pick<ISettings, 'languages' | 'language' | 'canTranslate' | 'doNotTranslate'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  languages,\n  language,\n  canTranslate,\n  doNotTranslate,\n  lastSyncTime,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && !languages?.length) {\n      loadLanguages();\n    }\n  }, [languages, lastSyncTime, loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption, loadAttachBots]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  const handleShouldTranslateChange = useCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  }, [setSettingOption]);\n\n  const doNotTranslateText = useMemo(() => {\n    const allDoNotTranslateLanguages = unique([...doNotTranslate, language]);\n    // Do not translate current language\n    if (allDoNotTranslateLanguages.length === 1) {\n      if (!languages) {\n        return lang('Loading');\n      }\n      return languages.find(({ langCode }) => langCode === language)?.nativeName;\n    }\n\n    return lang('Languages', allDoNotTranslateLanguages.length);\n  }, [doNotTranslate, lang, language, languages]);\n\n  const handleDoNotSelectOpen = useCallback(() => {\n    onScreenSelect(SettingsScreens.DoNotTranslate);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('ShowTranslateButton')}\n          checked={canTranslate}\n          onCheck={handleShouldTranslateChange}\n        />\n        {canTranslate && (\n          <ListItem\n            onClick={handleDoNotSelectOpen}\n          >\n            {lang('DoNotTranslate')}\n            <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n          </ListItem>\n        )}\n        <p className=\"settings-item-description mb-0 mt-1\">\n          {lang('lng_translate_settings_about')}\n        </p>\n      </div>\n      <div className=\"settings-item\">\n        {options ? (\n          <RadioGroup\n            name=\"language-settings\"\n            options={options}\n            selected={selectedLanguage}\n            loadingOption={isLoading ? selectedLanguage : undefined}\n            onChange={handleChange}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, languages, canTranslate, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      languages,\n      language,\n      canTranslate,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"fb5F16dNcZnOl5zZNuRC\"};","import type { ChangeEvent, RefObject } from 'react';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport CropModal from './CropModal';\n\nimport styles from './SelectAvatar.module.scss';\n\ntype OwnProps = {\n  onChange: (file: File) => void;\n  inputRef: RefObject<HTMLInputElement>;\n};\n\nconst SelectAvatar: FC<OwnProps> = ({\n  onChange,\n  inputRef,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n  }, [onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  return (\n    <>\n      <input\n        type=\"file\"\n        onChange={handleSelectFile}\n        accept=\"image/png, image/jpeg\"\n        ref={inputRef}\n        className={styles.input}\n      />\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </>\n  );\n};\n\nexport default memo(SelectAvatar);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUser,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const fallbackPhoto = currentUser.fullInfo?.fallbackPhoto;\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!currentUser.fullInfo) {\n      loadFullUser({ userId: currentUser.id });\n    }\n  }, [currentUser.fullInfo, currentUser.id, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: fallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, fallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(fallbackPhoto ? 'Privacy.ProfilePhoto.UpdatePublicPhoto' : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {fallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={fallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(fallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"pqiopoENn7dO3E8DQI3e\",\"fallbackPhoto\":\"pqiopoENn7dO3E8DQI3e\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getPrivacyKey } from './helpers/privacy';\nimport { selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n    currentUser: ApiUser;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  currentUser,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n\n      {screen === SettingsScreens.PrivacyProfilePhoto && exceptionLists.shouldShowAllowed && (\n        <SettingsPrivacyPublicProfilePhoto currentUser={currentUser} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    const currentUser = selectUser(global, global.currentUserId!)!;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {\n        currentUser,\n      };\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n      currentUser,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  animationLevel,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar className={styles.avatar} user={renderingBot} size=\"large\" animationLevel={animationLevel} withVideo />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n  return {\n    session,\n    bot,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" animationLevel={animationLevel} withVideo />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, contactId) => {\n      const isPrivate = isUserId(contactId);\n      const user = isPrivate ? usersByIds[contactId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[contactId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram WebZ.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram WebZ and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noAnimate?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noAnimate,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noAnimate={noAnimate}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noAnimate={noAnimate}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' |\n    'shouldLoopStickers'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  availableReactions,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n)(SettingsCustomEmoji));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"obOZMv8VwZgTltdIBhFA\",\"item\":\"lDWs17bpqtGWDX0EJr0y\",\"checkbox\":\"BShBwPkgjleuDsjyfnNk\",\"languages\":\"whcbPSSJLGdGCaY66qfR\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ISettings } from '../../../types';\nimport type { IRadioOption } from '../../ui/CheckboxGroup';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport { partition, unique } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'language' | 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  language,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n  const [displayedOptions, setDisplayedOptions] = useState<IRadioOption[]>([]);\n  const [search, setSearch] = useState('');\n\n  const options: IRadioOption[] = useMemo(() => {\n    return SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n      disabled: langCode === language,\n    }));\n  }, [language]);\n\n  const allSelected = useMemo(() => {\n    return unique([...doNotTranslate, language]);\n  }, [doNotTranslate, language]);\n\n  useEffect(() => {\n    if (!isActive) setSearch('');\n  }, [isActive]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (prevIsActive === isActive) return;\n    if (isActive && displayedOptions.length) return;\n\n    const [selected, unselected] = partition(options, (option) => allSelected.includes(option.value));\n    const current = selected.find((option) => option.value === language);\n    const selectedFiltered = selected.filter((option) => option.value !== language);\n\n    setDisplayedOptions([current!, ...selectedFiltered, ...unselected]);\n  }, [isActive, allSelected, displayedOptions.length, language, options]);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newDoNotTranslate: string[];\n    if (checked) {\n      newDoNotTranslate = unique([...doNotTranslate, value]);\n    } else {\n      newDoNotTranslate = doNotTranslate.filter((v) => v !== value);\n    }\n\n    setSettingOption({\n      doNotTranslate: newDoNotTranslate,\n    });\n  }, [doNotTranslate, setSettingOption]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const filteredDisplayedOptions = useMemo(() => {\n    if (!search.trim()) {\n      return displayedOptions;\n    }\n\n    return displayedOptions.filter((option) => (\n      option.label.toLowerCase().includes(search.toLowerCase())\n      || option.subLabel?.toLowerCase().includes(search.toLowerCase())\n      || option.value.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [displayedOptions, search]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content custom-scroll')}>\n      <div className={buildClassName(styles.item, 'settings-item')}>\n        <InputText\n          key=\"search\"\n          value={search}\n          onChange={handleSearch}\n          placeholder={lang('Search')}\n          teactExperimentControlled\n        />\n        <div className={buildClassName(styles.languages, 'radio-group custom-scroll')}>\n          {filteredDisplayedOptions.map((option) => (\n            <Checkbox\n              className={styles.checkbox}\n              label={option.label}\n              subLabel={option.subLabel}\n              checked={allSelected.includes(option.value)}\n              value={option.value}\n              disabled={option.disabled}\n              key={option.value}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      language,\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsExperimental: FC<OwnProps> = ({\n  isActive,\n  onReset,\n}) => {\n  const { requestConfetti } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsExperimental);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsExperimental from './SettingsExperimental';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    if (forceReturnToChatList === true) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || screen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!isMobile}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  onReset,\n  onTopicSearch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  }, [updateArchiveSettings]);\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelOpen && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <ChatList\n        folderType=\"archived\"\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        foldersDispatch={foldersDispatch}\n        archiveSettings={archiveSettings}\n      />\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  chosen?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction,\n  previewIndex,\n  isReady,\n  chosen,\n  onToggleReaction,\n}) => {\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderStatic = !isReady || !isAnimationLoaded;\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n\n  function handleClick() {\n    onToggleReaction(reaction.reaction);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact', chosen && 'chosen')}\n      onClick={handleClick}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn('static')}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiReaction, ApiReactionCount,\n} from '../../../api/types';\n\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { isSameReaction, canSendReaction, getReactionUniqueKey } from '../../../global/helpers';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: ApiChatReactions;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  currentReactions?: ApiReactionCount[];\n  maxUniqueReactions?: number;\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  currentReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isReady,\n  onToggleReaction,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  useHorizontalScroll(itemsScrollRef);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY && e.cancelable) {\n      e.preventDefault();\n    }\n  };\n\n  const reactionsToRender = useMemo(() => {\n    return availableReactions?.map((availableReaction) => {\n      if (availableReaction.isInactive) return undefined;\n      if (!isPrivate && (!enabledReactions || !canSendReaction(availableReaction.reaction, enabledReactions))) {\n        return undefined;\n      }\n      if (maxUniqueReactions && currentReactions && currentReactions.length >= maxUniqueReactions\n        && !currentReactions.some(({ reaction }) => isSameReaction(reaction, availableReaction.reaction))) {\n        return undefined;\n      }\n      return availableReaction;\n    }) || [];\n  }, [availableReactions, currentReactions, enabledReactions, isPrivate, maxUniqueReactions]);\n\n  const userReactionIndexes = useMemo(() => {\n    const chosenReactions = currentReactions?.filter(({ chosenOrder }) => chosenOrder !== undefined) || [];\n    return new Set(chosenReactions.map(({ reaction }) => (\n      reactionsToRender.findIndex((r) => r && isSameReaction(r.reaction, reaction))\n    )));\n  }, [currentReactions, reactionsToRender]);\n\n  if (!reactionsToRender.length) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {reactionsToRender.map((reaction, i) => {\n            if (!reaction) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={getReactionUniqueKey(reaction.reaction)}\n                previewIndex={i}\n                isReady={isReady}\n                onToggleReaction={onToggleReaction}\n                reaction={reaction}\n                chosen={userReactionIndexes.has(i)}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction,\n  ApiChatReactions,\n  ApiMessage,\n  ApiReaction,\n  ApiSponsoredMessage,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  onReply?: () => void;\n  onOpenThread?: VoidFunction;\n  onEdit?: () => void;\n  onPin?: () => void;\n  onUnpin?: () => void;\n  onForward?: () => void;\n  onDelete?: () => void;\n  onReport?: () => void;\n  onFaveSticker?: () => void;\n  onUnfaveSticker?: () => void;\n  onSelect?: () => void;\n  onSend?: () => void;\n  onReschedule?: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onCancelVote?: () => void;\n  onClosePoll?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onAboutAds?: () => void;\n  onSponsoredHide?: () => void;\n  onTranslate?: () => void;\n  onShowOriginal?: () => void;\n  onSelectLanguage?: () => void;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition__slide--active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n      || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [isMobile, withReactions]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {/* {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>} */}\n        {/* {canReschedule && ( */}\n        {/*   <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem> */}\n        {/* )} */}\n        {/* {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}*/}\n        {/* {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (*/}\n        {/*   <MenuItem icon=\"replies\" onClick={onOpenThread}>*/}\n        {/*     {lang('Conversation.ContextViewReplies', repliesThreadInfo!.messagesCount, 'i')}*/}\n        {/*   </MenuItem>*/}\n        {/* )}*/}\n         {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {/* {canFaveSticker && ( */}\n        {/*   <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem> */}\n        {/* )} */}\n        {/* {canUnfaveSticker && ( */}\n        {/*   <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem> */}\n        {/* )} */}\n        {/* {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}*/}\n        {/* {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>} */}\n        {/* {canSelectLanguage && ( */}\n        {/*   <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem> */}\n        {/* )} */}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {/* {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>} */}\n        {/* {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>} */}\n        {/* {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>} */}\n        {/* {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>} */}\n        {/* {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>} */}\n         {canDownload && (\n           <MenuItem icon=\"download\" onClick={onDownload}>\n             {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n           </MenuItem>\n         )}\n         {/*{canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}*/}\n         {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {/* {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>} */}\n        {/* {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && ( */}\n        {/*   <MenuItem */}\n        {/*     className=\"MessageContextMenu--seen-by\" */}\n        {/*     icon={canShowReactionsCount ? 'heart-outline' : 'group'} */}\n        {/*     onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy} */}\n        {/*     disabled={!canShowReactionsCount && !message.seenByUserIds?.length} */}\n        {/*   > */}\n        {/*     <span className=\"MessageContextMenu--seen-by-label\"> */}\n        {/*       {canShowReactionsCount && message.reactors?.count ? ( */}\n        {/*         canShowSeenBy && message.seenByUserIds?.length */}\n        {/*           ? lang( */}\n        {/*             'Chat.OutgoingContextMixedReactionCount', */}\n        {/*             [message.reactors.count, message.seenByUserIds.length], */}\n        {/*           ) */}\n        {/*           : lang('Chat.ContextReactionCount', message.reactors.count, 'i') */}\n        {/*       ) : ( */}\n        {/*         message.seenByUserIds?.length === 1 && seenByRecentUsers */}\n        {/*           ? renderText(getUserFullName(seenByRecentUsers[0])!) */}\n        {/*           : (message.seenByUserIds?.length */}\n        {/*             ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i') */}\n        {/*             : lang('Conversation.ContextMenuNoViews') */}\n        {/*           ) */}\n        {/*       )} */}\n        {/*     </span> */}\n        {/*     <div className=\"avatars\"> */}\n        {/*       {seenByRecentUsers?.map((user) => ( */}\n        {/*         <Avatar */}\n        {/*           size=\"micro\" */}\n        {/*           user={user} */}\n        {/*         /> */}\n        {/*       ))} */}\n        {/*     </div> */}\n        {/*   </MenuItem> */}\n        {/* )} */}\n         {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {/* {hasCustomEmoji && ( */}\n        {/*   <> */}\n        {/*     <MenuSeparator /> */}\n        {/*     {!customEmojiSets && ( */}\n        {/*       <> */}\n        {/*         <Skeleton inline className=\"menu-loading-row\" /> */}\n        {/*         <Skeleton inline className=\"menu-loading-row\" /> */}\n        {/*       </> */}\n        {/*     )} */}\n        {/*     {customEmojiSets && customEmojiSets.length === 1 && ( */}\n        {/*       <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\"> */}\n        {/*         {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])} */}\n        {/*       </MenuItem> */}\n        {/*     )} */}\n        {/*     {customEmojiSets && customEmojiSets.length > 1 && ( */}\n        {/*       <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\"> */}\n        {/*         {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])} */}\n        {/*       </MenuItem> */}\n        {/*     )} */}\n        {/*   </> */}\n        {/* )} */}\n         {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {/* {isSponsoredMessage && onSponsoredHide && ( */}\n        {/*   <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem> */}\n        {/* )} */}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet, ApiChatReactions, ApiReaction, ApiThreadInfo,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectRequestedTranslationLanguage,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo, getChatMessageLink,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  repliesThreadInfo?: ApiThreadInfo;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  threadId?: number;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  threadId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    openChat,\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(({ userId }) => usersById[userId]));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, 3);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, openChat]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleRescheduleMessage = useCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  }, [message.chatId, message.id, onClose, rescheduleMessage]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  }, [handleRescheduleMessage, requestCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(getChatMessageLink(message.chatId, chatUsername, threadId, message.id));\n    closeMenu();\n  }, [chatUsername, closeMenu, message, threadId]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleToggleReaction = useCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction,\n    });\n    closeMenu();\n  }, [closeMenu, message, toggleReaction]);\n\n  const handleTranslate = useCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message, requestMessageTranslation]);\n\n  const handleShowOriginal = useCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message, showOriginalMessage]);\n\n  const handleSelectLanguage = useCallback(() => {\n    openMessageLanguageModal({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, openMessageLanguageModal]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        noReplies={noReplies}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isOwn = isOwnMessage(message);\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n\n    const { canTranslate: isTranslationEnabled, language, doNotTranslate } = global.settings.byKey;\n\n    const canTranslateLanguage = !detectedLanguage\n      || (!doNotTranslate.includes(detectedLanguage) && language !== detectedLanguage);\n    const canTranslate = IS_TRANSLATION_SUPPORTED && isTranslationEnabled && message.content.text\n      && canTranslateLanguage && !isLocal && !isScheduled && !isAction && !hasTranslation && !message.emojiOnlyCount;\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      threadId,\n      canTranslate,\n      canShowOriginal: hasTranslation,\n      canSelectLanguage: hasTranslation,\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet, selectThreadInfo,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder: isAdded });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            <div className=\"shared-canvas-container\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId, isComments) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: customEmojiModalRef });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title=\"Sets of used emoji\"\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef}>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat,\n  selectNotifySettings,\n  selectNotifyExceptions,\n  selectUser,\n  selectChatBot,\n  selectIsPremiumPurchaseBlocked,\n  selectCurrentMessageList, selectTabState,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getCanDeleteChat,\n  selectIsChatMuted,\n  getCanAddContact,\n  isChatChannel,\n  isChatGroup,\n  getCanManageTopic,\n  isUserRightBanned,\n  getHasAdminRight,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isChatInfoShown,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleViewGroupInfo = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    closeMenu();\n  }, [chatId, closeMenu, openChatWithInfo, threadId]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleCreateTopicClick = useCallback(() => {\n    openCreateTopicPanel({ chatId });\n    closeMenu();\n  }, [openCreateTopicPanel, chatId, closeMenu]);\n\n  const handleEditTopicClick = useCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    closeMenu();\n  }, [openEditTopicPanel, chatId, threadId, closeMenu]);\n\n  const handleViewAsTopicsClick = useCallback(() => {\n    openChat({ id: undefined });\n    closeMenu();\n  }, [closeMenu, openChat]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, requestMasterAndJoinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  const handleOpenAsMessages = useCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  }, [closeMenu, onAsMessagesClick]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && user?.fullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentChat,\n  selectTabState,\n  selectCurrentMessageList,\n} from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: number;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0], threadId });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds, threadId]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, foundIds, focusedIndex, threadId]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, foundIds, focusedIndex, threadId]);\n\n  const handleCloseLocalTextSearch = useCallback(() => {\n    closeLocalTextSearch();\n  }, [closeLocalTextSearch]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  }, [threshold]);\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZqafRENXro3B4A2UTp9s\",\"preview\":\"FfTpBGrctDEiFLXC4aqP\",\"duration\":\"Igo3Vsou5areTsmh2Ng3\",\"single\":\"ZJNnn8HUzq8cC3WwTzY0\",\"no-grouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"noGrouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"file\":\"QAlzNLWBYdWR4UMMaiGm\",\"overlay\":\"YOoQRXIFINVsu3FFIKR0\",\"action-item\":\"y5JLmIFtCzK05l40rdHJ\",\"actionItem\":\"y5JLmIFtCzK05l40rdHJ\",\"delete-file\":\"Qqp72_dWGSui9ORCN3MT\",\"deleteFile\":\"Qqp72_dWGSui9ORCN3MT\"};","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useCallback(() => {\n    onToggleSpoiler?.(index);\n  }, [index, onToggleSpoiler]);\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <i\n            className={buildClassName(\n              attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n              styles.actionItem,\n            )}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n            <i className={buildClassName('icon-delete', styles.actionItem)} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VncEpkgqABgA8MUCarxh\",\"mobile\":\"EBYYWwiG6Uj4Aqt4DKGy\",\"symbolMenuOpen\":\"eVLBe8iLKwjR6B31YwJj\",\"header-border\":\"u08mL9ikB7S0oRZKxvsA\",\"headerBorder\":\"u08mL9ikB7S0oRZKxvsA\",\"attachments\":\"d_uMaJ26HlkCfSn5XiQp\",\"attachments-bottom-padding\":\"DUGHCuTKi7H5d_1_vYqj\",\"attachmentsBottomPadding\":\"DUGHCuTKi7H5d_1_vYqj\",\"caption-wrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"captionWrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"caption-top-border\":\"UrYInfws7roRktEiMxvT\",\"captionTopBorder\":\"UrYInfws7roRktEiMxvT\",\"caption\":\"c4dyk1Emgpla8BvDJMAz\",\"drop-target\":\"iWmxxlUXOjTzbvJzWF8g\",\"dropTarget\":\"iWmxxlUXOjTzbvJzWF8g\",\"hovered\":\"B5wzgwCPupbnO1XB5Rwc\",\"send-wrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"sendWrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"send\":\"eFD46lVH5GCILXEOx9BO\",\"is-pointer-env\":\"Os76p3jpmhB2IWYxXigi\",\"isPointerEnv\":\"Os76p3jpmhB2IWYxXigi\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAttachment, ApiChatMember, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\nimport { selectChat, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport buildClassName from '../../../util/buildClassName';\nimport { validateFiles } from '../../../util/files';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean((shouldSendCompressed || shouldForceCompression) && !shouldForceAsFile);\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = (shouldSchedule || shouldSendScheduled) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n      });\n    }\n  }, [\n    isOpen, shouldSchedule, onSendScheduled, onSendSilent, onSend, isSendingCompressed, shouldSendGrouped,\n    updateAttachmentSettings,\n  ]);\n\n  const handleSendSilent = useCallback(() => {\n    sendAttachments(true);\n  }, [sendAttachments]);\n\n  const handleSendClick = useCallback(() => {\n    sendAttachments();\n  }, [sendAttachments]);\n\n  const handleScheduleClick = useCallback(() => {\n    sendAttachments(false, true);\n  }, [sendAttachments]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  }, [handleFileSelect]);\n\n  const handleDelete = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleEnableSpoilers = useCallback(async () => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: true })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleDisableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleToggleSpoiler = useCallback(async (index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <DropdownMenu\n          className=\"attachment-modal-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n          {hasMedia && (\n            <>\n              {\n                !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                    {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                  </MenuItem>\n                ) : (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                    {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                  </MenuItem>\n                ))\n              }\n              {isSendingCompressed && (\n                hasSpoiler ? (\n                  <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                    {lang('Attachment.DisableSpoiler')}\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                    {lang('Attachment.EnableSpoiler')}\n                  </MenuItem>\n                )\n              )}\n            </>\n          )}\n          {isMultiple && (\n            shouldSendGrouped ? (\n              <MenuItem\n                icon=\"grouped-disable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setShouldSendGrouped(false)}\n              >\n                Ungroup All Media\n              </MenuItem>\n            ) : (\n              // eslint-disable-next-line react/jsx-no-bind\n              <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                Group All Media\n              </MenuItem>\n            )\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n            />\n            <MessageInput\n              ref={inputRef}\n              id=\"caption-input-text\"\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {lang('Send')}\n              </Button>\n              {/*{canShowCustomSendMenu && (*/}\n              {/*  <CustomSendMenu*/}\n              {/*    isOpen={isCustomSendMenuOpen}*/}\n              {/*    onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}*/}\n              {/*    onSendSchedule={handleScheduleClick}*/}\n              {/*    onClose={handleContextMenuClose}*/}\n              {/*    onCloseAnimationEnd={handleContextMenuHide}*/}\n              {/*    isSavedMessages={isChatWithSelf}*/}\n              {/*  />*/}\n              {/*)}*/}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chat?.fullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [correctOption, options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 10;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { uncompressEmoji } from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION, STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          accessHash: '0',\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          accessHash: fullSet.accessHash,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chat, lang, premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from './CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    shouldUpdateStickerSetsOrder?: boolean\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  lastSyncTime?: number;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  lastSyncTime,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  isAttachmentModal,\n  canSendPlainText,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  className,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n}) => {\n  const { loadPremiumSetStickers, loadFeaturedEmojiStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useEffect(() => {\n    if (!lastSyncTime) return;\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n    loadFeaturedEmojiStickers();\n  }, [isCurrentUserPremium, lastSyncTime, loadFeaturedEmojiStickers, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || isAttachmentModal) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, shouldUpdateStickerSetsOrder);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            chatId={chatId}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { Signal } from '../../../util/signals';\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const handleSelect = useCallback((botCommand: ApiBotCommand) => {\n    // We need an additional check because tooltip is updated with throttling\n    if (!botCommand.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    handleSendCommand(botCommand);\n    return true;\n  }, [getHtml, handleSendCommand]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  }, [addRecentCustomEmoji, clearCustomEmojiForEmoji, isOpen, onCustomEmojiSelect]);\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu with-menu-transitions\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const handleSelect = useCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  }, [handleCustomEmojiSelect, handleSelectEmoji]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiClick = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium && <i className=\"icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  useMemo, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n} from '../../global/helpers';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  animationLevel?: AnimationLevel;\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  animationLevel,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const handleSearchTextMessagesLocal = useCallback(() => {\n    searchTextMessagesLocal();\n  }, [searchTextMessagesLocal]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} animationLevel={animationLevel} withVideo />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf, selectThreadInfo,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId, isComments);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getActions } from '../../../global';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { selectTabState } from '../../global/selectors';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {Boolean(lastSyncTime) && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qj1MQaLfhumlxACIpkUl\",\"content\":\"ph5g3hCSQ_72FnZ3YkuA\",\"section\":\"bYZBp9H7Ks8tqaBvQm57\",\"top\":\"sV6D57DhbsFwQhRNzw9K\",\"bottom\":\"pUkmozcBdIn4yWGGPoX1\",\"iconWrapper\":\"JT0__kgf23rGv5BWQF2s\",\"icon\":\"gx85t_IsGh2fgS2yDGtk\",\"clickable\":\"TVwtYFuxdwJH5LZ7yvwu\",\"heading\":\"o9l56jP2uXfAul061gXq\",\"icon-picker\":\"ByQF8Qg3NcYnBCvGwoH0\",\"iconPicker\":\"ByQF8Qg3NcYnBCvGwoH0\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport { getTopicColors } from '../../util/forumColors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport CustomEmojiPicker from '../middle/composer/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoom-fade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport Loading from '../ui/Loading';\nimport CustomEmojiPicker from '../middle/composer/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top)}>\n              <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoom-fade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  selectChat, selectTabState, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n  const personalPhoto = user.fullInfo?.personalPhoto;\n  const notPersonalPhoto = user.fullInfo?.profilePhoto || user.fullInfo?.fallbackPhoto;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              {lang('UserInfo.SuggestPhoto', user.firstName)}\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              {lang('UserInfo.SetCustomPhoto', user.firstName)}\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    user={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\nimport Switcher from '../../ui/Switcher';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => hasLinkedChannel || isChatPublic(chat), [chat, hasLinkedChannel]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const handleForumToggle = useCallback(() => {\n    toggleForum({ chatId, isEnabled: !chat.isForum });\n  }, [chat.isForum, chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chat.fullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chat.fullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chat, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  }, [chat.fullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={chat.isForum}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT - (chat.isForum ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={chat.isForum}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPublic } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  hasLinkedChat?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  hasLinkedChat,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights, showNotification } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const lang = useLang();\n  const { isForum } = chat || {};\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  const handleDisabledClick = useCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  }, [lang, showNotification]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, setIsLoading, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n            <div className=\"ListItem no-selection with-checkbox\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                disabled={shouldDisablePermissionForPublicGroup}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={shouldDisablePermissionForPublicGroup}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const hasLinkedChat = Boolean(chat?.fullInfo?.linkedChatId);\n\n    return { chat, currentUserId: global.currentUserId, hasLinkedChat };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chat.fullInfo?.members, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiAvailableReaction, ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    const text = totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n    return text;\n  }, [availableReactions, chat, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { selectChat, selectTabState, selectManagement } from '../../../global/selectors';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ManageUsernames from '../../common/ManageUsernames';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? editableUsername : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '' });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 1;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(linkedChat?.isJoinToSend);\n  const [isJoinRequest, setIsJoinRequest] = useState(linkedChat?.isJoinRequest);\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport useManagePermissions from '../hooks/useManagePermissions';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n           + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendPlain')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPhotos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  disabled={getControlIsDisabled('sendStickers')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  disabled={getControlIsDisabled('sendAudios')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  disabled={getControlIsDisabled('sendDocs')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVoices')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  disabled={getControlIsDisabled('sendRoundvideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  disabled={getControlIsDisabled('embedLinks')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPolls')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                disabled={getControlIsDisabled('inviteUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={getControlIsDisabled('changeInfo')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  disabled={getControlIsDisabled('manageTopics')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const canAddNewAdmins = Boolean(chat.isCreator || chat.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat?.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? chat.fullInfo?.adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight, isChatBasicGroup,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  isBasicGroup?: boolean;\n  areParticipantsHidden?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  isBasicGroup,\n  areParticipantsHidden,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {!isBasicGroup && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    return {\n      isBasicGroup: Boolean(chat && isChatBasicGroup(chat)),\n      areParticipantsHidden: Boolean(chat && chat.fullInfo?.areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.usernames && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId];\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n  animationLevel,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n            animationLevel={animationLevel}\n            withVideo\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={customIcon} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = selectTabState(global).payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n"],"names":["ANIMATION_DURATION","createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","RADIUS","ITERATIONS","MAX_CACHE_SIZE","cache","Map","useMediaProps","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","photosMap","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","memo","withGlobal","global","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","DeleteMessageModal","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForSelf","useCallback","messageIds","messages","map","shouldDeleteForAll","lang","useLang","React","Modal","onEnter","className","title","Button","color","isText","onClick","DeleteProfilePhotoModal","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","MediaViewerActions","canReport","zoomLevelChange","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","setZoomLevelChange","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","handleZoomOut","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","length","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","prop","getBrowserFullscreenElementProp","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","MediaViewerFooter","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","PLAYBACK_RATES","VideoPlayerControls","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlaying","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","seekerRef","isSeekingRef","isSeeking","IS_TOUCH_ENV","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","VideoPlayer","url","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsPlayed","setIsFullscreen","useLayoutEffect","listener","isEnabled","controls","listenerEnter","listenerExit","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreen","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","onLeave","isSupported","setIsSupported","setIsInPictureInPicture","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","handleVideoMove","handleVideoLeave","bounds","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","isActive","animationLevel","onFooterClick","setControlsVisible","isMoving","isGhostAnimation","calculateMediaViewerDimensions","renderPhoto","textParts","content","action","renderMessageText","hasFooter","imageSize","canDrag","Spinner","renderVideoPreview","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","cancelAnimation","cancelZoomAnimation","SwipeDirection","MediaViewerSlides","getMediaId","rest","containerRef","activeSlideRef","transformRef","x","y","scale","lastTransformRef","swipeDirectionRef","isActiveRef","isReleasedRef","activeMediaId","setActiveMediaId","prevZoomLevelChange","usePrevious","hasZoomChanged","useFullscreenStatus","fullscreenProp","checkIfFullscreen","isMouseDown","setIsMouseDown","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","setTransform","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","pageX","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","handleKeyDown","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","clamp","minOffsetY","maxOffsetY","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","_transformRef$current","cleanup","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","dragOffsetX","dragOffsetY","cancelDrag","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","transform","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","getAnimationStyle","MediaViewerContent","isRtl","toFixed","selector","matches","messageId","isAvatar","settings","byKey","sender","selectSender","SenderInfo","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","withVideo","renderText","formatMediaDateTime","date","shouldSkipHistoryAnimations","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","isChatAdmin","selectChatScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","MediaViewer","openMediaViewer","openForwardMenu","animationKey","prevSenderId","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","disableDirectTextInput","enableDirectTextInput","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","handleBeforeDelete","ShowTransition","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","name","fullInfo","fallbackPhoto","ReportModal","subject","TOPIC_ICON_SIZE","ChatOrUserPicker","chatOrUserIds","chatsById","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","topicsResult","searchTitle","toLowerCase","result","values","reduce","acc","topic","getCanPostInChat","keys","Number","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","InputText","onKeyDown","placeholder","InfiniteScroll","items","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","clickArg","TopicIcon","letterClassName","Loading","onLoadMore","PrivateChatInfo","status","userId","GroupChatInfo","chats","byId","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","RecipientPicker","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","isManyMessages","forwardMessages","ForwardRecipientPicker","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","DraftRecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","AttachBotRecipientPicker","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","Dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","handleJoinClick","renderInvite","handleConfirm","contact","pick","getReadableErrorText","Notifications","notifications","dismissNotification","localId","actionText","Notification","onDismiss","SafeLinkModal","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","UrlAuthModal","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","request","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","CalendarModal","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","HistoryCalendar","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","NewContactModal","isByPhoneNumber","_renderingUser$firstN","_renderingUser$lastNa","_renderingUser$phoneN","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","_renderingUser$firstN2","_renderingUser$lastNa2","_renderingUser$phoneN2","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","close","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","WebAppModal","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","extractCurrentThemeParams","bg_color","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","closeCloseModal","isLoaded","markLoaded","markUnloaded","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","frameRef","buttonText","queryId","replyToMessageId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","themeParams","validateHexColor","newColor","color_key","data","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","reloadFrame","sendEvent","sendViewport","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","ignoreEventsRef","lastFrameSizeRef","handleLoad","frame","once","contentWindow","postMessage","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","req_id","requestId","navigator","clipboard","readText","catch","then","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasSettings","isAttachBot","destructive","sandbox","allow","allowFullScreen","confirmIsDestructive","hasCloseButton","BotTrustModal","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","AttachBotInstallModal","confirmAttachBotInstall","cancelAttachBotInstall","setIsWriteAllowed","prevBot","renderingBot","_bot$shouldRequestWri","shortName","DeleteFolderDialog","deleteFolderDialogId","closeDeleteChatFolderModal","deleteChatFolder","handleDeleteFolderMessage","PremiumLimitsCompare","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","PremiumLimitPreview","description","colorStepProgress","lerp","PremiumFeaturePreviewVideo","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","SliderDots","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","PremiumFeaturePreviewStickers","setOffset","setSize","renderedStickers","slice","cycleRestrict","clientWidth","l","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","PremiumFeatureModal","promo","initialSection","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","fastSmoothScrollHorizontal","handleSelectSlide","async","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","videoSections","videos","thumbnail","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","PremiumFeatureItem","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumStatus","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","PremiumMainModal","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","filteredSections","isClosed","PremiumLogo","renderTextWithEntities","statusText","statusEntities","renderFooterText","GiftOption","fullMonthlyAmount","perMonth","floor","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","premiumGifts","GiftPremiumModal","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","gift","selectedGift","botUrl","handlePremiumClick","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","PremiumLimitReachedModal","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","StickerSet","stickerSet","loadAndPlay","idPrefix","favoriteStickers","isSavedMessages","isStatusPicker","isCurrentUserPremium","shouldHideRecentHeader","withDefaultTopicIcon","withDefaultStatusIcon","observeIntersection","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","onContextMenuOpen","onContextMenuClose","onContextMenuClick","clearRecentStickers","clearRecentCustomEmoji","toggleStickerSet","loadStickers","sharedCanvasRef","sharedCanvasHqRef","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","isIntersecting","useIsIntersecting","stickerMarginPx","emojiMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","stickerSetInfo","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","EMOJI_SIZE_PICKER","STICKER_SIZE_PICKER","margin","calculateItemsPerRow","entry","contentRect","useResizeObserver","accessHash","isLocked","some","isFree","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","heightWhenCut","shouldHideHeader","favoriteStickerIdsSet","Set","pill","fluid","grey","isHqEmoji","selectIsAlwaysHighPriorityEmoji","canvasRef","StickerButton","noAnimate","canViewSet","onUnfaveClick","has","onFaveClick","onRemoveRecentClick","StickerSetCover","STICKER_SIZE_PICKER_HEADER","hasThumbnail","isVideos","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","isReady","useBoundsInSharedCanvas","sharedCanvas","sharedCanvasCoords","coords","getFirstLetters","stickerSetIntersections","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","addedCustomEmojiIds","added","setIds","canAnimate","shouldLoopStickers","defaultTopicIconsId","defaultStatusIconsId","CustomEmojiPicker","withDefaultTopicIcons","onCustomEmojiSelect","headerRef","activeSetIndex","setActiveSetIndex","pickTruthy","observe","useIntersectionObserver","rootRef","throttleMs","entries","forEach","startsWith","intersectingWithIndexes","observeIntersectionForCovers","areAddedLoaded","allSets","MEMO_EMPTY_ARRAY","defaultSets","defaultStatusIconsPack","concat","defaultTopicIconsPack","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","shouldRenderContents","useHorizontalScroll","newLeft","offsetWidth","HEADER_BUTTON_WIDTH","selectStickerSet","stickerSetEl","fastSmoothScroll","handleEmojiSelect","emoji","fullClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","faded","noContextMenu","areFeaturedStickersLoaded","StatusPickerMenu","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","AboutAdsModal","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","PinMessageModal","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","UnpinAllMessagesModal","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","DeleteSelectedMessageModal","exitMessageSelectMode","handleDeleteMessageForAll","tabState","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","MessageSelectToolbar","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useCopySelectedMessages","useHotkeys","handleExitMessageSelectMode","captureKeyboardListeners","onBackspace","onDelete","onEsc","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","memberIds","seenByUserIds","SeenByModal","closeSeenByModal","handleCloseSeenByModal","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","availableReactions","ReactorListModal","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","uniqueReactions","reaction","r","isSameReaction","nextOffset","LoadMoreDirection","formatIntegerCompact","reactionsCount","getReactionUniqueKey","ReactionStaticEmoji","flatMap","userReactions","reactor","FullNameTitle","peer","withEmojiStatus","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","EmojiInteractionAnimation","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","IS_ANDROID","messageLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedTranslationLanguage","MessageLanguageModal","requestMessageTranslation","closeMessageLanguageModal","handleSelect","toLanguageCode","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","langCode","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","isSlim","teactExperimentControlled","secondaryIcon","multiline","narrow","highlight","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","LeftSearchResultChat","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","withVideoAvatar","DeleteChatModal","ChatFolderModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","RecentContacts","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","shouldReplaceHistory","handleClearRecentlyFoundChats","lastSyncTime","privateChatUser","ChatMessage","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSelf","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","DateSuggest","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalSearch","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","ChatResults","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","LeftSearchResultTopic","foundTopicIds","searchChatId","ChatMessageResults","createMapStateToProps","isVoice","activeDownloads","isLoading","CURRENT_TYPE","MediaResults","observeIntersectionForMedia","handleSelectMedia","isMediaGrid","isMessageList","itemSelector","Media","LinkResults","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","FileResults","Document","withDate","datetime","smaller","onDateClick","AudioResults","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","TRANSITION_RENDER_COUNT","currentContent","LeftSearch","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSearchDateSelect","tab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","SettingsHeader","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","openDeleteChatFolderModal","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","closeSignOutConfirmation","openDeleteFolderConfirmation","folderId","handleSignOutMessage","forceInitApi","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","SettingsMain","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","ZERO_POINT","Draggable","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","ManageUsernames","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","username","prevUsernameList","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","splice","handleDragEnd","usernameData","_state$orderedUsernam","_state$dragOrderUsern","isDragged","draggedTop","subtitle","handler","ERROR_FIRST_NAME_MISSING","isUsernameAvailable","checkedUsername","editUsernameError","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","bio","currentBio","currentAvatarHash","SettingsEditProfile","loadCurrentUser","updateProfile","firstEditableUsername","currentUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","previousIsUsernameAvailable","renderingIsUsernameAvailable","shouldRenderUsernamesManage","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","TextArea","maxLengthIndicator","FloatingActionButton","SettingsDataStorage","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","SettingsFoldersMain","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","ALL_FOLDER_ID","getFolderDescriptionText","handleCreateFolderFromRecommended","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","LOCAL_TGS_URLS","_state$orderedFolderI","_state$dragOrderIds$i","isBlocked","inactive","isStatic","ShowMoreButton","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","SettingsFoldersEdit","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","isTouched","maxChats","SettingsFoldersChatsPicker","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","isSelected","withChatType","SettingsFoldersChatFilters","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","SettingsFolders","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","SettingsGeneral","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","WallpaperTile","wallpaper","localMediaHash","thumbRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","SettingsGeneralBackground","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","SettingsNotifications","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","qrCodeStylingPromise","QrCode","tips","qrCodeRef","isQrMounted","markQrMounted","unmarkQrMounted","qrCode","useAsync","QrCodeStyling","default","dotsOptions","cornersSquareOptions","imageOptions","qrOptions","errorCorrectionLevel","update","append","onDownload","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","canDisplayChatInTitle","privacy","blocked","passcode","hasPasscode","blockedCount","totalCount","webAuthCount","activeWebSessions","canDisplayAutoarchiveSetting","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","SettingsPrivacy","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","updatePageTitle","showModal","setShowModal","mnemonic","setMnemonic","mnemonicEncrypt","setMnemonicEncrypt","onShowMnemonic","getPasswordFromEvent","account","Account","verifyPwd","entropy","getEntropy","words","Mnemonic","getWords","aesEncrypt","Buffer","hashSha256","PbQrCode","QrCodeType","pack","getPbData","language","languages","canTranslate","doNotTranslate","SettingsLanguage","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","setLanguage","currentLangCode","shortLangCode","substr","nativeName","buildOptions","handleShouldTranslateChange","newValue","doNotTranslateText","allDoNotTranslateLanguages","handleDoNotSelectOpen","loadingOption","getPrivacyKey","screen","SelectAvatar","selectedFile","setSelectedFile","handleAvatarCrop","croppedImg","handleModalClose","accept","CropModal","file","SettingsPrivacyPublicProfilePhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","leftElement","privacySettings","SettingsPrivacyVisibility","visibility","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","membersCount","blockCount","handleVisibilityChange","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","SettingsActiveSession","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","SettingsActiveSessions","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","SettingsActiveWebsite","terminateWebAuthorization","browser","SettingsActiveWebsites","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","blockedIds","userSearch","BlockUserModal","setUserSearchQuery","blockContact","query","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","SettingsPrivacyBlockedUsers","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","isPrivate","userOrChat","userMainUsername","renderContact","SettingsTwoFaEnabled","AnimatedIconWithPreview","previewUrl","lockPreviewUrl","SettingsPasswordForm","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","SettingsTwoFaStart","onStart","animatedEmoji","selectAnimatedEmoji","SettingsTwoFaSkippableForm","shouldConfirm","focusDelayTimeoutMs","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","SettingsTwoFaCongratulations","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","SettingsTwoFaEmailCode","SettingsTwoFa","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaPassword","getCurrentPrivacySettings","SettingsPrivacyVisibilityExceptionList","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","config","selectedReaction","defaultReaction","SettingsQuickReaction","setDefaultReaction","availableReaction","isInactive","emoticon","SettingsPasscodeStart","STICKER_SIZE_PASSCODE","SettingsPasscodeEnabled","SettingsPasscodeCongratulations","fullReset","SettingsPasscode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","SettingsPasscodeForm","StickerSetCard","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","DEFAULT_REACTION_SIZE","addedSetIds","customEmojiSetIds","SettingsStickers","shouldSuggestStickers","openStickerSet","stickerSettingsRef","handleStickerSetClick","handleSuggestStickersChange","handleShouldLoopStickersChange","stickerSets","SettingsCustomEmoji","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","SettingsDoNotTranslate","displayedOptions","setDisplayedOptions","allSelected","useEffectWithPrevDeps","prevIsActive","unselected","partition","selectedFiltered","newDoNotTranslate","v","filteredDisplayedOptions","SettingsExperimental","nonInteractive","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","Settings","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","ContactList","openNewContactDialog","filteredIds","sortUserIds","isSearching","NewChatStep1","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","NewChatStep2","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","NewChat","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ArchivedChats","isForumPanelOpen","archiveSettings","onTopicSearch","onSettingsScreenSelect","onLeftColumnContentChange","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","onTransitionEnd","ChatList","folderType","ForumPanel","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","ReactionSelectorReaction","previewIndex","chosen","onToggleReaction","selectAnimation","activate","deactivate","isAnimationLoaded","markAnimationLoaded","shouldRenderStatic","shouldRenderAnimated","onMouseEnter","ReactionSelector","enabledReactions","currentReactions","maxUniqueReactions","itemsScrollRef","handleWheel","cancelable","reactionsToRender","canSendReaction","userReactionIndexes","chosenReactions","chosenOrder","findIndex","onWheelCapture","onTouchMove","MessageContextMenu","anchor","canSendNow","canReschedule","canReply","canEdit","noReplies","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowOriginal","canSelectLanguage","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentUsers","hasCustomEmoji","onReply","onOpenThread","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","onTranslate","onShowOriginal","onSelectLanguage","openCustomEmojiSets","menuRef","scrollableRef","withReactions","isSponsoredMessage","markIsReady","unmarkIsReady","handleAfterCopy","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","detectedLanguage","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isOwn","isOwnMessage","isScheduled","isLocal","isMessageLocal","isChatGroup","isAction","isActionMessage","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","every","translationRequestLanguage","hasTranslation","selectMessageTranslations","isTranslationEnabled","canTranslateLanguage","IS_TRANSLATION_SUPPORTED","emojiOnlyCount","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","ContextMenuContainer","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","showOriginalMessage","openMessageLanguageModal","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","recentReactions","uniqueReactors","msg","handleReport","closeMenu","closePinModal","handleReply","handleOpenThread","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","getChatMessageLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","scheduledMaxDate","SponsoredMessageContextMenuContainer","handleAboutAdsOpen","handleSponsoredHide","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isComments","originChannelId","canSendStickers","shouldSchedule","selectShouldSchedule","StickerSetModal","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","shouldUpdateStickerSetsOrder","handleButtonClick","suffix","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","CustomEmojiSetsModal","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","selectChatBot","canGiftPremium","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","HeaderMenuContainer","withExtraActions","withForumActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","isViewGroupInfoShown","usePrevDuringAnimation","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleCreateTopicClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleSelectMessages","handleOpenAsMessages","botButtons","cmd","MenuSeparator","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","MobileSearchFooter","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","SearchInput","getDayStartAt","THRESHOLD","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","findInViewport","selectorOrElements","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","VIEWPORT_MARGIN","SCROLL_MARGIN","setTooltipItemVisible","first","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","MentionTooltip","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","BLUR_CANVAS_SIZE","AttachmentModalItem","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","File","filename","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","members","keywords","customEmojiForEmoji","forEmoji","captionLimit","AttachmentModal","attachments","getHtml","canShowCustomSendMenu","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","shouldSendScheduled","handleSendClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","useDerivedState","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","isMultiple","isBottomDividerShown","renderHeader","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","uniqueId","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","editableInputId","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","PollModal","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","EmojiButton","native","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EmojiCategory","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","EmojiPicker","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","shouldRenderContent","allCategories","themeCategories","unshift","exec","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","favorite","premiumSet","recentStickers","premiumStickers","StickerPicker","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","PremiumIcon","withGradient","big","GifButton","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","preload","gifs","saved","GifPicker","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","CustomEmoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","SymbolMenuFooter","onSwitchTab","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","SymbolMenu","loadPremiumSetStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","recentCustomEmojisRef","documentId","handleCustomEmojiSelect","renderContent","mobileClassName","withPortal","onMouseLeave","BotCommand","withAvatar","botCommand","BotCommandTooltip","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","BotCommandMenu","StickerTooltip","prevStickers","displayedStickers","customEmoji","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","CustomSendMenu","isOpenToBottom","onSendSchedule","CustomEmojiButton","withSharedAnimation","shouldPreloadPreview","observeIntersectionForPlaying","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","setItemVisible","BaseResult","thumbUrl","thumbnailDataUrl","decoding","MediaResult","isForGallery","inlineResult","webThumbnail","ArticleResult","GifResult","_gif","StickerResult","STICKER_SIZE_INLINE_BOT_RESULT","noShowPremium","InlineBotTooltip","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","renderedIsGallery","handleSendPm","param","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","SendAsMenu","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","rightElement","noFake","messagesById","RightSearch","handleSearchTextMessagesLocal","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","renderSearchResult","teactOrderKey","LastMessageMeta","shouldPlay","selectShouldLoopStickers","StickerSetResult","areStickersLoaded","_set$stickers$filter","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","StickerSearch","loadFeaturedStickers","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","GifSearch","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","StatisticsOverview","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","renderOverviewItemValue","change","isChangeNegative","StatisticsRecentMessage","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","Statistics","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","StatisticsPublicForward","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","answer","voters","offsets","pollResults","PollAnswerResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","total","PollResults","getMessagePoll","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","CreateTopic","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","prev","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","EditTopic","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","management","ManageUser","deleteContact","closeManagement","uploadContactProfilePhoto","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","isSuggestRef","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","handleSelectAvatar","isSuggest","canSetPersonalPhoto","personalPhoto","notPersonalPhoto","withFullInfo","noPersonalPhoto","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","invites","canEditForum","canChangeInfo","canBanUsers","canInvite","exportedInvites","isChannelsPremiumLimitReached","ManageGroup","_chat$membersCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","imageHash","isPublicGroup","isChatPublic","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","checkbox","chatReactionsDescription","enabledLength","allowed","totalLength","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembersById","handleDeleteGroup","isForForum","noReplaceNewlines","joinRequests","FLOATING_BUTTON_ANIMATION_TIMEOUT_MS","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","sendMedia","embedLinks","sendPlain","sendMessages","ManageGroupPermissions","onChatMemberSelect","updateChatDefaultBannedRights","shouldDisablePermissionForPublicGroup","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","isMediaDropdownOpen","setIsMediaDropdownOpen","handleOpenMediaDropdown","handleDisabledClick","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","blocking","rightIcon","onClickLabel","sendPhotos","sendVideos","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","RemoveGroupUserModal","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","ManageChatRemovedUsers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","ManageChannel","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","isChannelPublic","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","UsernameInput","asLink","checkUsername","checkPublicLink","setUsername","langPrefix","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","selectManagement","maxPublicLinks","ManageChatPrivacyType","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","forDiscussionIds","linkedChat","ManageDiscussion","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isPromotedByCurrentUser","isFormFullyDisabled","ManageGroupUserPermissions","selectedChatMemberId","selectedChatMember","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","getControlIsDisabled","ManageChatAdministrators","handleRecentActionsClick","canAddNewAdmins","adminRights","addAdmins","adminMembers","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","ManageGroupRecentActions","defaultRights","ManageGroupAdminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","manageCall","anonymous","areParticipantsHidden","ManageGroupMembers","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","handleToggleParticipantsHidden","noScrollRestore","memberId","DeleteMemberModal","ManageGroupUserPermissionsCreate","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","ManageInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","ManageInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","ManageReactions","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","inviteInfo","importers","requesters","ManageInviteInfo","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","renderImporters","importer","renderRequesters","requester","JoinRequest","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","ManageJoinRequests","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","Management","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","DEFAULT_DURATION","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","ShippingInfo","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","Select","Shipping","shippingOptions","handleShippingSelect","Checkout","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","Skeleton","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","ExpiryInput","endsWith","formatCardExpiry","CardInput","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","PaymentInfo","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","ConfirmPayment","noRedirect","SavedPaymentCredentials","onNewCardClick","passwordHint","PasswordConfirm","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","PaymentModal","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","ReceiptModal","fullAddress"],"sourceRoot":""}